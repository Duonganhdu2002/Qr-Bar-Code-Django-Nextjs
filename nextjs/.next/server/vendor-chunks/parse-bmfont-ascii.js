"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/parse-bmfont-ascii";
exports.ids = ["vendor-chunks/parse-bmfont-ascii"];
exports.modules = {

/***/ "(ssr)/./node_modules/parse-bmfont-ascii/index.js":
/*!**************************************************!*\
  !*** ./node_modules/parse-bmfont-ascii/index.js ***!
  \**************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function parseBMFontAscii(data) {\n    if (!data) throw new Error(\"no data provided\");\n    data = data.toString().trim();\n    var output = {\n        pages: [],\n        chars: [],\n        kernings: []\n    };\n    var lines = data.split(/\\r\\n?|\\n/g);\n    if (lines.length === 0) throw new Error(\"no data in BMFont file\");\n    for(var i = 0; i < lines.length; i++){\n        var lineData = splitLine(lines[i], i);\n        if (!lineData) continue;\n        if (lineData.key === \"page\") {\n            if (typeof lineData.data.id !== \"number\") throw new Error(\"malformed file at line \" + i + \" -- needs page id=N\");\n            if (typeof lineData.data.file !== \"string\") throw new Error(\"malformed file at line \" + i + ' -- needs page file=\"path\"');\n            output.pages[lineData.data.id] = lineData.data.file;\n        } else if (lineData.key === \"chars\" || lineData.key === \"kernings\") {\n        //... do nothing for these two ...\n        } else if (lineData.key === \"char\") {\n            output.chars.push(lineData.data);\n        } else if (lineData.key === \"kerning\") {\n            output.kernings.push(lineData.data);\n        } else {\n            output[lineData.key] = lineData.data;\n        }\n    }\n    return output;\n};\nfunction splitLine(line, idx) {\n    line = line.replace(/\\t+/g, \" \").trim();\n    if (!line) return null;\n    var space = line.indexOf(\" \");\n    if (space === -1) throw new Error(\"no named row at line \" + idx);\n    var key = line.substring(0, space);\n    line = line.substring(space + 1);\n    //clear \"letter\" field as it is non-standard and\n    //requires additional complexity to parse \" / = symbols\n    line = line.replace(/letter=[\\'\\\"]\\S+[\\'\\\"]/gi, \"\");\n    line = line.split(\"=\");\n    line = line.map(function(str) {\n        return str.trim().match(/(\".*?\"|[^\"\\s]+)+(?=\\s*|\\s*$)/g);\n    });\n    var data = [];\n    for(var i = 0; i < line.length; i++){\n        var dt = line[i];\n        if (i === 0) {\n            data.push({\n                key: dt[0],\n                data: \"\"\n            });\n        } else if (i === line.length - 1) {\n            data[data.length - 1].data = parseData(dt[0]);\n        } else {\n            data[data.length - 1].data = parseData(dt[0]);\n            data.push({\n                key: dt[1],\n                data: \"\"\n            });\n        }\n    }\n    var out = {\n        key: key,\n        data: {}\n    };\n    data.forEach(function(v) {\n        out.data[v.key] = v.data;\n    });\n    return out;\n}\nfunction parseData(data) {\n    if (!data || data.length === 0) return \"\";\n    if (data.indexOf('\"') === 0 || data.indexOf(\"'\") === 0) return data.substring(1, data.length - 1);\n    if (data.indexOf(\",\") !== -1) return parseIntList(data);\n    return parseInt(data, 10);\n}\nfunction parseIntList(data) {\n    return data.split(\",\").map(function(val) {\n        return parseInt(val, 10);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcGFyc2UtYm1mb250LWFzY2lpL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLGlCQUFpQkMsSUFBSTtJQUM3QyxJQUFJLENBQUNBLE1BQ0gsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCRCxPQUFPQSxLQUFLRSxRQUFRLEdBQUdDLElBQUk7SUFFM0IsSUFBSUMsU0FBUztRQUNYQyxPQUFPLEVBQUU7UUFDVEMsT0FBTyxFQUFFO1FBQ1RDLFVBQVUsRUFBRTtJQUNkO0lBRUEsSUFBSUMsUUFBUVIsS0FBS1MsS0FBSyxDQUFDO0lBRXZCLElBQUlELE1BQU1FLE1BQU0sS0FBSyxHQUNuQixNQUFNLElBQUlULE1BQU07SUFFbEIsSUFBSyxJQUFJVSxJQUFJLEdBQUdBLElBQUlILE1BQU1FLE1BQU0sRUFBRUMsSUFBSztRQUNyQyxJQUFJQyxXQUFXQyxVQUFVTCxLQUFLLENBQUNHLEVBQUUsRUFBRUE7UUFDbkMsSUFBSSxDQUFDQyxVQUNIO1FBRUYsSUFBSUEsU0FBU0UsR0FBRyxLQUFLLFFBQVE7WUFDM0IsSUFBSSxPQUFPRixTQUFTWixJQUFJLENBQUNlLEVBQUUsS0FBSyxVQUM5QixNQUFNLElBQUlkLE1BQU0sNEJBQTRCVSxJQUFJO1lBQ2xELElBQUksT0FBT0MsU0FBU1osSUFBSSxDQUFDZ0IsSUFBSSxLQUFLLFVBQ2hDLE1BQU0sSUFBSWYsTUFBTSw0QkFBNEJVLElBQUk7WUFDbERQLE9BQU9DLEtBQUssQ0FBQ08sU0FBU1osSUFBSSxDQUFDZSxFQUFFLENBQUMsR0FBR0gsU0FBU1osSUFBSSxDQUFDZ0IsSUFBSTtRQUNyRCxPQUFPLElBQUlKLFNBQVNFLEdBQUcsS0FBSyxXQUFXRixTQUFTRSxHQUFHLEtBQUssWUFBWTtRQUNsRSxrQ0FBa0M7UUFDcEMsT0FBTyxJQUFJRixTQUFTRSxHQUFHLEtBQUssUUFBUTtZQUNsQ1YsT0FBT0UsS0FBSyxDQUFDVyxJQUFJLENBQUNMLFNBQVNaLElBQUk7UUFDakMsT0FBTyxJQUFJWSxTQUFTRSxHQUFHLEtBQUssV0FBVztZQUNyQ1YsT0FBT0csUUFBUSxDQUFDVSxJQUFJLENBQUNMLFNBQVNaLElBQUk7UUFDcEMsT0FBTztZQUNMSSxNQUFNLENBQUNRLFNBQVNFLEdBQUcsQ0FBQyxHQUFHRixTQUFTWixJQUFJO1FBQ3RDO0lBQ0Y7SUFFQSxPQUFPSTtBQUNUO0FBRUEsU0FBU1MsVUFBVUssSUFBSSxFQUFFQyxHQUFHO0lBQzFCRCxPQUFPQSxLQUFLRSxPQUFPLENBQUMsUUFBUSxLQUFLakIsSUFBSTtJQUNyQyxJQUFJLENBQUNlLE1BQ0gsT0FBTztJQUVULElBQUlHLFFBQVFILEtBQUtJLE9BQU8sQ0FBQztJQUN6QixJQUFJRCxVQUFVLENBQUMsR0FDYixNQUFNLElBQUlwQixNQUFNLDBCQUEwQmtCO0lBRTVDLElBQUlMLE1BQU1JLEtBQUtLLFNBQVMsQ0FBQyxHQUFHRjtJQUU1QkgsT0FBT0EsS0FBS0ssU0FBUyxDQUFDRixRQUFRO0lBQzlCLGdEQUFnRDtJQUNoRCx1REFBdUQ7SUFDdkRILE9BQU9BLEtBQUtFLE9BQU8sQ0FBQyw0QkFBNEI7SUFDaERGLE9BQU9BLEtBQUtULEtBQUssQ0FBQztJQUNsQlMsT0FBT0EsS0FBS00sR0FBRyxDQUFDLFNBQVNDLEdBQUc7UUFDMUIsT0FBT0EsSUFBSXRCLElBQUksR0FBR3VCLEtBQUssQ0FBRTtJQUMzQjtJQUVBLElBQUkxQixPQUFPLEVBQUU7SUFDYixJQUFLLElBQUlXLElBQUksR0FBR0EsSUFBSU8sS0FBS1IsTUFBTSxFQUFFQyxJQUFLO1FBQ3BDLElBQUlnQixLQUFLVCxJQUFJLENBQUNQLEVBQUU7UUFDaEIsSUFBSUEsTUFBTSxHQUFHO1lBQ1hYLEtBQUtpQixJQUFJLENBQUM7Z0JBQ1JILEtBQUthLEVBQUUsQ0FBQyxFQUFFO2dCQUNWM0IsTUFBTTtZQUNSO1FBQ0YsT0FBTyxJQUFJVyxNQUFNTyxLQUFLUixNQUFNLEdBQUcsR0FBRztZQUNoQ1YsSUFBSSxDQUFDQSxLQUFLVSxNQUFNLEdBQUcsRUFBRSxDQUFDVixJQUFJLEdBQUc0QixVQUFVRCxFQUFFLENBQUMsRUFBRTtRQUM5QyxPQUFPO1lBQ0wzQixJQUFJLENBQUNBLEtBQUtVLE1BQU0sR0FBRyxFQUFFLENBQUNWLElBQUksR0FBRzRCLFVBQVVELEVBQUUsQ0FBQyxFQUFFO1lBQzVDM0IsS0FBS2lCLElBQUksQ0FBQztnQkFDUkgsS0FBS2EsRUFBRSxDQUFDLEVBQUU7Z0JBQ1YzQixNQUFNO1lBQ1I7UUFDRjtJQUNGO0lBRUEsSUFBSTZCLE1BQU07UUFDUmYsS0FBS0E7UUFDTGQsTUFBTSxDQUFDO0lBQ1Q7SUFFQUEsS0FBSzhCLE9BQU8sQ0FBQyxTQUFTQyxDQUFDO1FBQ3JCRixJQUFJN0IsSUFBSSxDQUFDK0IsRUFBRWpCLEdBQUcsQ0FBQyxHQUFHaUIsRUFBRS9CLElBQUk7SUFDMUI7SUFFQSxPQUFPNkI7QUFDVDtBQUVBLFNBQVNELFVBQVU1QixJQUFJO0lBQ3JCLElBQUksQ0FBQ0EsUUFBUUEsS0FBS1UsTUFBTSxLQUFLLEdBQzNCLE9BQU87SUFFVCxJQUFJVixLQUFLc0IsT0FBTyxDQUFDLFNBQVMsS0FBS3RCLEtBQUtzQixPQUFPLENBQUMsU0FBUyxHQUNuRCxPQUFPdEIsS0FBS3VCLFNBQVMsQ0FBQyxHQUFHdkIsS0FBS1UsTUFBTSxHQUFHO0lBQ3pDLElBQUlWLEtBQUtzQixPQUFPLENBQUMsU0FBUyxDQUFDLEdBQ3pCLE9BQU9VLGFBQWFoQztJQUN0QixPQUFPaUMsU0FBU2pDLE1BQU07QUFDeEI7QUFFQSxTQUFTZ0MsYUFBYWhDLElBQUk7SUFDeEIsT0FBT0EsS0FBS1MsS0FBSyxDQUFDLEtBQUtlLEdBQUcsQ0FBQyxTQUFTVSxHQUFHO1FBQ3JDLE9BQU9ELFNBQVNDLEtBQUs7SUFDdkI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3FyLWNvZGUvLi9ub2RlX21vZHVsZXMvcGFyc2UtYm1mb250LWFzY2lpL2luZGV4LmpzPzhhZjciXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUJNRm9udEFzY2lpKGRhdGEpIHtcbiAgaWYgKCFkYXRhKVxuICAgIHRocm93IG5ldyBFcnJvcignbm8gZGF0YSBwcm92aWRlZCcpXG4gIGRhdGEgPSBkYXRhLnRvU3RyaW5nKCkudHJpbSgpXG5cbiAgdmFyIG91dHB1dCA9IHtcbiAgICBwYWdlczogW10sXG4gICAgY2hhcnM6IFtdLFxuICAgIGtlcm5pbmdzOiBbXVxuICB9XG5cbiAgdmFyIGxpbmVzID0gZGF0YS5zcGxpdCgvXFxyXFxuP3xcXG4vZylcblxuICBpZiAobGluZXMubGVuZ3RoID09PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcignbm8gZGF0YSBpbiBCTUZvbnQgZmlsZScpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBsaW5lRGF0YSA9IHNwbGl0TGluZShsaW5lc1tpXSwgaSlcbiAgICBpZiAoIWxpbmVEYXRhKSAvL3NraXAgZW1wdHkgbGluZXNcbiAgICAgIGNvbnRpbnVlXG5cbiAgICBpZiAobGluZURhdGEua2V5ID09PSAncGFnZScpIHtcbiAgICAgIGlmICh0eXBlb2YgbGluZURhdGEuZGF0YS5pZCAhPT0gJ251bWJlcicpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbWFsZm9ybWVkIGZpbGUgYXQgbGluZSAnICsgaSArICcgLS0gbmVlZHMgcGFnZSBpZD1OJylcbiAgICAgIGlmICh0eXBlb2YgbGluZURhdGEuZGF0YS5maWxlICE9PSAnc3RyaW5nJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYWxmb3JtZWQgZmlsZSBhdCBsaW5lICcgKyBpICsgJyAtLSBuZWVkcyBwYWdlIGZpbGU9XCJwYXRoXCInKVxuICAgICAgb3V0cHV0LnBhZ2VzW2xpbmVEYXRhLmRhdGEuaWRdID0gbGluZURhdGEuZGF0YS5maWxlXG4gICAgfSBlbHNlIGlmIChsaW5lRGF0YS5rZXkgPT09ICdjaGFycycgfHwgbGluZURhdGEua2V5ID09PSAna2VybmluZ3MnKSB7XG4gICAgICAvLy4uLiBkbyBub3RoaW5nIGZvciB0aGVzZSB0d28gLi4uXG4gICAgfSBlbHNlIGlmIChsaW5lRGF0YS5rZXkgPT09ICdjaGFyJykge1xuICAgICAgb3V0cHV0LmNoYXJzLnB1c2gobGluZURhdGEuZGF0YSlcbiAgICB9IGVsc2UgaWYgKGxpbmVEYXRhLmtleSA9PT0gJ2tlcm5pbmcnKSB7XG4gICAgICBvdXRwdXQua2VybmluZ3MucHVzaChsaW5lRGF0YS5kYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXRbbGluZURhdGEua2V5XSA9IGxpbmVEYXRhLmRhdGFcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0cHV0XG59XG5cbmZ1bmN0aW9uIHNwbGl0TGluZShsaW5lLCBpZHgpIHtcbiAgbGluZSA9IGxpbmUucmVwbGFjZSgvXFx0Ky9nLCAnICcpLnRyaW0oKVxuICBpZiAoIWxpbmUpXG4gICAgcmV0dXJuIG51bGxcblxuICB2YXIgc3BhY2UgPSBsaW5lLmluZGV4T2YoJyAnKVxuICBpZiAoc3BhY2UgPT09IC0xKSBcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJubyBuYW1lZCByb3cgYXQgbGluZSBcIiArIGlkeClcblxuICB2YXIga2V5ID0gbGluZS5zdWJzdHJpbmcoMCwgc3BhY2UpXG5cbiAgbGluZSA9IGxpbmUuc3Vic3RyaW5nKHNwYWNlICsgMSlcbiAgLy9jbGVhciBcImxldHRlclwiIGZpZWxkIGFzIGl0IGlzIG5vbi1zdGFuZGFyZCBhbmRcbiAgLy9yZXF1aXJlcyBhZGRpdGlvbmFsIGNvbXBsZXhpdHkgdG8gcGFyc2UgXCIgLyA9IHN5bWJvbHNcbiAgbGluZSA9IGxpbmUucmVwbGFjZSgvbGV0dGVyPVtcXCdcXFwiXVxcUytbXFwnXFxcIl0vZ2ksICcnKSAgXG4gIGxpbmUgPSBsaW5lLnNwbGl0KFwiPVwiKVxuICBsaW5lID0gbGluZS5tYXAoZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIHN0ci50cmltKCkubWF0Y2goKC8oXCIuKj9cInxbXlwiXFxzXSspKyg/PVxccyp8XFxzKiQpL2cpKVxuICB9KVxuXG4gIHZhciBkYXRhID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGR0ID0gbGluZVtpXVxuICAgIGlmIChpID09PSAwKSB7XG4gICAgICBkYXRhLnB1c2goe1xuICAgICAgICBrZXk6IGR0WzBdLFxuICAgICAgICBkYXRhOiBcIlwiXG4gICAgICB9KVxuICAgIH0gZWxzZSBpZiAoaSA9PT0gbGluZS5sZW5ndGggLSAxKSB7XG4gICAgICBkYXRhW2RhdGEubGVuZ3RoIC0gMV0uZGF0YSA9IHBhcnNlRGF0YShkdFswXSlcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YVtkYXRhLmxlbmd0aCAtIDFdLmRhdGEgPSBwYXJzZURhdGEoZHRbMF0pXG4gICAgICBkYXRhLnB1c2goe1xuICAgICAgICBrZXk6IGR0WzFdLFxuICAgICAgICBkYXRhOiBcIlwiXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHZhciBvdXQgPSB7XG4gICAga2V5OiBrZXksXG4gICAgZGF0YToge31cbiAgfVxuXG4gIGRhdGEuZm9yRWFjaChmdW5jdGlvbih2KSB7XG4gICAgb3V0LmRhdGFbdi5rZXldID0gdi5kYXRhO1xuICB9KVxuXG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXRhKGRhdGEpIHtcbiAgaWYgKCFkYXRhIHx8IGRhdGEubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiBcIlwiXG5cbiAgaWYgKGRhdGEuaW5kZXhPZignXCInKSA9PT0gMCB8fCBkYXRhLmluZGV4T2YoXCInXCIpID09PSAwKVxuICAgIHJldHVybiBkYXRhLnN1YnN0cmluZygxLCBkYXRhLmxlbmd0aCAtIDEpXG4gIGlmIChkYXRhLmluZGV4T2YoJywnKSAhPT0gLTEpXG4gICAgcmV0dXJuIHBhcnNlSW50TGlzdChkYXRhKVxuICByZXR1cm4gcGFyc2VJbnQoZGF0YSwgMTApXG59XG5cbmZ1bmN0aW9uIHBhcnNlSW50TGlzdChkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uKHZhbCkge1xuICAgIHJldHVybiBwYXJzZUludCh2YWwsIDEwKVxuICB9KVxufSJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicGFyc2VCTUZvbnRBc2NpaSIsImRhdGEiLCJFcnJvciIsInRvU3RyaW5nIiwidHJpbSIsIm91dHB1dCIsInBhZ2VzIiwiY2hhcnMiLCJrZXJuaW5ncyIsImxpbmVzIiwic3BsaXQiLCJsZW5ndGgiLCJpIiwibGluZURhdGEiLCJzcGxpdExpbmUiLCJrZXkiLCJpZCIsImZpbGUiLCJwdXNoIiwibGluZSIsImlkeCIsInJlcGxhY2UiLCJzcGFjZSIsImluZGV4T2YiLCJzdWJzdHJpbmciLCJtYXAiLCJzdHIiLCJtYXRjaCIsImR0IiwicGFyc2VEYXRhIiwib3V0IiwiZm9yRWFjaCIsInYiLCJwYXJzZUludExpc3QiLCJwYXJzZUludCIsInZhbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/parse-bmfont-ascii/index.js\n");

/***/ })

};
;