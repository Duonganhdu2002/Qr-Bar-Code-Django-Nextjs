"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ndarray";
exports.ids = ["vendor-chunks/ndarray"];
exports.modules = {

/***/ "(ssr)/./node_modules/ndarray/ndarray.js":
/*!*****************************************!*\
  !*** ./node_modules/ndarray/ndarray.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar iota = __webpack_require__(/*! iota-array */ \"(ssr)/./node_modules/iota-array/iota.js\");\nvar isBuffer = __webpack_require__(/*! is-buffer */ \"(ssr)/./node_modules/is-buffer/index.js\");\nvar hasTypedArrays = typeof Float64Array !== \"undefined\";\nfunction compare1st(a, b) {\n    return a[0] - b[0];\n}\nfunction order() {\n    var stride = this.stride;\n    var terms = new Array(stride.length);\n    var i;\n    for(i = 0; i < terms.length; ++i){\n        terms[i] = [\n            Math.abs(stride[i]),\n            i\n        ];\n    }\n    terms.sort(compare1st);\n    var result = new Array(terms.length);\n    for(i = 0; i < result.length; ++i){\n        result[i] = terms[i][1];\n    }\n    return result;\n}\nfunction compileConstructor(dtype, dimension) {\n    var className = [\n        \"View\",\n        dimension,\n        \"d\",\n        dtype\n    ].join(\"\");\n    if (dimension < 0) {\n        className = \"View_Nil\" + dtype;\n    }\n    var useGetters = dtype === \"generic\";\n    if (dimension === -1) {\n        //Special case for trivial arrays\n        var code = \"function \" + className + \"(a){this.data=a;};var proto=\" + className + \".prototype;proto.dtype='\" + dtype + \"';proto.index=function(){return -1};proto.size=0;proto.dimension=-1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function(){return new \" + className + \"(this.data);};proto.get=proto.set=function(){};proto.pick=function(){return null};return function construct_\" + className + \"(a){return new \" + className + \"(a);}\";\n        var procedure = new Function(code);\n        return procedure();\n    } else if (dimension === 0) {\n        //Special case for 0d arrays\n        var code = \"function \" + className + \"(a,d) {this.data = a;this.offset = d};var proto=\" + className + \".prototype;proto.dtype='\" + dtype + \"';proto.index=function(){return this.offset};proto.dimension=0;proto.size=1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function \" + className + \"_copy() {return new \" + className + \"(this.data,this.offset)};proto.pick=function \" + className + \"_pick(){return TrivialArray(this.data);};proto.valueOf=proto.get=function \" + className + \"_get(){return \" + (useGetters ? \"this.data.get(this.offset)\" : \"this.data[this.offset]\") + \"};proto.set=function \" + className + \"_set(v){return \" + (useGetters ? \"this.data.set(this.offset,v)\" : \"this.data[this.offset]=v\") + \"};return function construct_\" + className + \"(a,b,c,d){return new \" + className + \"(a,d)}\";\n        var procedure = new Function(\"TrivialArray\", code);\n        return procedure(CACHED_CONSTRUCTORS[dtype][0]);\n    }\n    var code = [\n        \"'use strict'\"\n    ];\n    //Create constructor for view\n    var indices = iota(dimension);\n    var args = indices.map(function(i) {\n        return \"i\" + i;\n    });\n    var index_str = \"this.offset+\" + indices.map(function(i) {\n        return \"this.stride[\" + i + \"]*i\" + i;\n    }).join(\"+\");\n    var shapeArg = indices.map(function(i) {\n        return \"b\" + i;\n    }).join(\",\");\n    var strideArg = indices.map(function(i) {\n        return \"c\" + i;\n    }).join(\",\");\n    code.push(\"function \" + className + \"(a,\" + shapeArg + \",\" + strideArg + \",d){this.data=a\", \"this.shape=[\" + shapeArg + \"]\", \"this.stride=[\" + strideArg + \"]\", \"this.offset=d|0}\", \"var proto=\" + className + \".prototype\", \"proto.dtype='\" + dtype + \"'\", \"proto.dimension=\" + dimension);\n    //view.size:\n    code.push(\"Object.defineProperty(proto,'size',{get:function \" + className + \"_size(){return \" + indices.map(function(i) {\n        return \"this.shape[\" + i + \"]\";\n    }).join(\"*\"), \"}})\");\n    //view.order:\n    if (dimension === 1) {\n        code.push(\"proto.order=[0]\");\n    } else {\n        code.push(\"Object.defineProperty(proto,'order',{get:\");\n        if (dimension < 4) {\n            code.push(\"function \" + className + \"_order(){\");\n            if (dimension === 2) {\n                code.push(\"return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})\");\n            } else if (dimension === 3) {\n                code.push(\"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);if(s0>s1){if(s1>s2){return [2,1,0];}else if(s0>s2){return [1,2,0];}else{return [1,0,2];}}else if(s0>s2){return [2,0,1];}else if(s2>s1){return [0,1,2];}else{return [0,2,1];}}})\");\n            }\n        } else {\n            code.push(\"ORDER})\");\n        }\n    }\n    //view.set(i0, ..., v):\n    code.push(\"proto.set=function \" + className + \"_set(\" + args.join(\",\") + \",v){\");\n    if (useGetters) {\n        code.push(\"return this.data.set(\" + index_str + \",v)}\");\n    } else {\n        code.push(\"return this.data[\" + index_str + \"]=v}\");\n    }\n    //view.get(i0, ...):\n    code.push(\"proto.get=function \" + className + \"_get(\" + args.join(\",\") + \"){\");\n    if (useGetters) {\n        code.push(\"return this.data.get(\" + index_str + \")}\");\n    } else {\n        code.push(\"return this.data[\" + index_str + \"]}\");\n    }\n    //view.index:\n    code.push(\"proto.index=function \" + className + \"_index(\", args.join(), \"){return \" + index_str + \"}\");\n    //view.hi():\n    code.push(\"proto.hi=function \" + className + \"_hi(\" + args.join(\",\") + \"){return new \" + className + \"(this.data,\" + indices.map(function(i) {\n        return [\n            \"(typeof i\",\n            i,\n            \"!=='number'||i\",\n            i,\n            \"<0)?this.shape[\",\n            i,\n            \"]:i\",\n            i,\n            \"|0\"\n        ].join(\"\");\n    }).join(\",\") + \",\" + indices.map(function(i) {\n        return \"this.stride[\" + i + \"]\";\n    }).join(\",\") + \",this.offset)}\");\n    //view.lo():\n    var a_vars = indices.map(function(i) {\n        return \"a\" + i + \"=this.shape[\" + i + \"]\";\n    });\n    var c_vars = indices.map(function(i) {\n        return \"c\" + i + \"=this.stride[\" + i + \"]\";\n    });\n    code.push(\"proto.lo=function \" + className + \"_lo(\" + args.join(\",\") + \"){var b=this.offset,d=0,\" + a_vars.join(\",\") + \",\" + c_vars.join(\",\"));\n    for(var i = 0; i < dimension; ++i){\n        code.push(\"if(typeof i\" + i + \"==='number'&&i\" + i + \">=0){d=i\" + i + \"|0;b+=c\" + i + \"*d;a\" + i + \"-=d}\");\n    }\n    code.push(\"return new \" + className + \"(this.data,\" + indices.map(function(i) {\n        return \"a\" + i;\n    }).join(\",\") + \",\" + indices.map(function(i) {\n        return \"c\" + i;\n    }).join(\",\") + \",b)}\");\n    //view.step():\n    code.push(\"proto.step=function \" + className + \"_step(\" + args.join(\",\") + \"){var \" + indices.map(function(i) {\n        return \"a\" + i + \"=this.shape[\" + i + \"]\";\n    }).join(\",\") + \",\" + indices.map(function(i) {\n        return \"b\" + i + \"=this.stride[\" + i + \"]\";\n    }).join(\",\") + \",c=this.offset,d=0,ceil=Math.ceil\");\n    for(var i = 0; i < dimension; ++i){\n        code.push(\"if(typeof i\" + i + \"==='number'){d=i\" + i + \"|0;if(d<0){c+=b\" + i + \"*(a\" + i + \"-1);a\" + i + \"=ceil(-a\" + i + \"/d)}else{a\" + i + \"=ceil(a\" + i + \"/d)}b\" + i + \"*=d}\");\n    }\n    code.push(\"return new \" + className + \"(this.data,\" + indices.map(function(i) {\n        return \"a\" + i;\n    }).join(\",\") + \",\" + indices.map(function(i) {\n        return \"b\" + i;\n    }).join(\",\") + \",c)}\");\n    //view.transpose():\n    var tShape = new Array(dimension);\n    var tStride = new Array(dimension);\n    for(var i = 0; i < dimension; ++i){\n        tShape[i] = \"a[i\" + i + \"]\";\n        tStride[i] = \"b[i\" + i + \"]\";\n    }\n    code.push(\"proto.transpose=function \" + className + \"_transpose(\" + args + \"){\" + args.map(function(n, idx) {\n        return n + \"=(\" + n + \"===undefined?\" + idx + \":\" + n + \"|0)\";\n    }).join(\";\"), \"var a=this.shape,b=this.stride;return new \" + className + \"(this.data,\" + tShape.join(\",\") + \",\" + tStride.join(\",\") + \",this.offset)}\");\n    //view.pick():\n    code.push(\"proto.pick=function \" + className + \"_pick(\" + args + \"){var a=[],b=[],c=this.offset\");\n    for(var i = 0; i < dimension; ++i){\n        code.push(\"if(typeof i\" + i + \"==='number'&&i\" + i + \">=0){c=(c+this.stride[\" + i + \"]*i\" + i + \")|0}else{a.push(this.shape[\" + i + \"]);b.push(this.stride[\" + i + \"])}\");\n    }\n    code.push(\"var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}\");\n    //Add return statement\n    code.push(\"return function construct_\" + className + \"(data,shape,stride,offset){return new \" + className + \"(data,\" + indices.map(function(i) {\n        return \"shape[\" + i + \"]\";\n    }).join(\",\") + \",\" + indices.map(function(i) {\n        return \"stride[\" + i + \"]\";\n    }).join(\",\") + \",offset)}\");\n    //Compile procedure\n    var procedure = new Function(\"CTOR_LIST\", \"ORDER\", code.join(\"\\n\"));\n    return procedure(CACHED_CONSTRUCTORS[dtype], order);\n}\nfunction arrayDType(data) {\n    if (isBuffer(data)) {\n        return \"buffer\";\n    }\n    if (hasTypedArrays) {\n        switch(Object.prototype.toString.call(data)){\n            case \"[object Float64Array]\":\n                return \"float64\";\n            case \"[object Float32Array]\":\n                return \"float32\";\n            case \"[object Int8Array]\":\n                return \"int8\";\n            case \"[object Int16Array]\":\n                return \"int16\";\n            case \"[object Int32Array]\":\n                return \"int32\";\n            case \"[object Uint8Array]\":\n                return \"uint8\";\n            case \"[object Uint16Array]\":\n                return \"uint16\";\n            case \"[object Uint32Array]\":\n                return \"uint32\";\n            case \"[object Uint8ClampedArray]\":\n                return \"uint8_clamped\";\n            case \"[object BigInt64Array]\":\n                return \"bigint64\";\n            case \"[object BigUint64Array]\":\n                return \"biguint64\";\n        }\n    }\n    if (Array.isArray(data)) {\n        return \"array\";\n    }\n    return \"generic\";\n}\nvar CACHED_CONSTRUCTORS = {\n    \"float32\": [],\n    \"float64\": [],\n    \"int8\": [],\n    \"int16\": [],\n    \"int32\": [],\n    \"uint8\": [],\n    \"uint16\": [],\n    \"uint32\": [],\n    \"array\": [],\n    \"uint8_clamped\": [],\n    \"bigint64\": [],\n    \"biguint64\": [],\n    \"buffer\": [],\n    \"generic\": []\n};\n(function() {\n    for(var id in CACHED_CONSTRUCTORS){\n        CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1));\n    }\n});\nfunction wrappedNDArrayCtor(data, shape, stride, offset) {\n    if (data === undefined) {\n        var ctor = CACHED_CONSTRUCTORS.array[0];\n        return ctor([]);\n    } else if (typeof data === \"number\") {\n        data = [\n            data\n        ];\n    }\n    if (shape === undefined) {\n        shape = [\n            data.length\n        ];\n    }\n    var d = shape.length;\n    if (stride === undefined) {\n        stride = new Array(d);\n        for(var i = d - 1, sz = 1; i >= 0; --i){\n            stride[i] = sz;\n            sz *= shape[i];\n        }\n    }\n    if (offset === undefined) {\n        offset = 0;\n        for(var i = 0; i < d; ++i){\n            if (stride[i] < 0) {\n                offset -= (shape[i] - 1) * stride[i];\n            }\n        }\n    }\n    var dtype = arrayDType(data);\n    var ctor_list = CACHED_CONSTRUCTORS[dtype];\n    while(ctor_list.length <= d + 1){\n        ctor_list.push(compileConstructor(dtype, ctor_list.length - 1));\n    }\n    var ctor = ctor_list[d + 1];\n    return ctor(data, shape, stride, offset);\n}\nmodule.exports = wrappedNDArrayCtor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ndarray/ndarray.js\n");

/***/ })

};
;