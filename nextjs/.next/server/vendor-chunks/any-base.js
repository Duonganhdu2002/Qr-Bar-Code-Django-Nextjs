"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/any-base";
exports.ids = ["vendor-chunks/any-base"];
exports.modules = {

/***/ "(ssr)/./node_modules/any-base/index.js":
/*!****************************************!*\
  !*** ./node_modules/any-base/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Converter = __webpack_require__(/*! ./src/converter */ \"(ssr)/./node_modules/any-base/src/converter.js\");\n/**\n * Function get source and destination alphabet and return convert function\n *\n * @param {string|Array} srcAlphabet\n * @param {string|Array} dstAlphabet\n *\n * @returns {function(number|Array)}\n */ function anyBase(srcAlphabet, dstAlphabet) {\n    var converter = new Converter(srcAlphabet, dstAlphabet);\n    /**\n     * Convert function\n     *\n     * @param {string|Array} number\n     *\n     * @return {string|Array} number\n     */ return function(number) {\n        return converter.convert(number);\n    };\n}\nanyBase.BIN = \"01\";\nanyBase.OCT = \"01234567\";\nanyBase.DEC = \"0123456789\";\nanyBase.HEX = \"0123456789abcdef\";\nmodule.exports = anyBase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYW55LWJhc2UvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDO0FBRXhCOzs7Ozs7O0NBT0MsR0FDRCxTQUFTQyxRQUFRQyxXQUFXLEVBQUVDLFdBQVc7SUFDckMsSUFBSUMsWUFBWSxJQUFJTCxVQUFVRyxhQUFhQztJQUMzQzs7Ozs7O0tBTUMsR0FDRCxPQUFPLFNBQVVFLE1BQU07UUFDbkIsT0FBT0QsVUFBVUUsT0FBTyxDQUFDRDtJQUM3QjtBQUNKO0FBRUFKLFFBQVFNLEdBQUcsR0FBRztBQUNkTixRQUFRTyxHQUFHLEdBQUc7QUFDZFAsUUFBUVEsR0FBRyxHQUFHO0FBQ2RSLFFBQVFTLEdBQUcsR0FBRztBQUVkQyxPQUFPQyxPQUFPLEdBQUdYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXItY29kZS8uL25vZGVfbW9kdWxlcy9hbnktYmFzZS9pbmRleC5qcz9kYTExIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBDb252ZXJ0ZXIgPSByZXF1aXJlKCcuL3NyYy9jb252ZXJ0ZXInKTtcblxuLyoqXG4gKiBGdW5jdGlvbiBnZXQgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBhbHBoYWJldCBhbmQgcmV0dXJuIGNvbnZlcnQgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheX0gc3JjQWxwaGFiZXRcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5fSBkc3RBbHBoYWJldFxuICpcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihudW1iZXJ8QXJyYXkpfVxuICovXG5mdW5jdGlvbiBhbnlCYXNlKHNyY0FscGhhYmV0LCBkc3RBbHBoYWJldCkge1xuICAgIHZhciBjb252ZXJ0ZXIgPSBuZXcgQ29udmVydGVyKHNyY0FscGhhYmV0LCBkc3RBbHBoYWJldCk7XG4gICAgLyoqXG4gICAgICogQ29udmVydCBmdW5jdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd8QXJyYXl9IG51bWJlclxuICAgICAqXG4gICAgICogQHJldHVybiB7c3RyaW5nfEFycmF5fSBudW1iZXJcbiAgICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICByZXR1cm4gY29udmVydGVyLmNvbnZlcnQobnVtYmVyKTtcbiAgICB9XG59O1xuXG5hbnlCYXNlLkJJTiA9ICcwMSc7XG5hbnlCYXNlLk9DVCA9ICcwMTIzNDU2Nyc7XG5hbnlCYXNlLkRFQyA9ICcwMTIzNDU2Nzg5JztcbmFueUJhc2UuSEVYID0gJzAxMjM0NTY3ODlhYmNkZWYnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFueUJhc2U7Il0sIm5hbWVzIjpbIkNvbnZlcnRlciIsInJlcXVpcmUiLCJhbnlCYXNlIiwic3JjQWxwaGFiZXQiLCJkc3RBbHBoYWJldCIsImNvbnZlcnRlciIsIm51bWJlciIsImNvbnZlcnQiLCJCSU4iLCJPQ1QiLCJERUMiLCJIRVgiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/any-base/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/any-base/src/converter.js":
/*!************************************************!*\
  !*** ./node_modules/any-base/src/converter.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n/**\n * Converter\n *\n * @param {string|Array} srcAlphabet\n * @param {string|Array} dstAlphabet\n * @constructor\n */ function Converter(srcAlphabet, dstAlphabet) {\n    if (!srcAlphabet || !dstAlphabet || !srcAlphabet.length || !dstAlphabet.length) {\n        throw new Error(\"Bad alphabet\");\n    }\n    this.srcAlphabet = srcAlphabet;\n    this.dstAlphabet = dstAlphabet;\n}\n/**\n * Convert number from source alphabet to destination alphabet\n *\n * @param {string|Array} number - number represented as a string or array of points\n *\n * @returns {string|Array}\n */ Converter.prototype.convert = function(number) {\n    var i, divide, newlen, numberMap = {}, fromBase = this.srcAlphabet.length, toBase = this.dstAlphabet.length, length = number.length, result = typeof number === \"string\" ? \"\" : [];\n    if (!this.isValid(number)) {\n        throw new Error('Number \"' + number + '\" contains of non-alphabetic digits (' + this.srcAlphabet + \")\");\n    }\n    if (this.srcAlphabet === this.dstAlphabet) {\n        return number;\n    }\n    for(i = 0; i < length; i++){\n        numberMap[i] = this.srcAlphabet.indexOf(number[i]);\n    }\n    do {\n        divide = 0;\n        newlen = 0;\n        for(i = 0; i < length; i++){\n            divide = divide * fromBase + numberMap[i];\n            if (divide >= toBase) {\n                numberMap[newlen++] = parseInt(divide / toBase, 10);\n                divide = divide % toBase;\n            } else if (newlen > 0) {\n                numberMap[newlen++] = 0;\n            }\n        }\n        length = newlen;\n        result = this.dstAlphabet.slice(divide, divide + 1).concat(result);\n    }while (newlen !== 0);\n    return result;\n};\n/**\n * Valid number with source alphabet\n *\n * @param {number} number\n *\n * @returns {boolean}\n */ Converter.prototype.isValid = function(number) {\n    var i = 0;\n    for(; i < number.length; ++i){\n        if (this.srcAlphabet.indexOf(number[i]) === -1) {\n            return false;\n        }\n    }\n    return true;\n};\nmodule.exports = Converter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYW55LWJhc2Uvc3JjL2NvbnZlcnRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBOzs7Ozs7Q0FNQyxHQUNELFNBQVNBLFVBQVVDLFdBQVcsRUFBRUMsV0FBVztJQUN2QyxJQUFJLENBQUNELGVBQWUsQ0FBQ0MsZUFBZSxDQUFDRCxZQUFZRSxNQUFNLElBQUksQ0FBQ0QsWUFBWUMsTUFBTSxFQUFFO1FBQzVFLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtJQUNBLElBQUksQ0FBQ0gsV0FBVyxHQUFHQTtJQUNuQixJQUFJLENBQUNDLFdBQVcsR0FBR0E7QUFDdkI7QUFFQTs7Ozs7O0NBTUMsR0FDREYsVUFBVUssU0FBUyxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsTUFBTTtJQUN6QyxJQUFJQyxHQUFHQyxRQUFRQyxRQUNmQyxZQUFZLENBQUMsR0FDYkMsV0FBVyxJQUFJLENBQUNYLFdBQVcsQ0FBQ0UsTUFBTSxFQUNsQ1UsU0FBUyxJQUFJLENBQUNYLFdBQVcsQ0FBQ0MsTUFBTSxFQUNoQ0EsU0FBU0ksT0FBT0osTUFBTSxFQUN0QlcsU0FBUyxPQUFPUCxXQUFXLFdBQVcsS0FBSyxFQUFFO0lBRTdDLElBQUksQ0FBQyxJQUFJLENBQUNRLE9BQU8sQ0FBQ1IsU0FBUztRQUN2QixNQUFNLElBQUlILE1BQU0sYUFBYUcsU0FBUywwQ0FBMEMsSUFBSSxDQUFDTixXQUFXLEdBQUc7SUFDdkc7SUFFQSxJQUFJLElBQUksQ0FBQ0EsV0FBVyxLQUFLLElBQUksQ0FBQ0MsV0FBVyxFQUFFO1FBQ3ZDLE9BQU9LO0lBQ1g7SUFFQSxJQUFLQyxJQUFJLEdBQUdBLElBQUlMLFFBQVFLLElBQUs7UUFDekJHLFNBQVMsQ0FBQ0gsRUFBRSxHQUFHLElBQUksQ0FBQ1AsV0FBVyxDQUFDZSxPQUFPLENBQUNULE1BQU0sQ0FBQ0MsRUFBRTtJQUNyRDtJQUNBLEdBQUc7UUFDQ0MsU0FBUztRQUNUQyxTQUFTO1FBQ1QsSUFBS0YsSUFBSSxHQUFHQSxJQUFJTCxRQUFRSyxJQUFLO1lBQ3pCQyxTQUFTQSxTQUFTRyxXQUFXRCxTQUFTLENBQUNILEVBQUU7WUFDekMsSUFBSUMsVUFBVUksUUFBUTtnQkFDbEJGLFNBQVMsQ0FBQ0QsU0FBUyxHQUFHTyxTQUFTUixTQUFTSSxRQUFRO2dCQUNoREosU0FBU0EsU0FBU0k7WUFDdEIsT0FBTyxJQUFJSCxTQUFTLEdBQUc7Z0JBQ25CQyxTQUFTLENBQUNELFNBQVMsR0FBRztZQUMxQjtRQUNKO1FBQ0FQLFNBQVNPO1FBQ1RJLFNBQVMsSUFBSSxDQUFDWixXQUFXLENBQUNnQixLQUFLLENBQUNULFFBQVFBLFNBQVMsR0FBR1UsTUFBTSxDQUFDTDtJQUMvRCxRQUFTSixXQUFXLEdBQUc7SUFFdkIsT0FBT0k7QUFDWDtBQUVBOzs7Ozs7Q0FNQyxHQUNEZCxVQUFVSyxTQUFTLENBQUNVLE9BQU8sR0FBRyxTQUFTUixNQUFNO0lBQ3pDLElBQUlDLElBQUk7SUFDUixNQUFPQSxJQUFJRCxPQUFPSixNQUFNLEVBQUUsRUFBRUssRUFBRztRQUMzQixJQUFJLElBQUksQ0FBQ1AsV0FBVyxDQUFDZSxPQUFPLENBQUNULE1BQU0sQ0FBQ0MsRUFBRSxNQUFNLENBQUMsR0FBRztZQUM1QyxPQUFPO1FBQ1g7SUFDSjtJQUNBLE9BQU87QUFDWDtBQUVBWSxPQUFPQyxPQUFPLEdBQUdyQiIsInNvdXJjZXMiOlsid2VicGFjazovL3FyLWNvZGUvLi9ub2RlX21vZHVsZXMvYW55LWJhc2Uvc3JjL2NvbnZlcnRlci5qcz9kYzc0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb252ZXJ0ZXJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheX0gc3JjQWxwaGFiZXRcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5fSBkc3RBbHBoYWJldFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIENvbnZlcnRlcihzcmNBbHBoYWJldCwgZHN0QWxwaGFiZXQpIHtcbiAgICBpZiAoIXNyY0FscGhhYmV0IHx8ICFkc3RBbHBoYWJldCB8fCAhc3JjQWxwaGFiZXQubGVuZ3RoIHx8ICFkc3RBbHBoYWJldC5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCYWQgYWxwaGFiZXQnKTtcbiAgICB9XG4gICAgdGhpcy5zcmNBbHBoYWJldCA9IHNyY0FscGhhYmV0O1xuICAgIHRoaXMuZHN0QWxwaGFiZXQgPSBkc3RBbHBoYWJldDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IG51bWJlciBmcm9tIHNvdXJjZSBhbHBoYWJldCB0byBkZXN0aW5hdGlvbiBhbHBoYWJldFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5fSBudW1iZXIgLSBudW1iZXIgcmVwcmVzZW50ZWQgYXMgYSBzdHJpbmcgb3IgYXJyYXkgb2YgcG9pbnRzXG4gKlxuICogQHJldHVybnMge3N0cmluZ3xBcnJheX1cbiAqL1xuQ29udmVydGVyLnByb3RvdHlwZS5jb252ZXJ0ID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gICAgdmFyIGksIGRpdmlkZSwgbmV3bGVuLFxuICAgIG51bWJlck1hcCA9IHt9LFxuICAgIGZyb21CYXNlID0gdGhpcy5zcmNBbHBoYWJldC5sZW5ndGgsXG4gICAgdG9CYXNlID0gdGhpcy5kc3RBbHBoYWJldC5sZW5ndGgsXG4gICAgbGVuZ3RoID0gbnVtYmVyLmxlbmd0aCxcbiAgICByZXN1bHQgPSB0eXBlb2YgbnVtYmVyID09PSAnc3RyaW5nJyA/ICcnIDogW107XG5cbiAgICBpZiAoIXRoaXMuaXNWYWxpZChudW1iZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTnVtYmVyIFwiJyArIG51bWJlciArICdcIiBjb250YWlucyBvZiBub24tYWxwaGFiZXRpYyBkaWdpdHMgKCcgKyB0aGlzLnNyY0FscGhhYmV0ICsgJyknKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zcmNBbHBoYWJldCA9PT0gdGhpcy5kc3RBbHBoYWJldCkge1xuICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBudW1iZXJNYXBbaV0gPSB0aGlzLnNyY0FscGhhYmV0LmluZGV4T2YobnVtYmVyW2ldKTtcbiAgICB9XG4gICAgZG8ge1xuICAgICAgICBkaXZpZGUgPSAwO1xuICAgICAgICBuZXdsZW4gPSAwO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGRpdmlkZSA9IGRpdmlkZSAqIGZyb21CYXNlICsgbnVtYmVyTWFwW2ldO1xuICAgICAgICAgICAgaWYgKGRpdmlkZSA+PSB0b0Jhc2UpIHtcbiAgICAgICAgICAgICAgICBudW1iZXJNYXBbbmV3bGVuKytdID0gcGFyc2VJbnQoZGl2aWRlIC8gdG9CYXNlLCAxMCk7XG4gICAgICAgICAgICAgICAgZGl2aWRlID0gZGl2aWRlICUgdG9CYXNlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuZXdsZW4gPiAwKSB7XG4gICAgICAgICAgICAgICAgbnVtYmVyTWFwW25ld2xlbisrXSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGVuZ3RoID0gbmV3bGVuO1xuICAgICAgICByZXN1bHQgPSB0aGlzLmRzdEFscGhhYmV0LnNsaWNlKGRpdmlkZSwgZGl2aWRlICsgMSkuY29uY2F0KHJlc3VsdCk7XG4gICAgfSB3aGlsZSAobmV3bGVuICE9PSAwKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIFZhbGlkIG51bWJlciB3aXRoIHNvdXJjZSBhbHBoYWJldFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuQ29udmVydGVyLnByb3RvdHlwZS5pc1ZhbGlkID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBpIDwgbnVtYmVyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmICh0aGlzLnNyY0FscGhhYmV0LmluZGV4T2YobnVtYmVyW2ldKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ29udmVydGVyOyJdLCJuYW1lcyI6WyJDb252ZXJ0ZXIiLCJzcmNBbHBoYWJldCIsImRzdEFscGhhYmV0IiwibGVuZ3RoIiwiRXJyb3IiLCJwcm90b3R5cGUiLCJjb252ZXJ0IiwibnVtYmVyIiwiaSIsImRpdmlkZSIsIm5ld2xlbiIsIm51bWJlck1hcCIsImZyb21CYXNlIiwidG9CYXNlIiwicmVzdWx0IiwiaXNWYWxpZCIsImluZGV4T2YiLCJwYXJzZUludCIsInNsaWNlIiwiY29uY2F0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/any-base/src/converter.js\n");

/***/ })

};
;