"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/file-type";
exports.ids = ["vendor-chunks/file-type"];
exports.modules = {

/***/ "(ssr)/./node_modules/file-type/core.js":
/*!****************************************!*\
  !*** ./node_modules/file-type/core.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst strtok3 = __webpack_require__(/*! strtok3/lib/core */ \"(ssr)/./node_modules/strtok3/lib/core.js\");\nconst { stringToBytes, tarHeaderChecksumMatches, uint32SyncSafeToken } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/file-type/util.js\");\nconst supported = __webpack_require__(/*! ./supported */ \"(ssr)/./node_modules/file-type/supported.js\");\nconst minimumBytes = 4100; // A fair amount of file-types are detectable within this range\nasync function fromStream(stream1) {\n    const tokenizer = await strtok3.fromStream(stream1);\n    try {\n        return await fromTokenizer(tokenizer);\n    } finally{\n        await tokenizer.close();\n    }\n}\nasync function fromBuffer(input) {\n    if (!(input instanceof Uint8Array || input instanceof ArrayBuffer || Buffer.isBuffer(input))) {\n        throw new TypeError(`Expected the \\`input\\` argument to be of type \\`Uint8Array\\` or \\`Buffer\\` or \\`ArrayBuffer\\`, got \\`${typeof input}\\``);\n    }\n    const buffer = input instanceof Buffer ? input : Buffer.from(input);\n    if (!(buffer && buffer.length > 1)) {\n        return;\n    }\n    const tokenizer = strtok3.fromBuffer(buffer);\n    return fromTokenizer(tokenizer);\n}\nfunction _check(buffer, headers, options) {\n    options = {\n        offset: 0,\n        ...options\n    };\n    for (const [index, header] of headers.entries()){\n        // If a bitmask is set\n        if (options.mask) {\n            // If header doesn't equal `buf` with bits masked off\n            if (header !== (options.mask[index] & buffer[index + options.offset])) {\n                return false;\n            }\n        } else if (header !== buffer[index + options.offset]) {\n            return false;\n        }\n    }\n    return true;\n}\nasync function fromTokenizer(tokenizer) {\n    try {\n        return _fromTokenizer(tokenizer);\n    } catch (error) {\n        if (!(error instanceof strtok3.EndOfStreamError)) {\n            throw error;\n        }\n    }\n}\nasync function _fromTokenizer(tokenizer) {\n    let buffer = Buffer.alloc(minimumBytes);\n    const bytesRead = 12;\n    const check = (header, options)=>_check(buffer, header, options);\n    const checkString = (header, options)=>check(stringToBytes(header), options);\n    // Keep reading until EOF if the file size is unknown.\n    if (!tokenizer.fileInfo.size) {\n        tokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;\n    }\n    await tokenizer.peekBuffer(buffer, {\n        length: bytesRead,\n        mayBeLess: true\n    });\n    // -- 2-byte signatures --\n    if (check([\n        0x42,\n        0x4D\n    ])) {\n        return {\n            ext: \"bmp\",\n            mime: \"image/bmp\"\n        };\n    }\n    if (check([\n        0x0B,\n        0x77\n    ])) {\n        return {\n            ext: \"ac3\",\n            mime: \"audio/vnd.dolby.dd-raw\"\n        };\n    }\n    if (check([\n        0x78,\n        0x01\n    ])) {\n        return {\n            ext: \"dmg\",\n            mime: \"application/x-apple-diskimage\"\n        };\n    }\n    if (check([\n        0x4D,\n        0x5A\n    ])) {\n        return {\n            ext: \"exe\",\n            mime: \"application/x-msdownload\"\n        };\n    }\n    if (check([\n        0x25,\n        0x21\n    ])) {\n        await tokenizer.peekBuffer(buffer, {\n            length: 24,\n            mayBeLess: true\n        });\n        if (checkString(\"PS-Adobe-\", {\n            offset: 2\n        }) && checkString(\" EPSF-\", {\n            offset: 14\n        })) {\n            return {\n                ext: \"eps\",\n                mime: \"application/eps\"\n            };\n        }\n        return {\n            ext: \"ps\",\n            mime: \"application/postscript\"\n        };\n    }\n    if (check([\n        0x1F,\n        0xA0\n    ]) || check([\n        0x1F,\n        0x9D\n    ])) {\n        return {\n            ext: \"Z\",\n            mime: \"application/x-compress\"\n        };\n    }\n    // -- 3-byte signatures --\n    if (check([\n        0xFF,\n        0xD8,\n        0xFF\n    ])) {\n        return {\n            ext: \"jpg\",\n            mime: \"image/jpeg\"\n        };\n    }\n    if (check([\n        0x49,\n        0x49,\n        0xBC\n    ])) {\n        return {\n            ext: \"jxr\",\n            mime: \"image/vnd.ms-photo\"\n        };\n    }\n    if (check([\n        0x1F,\n        0x8B,\n        0x8\n    ])) {\n        return {\n            ext: \"gz\",\n            mime: \"application/gzip\"\n        };\n    }\n    if (check([\n        0x42,\n        0x5A,\n        0x68\n    ])) {\n        return {\n            ext: \"bz2\",\n            mime: \"application/x-bzip2\"\n        };\n    }\n    if (checkString(\"ID3\")) {\n        await tokenizer.ignore(6); // Skip ID3 header until the header size\n        const id3HeaderLen = await tokenizer.readToken(uint32SyncSafeToken);\n        if (tokenizer.position + id3HeaderLen > tokenizer.fileInfo.size) {\n            // Guess file type based on ID3 header for backward compatibility\n            return {\n                ext: \"mp3\",\n                mime: \"audio/mpeg\"\n            };\n        }\n        await tokenizer.ignore(id3HeaderLen);\n        return fromTokenizer(tokenizer); // Skip ID3 header, recursion\n    }\n    // Musepack, SV7\n    if (checkString(\"MP+\")) {\n        return {\n            ext: \"mpc\",\n            mime: \"audio/x-musepack\"\n        };\n    }\n    if ((buffer[0] === 0x43 || buffer[0] === 0x46) && check([\n        0x57,\n        0x53\n    ], {\n        offset: 1\n    })) {\n        return {\n            ext: \"swf\",\n            mime: \"application/x-shockwave-flash\"\n        };\n    }\n    // -- 4-byte signatures --\n    if (check([\n        0x47,\n        0x49,\n        0x46\n    ])) {\n        return {\n            ext: \"gif\",\n            mime: \"image/gif\"\n        };\n    }\n    if (checkString(\"FLIF\")) {\n        return {\n            ext: \"flif\",\n            mime: \"image/flif\"\n        };\n    }\n    if (checkString(\"8BPS\")) {\n        return {\n            ext: \"psd\",\n            mime: \"image/vnd.adobe.photoshop\"\n        };\n    }\n    if (checkString(\"WEBP\", {\n        offset: 8\n    })) {\n        return {\n            ext: \"webp\",\n            mime: \"image/webp\"\n        };\n    }\n    // Musepack, SV8\n    if (checkString(\"MPCK\")) {\n        return {\n            ext: \"mpc\",\n            mime: \"audio/x-musepack\"\n        };\n    }\n    if (checkString(\"FORM\")) {\n        return {\n            ext: \"aif\",\n            mime: \"audio/aiff\"\n        };\n    }\n    if (checkString(\"icns\", {\n        offset: 0\n    })) {\n        return {\n            ext: \"icns\",\n            mime: \"image/icns\"\n        };\n    }\n    // Zip-based file formats\n    // Need to be before the `zip` check\n    if (check([\n        0x50,\n        0x4B,\n        0x3,\n        0x4\n    ])) {\n        try {\n            while(tokenizer.position + 30 < tokenizer.fileInfo.size){\n                await tokenizer.readBuffer(buffer, {\n                    length: 30\n                });\n                // https://en.wikipedia.org/wiki/Zip_(file_format)#File_headers\n                const zipHeader = {\n                    compressedSize: buffer.readUInt32LE(18),\n                    uncompressedSize: buffer.readUInt32LE(22),\n                    filenameLength: buffer.readUInt16LE(26),\n                    extraFieldLength: buffer.readUInt16LE(28)\n                };\n                zipHeader.filename = await tokenizer.readToken(new Token.StringType(zipHeader.filenameLength, \"utf-8\"));\n                await tokenizer.ignore(zipHeader.extraFieldLength);\n                // Assumes signed `.xpi` from addons.mozilla.org\n                if (zipHeader.filename === \"META-INF/mozilla.rsa\") {\n                    return {\n                        ext: \"xpi\",\n                        mime: \"application/x-xpinstall\"\n                    };\n                }\n                if (zipHeader.filename.endsWith(\".rels\") || zipHeader.filename.endsWith(\".xml\")) {\n                    const type = zipHeader.filename.split(\"/\")[0];\n                    switch(type){\n                        case \"_rels\":\n                            break;\n                        case \"word\":\n                            return {\n                                ext: \"docx\",\n                                mime: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n                            };\n                        case \"ppt\":\n                            return {\n                                ext: \"pptx\",\n                                mime: \"application/vnd.openxmlformats-officedocument.presentationml.presentation\"\n                            };\n                        case \"xl\":\n                            return {\n                                ext: \"xlsx\",\n                                mime: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                            };\n                        default:\n                            break;\n                    }\n                }\n                if (zipHeader.filename.startsWith(\"xl/\")) {\n                    return {\n                        ext: \"xlsx\",\n                        mime: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                    };\n                }\n                if (zipHeader.filename.startsWith(\"3D/\") && zipHeader.filename.endsWith(\".model\")) {\n                    return {\n                        ext: \"3mf\",\n                        mime: \"model/3mf\"\n                    };\n                }\n                // The docx, xlsx and pptx file types extend the Office Open XML file format:\n                // https://en.wikipedia.org/wiki/Office_Open_XML_file_formats\n                // We look for:\n                // - one entry named '[Content_Types].xml' or '_rels/.rels',\n                // - one entry indicating specific type of file.\n                // MS Office, OpenOffice and LibreOffice may put the parts in different order, so the check should not rely on it.\n                if (zipHeader.filename === \"mimetype\" && zipHeader.compressedSize === zipHeader.uncompressedSize) {\n                    const mimeType = await tokenizer.readToken(new Token.StringType(zipHeader.compressedSize, \"utf-8\"));\n                    switch(mimeType){\n                        case \"application/epub+zip\":\n                            return {\n                                ext: \"epub\",\n                                mime: \"application/epub+zip\"\n                            };\n                        case \"application/vnd.oasis.opendocument.text\":\n                            return {\n                                ext: \"odt\",\n                                mime: \"application/vnd.oasis.opendocument.text\"\n                            };\n                        case \"application/vnd.oasis.opendocument.spreadsheet\":\n                            return {\n                                ext: \"ods\",\n                                mime: \"application/vnd.oasis.opendocument.spreadsheet\"\n                            };\n                        case \"application/vnd.oasis.opendocument.presentation\":\n                            return {\n                                ext: \"odp\",\n                                mime: \"application/vnd.oasis.opendocument.presentation\"\n                            };\n                        default:\n                    }\n                }\n                // Try to find next header manually when current one is corrupted\n                if (zipHeader.compressedSize === 0) {\n                    let nextHeaderIndex = -1;\n                    while(nextHeaderIndex < 0 && tokenizer.position < tokenizer.fileInfo.size){\n                        await tokenizer.peekBuffer(buffer, {\n                            mayBeLess: true\n                        });\n                        nextHeaderIndex = buffer.indexOf(\"504B0304\", 0, \"hex\");\n                        // Move position to the next header if found, skip the whole buffer otherwise\n                        await tokenizer.ignore(nextHeaderIndex >= 0 ? nextHeaderIndex : buffer.length);\n                    }\n                } else {\n                    await tokenizer.ignore(zipHeader.compressedSize);\n                }\n            }\n        } catch (error) {\n            if (!(error instanceof strtok3.EndOfStreamError)) {\n                throw error;\n            }\n        }\n        return {\n            ext: \"zip\",\n            mime: \"application/zip\"\n        };\n    }\n    if (checkString(\"OggS\")) {\n        // This is an OGG container\n        await tokenizer.ignore(28);\n        const type = Buffer.alloc(8);\n        await tokenizer.readBuffer(type);\n        // Needs to be before `ogg` check\n        if (_check(type, [\n            0x4F,\n            0x70,\n            0x75,\n            0x73,\n            0x48,\n            0x65,\n            0x61,\n            0x64\n        ])) {\n            return {\n                ext: \"opus\",\n                mime: \"audio/opus\"\n            };\n        }\n        // If ' theora' in header.\n        if (_check(type, [\n            0x80,\n            0x74,\n            0x68,\n            0x65,\n            0x6F,\n            0x72,\n            0x61\n        ])) {\n            return {\n                ext: \"ogv\",\n                mime: \"video/ogg\"\n            };\n        }\n        // If '\\x01video' in header.\n        if (_check(type, [\n            0x01,\n            0x76,\n            0x69,\n            0x64,\n            0x65,\n            0x6F,\n            0x00\n        ])) {\n            return {\n                ext: \"ogm\",\n                mime: \"video/ogg\"\n            };\n        }\n        // If ' FLAC' in header  https://xiph.org/flac/faq.html\n        if (_check(type, [\n            0x7F,\n            0x46,\n            0x4C,\n            0x41,\n            0x43\n        ])) {\n            return {\n                ext: \"oga\",\n                mime: \"audio/ogg\"\n            };\n        }\n        // 'Speex  ' in header https://en.wikipedia.org/wiki/Speex\n        if (_check(type, [\n            0x53,\n            0x70,\n            0x65,\n            0x65,\n            0x78,\n            0x20,\n            0x20\n        ])) {\n            return {\n                ext: \"spx\",\n                mime: \"audio/ogg\"\n            };\n        }\n        // If '\\x01vorbis' in header\n        if (_check(type, [\n            0x01,\n            0x76,\n            0x6F,\n            0x72,\n            0x62,\n            0x69,\n            0x73\n        ])) {\n            return {\n                ext: \"ogg\",\n                mime: \"audio/ogg\"\n            };\n        }\n        // Default OGG container https://www.iana.org/assignments/media-types/application/ogg\n        return {\n            ext: \"ogx\",\n            mime: \"application/ogg\"\n        };\n    }\n    if (check([\n        0x50,\n        0x4B\n    ]) && (buffer[2] === 0x3 || buffer[2] === 0x5 || buffer[2] === 0x7) && (buffer[3] === 0x4 || buffer[3] === 0x6 || buffer[3] === 0x8)) {\n        return {\n            ext: \"zip\",\n            mime: \"application/zip\"\n        };\n    }\n    //\n    // File Type Box (https://en.wikipedia.org/wiki/ISO_base_media_file_format)\n    // It's not required to be first, but it's recommended to be. Almost all ISO base media files start with `ftyp` box.\n    // `ftyp` box must contain a brand major identifier, which must consist of ISO 8859-1 printable characters.\n    // Here we check for 8859-1 printable characters (for simplicity, it's a mask which also catches one non-printable character).\n    if (checkString(\"ftyp\", {\n        offset: 4\n    }) && (buffer[8] & 0x60) !== 0x00 // Brand major, first character ASCII?\n    ) {\n        // They all can have MIME `video/mp4` except `application/mp4` special-case which is hard to detect.\n        // For some cases, we're specific, everything else falls to `video/mp4` with `mp4` extension.\n        const brandMajor = buffer.toString(\"binary\", 8, 12).replace(\"\\x00\", \" \").trim();\n        switch(brandMajor){\n            case \"avif\":\n                return {\n                    ext: \"avif\",\n                    mime: \"image/avif\"\n                };\n            case \"mif1\":\n                return {\n                    ext: \"heic\",\n                    mime: \"image/heif\"\n                };\n            case \"msf1\":\n                return {\n                    ext: \"heic\",\n                    mime: \"image/heif-sequence\"\n                };\n            case \"heic\":\n            case \"heix\":\n                return {\n                    ext: \"heic\",\n                    mime: \"image/heic\"\n                };\n            case \"hevc\":\n            case \"hevx\":\n                return {\n                    ext: \"heic\",\n                    mime: \"image/heic-sequence\"\n                };\n            case \"qt\":\n                return {\n                    ext: \"mov\",\n                    mime: \"video/quicktime\"\n                };\n            case \"M4V\":\n            case \"M4VH\":\n            case \"M4VP\":\n                return {\n                    ext: \"m4v\",\n                    mime: \"video/x-m4v\"\n                };\n            case \"M4P\":\n                return {\n                    ext: \"m4p\",\n                    mime: \"video/mp4\"\n                };\n            case \"M4B\":\n                return {\n                    ext: \"m4b\",\n                    mime: \"audio/mp4\"\n                };\n            case \"M4A\":\n                return {\n                    ext: \"m4a\",\n                    mime: \"audio/x-m4a\"\n                };\n            case \"F4V\":\n                return {\n                    ext: \"f4v\",\n                    mime: \"video/mp4\"\n                };\n            case \"F4P\":\n                return {\n                    ext: \"f4p\",\n                    mime: \"video/mp4\"\n                };\n            case \"F4A\":\n                return {\n                    ext: \"f4a\",\n                    mime: \"audio/mp4\"\n                };\n            case \"F4B\":\n                return {\n                    ext: \"f4b\",\n                    mime: \"audio/mp4\"\n                };\n            case \"crx\":\n                return {\n                    ext: \"cr3\",\n                    mime: \"image/x-canon-cr3\"\n                };\n            default:\n                if (brandMajor.startsWith(\"3g\")) {\n                    if (brandMajor.startsWith(\"3g2\")) {\n                        return {\n                            ext: \"3g2\",\n                            mime: \"video/3gpp2\"\n                        };\n                    }\n                    return {\n                        ext: \"3gp\",\n                        mime: \"video/3gpp\"\n                    };\n                }\n                return {\n                    ext: \"mp4\",\n                    mime: \"video/mp4\"\n                };\n        }\n    }\n    if (checkString(\"MThd\")) {\n        return {\n            ext: \"mid\",\n            mime: \"audio/midi\"\n        };\n    }\n    if (checkString(\"wOFF\") && (check([\n        0x00,\n        0x01,\n        0x00,\n        0x00\n    ], {\n        offset: 4\n    }) || checkString(\"OTTO\", {\n        offset: 4\n    }))) {\n        return {\n            ext: \"woff\",\n            mime: \"font/woff\"\n        };\n    }\n    if (checkString(\"wOF2\") && (check([\n        0x00,\n        0x01,\n        0x00,\n        0x00\n    ], {\n        offset: 4\n    }) || checkString(\"OTTO\", {\n        offset: 4\n    }))) {\n        return {\n            ext: \"woff2\",\n            mime: \"font/woff2\"\n        };\n    }\n    if (check([\n        0xD4,\n        0xC3,\n        0xB2,\n        0xA1\n    ]) || check([\n        0xA1,\n        0xB2,\n        0xC3,\n        0xD4\n    ])) {\n        return {\n            ext: \"pcap\",\n            mime: \"application/vnd.tcpdump.pcap\"\n        };\n    }\n    // Sony DSD Stream File (DSF)\n    if (checkString(\"DSD \")) {\n        return {\n            ext: \"dsf\",\n            mime: \"audio/x-dsf\" // Non-standard\n        };\n    }\n    if (checkString(\"LZIP\")) {\n        return {\n            ext: \"lz\",\n            mime: \"application/x-lzip\"\n        };\n    }\n    if (checkString(\"fLaC\")) {\n        return {\n            ext: \"flac\",\n            mime: \"audio/x-flac\"\n        };\n    }\n    if (check([\n        0x42,\n        0x50,\n        0x47,\n        0xFB\n    ])) {\n        return {\n            ext: \"bpg\",\n            mime: \"image/bpg\"\n        };\n    }\n    if (checkString(\"wvpk\")) {\n        return {\n            ext: \"wv\",\n            mime: \"audio/wavpack\"\n        };\n    }\n    if (checkString(\"%PDF\")) {\n        await tokenizer.ignore(1350);\n        const maxBufferSize = 10 * 1024 * 1024;\n        const buffer = Buffer.alloc(Math.min(maxBufferSize, tokenizer.fileInfo.size));\n        await tokenizer.readBuffer(buffer, {\n            mayBeLess: true\n        });\n        // Check if this is an Adobe Illustrator file\n        if (buffer.includes(Buffer.from(\"AIPrivateData\"))) {\n            return {\n                ext: \"ai\",\n                mime: \"application/postscript\"\n            };\n        }\n        // Assume this is just a normal PDF\n        return {\n            ext: \"pdf\",\n            mime: \"application/pdf\"\n        };\n    }\n    if (check([\n        0x00,\n        0x61,\n        0x73,\n        0x6D\n    ])) {\n        return {\n            ext: \"wasm\",\n            mime: \"application/wasm\"\n        };\n    }\n    // TIFF, little-endian type\n    if (check([\n        0x49,\n        0x49,\n        0x2A,\n        0x0\n    ])) {\n        if (checkString(\"CR\", {\n            offset: 8\n        })) {\n            return {\n                ext: \"cr2\",\n                mime: \"image/x-canon-cr2\"\n            };\n        }\n        if (check([\n            0x1C,\n            0x00,\n            0xFE,\n            0x00\n        ], {\n            offset: 8\n        }) || check([\n            0x1F,\n            0x00,\n            0x0B,\n            0x00\n        ], {\n            offset: 8\n        })) {\n            return {\n                ext: \"nef\",\n                mime: \"image/x-nikon-nef\"\n            };\n        }\n        if (check([\n            0x08,\n            0x00,\n            0x00,\n            0x00\n        ], {\n            offset: 4\n        }) && (check([\n            0x2D,\n            0x00,\n            0xFE,\n            0x00\n        ], {\n            offset: 8\n        }) || check([\n            0x27,\n            0x00,\n            0xFE,\n            0x00\n        ], {\n            offset: 8\n        }))) {\n            return {\n                ext: \"dng\",\n                mime: \"image/x-adobe-dng\"\n            };\n        }\n        buffer = Buffer.alloc(24);\n        await tokenizer.peekBuffer(buffer);\n        if ((check([\n            0x10,\n            0xFB,\n            0x86,\n            0x01\n        ], {\n            offset: 4\n        }) || check([\n            0x08,\n            0x00,\n            0x00,\n            0x00\n        ], {\n            offset: 4\n        })) && // This pattern differentiates ARW from other TIFF-ish file types:\n        check([\n            0x00,\n            0xFE,\n            0x00,\n            0x04,\n            0x00,\n            0x01,\n            0x00,\n            0x00,\n            0x00,\n            0x01,\n            0x00,\n            0x00,\n            0x00,\n            0x03,\n            0x01\n        ], {\n            offset: 9\n        })) {\n            return {\n                ext: \"arw\",\n                mime: \"image/x-sony-arw\"\n            };\n        }\n        return {\n            ext: \"tif\",\n            mime: \"image/tiff\"\n        };\n    }\n    // TIFF, big-endian type\n    if (check([\n        0x4D,\n        0x4D,\n        0x0,\n        0x2A\n    ])) {\n        return {\n            ext: \"tif\",\n            mime: \"image/tiff\"\n        };\n    }\n    if (checkString(\"MAC \")) {\n        return {\n            ext: \"ape\",\n            mime: \"audio/ape\"\n        };\n    }\n    // https://github.com/threatstack/libmagic/blob/master/magic/Magdir/matroska\n    if (check([\n        0x1A,\n        0x45,\n        0xDF,\n        0xA3\n    ])) {\n        async function readField() {\n            const msb = await tokenizer.peekNumber(Token.UINT8);\n            let mask = 0x80;\n            let ic = 0; // 0 = A, 1 = B, 2 = C, 3 = D\n            while((msb & mask) === 0 && mask !== 0){\n                ++ic;\n                mask >>= 1;\n            }\n            const id = Buffer.alloc(ic + 1);\n            await tokenizer.readBuffer(id);\n            return id;\n        }\n        async function readElement() {\n            const id = await readField();\n            const lenField = await readField();\n            lenField[0] ^= 0x80 >> lenField.length - 1;\n            const nrLen = Math.min(6, lenField.length); // JavaScript can max read 6 bytes integer\n            return {\n                id: id.readUIntBE(0, id.length),\n                len: lenField.readUIntBE(lenField.length - nrLen, nrLen)\n            };\n        }\n        async function readChildren(level, children) {\n            while(children > 0){\n                const e = await readElement();\n                if (e.id === 0x4282) {\n                    return tokenizer.readToken(new Token.StringType(e.len, \"utf-8\")); // Return DocType\n                }\n                await tokenizer.ignore(e.len); // ignore payload\n                --children;\n            }\n        }\n        const re = await readElement();\n        const docType = await readChildren(1, re.len);\n        switch(docType){\n            case \"webm\":\n                return {\n                    ext: \"webm\",\n                    mime: \"video/webm\"\n                };\n            case \"matroska\":\n                return {\n                    ext: \"mkv\",\n                    mime: \"video/x-matroska\"\n                };\n            default:\n                return;\n        }\n    }\n    // RIFF file format which might be AVI, WAV, QCP, etc\n    if (check([\n        0x52,\n        0x49,\n        0x46,\n        0x46\n    ])) {\n        if (check([\n            0x41,\n            0x56,\n            0x49\n        ], {\n            offset: 8\n        })) {\n            return {\n                ext: \"avi\",\n                mime: \"video/vnd.avi\"\n            };\n        }\n        if (check([\n            0x57,\n            0x41,\n            0x56,\n            0x45\n        ], {\n            offset: 8\n        })) {\n            return {\n                ext: \"wav\",\n                mime: \"audio/vnd.wave\"\n            };\n        }\n        // QLCM, QCP file\n        if (check([\n            0x51,\n            0x4C,\n            0x43,\n            0x4D\n        ], {\n            offset: 8\n        })) {\n            return {\n                ext: \"qcp\",\n                mime: \"audio/qcelp\"\n            };\n        }\n    }\n    if (checkString(\"SQLi\")) {\n        return {\n            ext: \"sqlite\",\n            mime: \"application/x-sqlite3\"\n        };\n    }\n    if (check([\n        0x4E,\n        0x45,\n        0x53,\n        0x1A\n    ])) {\n        return {\n            ext: \"nes\",\n            mime: \"application/x-nintendo-nes-rom\"\n        };\n    }\n    if (checkString(\"Cr24\")) {\n        return {\n            ext: \"crx\",\n            mime: \"application/x-google-chrome-extension\"\n        };\n    }\n    if (checkString(\"MSCF\") || checkString(\"ISc(\")) {\n        return {\n            ext: \"cab\",\n            mime: \"application/vnd.ms-cab-compressed\"\n        };\n    }\n    if (check([\n        0xED,\n        0xAB,\n        0xEE,\n        0xDB\n    ])) {\n        return {\n            ext: \"rpm\",\n            mime: \"application/x-rpm\"\n        };\n    }\n    if (check([\n        0xC5,\n        0xD0,\n        0xD3,\n        0xC6\n    ])) {\n        return {\n            ext: \"eps\",\n            mime: \"application/eps\"\n        };\n    }\n    if (check([\n        0x28,\n        0xB5,\n        0x2F,\n        0xFD\n    ])) {\n        return {\n            ext: \"zst\",\n            mime: \"application/zstd\"\n        };\n    }\n    // -- 5-byte signatures --\n    if (check([\n        0x4F,\n        0x54,\n        0x54,\n        0x4F,\n        0x00\n    ])) {\n        return {\n            ext: \"otf\",\n            mime: \"font/otf\"\n        };\n    }\n    if (checkString(\"#!AMR\")) {\n        return {\n            ext: \"amr\",\n            mime: \"audio/amr\"\n        };\n    }\n    if (checkString(\"{\\\\rtf\")) {\n        return {\n            ext: \"rtf\",\n            mime: \"application/rtf\"\n        };\n    }\n    if (check([\n        0x46,\n        0x4C,\n        0x56,\n        0x01\n    ])) {\n        return {\n            ext: \"flv\",\n            mime: \"video/x-flv\"\n        };\n    }\n    if (checkString(\"IMPM\")) {\n        return {\n            ext: \"it\",\n            mime: \"audio/x-it\"\n        };\n    }\n    if (checkString(\"-lh0-\", {\n        offset: 2\n    }) || checkString(\"-lh1-\", {\n        offset: 2\n    }) || checkString(\"-lh2-\", {\n        offset: 2\n    }) || checkString(\"-lh3-\", {\n        offset: 2\n    }) || checkString(\"-lh4-\", {\n        offset: 2\n    }) || checkString(\"-lh5-\", {\n        offset: 2\n    }) || checkString(\"-lh6-\", {\n        offset: 2\n    }) || checkString(\"-lh7-\", {\n        offset: 2\n    }) || checkString(\"-lzs-\", {\n        offset: 2\n    }) || checkString(\"-lz4-\", {\n        offset: 2\n    }) || checkString(\"-lz5-\", {\n        offset: 2\n    }) || checkString(\"-lhd-\", {\n        offset: 2\n    })) {\n        return {\n            ext: \"lzh\",\n            mime: \"application/x-lzh-compressed\"\n        };\n    }\n    // MPEG program stream (PS or MPEG-PS)\n    if (check([\n        0x00,\n        0x00,\n        0x01,\n        0xBA\n    ])) {\n        //  MPEG-PS, MPEG-1 Part 1\n        if (check([\n            0x21\n        ], {\n            offset: 4,\n            mask: [\n                0xF1\n            ]\n        })) {\n            return {\n                ext: \"mpg\",\n                mime: \"video/MP1S\"\n            };\n        }\n        // MPEG-PS, MPEG-2 Part 1\n        if (check([\n            0x44\n        ], {\n            offset: 4,\n            mask: [\n                0xC4\n            ]\n        })) {\n            return {\n                ext: \"mpg\",\n                mime: \"video/MP2P\"\n            };\n        }\n    }\n    if (checkString(\"ITSF\")) {\n        return {\n            ext: \"chm\",\n            mime: \"application/vnd.ms-htmlhelp\"\n        };\n    }\n    // -- 6-byte signatures --\n    if (check([\n        0xFD,\n        0x37,\n        0x7A,\n        0x58,\n        0x5A,\n        0x00\n    ])) {\n        return {\n            ext: \"xz\",\n            mime: \"application/x-xz\"\n        };\n    }\n    if (checkString(\"<?xml \")) {\n        return {\n            ext: \"xml\",\n            mime: \"application/xml\"\n        };\n    }\n    if (check([\n        0x37,\n        0x7A,\n        0xBC,\n        0xAF,\n        0x27,\n        0x1C\n    ])) {\n        return {\n            ext: \"7z\",\n            mime: \"application/x-7z-compressed\"\n        };\n    }\n    if (check([\n        0x52,\n        0x61,\n        0x72,\n        0x21,\n        0x1A,\n        0x7\n    ]) && (buffer[6] === 0x0 || buffer[6] === 0x1)) {\n        return {\n            ext: \"rar\",\n            mime: \"application/x-rar-compressed\"\n        };\n    }\n    if (checkString(\"solid \")) {\n        return {\n            ext: \"stl\",\n            mime: \"model/stl\"\n        };\n    }\n    // -- 7-byte signatures --\n    if (checkString(\"BLENDER\")) {\n        return {\n            ext: \"blend\",\n            mime: \"application/x-blender\"\n        };\n    }\n    if (checkString(\"!<arch>\")) {\n        await tokenizer.ignore(8);\n        const str = await tokenizer.readToken(new Token.StringType(13, \"ascii\"));\n        if (str === \"debian-binary\") {\n            return {\n                ext: \"deb\",\n                mime: \"application/x-deb\"\n            };\n        }\n        return {\n            ext: \"ar\",\n            mime: \"application/x-unix-archive\"\n        };\n    }\n    // -- 8-byte signatures --\n    if (check([\n        0x89,\n        0x50,\n        0x4E,\n        0x47,\n        0x0D,\n        0x0A,\n        0x1A,\n        0x0A\n    ])) {\n        // APNG format (https://wiki.mozilla.org/APNG_Specification)\n        // 1. Find the first IDAT (image data) chunk (49 44 41 54)\n        // 2. Check if there is an \"acTL\" chunk before the IDAT one (61 63 54 4C)\n        // Offset calculated as follows:\n        // - 8 bytes: PNG signature\n        // - 4 (length) + 4 (chunk type) + 13 (chunk data) + 4 (CRC): IHDR chunk\n        await tokenizer.ignore(8); // ignore PNG signature\n        async function readChunkHeader() {\n            return {\n                length: await tokenizer.readToken(Token.INT32_BE),\n                type: await tokenizer.readToken(new Token.StringType(4, \"binary\"))\n            };\n        }\n        do {\n            const chunk = await readChunkHeader();\n            if (chunk.length < 0) {\n                return; // Invalid chunk length\n            }\n            switch(chunk.type){\n                case \"IDAT\":\n                    return {\n                        ext: \"png\",\n                        mime: \"image/png\"\n                    };\n                case \"acTL\":\n                    return {\n                        ext: \"apng\",\n                        mime: \"image/apng\"\n                    };\n                default:\n                    await tokenizer.ignore(chunk.length + 4); // Ignore chunk-data + CRC\n            }\n        }while (tokenizer.position + 8 < tokenizer.fileInfo.size);\n        return {\n            ext: \"png\",\n            mime: \"image/png\"\n        };\n    }\n    if (check([\n        0x41,\n        0x52,\n        0x52,\n        0x4F,\n        0x57,\n        0x31,\n        0x00,\n        0x00\n    ])) {\n        return {\n            ext: \"arrow\",\n            mime: \"application/x-apache-arrow\"\n        };\n    }\n    if (check([\n        0x67,\n        0x6C,\n        0x54,\n        0x46,\n        0x02,\n        0x00,\n        0x00,\n        0x00\n    ])) {\n        return {\n            ext: \"glb\",\n            mime: \"model/gltf-binary\"\n        };\n    }\n    // `mov` format variants\n    if (check([\n        0x66,\n        0x72,\n        0x65,\n        0x65\n    ], {\n        offset: 4\n    }) || // `free`\n    check([\n        0x6D,\n        0x64,\n        0x61,\n        0x74\n    ], {\n        offset: 4\n    }) || // `mdat` MJPEG\n    check([\n        0x6D,\n        0x6F,\n        0x6F,\n        0x76\n    ], {\n        offset: 4\n    }) || // `moov`\n    check([\n        0x77,\n        0x69,\n        0x64,\n        0x65\n    ], {\n        offset: 4\n    }) // `wide`\n    ) {\n        return {\n            ext: \"mov\",\n            mime: \"video/quicktime\"\n        };\n    }\n    // -- 9-byte signatures --\n    if (check([\n        0x49,\n        0x49,\n        0x52,\n        0x4F,\n        0x08,\n        0x00,\n        0x00,\n        0x00,\n        0x18\n    ])) {\n        return {\n            ext: \"orf\",\n            mime: \"image/x-olympus-orf\"\n        };\n    }\n    if (checkString(\"gimp xcf \")) {\n        return {\n            ext: \"xcf\",\n            mime: \"image/x-xcf\"\n        };\n    }\n    // -- 12-byte signatures --\n    if (check([\n        0x49,\n        0x49,\n        0x55,\n        0x00,\n        0x18,\n        0x00,\n        0x00,\n        0x00,\n        0x88,\n        0xE7,\n        0x74,\n        0xD8\n    ])) {\n        return {\n            ext: \"rw2\",\n            mime: \"image/x-panasonic-rw2\"\n        };\n    }\n    // ASF_Header_Object first 80 bytes\n    if (check([\n        0x30,\n        0x26,\n        0xB2,\n        0x75,\n        0x8E,\n        0x66,\n        0xCF,\n        0x11,\n        0xA6,\n        0xD9\n    ])) {\n        async function readHeader() {\n            const guid = Buffer.alloc(16);\n            await tokenizer.readBuffer(guid);\n            return {\n                id: guid,\n                size: Number(await tokenizer.readToken(Token.UINT64_LE))\n            };\n        }\n        await tokenizer.ignore(30);\n        // Search for header should be in first 1KB of file.\n        while(tokenizer.position + 24 < tokenizer.fileInfo.size){\n            const header = await readHeader();\n            let payload = header.size - 24;\n            if (_check(header.id, [\n                0x91,\n                0x07,\n                0xDC,\n                0xB7,\n                0xB7,\n                0xA9,\n                0xCF,\n                0x11,\n                0x8E,\n                0xE6,\n                0x00,\n                0xC0,\n                0x0C,\n                0x20,\n                0x53,\n                0x65\n            ])) {\n                // Sync on Stream-Properties-Object (B7DC0791-A9B7-11CF-8EE6-00C00C205365)\n                const typeId = Buffer.alloc(16);\n                payload -= await tokenizer.readBuffer(typeId);\n                if (_check(typeId, [\n                    0x40,\n                    0x9E,\n                    0x69,\n                    0xF8,\n                    0x4D,\n                    0x5B,\n                    0xCF,\n                    0x11,\n                    0xA8,\n                    0xFD,\n                    0x00,\n                    0x80,\n                    0x5F,\n                    0x5C,\n                    0x44,\n                    0x2B\n                ])) {\n                    // Found audio:\n                    return {\n                        ext: \"asf\",\n                        mime: \"audio/x-ms-asf\"\n                    };\n                }\n                if (_check(typeId, [\n                    0xC0,\n                    0xEF,\n                    0x19,\n                    0xBC,\n                    0x4D,\n                    0x5B,\n                    0xCF,\n                    0x11,\n                    0xA8,\n                    0xFD,\n                    0x00,\n                    0x80,\n                    0x5F,\n                    0x5C,\n                    0x44,\n                    0x2B\n                ])) {\n                    // Found video:\n                    return {\n                        ext: \"asf\",\n                        mime: \"video/x-ms-asf\"\n                    };\n                }\n                break;\n            }\n            await tokenizer.ignore(payload);\n        }\n        // Default to ASF generic extension\n        return {\n            ext: \"asf\",\n            mime: \"application/vnd.ms-asf\"\n        };\n    }\n    if (check([\n        0xAB,\n        0x4B,\n        0x54,\n        0x58,\n        0x20,\n        0x31,\n        0x31,\n        0xBB,\n        0x0D,\n        0x0A,\n        0x1A,\n        0x0A\n    ])) {\n        return {\n            ext: \"ktx\",\n            mime: \"image/ktx\"\n        };\n    }\n    if ((check([\n        0x7E,\n        0x10,\n        0x04\n    ]) || check([\n        0x7E,\n        0x18,\n        0x04\n    ])) && check([\n        0x30,\n        0x4D,\n        0x49,\n        0x45\n    ], {\n        offset: 4\n    })) {\n        return {\n            ext: \"mie\",\n            mime: \"application/x-mie\"\n        };\n    }\n    if (check([\n        0x27,\n        0x0A,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00\n    ], {\n        offset: 2\n    })) {\n        return {\n            ext: \"shp\",\n            mime: \"application/x-esri-shape\"\n        };\n    }\n    if (check([\n        0x00,\n        0x00,\n        0x00,\n        0x0C,\n        0x6A,\n        0x50,\n        0x20,\n        0x20,\n        0x0D,\n        0x0A,\n        0x87,\n        0x0A\n    ])) {\n        // JPEG-2000 family\n        await tokenizer.ignore(20);\n        const type = await tokenizer.readToken(new Token.StringType(4, \"ascii\"));\n        switch(type){\n            case \"jp2 \":\n                return {\n                    ext: \"jp2\",\n                    mime: \"image/jp2\"\n                };\n            case \"jpx \":\n                return {\n                    ext: \"jpx\",\n                    mime: \"image/jpx\"\n                };\n            case \"jpm \":\n                return {\n                    ext: \"jpm\",\n                    mime: \"image/jpm\"\n                };\n            case \"mjp2\":\n                return {\n                    ext: \"mj2\",\n                    mime: \"image/mj2\"\n                };\n            default:\n                return;\n        }\n    }\n    if (check([\n        0xFF,\n        0x0A\n    ]) || check([\n        0x00,\n        0x00,\n        0x00,\n        0x0C,\n        0x4A,\n        0x58,\n        0x4C,\n        0x20,\n        0x0D,\n        0x0A,\n        0x87,\n        0x0A\n    ])) {\n        return {\n            ext: \"jxl\",\n            mime: \"image/jxl\"\n        };\n    }\n    // -- Unsafe signatures --\n    if (check([\n        0x0,\n        0x0,\n        0x1,\n        0xBA\n    ]) || check([\n        0x0,\n        0x0,\n        0x1,\n        0xB3\n    ])) {\n        return {\n            ext: \"mpg\",\n            mime: \"video/mpeg\"\n        };\n    }\n    if (check([\n        0x00,\n        0x01,\n        0x00,\n        0x00,\n        0x00\n    ])) {\n        return {\n            ext: \"ttf\",\n            mime: \"font/ttf\"\n        };\n    }\n    if (check([\n        0x00,\n        0x00,\n        0x01,\n        0x00\n    ])) {\n        return {\n            ext: \"ico\",\n            mime: \"image/x-icon\"\n        };\n    }\n    if (check([\n        0x00,\n        0x00,\n        0x02,\n        0x00\n    ])) {\n        return {\n            ext: \"cur\",\n            mime: \"image/x-icon\"\n        };\n    }\n    if (check([\n        0xD0,\n        0xCF,\n        0x11,\n        0xE0,\n        0xA1,\n        0xB1,\n        0x1A,\n        0xE1\n    ])) {\n        // Detected Microsoft Compound File Binary File (MS-CFB) Format.\n        return {\n            ext: \"cfb\",\n            mime: \"application/x-cfb\"\n        };\n    }\n    // Increase sample size from 12 to 256.\n    await tokenizer.peekBuffer(buffer, {\n        length: Math.min(256, tokenizer.fileInfo.size),\n        mayBeLess: true\n    });\n    // -- 15-byte signatures --\n    if (checkString(\"BEGIN:\")) {\n        if (checkString(\"VCARD\", {\n            offset: 6\n        })) {\n            return {\n                ext: \"vcf\",\n                mime: \"text/vcard\"\n            };\n        }\n        if (checkString(\"VCALENDAR\", {\n            offset: 6\n        })) {\n            return {\n                ext: \"ics\",\n                mime: \"text/calendar\"\n            };\n        }\n    }\n    // `raf` is here just to keep all the raw image detectors together.\n    if (checkString(\"FUJIFILMCCD-RAW\")) {\n        return {\n            ext: \"raf\",\n            mime: \"image/x-fujifilm-raf\"\n        };\n    }\n    if (checkString(\"Extended Module:\")) {\n        return {\n            ext: \"xm\",\n            mime: \"audio/x-xm\"\n        };\n    }\n    if (checkString(\"Creative Voice File\")) {\n        return {\n            ext: \"voc\",\n            mime: \"audio/x-voc\"\n        };\n    }\n    if (check([\n        0x04,\n        0x00,\n        0x00,\n        0x00\n    ]) && buffer.length >= 16) {\n        const jsonSize = buffer.readUInt32LE(12);\n        if (jsonSize > 12 && buffer.length >= jsonSize + 16) {\n            try {\n                const header = buffer.slice(16, jsonSize + 16).toString();\n                const json = JSON.parse(header);\n                // Check if Pickle is ASAR\n                if (json.files) {\n                    return {\n                        ext: \"asar\",\n                        mime: \"application/x-asar\"\n                    };\n                }\n            } catch (_) {}\n        }\n    }\n    if (check([\n        0x06,\n        0x0E,\n        0x2B,\n        0x34,\n        0x02,\n        0x05,\n        0x01,\n        0x01,\n        0x0D,\n        0x01,\n        0x02,\n        0x01,\n        0x01,\n        0x02\n    ])) {\n        return {\n            ext: \"mxf\",\n            mime: \"application/mxf\"\n        };\n    }\n    if (checkString(\"SCRM\", {\n        offset: 44\n    })) {\n        return {\n            ext: \"s3m\",\n            mime: \"audio/x-s3m\"\n        };\n    }\n    if (check([\n        0x47\n    ], {\n        offset: 4\n    }) && (check([\n        0x47\n    ], {\n        offset: 192\n    }) || check([\n        0x47\n    ], {\n        offset: 196\n    }))) {\n        return {\n            ext: \"mts\",\n            mime: \"video/mp2t\"\n        };\n    }\n    if (check([\n        0x42,\n        0x4F,\n        0x4F,\n        0x4B,\n        0x4D,\n        0x4F,\n        0x42,\n        0x49\n    ], {\n        offset: 60\n    })) {\n        return {\n            ext: \"mobi\",\n            mime: \"application/x-mobipocket-ebook\"\n        };\n    }\n    if (check([\n        0x44,\n        0x49,\n        0x43,\n        0x4D\n    ], {\n        offset: 128\n    })) {\n        return {\n            ext: \"dcm\",\n            mime: \"application/dicom\"\n        };\n    }\n    if (check([\n        0x4C,\n        0x00,\n        0x00,\n        0x00,\n        0x01,\n        0x14,\n        0x02,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0xC0,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x46\n    ])) {\n        return {\n            ext: \"lnk\",\n            mime: \"application/x.ms.shortcut\" // Invented by us\n        };\n    }\n    if (check([\n        0x62,\n        0x6F,\n        0x6F,\n        0x6B,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x6D,\n        0x61,\n        0x72,\n        0x6B,\n        0x00,\n        0x00,\n        0x00,\n        0x00\n    ])) {\n        return {\n            ext: \"alias\",\n            mime: \"application/x.apple.alias\" // Invented by us\n        };\n    }\n    if (check([\n        0x4C,\n        0x50\n    ], {\n        offset: 34\n    }) && (check([\n        0x00,\n        0x00,\n        0x01\n    ], {\n        offset: 8\n    }) || check([\n        0x01,\n        0x00,\n        0x02\n    ], {\n        offset: 8\n    }) || check([\n        0x02,\n        0x00,\n        0x02\n    ], {\n        offset: 8\n    }))) {\n        return {\n            ext: \"eot\",\n            mime: \"application/vnd.ms-fontobject\"\n        };\n    }\n    if (check([\n        0x06,\n        0x06,\n        0xED,\n        0xF5,\n        0xD8,\n        0x1D,\n        0x46,\n        0xE5,\n        0xBD,\n        0x31,\n        0xEF,\n        0xE7,\n        0xFE,\n        0x74,\n        0xB7,\n        0x1D\n    ])) {\n        return {\n            ext: \"indd\",\n            mime: \"application/x-indesign\"\n        };\n    }\n    // Increase sample size from 256 to 512\n    await tokenizer.peekBuffer(buffer, {\n        length: Math.min(512, tokenizer.fileInfo.size),\n        mayBeLess: true\n    });\n    // Requires a buffer size of 512 bytes\n    if (tarHeaderChecksumMatches(buffer)) {\n        return {\n            ext: \"tar\",\n            mime: \"application/x-tar\"\n        };\n    }\n    if (check([\n        0xFF,\n        0xFE,\n        0xFF,\n        0x0E,\n        0x53,\n        0x00,\n        0x6B,\n        0x00,\n        0x65,\n        0x00,\n        0x74,\n        0x00,\n        0x63,\n        0x00,\n        0x68,\n        0x00,\n        0x55,\n        0x00,\n        0x70,\n        0x00,\n        0x20,\n        0x00,\n        0x4D,\n        0x00,\n        0x6F,\n        0x00,\n        0x64,\n        0x00,\n        0x65,\n        0x00,\n        0x6C,\n        0x00\n    ])) {\n        return {\n            ext: \"skp\",\n            mime: \"application/vnd.sketchup.skp\"\n        };\n    }\n    if (checkString(\"-----BEGIN PGP MESSAGE-----\")) {\n        return {\n            ext: \"pgp\",\n            mime: \"application/pgp-encrypted\"\n        };\n    }\n    // Check MPEG 1 or 2 Layer 3 header, or 'layer 0' for ADTS (MPEG sync-word 0xFFE)\n    if (buffer.length >= 2 && check([\n        0xFF,\n        0xE0\n    ], {\n        offset: 0,\n        mask: [\n            0xFF,\n            0xE0\n        ]\n    })) {\n        if (check([\n            0x10\n        ], {\n            offset: 1,\n            mask: [\n                0x16\n            ]\n        })) {\n            // Check for (ADTS) MPEG-2\n            if (check([\n                0x08\n            ], {\n                offset: 1,\n                mask: [\n                    0x08\n                ]\n            })) {\n                return {\n                    ext: \"aac\",\n                    mime: \"audio/aac\"\n                };\n            }\n            // Must be (ADTS) MPEG-4\n            return {\n                ext: \"aac\",\n                mime: \"audio/aac\"\n            };\n        }\n        // MPEG 1 or 2 Layer 3 header\n        // Check for MPEG layer 3\n        if (check([\n            0x02\n        ], {\n            offset: 1,\n            mask: [\n                0x06\n            ]\n        })) {\n            return {\n                ext: \"mp3\",\n                mime: \"audio/mpeg\"\n            };\n        }\n        // Check for MPEG layer 2\n        if (check([\n            0x04\n        ], {\n            offset: 1,\n            mask: [\n                0x06\n            ]\n        })) {\n            return {\n                ext: \"mp2\",\n                mime: \"audio/mpeg\"\n            };\n        }\n        // Check for MPEG layer 1\n        if (check([\n            0x06\n        ], {\n            offset: 1,\n            mask: [\n                0x06\n            ]\n        })) {\n            return {\n                ext: \"mp1\",\n                mime: \"audio/mpeg\"\n            };\n        }\n    }\n}\nconst stream = (readableStream)=>new Promise((resolve, reject)=>{\n        // Using `eval` to work around issues when bundling with Webpack\n        const stream = eval(\"require\")(\"stream\"); // eslint-disable-line no-eval\n        readableStream.on(\"error\", reject);\n        readableStream.once(\"readable\", async ()=>{\n            // Set up output stream\n            const pass = new stream.PassThrough();\n            let outputStream;\n            if (stream.pipeline) {\n                outputStream = stream.pipeline(readableStream, pass, ()=>{});\n            } else {\n                outputStream = readableStream.pipe(pass);\n            }\n            // Read the input stream and detect the filetype\n            const chunk = readableStream.read(minimumBytes) || readableStream.read() || Buffer.alloc(0);\n            try {\n                const fileType1 = await fromBuffer(chunk);\n                pass.fileType = fileType1;\n            } catch (error) {\n                reject(error);\n            }\n            resolve(outputStream);\n        });\n    });\nconst fileType = {\n    fromStream,\n    fromTokenizer,\n    fromBuffer,\n    stream\n};\nObject.defineProperty(fileType, \"extensions\", {\n    get () {\n        return new Set(supported.extensions);\n    }\n});\nObject.defineProperty(fileType, \"mimeTypes\", {\n    get () {\n        return new Set(supported.mimeTypes);\n    }\n});\nmodule.exports = fileType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/file-type/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/file-type/index.js":
/*!*****************************************!*\
  !*** ./node_modules/file-type/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst strtok3 = __webpack_require__(/*! strtok3 */ \"(ssr)/./node_modules/strtok3/lib/index.js\");\nconst core = __webpack_require__(/*! ./core */ \"(ssr)/./node_modules/file-type/core.js\");\nasync function fromFile(path) {\n    const tokenizer = await strtok3.fromFile(path);\n    try {\n        return await core.fromTokenizer(tokenizer);\n    } finally{\n        await tokenizer.close();\n    }\n}\nconst fileType = {\n    fromFile\n};\nObject.assign(fileType, core);\nObject.defineProperty(fileType, \"extensions\", {\n    get () {\n        return core.extensions;\n    }\n});\nObject.defineProperty(fileType, \"mimeTypes\", {\n    get () {\n        return core.mimeTypes;\n    }\n});\nmodule.exports = fileType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmlsZS10eXBlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTUEsVUFBVUMsbUJBQU9BLENBQUM7QUFDeEIsTUFBTUMsT0FBT0QsbUJBQU9BLENBQUM7QUFFckIsZUFBZUUsU0FBU0MsSUFBSTtJQUMzQixNQUFNQyxZQUFZLE1BQU1MLFFBQVFHLFFBQVEsQ0FBQ0M7SUFDekMsSUFBSTtRQUNILE9BQU8sTUFBTUYsS0FBS0ksYUFBYSxDQUFDRDtJQUNqQyxTQUFVO1FBQ1QsTUFBTUEsVUFBVUUsS0FBSztJQUN0QjtBQUNEO0FBRUEsTUFBTUMsV0FBVztJQUNoQkw7QUFDRDtBQUVBTSxPQUFPQyxNQUFNLENBQUNGLFVBQVVOO0FBRXhCTyxPQUFPRSxjQUFjLENBQUNILFVBQVUsY0FBYztJQUM3Q0k7UUFDQyxPQUFPVixLQUFLVyxVQUFVO0lBQ3ZCO0FBQ0Q7QUFFQUosT0FBT0UsY0FBYyxDQUFDSCxVQUFVLGFBQWE7SUFDNUNJO1FBQ0MsT0FBT1YsS0FBS1ksU0FBUztJQUN0QjtBQUNEO0FBRUFDLE9BQU9DLE9BQU8sR0FBR1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xci1jb2RlLy4vbm9kZV9tb2R1bGVzL2ZpbGUtdHlwZS9pbmRleC5qcz82NzM3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IHN0cnRvazMgPSByZXF1aXJlKCdzdHJ0b2szJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnLi9jb3JlJyk7XG5cbmFzeW5jIGZ1bmN0aW9uIGZyb21GaWxlKHBhdGgpIHtcblx0Y29uc3QgdG9rZW5pemVyID0gYXdhaXQgc3RydG9rMy5mcm9tRmlsZShwYXRoKTtcblx0dHJ5IHtcblx0XHRyZXR1cm4gYXdhaXQgY29yZS5mcm9tVG9rZW5pemVyKHRva2VuaXplcik7XG5cdH0gZmluYWxseSB7XG5cdFx0YXdhaXQgdG9rZW5pemVyLmNsb3NlKCk7XG5cdH1cbn1cblxuY29uc3QgZmlsZVR5cGUgPSB7XG5cdGZyb21GaWxlXG59O1xuXG5PYmplY3QuYXNzaWduKGZpbGVUeXBlLCBjb3JlKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpbGVUeXBlLCAnZXh0ZW5zaW9ucycsIHtcblx0Z2V0KCkge1xuXHRcdHJldHVybiBjb3JlLmV4dGVuc2lvbnM7XG5cdH1cbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZmlsZVR5cGUsICdtaW1lVHlwZXMnLCB7XG5cdGdldCgpIHtcblx0XHRyZXR1cm4gY29yZS5taW1lVHlwZXM7XG5cdH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbGVUeXBlO1xuIl0sIm5hbWVzIjpbInN0cnRvazMiLCJyZXF1aXJlIiwiY29yZSIsImZyb21GaWxlIiwicGF0aCIsInRva2VuaXplciIsImZyb21Ub2tlbml6ZXIiLCJjbG9zZSIsImZpbGVUeXBlIiwiT2JqZWN0IiwiYXNzaWduIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJleHRlbnNpb25zIiwibWltZVR5cGVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/file-type/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/file-type/supported.js":
/*!*********************************************!*\
  !*** ./node_modules/file-type/supported.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    extensions: [\n        \"jpg\",\n        \"png\",\n        \"apng\",\n        \"gif\",\n        \"webp\",\n        \"flif\",\n        \"xcf\",\n        \"cr2\",\n        \"cr3\",\n        \"orf\",\n        \"arw\",\n        \"dng\",\n        \"nef\",\n        \"rw2\",\n        \"raf\",\n        \"tif\",\n        \"bmp\",\n        \"icns\",\n        \"jxr\",\n        \"psd\",\n        \"indd\",\n        \"zip\",\n        \"tar\",\n        \"rar\",\n        \"gz\",\n        \"bz2\",\n        \"7z\",\n        \"dmg\",\n        \"mp4\",\n        \"mid\",\n        \"mkv\",\n        \"webm\",\n        \"mov\",\n        \"avi\",\n        \"mpg\",\n        \"mp2\",\n        \"mp3\",\n        \"m4a\",\n        \"oga\",\n        \"ogg\",\n        \"ogv\",\n        \"opus\",\n        \"flac\",\n        \"wav\",\n        \"spx\",\n        \"amr\",\n        \"pdf\",\n        \"epub\",\n        \"exe\",\n        \"swf\",\n        \"rtf\",\n        \"wasm\",\n        \"woff\",\n        \"woff2\",\n        \"eot\",\n        \"ttf\",\n        \"otf\",\n        \"ico\",\n        \"flv\",\n        \"ps\",\n        \"xz\",\n        \"sqlite\",\n        \"nes\",\n        \"crx\",\n        \"xpi\",\n        \"cab\",\n        \"deb\",\n        \"ar\",\n        \"rpm\",\n        \"Z\",\n        \"lz\",\n        \"cfb\",\n        \"mxf\",\n        \"mts\",\n        \"blend\",\n        \"bpg\",\n        \"docx\",\n        \"pptx\",\n        \"xlsx\",\n        \"3gp\",\n        \"3g2\",\n        \"jp2\",\n        \"jpm\",\n        \"jpx\",\n        \"mj2\",\n        \"aif\",\n        \"qcp\",\n        \"odt\",\n        \"ods\",\n        \"odp\",\n        \"xml\",\n        \"mobi\",\n        \"heic\",\n        \"cur\",\n        \"ktx\",\n        \"ape\",\n        \"wv\",\n        \"dcm\",\n        \"ics\",\n        \"glb\",\n        \"pcap\",\n        \"dsf\",\n        \"lnk\",\n        \"alias\",\n        \"voc\",\n        \"ac3\",\n        \"m4v\",\n        \"m4p\",\n        \"m4b\",\n        \"f4v\",\n        \"f4p\",\n        \"f4b\",\n        \"f4a\",\n        \"mie\",\n        \"asf\",\n        \"ogm\",\n        \"ogx\",\n        \"mpc\",\n        \"arrow\",\n        \"shp\",\n        \"aac\",\n        \"mp1\",\n        \"it\",\n        \"s3m\",\n        \"xm\",\n        \"ai\",\n        \"skp\",\n        \"avif\",\n        \"eps\",\n        \"lzh\",\n        \"pgp\",\n        \"asar\",\n        \"stl\",\n        \"chm\",\n        \"3mf\",\n        \"zst\",\n        \"jxl\",\n        \"vcf\"\n    ],\n    mimeTypes: [\n        \"image/jpeg\",\n        \"image/png\",\n        \"image/gif\",\n        \"image/webp\",\n        \"image/flif\",\n        \"image/x-xcf\",\n        \"image/x-canon-cr2\",\n        \"image/x-canon-cr3\",\n        \"image/tiff\",\n        \"image/bmp\",\n        \"image/vnd.ms-photo\",\n        \"image/vnd.adobe.photoshop\",\n        \"application/x-indesign\",\n        \"application/epub+zip\",\n        \"application/x-xpinstall\",\n        \"application/vnd.oasis.opendocument.text\",\n        \"application/vnd.oasis.opendocument.spreadsheet\",\n        \"application/vnd.oasis.opendocument.presentation\",\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        \"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n        \"application/zip\",\n        \"application/x-tar\",\n        \"application/x-rar-compressed\",\n        \"application/gzip\",\n        \"application/x-bzip2\",\n        \"application/x-7z-compressed\",\n        \"application/x-apple-diskimage\",\n        \"application/x-apache-arrow\",\n        \"video/mp4\",\n        \"audio/midi\",\n        \"video/x-matroska\",\n        \"video/webm\",\n        \"video/quicktime\",\n        \"video/vnd.avi\",\n        \"audio/vnd.wave\",\n        \"audio/qcelp\",\n        \"audio/x-ms-asf\",\n        \"video/x-ms-asf\",\n        \"application/vnd.ms-asf\",\n        \"video/mpeg\",\n        \"video/3gpp\",\n        \"audio/mpeg\",\n        \"audio/mp4\",\n        \"audio/opus\",\n        \"video/ogg\",\n        \"audio/ogg\",\n        \"application/ogg\",\n        \"audio/x-flac\",\n        \"audio/ape\",\n        \"audio/wavpack\",\n        \"audio/amr\",\n        \"application/pdf\",\n        \"application/x-msdownload\",\n        \"application/x-shockwave-flash\",\n        \"application/rtf\",\n        \"application/wasm\",\n        \"font/woff\",\n        \"font/woff2\",\n        \"application/vnd.ms-fontobject\",\n        \"font/ttf\",\n        \"font/otf\",\n        \"image/x-icon\",\n        \"video/x-flv\",\n        \"application/postscript\",\n        \"application/eps\",\n        \"application/x-xz\",\n        \"application/x-sqlite3\",\n        \"application/x-nintendo-nes-rom\",\n        \"application/x-google-chrome-extension\",\n        \"application/vnd.ms-cab-compressed\",\n        \"application/x-deb\",\n        \"application/x-unix-archive\",\n        \"application/x-rpm\",\n        \"application/x-compress\",\n        \"application/x-lzip\",\n        \"application/x-cfb\",\n        \"application/x-mie\",\n        \"application/mxf\",\n        \"video/mp2t\",\n        \"application/x-blender\",\n        \"image/bpg\",\n        \"image/jp2\",\n        \"image/jpx\",\n        \"image/jpm\",\n        \"image/mj2\",\n        \"audio/aiff\",\n        \"application/xml\",\n        \"application/x-mobipocket-ebook\",\n        \"image/heif\",\n        \"image/heif-sequence\",\n        \"image/heic\",\n        \"image/heic-sequence\",\n        \"image/icns\",\n        \"image/ktx\",\n        \"application/dicom\",\n        \"audio/x-musepack\",\n        \"text/calendar\",\n        \"text/vcard\",\n        \"model/gltf-binary\",\n        \"application/vnd.tcpdump.pcap\",\n        \"audio/x-dsf\",\n        \"application/x.ms.shortcut\",\n        \"application/x.apple.alias\",\n        \"audio/x-voc\",\n        \"audio/vnd.dolby.dd-raw\",\n        \"audio/x-m4a\",\n        \"image/apng\",\n        \"image/x-olympus-orf\",\n        \"image/x-sony-arw\",\n        \"image/x-adobe-dng\",\n        \"image/x-nikon-nef\",\n        \"image/x-panasonic-rw2\",\n        \"image/x-fujifilm-raf\",\n        \"video/x-m4v\",\n        \"video/3gpp2\",\n        \"application/x-esri-shape\",\n        \"audio/aac\",\n        \"audio/x-it\",\n        \"audio/x-s3m\",\n        \"audio/x-xm\",\n        \"video/MP1S\",\n        \"video/MP2P\",\n        \"application/vnd.sketchup.skp\",\n        \"image/avif\",\n        \"application/x-lzh-compressed\",\n        \"application/pgp-encrypted\",\n        \"application/x-asar\",\n        \"model/stl\",\n        \"application/vnd.ms-htmlhelp\",\n        \"model/3mf\",\n        \"image/jxl\",\n        \"application/zstd\"\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/file-type/supported.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/file-type/util.js":
/*!****************************************!*\
  !*** ./node_modules/file-type/util.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nexports.stringToBytes = (string)=>[\n        ...string\n    ].map((character)=>character.charCodeAt(0));\n/**\nChecks whether the TAR checksum is valid.\n\n@param {Buffer} buffer - The TAR header `[offset ... offset + 512]`.\n@param {number} offset - TAR header offset.\n@returns {boolean} `true` if the TAR checksum is valid, otherwise `false`.\n*/ exports.tarHeaderChecksumMatches = (buffer, offset = 0)=>{\n    const readSum = parseInt(buffer.toString(\"utf8\", 148, 154).replace(/\\0.*$/, \"\").trim(), 8); // Read sum in header\n    if (isNaN(readSum)) {\n        return false;\n    }\n    let sum = 8 * 0x20; // Initialize signed bit sum\n    for(let i = offset; i < offset + 148; i++){\n        sum += buffer[i];\n    }\n    for(let i = offset + 156; i < offset + 512; i++){\n        sum += buffer[i];\n    }\n    return readSum === sum;\n};\n/**\nID3 UINT32 sync-safe tokenizer token.\n28 bits (representing up to 256MB) integer, the msb is 0 to avoid \"false syncsignals\".\n*/ exports.uint32SyncSafeToken = {\n    get: (buffer, offset)=>{\n        return buffer[offset + 3] & 0x7F | buffer[offset + 2] << 7 | buffer[offset + 1] << 14 | buffer[offset] << 21;\n    },\n    len: 4\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmlsZS10eXBlL3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEscUJBQXFCLEdBQUdFLENBQUFBLFNBQVU7V0FBSUE7S0FBTyxDQUFDQyxHQUFHLENBQUNDLENBQUFBLFlBQWFBLFVBQVVDLFVBQVUsQ0FBQztBQUVwRjs7Ozs7O0FBTUEsR0FDQUwsZ0NBQWdDLEdBQUcsQ0FBQ08sUUFBUUMsU0FBUyxDQUFDO0lBQ3JELE1BQU1DLFVBQVVDLFNBQVNILE9BQU9JLFFBQVEsQ0FBQyxRQUFRLEtBQUssS0FBS0MsT0FBTyxDQUFDLFNBQVMsSUFBSUMsSUFBSSxJQUFJLElBQUkscUJBQXFCO0lBQ2pILElBQUlDLE1BQU1MLFVBQVU7UUFDbkIsT0FBTztJQUNSO0lBRUEsSUFBSU0sTUFBTSxJQUFJLE1BQU0sNEJBQTRCO0lBRWhELElBQUssSUFBSUMsSUFBSVIsUUFBUVEsSUFBSVIsU0FBUyxLQUFLUSxJQUFLO1FBQzNDRCxPQUFPUixNQUFNLENBQUNTLEVBQUU7SUFDakI7SUFFQSxJQUFLLElBQUlBLElBQUlSLFNBQVMsS0FBS1EsSUFBSVIsU0FBUyxLQUFLUSxJQUFLO1FBQ2pERCxPQUFPUixNQUFNLENBQUNTLEVBQUU7SUFDakI7SUFFQSxPQUFPUCxZQUFZTTtBQUNwQjtBQUVBOzs7QUFHQSxHQUNBZiwyQkFBMkIsR0FBRztJQUM3QmtCLEtBQUssQ0FBQ1gsUUFBUUM7UUFDYixPQUFPLE1BQU8sQ0FBQ0EsU0FBUyxFQUFFLEdBQUcsT0FBUyxNQUFPLENBQUNBLFNBQVMsRUFBRSxJQUFLLElBQU0sTUFBTyxDQUFDQSxTQUFTLEVBQUUsSUFBSyxLQUFPLE1BQU8sQ0FBQ0EsT0FBTyxJQUFLO0lBQ3hIO0lBQ0FXLEtBQUs7QUFDTiIsInNvdXJjZXMiOlsid2VicGFjazovL3FyLWNvZGUvLi9ub2RlX21vZHVsZXMvZmlsZS10eXBlL3V0aWwuanM/MjhkNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuc3RyaW5nVG9CeXRlcyA9IHN0cmluZyA9PiBbLi4uc3RyaW5nXS5tYXAoY2hhcmFjdGVyID0+IGNoYXJhY3Rlci5jaGFyQ29kZUF0KDApKTtcblxuLyoqXG5DaGVja3Mgd2hldGhlciB0aGUgVEFSIGNoZWNrc3VtIGlzIHZhbGlkLlxuXG5AcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIC0gVGhlIFRBUiBoZWFkZXIgYFtvZmZzZXQgLi4uIG9mZnNldCArIDUxMl1gLlxuQHBhcmFtIHtudW1iZXJ9IG9mZnNldCAtIFRBUiBoZWFkZXIgb2Zmc2V0LlxuQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgVEFSIGNoZWNrc3VtIGlzIHZhbGlkLCBvdGhlcndpc2UgYGZhbHNlYC5cbiovXG5leHBvcnRzLnRhckhlYWRlckNoZWNrc3VtTWF0Y2hlcyA9IChidWZmZXIsIG9mZnNldCA9IDApID0+IHtcblx0Y29uc3QgcmVhZFN1bSA9IHBhcnNlSW50KGJ1ZmZlci50b1N0cmluZygndXRmOCcsIDE0OCwgMTU0KS5yZXBsYWNlKC9cXDAuKiQvLCAnJykudHJpbSgpLCA4KTsgLy8gUmVhZCBzdW0gaW4gaGVhZGVyXG5cdGlmIChpc05hTihyZWFkU3VtKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGxldCBzdW0gPSA4ICogMHgyMDsgLy8gSW5pdGlhbGl6ZSBzaWduZWQgYml0IHN1bVxuXG5cdGZvciAobGV0IGkgPSBvZmZzZXQ7IGkgPCBvZmZzZXQgKyAxNDg7IGkrKykge1xuXHRcdHN1bSArPSBidWZmZXJbaV07XG5cdH1cblxuXHRmb3IgKGxldCBpID0gb2Zmc2V0ICsgMTU2OyBpIDwgb2Zmc2V0ICsgNTEyOyBpKyspIHtcblx0XHRzdW0gKz0gYnVmZmVyW2ldO1xuXHR9XG5cblx0cmV0dXJuIHJlYWRTdW0gPT09IHN1bTtcbn07XG5cbi8qKlxuSUQzIFVJTlQzMiBzeW5jLXNhZmUgdG9rZW5pemVyIHRva2VuLlxuMjggYml0cyAocmVwcmVzZW50aW5nIHVwIHRvIDI1Nk1CKSBpbnRlZ2VyLCB0aGUgbXNiIGlzIDAgdG8gYXZvaWQgXCJmYWxzZSBzeW5jc2lnbmFsc1wiLlxuKi9cbmV4cG9ydHMudWludDMyU3luY1NhZmVUb2tlbiA9IHtcblx0Z2V0OiAoYnVmZmVyLCBvZmZzZXQpID0+IHtcblx0XHRyZXR1cm4gKGJ1ZmZlcltvZmZzZXQgKyAzXSAmIDB4N0YpIHwgKChidWZmZXJbb2Zmc2V0ICsgMl0pIDw8IDcpIHwgKChidWZmZXJbb2Zmc2V0ICsgMV0pIDw8IDE0KSB8ICgoYnVmZmVyW29mZnNldF0pIDw8IDIxKTtcblx0fSxcblx0bGVuOiA0XG59O1xuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJzdHJpbmdUb0J5dGVzIiwic3RyaW5nIiwibWFwIiwiY2hhcmFjdGVyIiwiY2hhckNvZGVBdCIsInRhckhlYWRlckNoZWNrc3VtTWF0Y2hlcyIsImJ1ZmZlciIsIm9mZnNldCIsInJlYWRTdW0iLCJwYXJzZUludCIsInRvU3RyaW5nIiwicmVwbGFjZSIsInRyaW0iLCJpc05hTiIsInN1bSIsImkiLCJ1aW50MzJTeW5jU2FmZVRva2VuIiwiZ2V0IiwibGVuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/file-type/util.js\n");

/***/ })

};
;