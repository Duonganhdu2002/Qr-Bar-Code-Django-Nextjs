"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mkdirp";
exports.ids = ["vendor-chunks/mkdirp"];
exports.modules = {

/***/ "(ssr)/./node_modules/mkdirp/index.js":
/*!**************************************!*\
  !*** ./node_modules/mkdirp/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar path = __webpack_require__(/*! path */ \"path\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar _0777 = parseInt(\"0777\", 8);\nmodule.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;\nfunction mkdirP(p, opts, f, made) {\n    if (typeof opts === \"function\") {\n        f = opts;\n        opts = {};\n    } else if (!opts || typeof opts !== \"object\") {\n        opts = {\n            mode: opts\n        };\n    }\n    var mode = opts.mode;\n    var xfs = opts.fs || fs;\n    if (mode === undefined) {\n        mode = _0777;\n    }\n    if (!made) made = null;\n    var cb = f || /* istanbul ignore next */ function() {};\n    p = path.resolve(p);\n    xfs.mkdir(p, mode, function(er) {\n        if (!er) {\n            made = made || p;\n            return cb(null, made);\n        }\n        switch(er.code){\n            case \"ENOENT\":\n                /* istanbul ignore if */ if (path.dirname(p) === p) return cb(er);\n                mkdirP(path.dirname(p), opts, function(er, made) {\n                    /* istanbul ignore if */ if (er) cb(er, made);\n                    else mkdirP(p, opts, cb, made);\n                });\n                break;\n            // In the case of any other error, just see if there's a dir\n            // there already.  If so, then hooray!  If not, then something\n            // is borked.\n            default:\n                xfs.stat(p, function(er2, stat) {\n                    // if the stat fails, then that's super weird.\n                    // let the original error be the failure reason.\n                    if (er2 || !stat.isDirectory()) cb(er, made);\n                    else cb(null, made);\n                });\n                break;\n        }\n    });\n}\nmkdirP.sync = function sync(p, opts, made) {\n    if (!opts || typeof opts !== \"object\") {\n        opts = {\n            mode: opts\n        };\n    }\n    var mode = opts.mode;\n    var xfs = opts.fs || fs;\n    if (mode === undefined) {\n        mode = _0777;\n    }\n    if (!made) made = null;\n    p = path.resolve(p);\n    try {\n        xfs.mkdirSync(p, mode);\n        made = made || p;\n    } catch (err0) {\n        switch(err0.code){\n            case \"ENOENT\":\n                made = sync(path.dirname(p), opts, made);\n                sync(p, opts, made);\n                break;\n            // In the case of any other error, just see if there's a dir\n            // there already.  If so, then hooray!  If not, then something\n            // is borked.\n            default:\n                var stat;\n                try {\n                    stat = xfs.statSync(p);\n                } catch (err1) /* istanbul ignore next */ {\n                    throw err0;\n                }\n                /* istanbul ignore if */ if (!stat.isDirectory()) throw err0;\n                break;\n        }\n    }\n    return made;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWtkaXJwL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUNuQixJQUFJQyxLQUFLRCxtQkFBT0EsQ0FBQztBQUNqQixJQUFJRSxRQUFRQyxTQUFTLFFBQVE7QUFFN0JDLE9BQU9DLE9BQU8sR0FBR0MsT0FBT0MsTUFBTSxHQUFHRCxPQUFPQSxNQUFNLEdBQUdBO0FBRWpELFNBQVNBLE9BQVFFLENBQUMsRUFBRUMsSUFBSSxFQUFFQyxDQUFDLEVBQUVDLElBQUk7SUFDN0IsSUFBSSxPQUFPRixTQUFTLFlBQVk7UUFDNUJDLElBQUlEO1FBQ0pBLE9BQU8sQ0FBQztJQUNaLE9BQ0ssSUFBSSxDQUFDQSxRQUFRLE9BQU9BLFNBQVMsVUFBVTtRQUN4Q0EsT0FBTztZQUFFRyxNQUFNSDtRQUFLO0lBQ3hCO0lBRUEsSUFBSUcsT0FBT0gsS0FBS0csSUFBSTtJQUNwQixJQUFJQyxNQUFNSixLQUFLUixFQUFFLElBQUlBO0lBRXJCLElBQUlXLFNBQVNFLFdBQVc7UUFDcEJGLE9BQU9WO0lBQ1g7SUFDQSxJQUFJLENBQUNTLE1BQU1BLE9BQU87SUFFbEIsSUFBSUksS0FBS0wsS0FBSyx3QkFBd0IsR0FBRyxZQUFhO0lBQ3RERixJQUFJVCxLQUFLaUIsT0FBTyxDQUFDUjtJQUVqQkssSUFBSUksS0FBSyxDQUFDVCxHQUFHSSxNQUFNLFNBQVVNLEVBQUU7UUFDM0IsSUFBSSxDQUFDQSxJQUFJO1lBQ0xQLE9BQU9BLFFBQVFIO1lBQ2YsT0FBT08sR0FBRyxNQUFNSjtRQUNwQjtRQUNBLE9BQVFPLEdBQUdDLElBQUk7WUFDWCxLQUFLO2dCQUNELHNCQUFzQixHQUN0QixJQUFJcEIsS0FBS3FCLE9BQU8sQ0FBQ1osT0FBT0EsR0FBRyxPQUFPTyxHQUFHRztnQkFDckNaLE9BQU9QLEtBQUtxQixPQUFPLENBQUNaLElBQUlDLE1BQU0sU0FBVVMsRUFBRSxFQUFFUCxJQUFJO29CQUM1QyxzQkFBc0IsR0FDdEIsSUFBSU8sSUFBSUgsR0FBR0csSUFBSVA7eUJBQ1ZMLE9BQU9FLEdBQUdDLE1BQU1NLElBQUlKO2dCQUM3QjtnQkFDQTtZQUVKLDREQUE0RDtZQUM1RCw4REFBOEQ7WUFDOUQsYUFBYTtZQUNiO2dCQUNJRSxJQUFJUSxJQUFJLENBQUNiLEdBQUcsU0FBVWMsR0FBRyxFQUFFRCxJQUFJO29CQUMzQiw4Q0FBOEM7b0JBQzlDLGdEQUFnRDtvQkFDaEQsSUFBSUMsT0FBTyxDQUFDRCxLQUFLRSxXQUFXLElBQUlSLEdBQUdHLElBQUlQO3lCQUNsQ0ksR0FBRyxNQUFNSjtnQkFDbEI7Z0JBQ0E7UUFDUjtJQUNKO0FBQ0o7QUFFQUwsT0FBT2tCLElBQUksR0FBRyxTQUFTQSxLQUFNaEIsQ0FBQyxFQUFFQyxJQUFJLEVBQUVFLElBQUk7SUFDdEMsSUFBSSxDQUFDRixRQUFRLE9BQU9BLFNBQVMsVUFBVTtRQUNuQ0EsT0FBTztZQUFFRyxNQUFNSDtRQUFLO0lBQ3hCO0lBRUEsSUFBSUcsT0FBT0gsS0FBS0csSUFBSTtJQUNwQixJQUFJQyxNQUFNSixLQUFLUixFQUFFLElBQUlBO0lBRXJCLElBQUlXLFNBQVNFLFdBQVc7UUFDcEJGLE9BQU9WO0lBQ1g7SUFDQSxJQUFJLENBQUNTLE1BQU1BLE9BQU87SUFFbEJILElBQUlULEtBQUtpQixPQUFPLENBQUNSO0lBRWpCLElBQUk7UUFDQUssSUFBSVksU0FBUyxDQUFDakIsR0FBR0k7UUFDakJELE9BQU9BLFFBQVFIO0lBQ25CLEVBQ0EsT0FBT2tCLE1BQU07UUFDVCxPQUFRQSxLQUFLUCxJQUFJO1lBQ2IsS0FBSztnQkFDRFIsT0FBT2EsS0FBS3pCLEtBQUtxQixPQUFPLENBQUNaLElBQUlDLE1BQU1FO2dCQUNuQ2EsS0FBS2hCLEdBQUdDLE1BQU1FO2dCQUNkO1lBRUosNERBQTREO1lBQzVELDhEQUE4RDtZQUM5RCxhQUFhO1lBQ2I7Z0JBQ0ksSUFBSVU7Z0JBQ0osSUFBSTtvQkFDQUEsT0FBT1IsSUFBSWMsUUFBUSxDQUFDbkI7Z0JBQ3hCLEVBQ0EsT0FBT29CLE1BQU0sd0JBQXdCLEdBQUc7b0JBQ3BDLE1BQU1GO2dCQUNWO2dCQUNBLHNCQUFzQixHQUN0QixJQUFJLENBQUNMLEtBQUtFLFdBQVcsSUFBSSxNQUFNRztnQkFDL0I7UUFDUjtJQUNKO0lBRUEsT0FBT2Y7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL3FyLWNvZGUvLi9ub2RlX21vZHVsZXMvbWtkaXJwL2luZGV4LmpzP2JiZTYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIF8wNzc3ID0gcGFyc2VJbnQoJzA3NzcnLCA4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBta2RpclAubWtkaXJwID0gbWtkaXJQLm1rZGlyUCA9IG1rZGlyUDtcblxuZnVuY3Rpb24gbWtkaXJQIChwLCBvcHRzLCBmLCBtYWRlKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGYgPSBvcHRzO1xuICAgICAgICBvcHRzID0ge307XG4gICAgfVxuICAgIGVsc2UgaWYgKCFvcHRzIHx8IHR5cGVvZiBvcHRzICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBvcHRzID0geyBtb2RlOiBvcHRzIH07XG4gICAgfVxuICAgIFxuICAgIHZhciBtb2RlID0gb3B0cy5tb2RlO1xuICAgIHZhciB4ZnMgPSBvcHRzLmZzIHx8IGZzO1xuICAgIFxuICAgIGlmIChtb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbW9kZSA9IF8wNzc3XG4gICAgfVxuICAgIGlmICghbWFkZSkgbWFkZSA9IG51bGw7XG4gICAgXG4gICAgdmFyIGNiID0gZiB8fCAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbiAoKSB7fTtcbiAgICBwID0gcGF0aC5yZXNvbHZlKHApO1xuICAgIFxuICAgIHhmcy5ta2RpcihwLCBtb2RlLCBmdW5jdGlvbiAoZXIpIHtcbiAgICAgICAgaWYgKCFlcikge1xuICAgICAgICAgICAgbWFkZSA9IG1hZGUgfHwgcDtcbiAgICAgICAgICAgIHJldHVybiBjYihudWxsLCBtYWRlKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGVyLmNvZGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ0VOT0VOVCc6XG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgICAgaWYgKHBhdGguZGlybmFtZShwKSA9PT0gcCkgcmV0dXJuIGNiKGVyKTtcbiAgICAgICAgICAgICAgICBta2RpclAocGF0aC5kaXJuYW1lKHApLCBvcHRzLCBmdW5jdGlvbiAoZXIsIG1hZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcikgY2IoZXIsIG1hZGUpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIG1rZGlyUChwLCBvcHRzLCBjYiwgbWFkZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIC8vIEluIHRoZSBjYXNlIG9mIGFueSBvdGhlciBlcnJvciwganVzdCBzZWUgaWYgdGhlcmUncyBhIGRpclxuICAgICAgICAgICAgLy8gdGhlcmUgYWxyZWFkeS4gIElmIHNvLCB0aGVuIGhvb3JheSEgIElmIG5vdCwgdGhlbiBzb21ldGhpbmdcbiAgICAgICAgICAgIC8vIGlzIGJvcmtlZC5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgeGZzLnN0YXQocCwgZnVuY3Rpb24gKGVyMiwgc3RhdCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgc3RhdCBmYWlscywgdGhlbiB0aGF0J3Mgc3VwZXIgd2VpcmQuXG4gICAgICAgICAgICAgICAgICAgIC8vIGxldCB0aGUgb3JpZ2luYWwgZXJyb3IgYmUgdGhlIGZhaWx1cmUgcmVhc29uLlxuICAgICAgICAgICAgICAgICAgICBpZiAoZXIyIHx8ICFzdGF0LmlzRGlyZWN0b3J5KCkpIGNiKGVyLCBtYWRlKVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGNiKG51bGwsIG1hZGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbm1rZGlyUC5zeW5jID0gZnVuY3Rpb24gc3luYyAocCwgb3B0cywgbWFkZSkge1xuICAgIGlmICghb3B0cyB8fCB0eXBlb2Ygb3B0cyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgb3B0cyA9IHsgbW9kZTogb3B0cyB9O1xuICAgIH1cbiAgICBcbiAgICB2YXIgbW9kZSA9IG9wdHMubW9kZTtcbiAgICB2YXIgeGZzID0gb3B0cy5mcyB8fCBmcztcbiAgICBcbiAgICBpZiAobW9kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1vZGUgPSBfMDc3N1xuICAgIH1cbiAgICBpZiAoIW1hZGUpIG1hZGUgPSBudWxsO1xuXG4gICAgcCA9IHBhdGgucmVzb2x2ZShwKTtcblxuICAgIHRyeSB7XG4gICAgICAgIHhmcy5ta2RpclN5bmMocCwgbW9kZSk7XG4gICAgICAgIG1hZGUgPSBtYWRlIHx8IHA7XG4gICAgfVxuICAgIGNhdGNoIChlcnIwKSB7XG4gICAgICAgIHN3aXRjaCAoZXJyMC5jb2RlKSB7XG4gICAgICAgICAgICBjYXNlICdFTk9FTlQnIDpcbiAgICAgICAgICAgICAgICBtYWRlID0gc3luYyhwYXRoLmRpcm5hbWUocCksIG9wdHMsIG1hZGUpO1xuICAgICAgICAgICAgICAgIHN5bmMocCwgb3B0cywgbWFkZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIC8vIEluIHRoZSBjYXNlIG9mIGFueSBvdGhlciBlcnJvciwganVzdCBzZWUgaWYgdGhlcmUncyBhIGRpclxuICAgICAgICAgICAgLy8gdGhlcmUgYWxyZWFkeS4gIElmIHNvLCB0aGVuIGhvb3JheSEgIElmIG5vdCwgdGhlbiBzb21ldGhpbmdcbiAgICAgICAgICAgIC8vIGlzIGJvcmtlZC5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdmFyIHN0YXQ7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdCA9IHhmcy5zdGF0U3luYyhwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycjEpIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgICAgaWYgKCFzdGF0LmlzRGlyZWN0b3J5KCkpIHRocm93IGVycjA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWFkZTtcbn07XG4iXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJmcyIsIl8wNzc3IiwicGFyc2VJbnQiLCJtb2R1bGUiLCJleHBvcnRzIiwibWtkaXJQIiwibWtkaXJwIiwicCIsIm9wdHMiLCJmIiwibWFkZSIsIm1vZGUiLCJ4ZnMiLCJ1bmRlZmluZWQiLCJjYiIsInJlc29sdmUiLCJta2RpciIsImVyIiwiY29kZSIsImRpcm5hbWUiLCJzdGF0IiwiZXIyIiwiaXNEaXJlY3RvcnkiLCJzeW5jIiwibWtkaXJTeW5jIiwiZXJyMCIsInN0YXRTeW5jIiwiZXJyMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mkdirp/index.js\n");

/***/ })

};
;