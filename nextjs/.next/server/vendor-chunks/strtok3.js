"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/strtok3";
exports.ids = ["vendor-chunks/strtok3"];
exports.modules = {

/***/ "(ssr)/./node_modules/strtok3/lib/AbstractTokenizer.js":
/*!*******************************************************!*\
  !*** ./node_modules/strtok3/lib/AbstractTokenizer.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AbstractTokenizer = void 0;\nconst peek_readable_1 = __webpack_require__(/*! peek-readable */ \"(ssr)/./node_modules/peek-readable/lib/index.js\");\n/**\r\n * Core tokenizer\r\n */ class AbstractTokenizer {\n    constructor(fileInfo){\n        /**\r\n         * Tokenizer-stream position\r\n         */ this.position = 0;\n        this.numBuffer = new Uint8Array(8);\n        this.fileInfo = fileInfo ? fileInfo : {};\n    }\n    /**\r\n     * Read a token from the tokenizer-stream\r\n     * @param token - The token to read\r\n     * @param position - If provided, the desired position in the tokenizer-stream\r\n     * @returns Promise with token data\r\n     */ async readToken(token, position = this.position) {\n        const uint8Array = Buffer.alloc(token.len);\n        const len = await this.readBuffer(uint8Array, {\n            position\n        });\n        if (len < token.len) throw new peek_readable_1.EndOfStreamError();\n        return token.get(uint8Array, 0);\n    }\n    /**\r\n     * Peek a token from the tokenizer-stream.\r\n     * @param token - Token to peek from the tokenizer-stream.\r\n     * @param position - Offset where to begin reading within the file. If position is null, data will be read from the current file position.\r\n     * @returns Promise with token data\r\n     */ async peekToken(token, position = this.position) {\n        const uint8Array = Buffer.alloc(token.len);\n        const len = await this.peekBuffer(uint8Array, {\n            position\n        });\n        if (len < token.len) throw new peek_readable_1.EndOfStreamError();\n        return token.get(uint8Array, 0);\n    }\n    /**\r\n     * Read a numeric token from the stream\r\n     * @param token - Numeric token\r\n     * @returns Promise with number\r\n     */ async readNumber(token) {\n        const len = await this.readBuffer(this.numBuffer, {\n            length: token.len\n        });\n        if (len < token.len) throw new peek_readable_1.EndOfStreamError();\n        return token.get(this.numBuffer, 0);\n    }\n    /**\r\n     * Read a numeric token from the stream\r\n     * @param token - Numeric token\r\n     * @returns Promise with number\r\n     */ async peekNumber(token) {\n        const len = await this.peekBuffer(this.numBuffer, {\n            length: token.len\n        });\n        if (len < token.len) throw new peek_readable_1.EndOfStreamError();\n        return token.get(this.numBuffer, 0);\n    }\n    /**\r\n     * Ignore number of bytes, advances the pointer in under tokenizer-stream.\r\n     * @param length - Number of bytes to ignore\r\n     * @return resolves the number of bytes ignored, equals length if this available, otherwise the number of bytes available\r\n     */ async ignore(length) {\n        if (this.fileInfo.size !== undefined) {\n            const bytesLeft = this.fileInfo.size - this.position;\n            if (length > bytesLeft) {\n                this.position += bytesLeft;\n                return bytesLeft;\n            }\n        }\n        this.position += length;\n        return length;\n    }\n    async close() {\n    // empty\n    }\n    normalizeOptions(uint8Array, options) {\n        if (options && options.position !== undefined && options.position < this.position) {\n            throw new Error(\"`options.position` must be equal or greater than `tokenizer.position`\");\n        }\n        if (options) {\n            return {\n                mayBeLess: options.mayBeLess === true,\n                offset: options.offset ? options.offset : 0,\n                length: options.length ? options.length : uint8Array.length - (options.offset ? options.offset : 0),\n                position: options.position ? options.position : this.position\n            };\n        }\n        return {\n            mayBeLess: false,\n            offset: 0,\n            length: uint8Array.length,\n            position: this.position\n        };\n    }\n}\nexports.AbstractTokenizer = AbstractTokenizer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/strtok3/lib/AbstractTokenizer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/strtok3/lib/BufferTokenizer.js":
/*!*****************************************************!*\
  !*** ./node_modules/strtok3/lib/BufferTokenizer.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BufferTokenizer = void 0;\nconst peek_readable_1 = __webpack_require__(/*! peek-readable */ \"(ssr)/./node_modules/peek-readable/lib/index.js\");\nconst AbstractTokenizer_1 = __webpack_require__(/*! ./AbstractTokenizer */ \"(ssr)/./node_modules/strtok3/lib/AbstractTokenizer.js\");\nclass BufferTokenizer extends AbstractTokenizer_1.AbstractTokenizer {\n    /**\r\n     * Construct BufferTokenizer\r\n     * @param uint8Array - Uint8Array to tokenize\r\n     * @param fileInfo - Pass additional file information to the tokenizer\r\n     */ constructor(uint8Array, fileInfo){\n        super(fileInfo);\n        this.uint8Array = uint8Array;\n        this.fileInfo.size = this.fileInfo.size ? this.fileInfo.size : uint8Array.length;\n    }\n    /**\r\n     * Read buffer from tokenizer\r\n     * @param uint8Array - Uint8Array to tokenize\r\n     * @param options - Read behaviour options\r\n     * @returns {Promise<number>}\r\n     */ async readBuffer(uint8Array, options) {\n        if (options && options.position) {\n            if (options.position < this.position) {\n                throw new Error(\"`options.position` must be equal or greater than `tokenizer.position`\");\n            }\n            this.position = options.position;\n        }\n        const bytesRead = await this.peekBuffer(uint8Array, options);\n        this.position += bytesRead;\n        return bytesRead;\n    }\n    /**\r\n     * Peek (read ahead) buffer from tokenizer\r\n     * @param uint8Array\r\n     * @param options - Read behaviour options\r\n     * @returns {Promise<number>}\r\n     */ async peekBuffer(uint8Array, options) {\n        const normOptions = this.normalizeOptions(uint8Array, options);\n        const bytes2read = Math.min(this.uint8Array.length - normOptions.position, normOptions.length);\n        if (!normOptions.mayBeLess && bytes2read < normOptions.length) {\n            throw new peek_readable_1.EndOfStreamError();\n        } else {\n            uint8Array.set(this.uint8Array.subarray(normOptions.position, normOptions.position + bytes2read), normOptions.offset);\n            return bytes2read;\n        }\n    }\n    async close() {\n    // empty\n    }\n}\nexports.BufferTokenizer = BufferTokenizer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RydG9rMy9saWIvQnVmZmVyVG9rZW5pemVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx1QkFBdUIsR0FBRyxLQUFLO0FBQy9CLE1BQU1HLGtCQUFrQkMsbUJBQU9BLENBQUMsc0VBQWU7QUFDL0MsTUFBTUMsc0JBQXNCRCxtQkFBT0EsQ0FBQyxrRkFBcUI7QUFDekQsTUFBTUYsd0JBQXdCRyxvQkFBb0JDLGlCQUFpQjtJQUMvRDs7OztLQUlDLEdBQ0RDLFlBQVlDLFVBQVUsRUFBRUMsUUFBUSxDQUFFO1FBQzlCLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNELFVBQVUsR0FBR0E7UUFDbEIsSUFBSSxDQUFDQyxRQUFRLENBQUNDLElBQUksR0FBRyxJQUFJLENBQUNELFFBQVEsQ0FBQ0MsSUFBSSxHQUFHLElBQUksQ0FBQ0QsUUFBUSxDQUFDQyxJQUFJLEdBQUdGLFdBQVdHLE1BQU07SUFDcEY7SUFDQTs7Ozs7S0FLQyxHQUNELE1BQU1DLFdBQVdKLFVBQVUsRUFBRUssT0FBTyxFQUFFO1FBQ2xDLElBQUlBLFdBQVdBLFFBQVFDLFFBQVEsRUFBRTtZQUM3QixJQUFJRCxRQUFRQyxRQUFRLEdBQUcsSUFBSSxDQUFDQSxRQUFRLEVBQUU7Z0JBQ2xDLE1BQU0sSUFBSUMsTUFBTTtZQUNwQjtZQUNBLElBQUksQ0FBQ0QsUUFBUSxHQUFHRCxRQUFRQyxRQUFRO1FBQ3BDO1FBQ0EsTUFBTUUsWUFBWSxNQUFNLElBQUksQ0FBQ0MsVUFBVSxDQUFDVCxZQUFZSztRQUNwRCxJQUFJLENBQUNDLFFBQVEsSUFBSUU7UUFDakIsT0FBT0E7SUFDWDtJQUNBOzs7OztLQUtDLEdBQ0QsTUFBTUMsV0FBV1QsVUFBVSxFQUFFSyxPQUFPLEVBQUU7UUFDbEMsTUFBTUssY0FBYyxJQUFJLENBQUNDLGdCQUFnQixDQUFDWCxZQUFZSztRQUN0RCxNQUFNTyxhQUFhQyxLQUFLQyxHQUFHLENBQUMsSUFBSSxDQUFDZCxVQUFVLENBQUNHLE1BQU0sR0FBR08sWUFBWUosUUFBUSxFQUFFSSxZQUFZUCxNQUFNO1FBQzdGLElBQUksQ0FBRU8sWUFBWUssU0FBUyxJQUFLSCxhQUFhRixZQUFZUCxNQUFNLEVBQUU7WUFDN0QsTUFBTSxJQUFJUixnQkFBZ0JxQixnQkFBZ0I7UUFDOUMsT0FDSztZQUNEaEIsV0FBV2lCLEdBQUcsQ0FBQyxJQUFJLENBQUNqQixVQUFVLENBQUNrQixRQUFRLENBQUNSLFlBQVlKLFFBQVEsRUFBRUksWUFBWUosUUFBUSxHQUFHTSxhQUFhRixZQUFZUyxNQUFNO1lBQ3BILE9BQU9QO1FBQ1g7SUFDSjtJQUNBLE1BQU1RLFFBQVE7SUFDVixRQUFRO0lBQ1o7QUFDSjtBQUNBNUIsdUJBQXVCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXItY29kZS8uL25vZGVfbW9kdWxlcy9zdHJ0b2szL2xpYi9CdWZmZXJUb2tlbml6ZXIuanM/ZTQ5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkJ1ZmZlclRva2VuaXplciA9IHZvaWQgMDtcclxuY29uc3QgcGVla19yZWFkYWJsZV8xID0gcmVxdWlyZShcInBlZWstcmVhZGFibGVcIik7XHJcbmNvbnN0IEFic3RyYWN0VG9rZW5pemVyXzEgPSByZXF1aXJlKFwiLi9BYnN0cmFjdFRva2VuaXplclwiKTtcclxuY2xhc3MgQnVmZmVyVG9rZW5pemVyIGV4dGVuZHMgQWJzdHJhY3RUb2tlbml6ZXJfMS5BYnN0cmFjdFRva2VuaXplciB7XHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdCBCdWZmZXJUb2tlbml6ZXJcclxuICAgICAqIEBwYXJhbSB1aW50OEFycmF5IC0gVWludDhBcnJheSB0byB0b2tlbml6ZVxyXG4gICAgICogQHBhcmFtIGZpbGVJbmZvIC0gUGFzcyBhZGRpdGlvbmFsIGZpbGUgaW5mb3JtYXRpb24gdG8gdGhlIHRva2VuaXplclxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih1aW50OEFycmF5LCBmaWxlSW5mbykge1xyXG4gICAgICAgIHN1cGVyKGZpbGVJbmZvKTtcclxuICAgICAgICB0aGlzLnVpbnQ4QXJyYXkgPSB1aW50OEFycmF5O1xyXG4gICAgICAgIHRoaXMuZmlsZUluZm8uc2l6ZSA9IHRoaXMuZmlsZUluZm8uc2l6ZSA/IHRoaXMuZmlsZUluZm8uc2l6ZSA6IHVpbnQ4QXJyYXkubGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkIGJ1ZmZlciBmcm9tIHRva2VuaXplclxyXG4gICAgICogQHBhcmFtIHVpbnQ4QXJyYXkgLSBVaW50OEFycmF5IHRvIHRva2VuaXplXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFJlYWQgYmVoYXZpb3VyIG9wdGlvbnNcclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPG51bWJlcj59XHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHJlYWRCdWZmZXIodWludDhBcnJheSwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucG9zaXRpb24pIHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMucG9zaXRpb24gPCB0aGlzLnBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BvcHRpb25zLnBvc2l0aW9uYCBtdXN0IGJlIGVxdWFsIG9yIGdyZWF0ZXIgdGhhbiBgdG9rZW5pemVyLnBvc2l0aW9uYCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBvcHRpb25zLnBvc2l0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBieXRlc1JlYWQgPSBhd2FpdCB0aGlzLnBlZWtCdWZmZXIodWludDhBcnJheSwgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSBieXRlc1JlYWQ7XHJcbiAgICAgICAgcmV0dXJuIGJ5dGVzUmVhZDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGVlayAocmVhZCBhaGVhZCkgYnVmZmVyIGZyb20gdG9rZW5pemVyXHJcbiAgICAgKiBAcGFyYW0gdWludDhBcnJheVxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBSZWFkIGJlaGF2aW91ciBvcHRpb25zXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxudW1iZXI+fVxyXG4gICAgICovXHJcbiAgICBhc3luYyBwZWVrQnVmZmVyKHVpbnQ4QXJyYXksIG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBub3JtT3B0aW9ucyA9IHRoaXMubm9ybWFsaXplT3B0aW9ucyh1aW50OEFycmF5LCBvcHRpb25zKTtcclxuICAgICAgICBjb25zdCBieXRlczJyZWFkID0gTWF0aC5taW4odGhpcy51aW50OEFycmF5Lmxlbmd0aCAtIG5vcm1PcHRpb25zLnBvc2l0aW9uLCBub3JtT3B0aW9ucy5sZW5ndGgpO1xyXG4gICAgICAgIGlmICgoIW5vcm1PcHRpb25zLm1heUJlTGVzcykgJiYgYnl0ZXMycmVhZCA8IG5vcm1PcHRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgcGVla19yZWFkYWJsZV8xLkVuZE9mU3RyZWFtRXJyb3IoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHVpbnQ4QXJyYXkuc2V0KHRoaXMudWludDhBcnJheS5zdWJhcnJheShub3JtT3B0aW9ucy5wb3NpdGlvbiwgbm9ybU9wdGlvbnMucG9zaXRpb24gKyBieXRlczJyZWFkKSwgbm9ybU9wdGlvbnMub2Zmc2V0KTtcclxuICAgICAgICAgICAgcmV0dXJuIGJ5dGVzMnJlYWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYXN5bmMgY2xvc2UoKSB7XHJcbiAgICAgICAgLy8gZW1wdHlcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkJ1ZmZlclRva2VuaXplciA9IEJ1ZmZlclRva2VuaXplcjtcclxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQnVmZmVyVG9rZW5pemVyIiwicGVla19yZWFkYWJsZV8xIiwicmVxdWlyZSIsIkFic3RyYWN0VG9rZW5pemVyXzEiLCJBYnN0cmFjdFRva2VuaXplciIsImNvbnN0cnVjdG9yIiwidWludDhBcnJheSIsImZpbGVJbmZvIiwic2l6ZSIsImxlbmd0aCIsInJlYWRCdWZmZXIiLCJvcHRpb25zIiwicG9zaXRpb24iLCJFcnJvciIsImJ5dGVzUmVhZCIsInBlZWtCdWZmZXIiLCJub3JtT3B0aW9ucyIsIm5vcm1hbGl6ZU9wdGlvbnMiLCJieXRlczJyZWFkIiwiTWF0aCIsIm1pbiIsIm1heUJlTGVzcyIsIkVuZE9mU3RyZWFtRXJyb3IiLCJzZXQiLCJzdWJhcnJheSIsIm9mZnNldCIsImNsb3NlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/strtok3/lib/BufferTokenizer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/strtok3/lib/FileTokenizer.js":
/*!***************************************************!*\
  !*** ./node_modules/strtok3/lib/FileTokenizer.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fromFile = exports.FileTokenizer = void 0;\nconst AbstractTokenizer_1 = __webpack_require__(/*! ./AbstractTokenizer */ \"(ssr)/./node_modules/strtok3/lib/AbstractTokenizer.js\");\nconst peek_readable_1 = __webpack_require__(/*! peek-readable */ \"(ssr)/./node_modules/peek-readable/lib/index.js\");\nconst fs = __webpack_require__(/*! ./FsPromise */ \"(ssr)/./node_modules/strtok3/lib/FsPromise.js\");\nclass FileTokenizer extends AbstractTokenizer_1.AbstractTokenizer {\n    constructor(fd, fileInfo){\n        super(fileInfo);\n        this.fd = fd;\n    }\n    /**\r\n     * Read buffer from file\r\n     * @param uint8Array - Uint8Array to write result to\r\n     * @param options - Read behaviour options\r\n     * @returns Promise number of bytes read\r\n     */ async readBuffer(uint8Array, options) {\n        const normOptions = this.normalizeOptions(uint8Array, options);\n        this.position = normOptions.position;\n        const res = await fs.read(this.fd, uint8Array, normOptions.offset, normOptions.length, normOptions.position);\n        this.position += res.bytesRead;\n        if (res.bytesRead < normOptions.length && (!options || !options.mayBeLess)) {\n            throw new peek_readable_1.EndOfStreamError();\n        }\n        return res.bytesRead;\n    }\n    /**\r\n     * Peek buffer from file\r\n     * @param uint8Array - Uint8Array (or Buffer) to write data to\r\n     * @param options - Read behaviour options\r\n     * @returns Promise number of bytes read\r\n     */ async peekBuffer(uint8Array, options) {\n        const normOptions = this.normalizeOptions(uint8Array, options);\n        const res = await fs.read(this.fd, uint8Array, normOptions.offset, normOptions.length, normOptions.position);\n        if (!normOptions.mayBeLess && res.bytesRead < normOptions.length) {\n            throw new peek_readable_1.EndOfStreamError();\n        }\n        return res.bytesRead;\n    }\n    async close() {\n        return fs.close(this.fd);\n    }\n}\nexports.FileTokenizer = FileTokenizer;\nasync function fromFile(sourceFilePath) {\n    const stat = await fs.stat(sourceFilePath);\n    if (!stat.isFile) {\n        throw new Error(`File not a file: ${sourceFilePath}`);\n    }\n    const fd = await fs.open(sourceFilePath, \"r\");\n    return new FileTokenizer(fd, {\n        path: sourceFilePath,\n        size: stat.size\n    });\n}\nexports.fromFile = fromFile;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RydG9rMy9saWIvRmlsZVRva2VuaXplci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0JBQWdCLEdBQUdBLHFCQUFxQixHQUFHLEtBQUs7QUFDaEQsTUFBTUksc0JBQXNCQyxtQkFBT0EsQ0FBQyxrRkFBcUI7QUFDekQsTUFBTUMsa0JBQWtCRCxtQkFBT0EsQ0FBQyxzRUFBZTtBQUMvQyxNQUFNRSxLQUFLRixtQkFBT0EsQ0FBQyxrRUFBYTtBQUNoQyxNQUFNRixzQkFBc0JDLG9CQUFvQkksaUJBQWlCO0lBQzdEQyxZQUFZQyxFQUFFLEVBQUVDLFFBQVEsQ0FBRTtRQUN0QixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDRCxFQUFFLEdBQUdBO0lBQ2Q7SUFDQTs7Ozs7S0FLQyxHQUNELE1BQU1FLFdBQVdDLFVBQVUsRUFBRUMsT0FBTyxFQUFFO1FBQ2xDLE1BQU1DLGNBQWMsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQ0gsWUFBWUM7UUFDdEQsSUFBSSxDQUFDRyxRQUFRLEdBQUdGLFlBQVlFLFFBQVE7UUFDcEMsTUFBTUMsTUFBTSxNQUFNWCxHQUFHWSxJQUFJLENBQUMsSUFBSSxDQUFDVCxFQUFFLEVBQUVHLFlBQVlFLFlBQVlLLE1BQU0sRUFBRUwsWUFBWU0sTUFBTSxFQUFFTixZQUFZRSxRQUFRO1FBQzNHLElBQUksQ0FBQ0EsUUFBUSxJQUFJQyxJQUFJSSxTQUFTO1FBQzlCLElBQUlKLElBQUlJLFNBQVMsR0FBR1AsWUFBWU0sTUFBTSxJQUFLLEVBQUNQLFdBQVcsQ0FBQ0EsUUFBUVMsU0FBUyxHQUFHO1lBQ3hFLE1BQU0sSUFBSWpCLGdCQUFnQmtCLGdCQUFnQjtRQUM5QztRQUNBLE9BQU9OLElBQUlJLFNBQVM7SUFDeEI7SUFDQTs7Ozs7S0FLQyxHQUNELE1BQU1HLFdBQVdaLFVBQVUsRUFBRUMsT0FBTyxFQUFFO1FBQ2xDLE1BQU1DLGNBQWMsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQ0gsWUFBWUM7UUFDdEQsTUFBTUksTUFBTSxNQUFNWCxHQUFHWSxJQUFJLENBQUMsSUFBSSxDQUFDVCxFQUFFLEVBQUVHLFlBQVlFLFlBQVlLLE1BQU0sRUFBRUwsWUFBWU0sTUFBTSxFQUFFTixZQUFZRSxRQUFRO1FBQzNHLElBQUksQ0FBRUYsWUFBWVEsU0FBUyxJQUFLTCxJQUFJSSxTQUFTLEdBQUdQLFlBQVlNLE1BQU0sRUFBRTtZQUNoRSxNQUFNLElBQUlmLGdCQUFnQmtCLGdCQUFnQjtRQUM5QztRQUNBLE9BQU9OLElBQUlJLFNBQVM7SUFDeEI7SUFDQSxNQUFNSSxRQUFRO1FBQ1YsT0FBT25CLEdBQUdtQixLQUFLLENBQUMsSUFBSSxDQUFDaEIsRUFBRTtJQUMzQjtBQUNKO0FBQ0FWLHFCQUFxQixHQUFHRztBQUN4QixlQUFlRCxTQUFTeUIsY0FBYztJQUNsQyxNQUFNQyxPQUFPLE1BQU1yQixHQUFHcUIsSUFBSSxDQUFDRDtJQUMzQixJQUFJLENBQUNDLEtBQUtDLE1BQU0sRUFBRTtRQUNkLE1BQU0sSUFBSUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFSCxlQUFlLENBQUM7SUFDeEQ7SUFDQSxNQUFNakIsS0FBSyxNQUFNSCxHQUFHd0IsSUFBSSxDQUFDSixnQkFBZ0I7SUFDekMsT0FBTyxJQUFJeEIsY0FBY08sSUFBSTtRQUFFc0IsTUFBTUw7UUFBZ0JNLE1BQU1MLEtBQUtLLElBQUk7SUFBQztBQUN6RTtBQUNBakMsZ0JBQWdCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXItY29kZS8uL25vZGVfbW9kdWxlcy9zdHJ0b2szL2xpYi9GaWxlVG9rZW5pemVyLmpzP2UwNTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5mcm9tRmlsZSA9IGV4cG9ydHMuRmlsZVRva2VuaXplciA9IHZvaWQgMDtcclxuY29uc3QgQWJzdHJhY3RUb2tlbml6ZXJfMSA9IHJlcXVpcmUoXCIuL0Fic3RyYWN0VG9rZW5pemVyXCIpO1xyXG5jb25zdCBwZWVrX3JlYWRhYmxlXzEgPSByZXF1aXJlKFwicGVlay1yZWFkYWJsZVwiKTtcclxuY29uc3QgZnMgPSByZXF1aXJlKFwiLi9Gc1Byb21pc2VcIik7XHJcbmNsYXNzIEZpbGVUb2tlbml6ZXIgZXh0ZW5kcyBBYnN0cmFjdFRva2VuaXplcl8xLkFic3RyYWN0VG9rZW5pemVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGZkLCBmaWxlSW5mbykge1xyXG4gICAgICAgIHN1cGVyKGZpbGVJbmZvKTtcclxuICAgICAgICB0aGlzLmZkID0gZmQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlYWQgYnVmZmVyIGZyb20gZmlsZVxyXG4gICAgICogQHBhcmFtIHVpbnQ4QXJyYXkgLSBVaW50OEFycmF5IHRvIHdyaXRlIHJlc3VsdCB0b1xyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBSZWFkIGJlaGF2aW91ciBvcHRpb25zXHJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIG51bWJlciBvZiBieXRlcyByZWFkXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHJlYWRCdWZmZXIodWludDhBcnJheSwgb3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IG5vcm1PcHRpb25zID0gdGhpcy5ub3JtYWxpemVPcHRpb25zKHVpbnQ4QXJyYXksIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBub3JtT3B0aW9ucy5wb3NpdGlvbjtcclxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmcy5yZWFkKHRoaXMuZmQsIHVpbnQ4QXJyYXksIG5vcm1PcHRpb25zLm9mZnNldCwgbm9ybU9wdGlvbnMubGVuZ3RoLCBub3JtT3B0aW9ucy5wb3NpdGlvbik7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSByZXMuYnl0ZXNSZWFkO1xyXG4gICAgICAgIGlmIChyZXMuYnl0ZXNSZWFkIDwgbm9ybU9wdGlvbnMubGVuZ3RoICYmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5tYXlCZUxlc3MpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBwZWVrX3JlYWRhYmxlXzEuRW5kT2ZTdHJlYW1FcnJvcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzLmJ5dGVzUmVhZDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGVlayBidWZmZXIgZnJvbSBmaWxlXHJcbiAgICAgKiBAcGFyYW0gdWludDhBcnJheSAtIFVpbnQ4QXJyYXkgKG9yIEJ1ZmZlcikgdG8gd3JpdGUgZGF0YSB0b1xyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBSZWFkIGJlaGF2aW91ciBvcHRpb25zXHJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIG51bWJlciBvZiBieXRlcyByZWFkXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHBlZWtCdWZmZXIodWludDhBcnJheSwgb3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IG5vcm1PcHRpb25zID0gdGhpcy5ub3JtYWxpemVPcHRpb25zKHVpbnQ4QXJyYXksIG9wdGlvbnMpO1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZzLnJlYWQodGhpcy5mZCwgdWludDhBcnJheSwgbm9ybU9wdGlvbnMub2Zmc2V0LCBub3JtT3B0aW9ucy5sZW5ndGgsIG5vcm1PcHRpb25zLnBvc2l0aW9uKTtcclxuICAgICAgICBpZiAoKCFub3JtT3B0aW9ucy5tYXlCZUxlc3MpICYmIHJlcy5ieXRlc1JlYWQgPCBub3JtT3B0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IHBlZWtfcmVhZGFibGVfMS5FbmRPZlN0cmVhbUVycm9yKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXMuYnl0ZXNSZWFkO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgY2xvc2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZzLmNsb3NlKHRoaXMuZmQpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRmlsZVRva2VuaXplciA9IEZpbGVUb2tlbml6ZXI7XHJcbmFzeW5jIGZ1bmN0aW9uIGZyb21GaWxlKHNvdXJjZUZpbGVQYXRoKSB7XHJcbiAgICBjb25zdCBzdGF0ID0gYXdhaXQgZnMuc3RhdChzb3VyY2VGaWxlUGF0aCk7XHJcbiAgICBpZiAoIXN0YXQuaXNGaWxlKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGaWxlIG5vdCBhIGZpbGU6ICR7c291cmNlRmlsZVBhdGh9YCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBmZCA9IGF3YWl0IGZzLm9wZW4oc291cmNlRmlsZVBhdGgsICdyJyk7XHJcbiAgICByZXR1cm4gbmV3IEZpbGVUb2tlbml6ZXIoZmQsIHsgcGF0aDogc291cmNlRmlsZVBhdGgsIHNpemU6IHN0YXQuc2l6ZSB9KTtcclxufVxyXG5leHBvcnRzLmZyb21GaWxlID0gZnJvbUZpbGU7XHJcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImZyb21GaWxlIiwiRmlsZVRva2VuaXplciIsIkFic3RyYWN0VG9rZW5pemVyXzEiLCJyZXF1aXJlIiwicGVla19yZWFkYWJsZV8xIiwiZnMiLCJBYnN0cmFjdFRva2VuaXplciIsImNvbnN0cnVjdG9yIiwiZmQiLCJmaWxlSW5mbyIsInJlYWRCdWZmZXIiLCJ1aW50OEFycmF5Iiwib3B0aW9ucyIsIm5vcm1PcHRpb25zIiwibm9ybWFsaXplT3B0aW9ucyIsInBvc2l0aW9uIiwicmVzIiwicmVhZCIsIm9mZnNldCIsImxlbmd0aCIsImJ5dGVzUmVhZCIsIm1heUJlTGVzcyIsIkVuZE9mU3RyZWFtRXJyb3IiLCJwZWVrQnVmZmVyIiwiY2xvc2UiLCJzb3VyY2VGaWxlUGF0aCIsInN0YXQiLCJpc0ZpbGUiLCJFcnJvciIsIm9wZW4iLCJwYXRoIiwic2l6ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/strtok3/lib/FileTokenizer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/strtok3/lib/FsPromise.js":
/*!***********************************************!*\
  !*** ./node_modules/strtok3/lib/FsPromise.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\r\n * Module convert fs functions to promise based functions\r\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.readFile = exports.writeFileSync = exports.writeFile = exports.read = exports.open = exports.close = exports.stat = exports.createReadStream = exports.pathExists = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nexports.pathExists = fs.existsSync;\nexports.createReadStream = fs.createReadStream;\nasync function stat(path) {\n    return new Promise((resolve, reject)=>{\n        fs.stat(path, (err, stats)=>{\n            if (err) reject(err);\n            else resolve(stats);\n        });\n    });\n}\nexports.stat = stat;\nasync function close(fd) {\n    return new Promise((resolve, reject)=>{\n        fs.close(fd, (err)=>{\n            if (err) reject(err);\n            else resolve();\n        });\n    });\n}\nexports.close = close;\nasync function open(path, mode) {\n    return new Promise((resolve, reject)=>{\n        fs.open(path, mode, (err, fd)=>{\n            if (err) reject(err);\n            else resolve(fd);\n        });\n    });\n}\nexports.open = open;\nasync function read(fd, buffer, offset, length, position) {\n    return new Promise((resolve, reject)=>{\n        fs.read(fd, buffer, offset, length, position, (err, bytesRead, _buffer)=>{\n            if (err) reject(err);\n            else resolve({\n                bytesRead,\n                buffer: _buffer\n            });\n        });\n    });\n}\nexports.read = read;\nasync function writeFile(path, data) {\n    return new Promise((resolve, reject)=>{\n        fs.writeFile(path, data, (err)=>{\n            if (err) reject(err);\n            else resolve();\n        });\n    });\n}\nexports.writeFile = writeFile;\nfunction writeFileSync(path, data) {\n    fs.writeFileSync(path, data);\n}\nexports.writeFileSync = writeFileSync;\nasync function readFile(path) {\n    return new Promise((resolve, reject)=>{\n        fs.readFile(path, (err, buffer)=>{\n            if (err) reject(err);\n            else resolve(buffer);\n        });\n    });\n}\nexports.readFile = readFile;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RydG9rMy9saWIvRnNQcm9taXNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7O0NBRUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdCQUFnQixHQUFHQSxxQkFBcUIsR0FBR0EsaUJBQWlCLEdBQUdBLFlBQVksR0FBR0EsWUFBWSxHQUFHQSxhQUFhLEdBQUdBLFlBQVksR0FBR0Esd0JBQXdCLEdBQUdBLGtCQUFrQixHQUFHLEtBQUs7QUFDakwsTUFBTVcsS0FBS0MsbUJBQU9BLENBQUMsY0FBSTtBQUN2Qlosa0JBQWtCLEdBQUdXLEdBQUdFLFVBQVU7QUFDbENiLHdCQUF3QixHQUFHVyxHQUFHRixnQkFBZ0I7QUFDOUMsZUFBZUQsS0FBS00sSUFBSTtJQUNwQixPQUFPLElBQUlDLFFBQVEsQ0FBQ0MsU0FBU0M7UUFDekJOLEdBQUdILElBQUksQ0FBQ00sTUFBTSxDQUFDSSxLQUFLQztZQUNoQixJQUFJRCxLQUNBRCxPQUFPQztpQkFFUEYsUUFBUUc7UUFDaEI7SUFDSjtBQUNKO0FBQ0FuQixZQUFZLEdBQUdRO0FBQ2YsZUFBZUQsTUFBTWEsRUFBRTtJQUNuQixPQUFPLElBQUlMLFFBQVEsQ0FBQ0MsU0FBU0M7UUFDekJOLEdBQUdKLEtBQUssQ0FBQ2EsSUFBSUYsQ0FBQUE7WUFDVCxJQUFJQSxLQUNBRCxPQUFPQztpQkFFUEY7UUFDUjtJQUNKO0FBQ0o7QUFDQWhCLGFBQWEsR0FBR087QUFDaEIsZUFBZUQsS0FBS1EsSUFBSSxFQUFFTyxJQUFJO0lBQzFCLE9BQU8sSUFBSU4sUUFBUSxDQUFDQyxTQUFTQztRQUN6Qk4sR0FBR0wsSUFBSSxDQUFDUSxNQUFNTyxNQUFNLENBQUNILEtBQUtFO1lBQ3RCLElBQUlGLEtBQ0FELE9BQU9DO2lCQUVQRixRQUFRSTtRQUNoQjtJQUNKO0FBQ0o7QUFDQXBCLFlBQVksR0FBR007QUFDZixlQUFlRCxLQUFLZSxFQUFFLEVBQUVFLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFFBQVE7SUFDcEQsT0FBTyxJQUFJVixRQUFRLENBQUNDLFNBQVNDO1FBQ3pCTixHQUFHTixJQUFJLENBQUNlLElBQUlFLFFBQVFDLFFBQVFDLFFBQVFDLFVBQVUsQ0FBQ1AsS0FBS1EsV0FBV0M7WUFDM0QsSUFBSVQsS0FDQUQsT0FBT0M7aUJBRVBGLFFBQVE7Z0JBQUVVO2dCQUFXSixRQUFRSztZQUFRO1FBQzdDO0lBQ0o7QUFDSjtBQUNBM0IsWUFBWSxHQUFHSztBQUNmLGVBQWVELFVBQVVVLElBQUksRUFBRWMsSUFBSTtJQUMvQixPQUFPLElBQUliLFFBQVEsQ0FBQ0MsU0FBU0M7UUFDekJOLEdBQUdQLFNBQVMsQ0FBQ1UsTUFBTWMsTUFBTVYsQ0FBQUE7WUFDckIsSUFBSUEsS0FDQUQsT0FBT0M7aUJBRVBGO1FBQ1I7SUFDSjtBQUNKO0FBQ0FoQixpQkFBaUIsR0FBR0k7QUFDcEIsU0FBU0QsY0FBY1csSUFBSSxFQUFFYyxJQUFJO0lBQzdCakIsR0FBR1IsYUFBYSxDQUFDVyxNQUFNYztBQUMzQjtBQUNBNUIscUJBQXFCLEdBQUdHO0FBQ3hCLGVBQWVELFNBQVNZLElBQUk7SUFDeEIsT0FBTyxJQUFJQyxRQUFRLENBQUNDLFNBQVNDO1FBQ3pCTixHQUFHVCxRQUFRLENBQUNZLE1BQU0sQ0FBQ0ksS0FBS0k7WUFDcEIsSUFBSUosS0FDQUQsT0FBT0M7aUJBRVBGLFFBQVFNO1FBQ2hCO0lBQ0o7QUFDSjtBQUNBdEIsZ0JBQWdCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXItY29kZS8uL25vZGVfbW9kdWxlcy9zdHJ0b2szL2xpYi9Gc1Byb21pc2UuanM/MWRmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLyoqXHJcbiAqIE1vZHVsZSBjb252ZXJ0IGZzIGZ1bmN0aW9ucyB0byBwcm9taXNlIGJhc2VkIGZ1bmN0aW9uc1xyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnJlYWRGaWxlID0gZXhwb3J0cy53cml0ZUZpbGVTeW5jID0gZXhwb3J0cy53cml0ZUZpbGUgPSBleHBvcnRzLnJlYWQgPSBleHBvcnRzLm9wZW4gPSBleHBvcnRzLmNsb3NlID0gZXhwb3J0cy5zdGF0ID0gZXhwb3J0cy5jcmVhdGVSZWFkU3RyZWFtID0gZXhwb3J0cy5wYXRoRXhpc3RzID0gdm9pZCAwO1xyXG5jb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcclxuZXhwb3J0cy5wYXRoRXhpc3RzID0gZnMuZXhpc3RzU3luYztcclxuZXhwb3J0cy5jcmVhdGVSZWFkU3RyZWFtID0gZnMuY3JlYXRlUmVhZFN0cmVhbTtcclxuYXN5bmMgZnVuY3Rpb24gc3RhdChwYXRoKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGZzLnN0YXQocGF0aCwgKGVyciwgc3RhdHMpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHN0YXRzKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuc3RhdCA9IHN0YXQ7XHJcbmFzeW5jIGZ1bmN0aW9uIGNsb3NlKGZkKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGZzLmNsb3NlKGZkLCBlcnIgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXJyKVxyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuY2xvc2UgPSBjbG9zZTtcclxuYXN5bmMgZnVuY3Rpb24gb3BlbihwYXRoLCBtb2RlKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGZzLm9wZW4ocGF0aCwgbW9kZSwgKGVyciwgZmQpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGZkKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMub3BlbiA9IG9wZW47XHJcbmFzeW5jIGZ1bmN0aW9uIHJlYWQoZmQsIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGZzLnJlYWQoZmQsIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uLCAoZXJyLCBieXRlc1JlYWQsIF9idWZmZXIpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHsgYnl0ZXNSZWFkLCBidWZmZXI6IF9idWZmZXIgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnJlYWQgPSByZWFkO1xyXG5hc3luYyBmdW5jdGlvbiB3cml0ZUZpbGUocGF0aCwgZGF0YSkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBmcy53cml0ZUZpbGUocGF0aCwgZGF0YSwgZXJyID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLndyaXRlRmlsZSA9IHdyaXRlRmlsZTtcclxuZnVuY3Rpb24gd3JpdGVGaWxlU3luYyhwYXRoLCBkYXRhKSB7XHJcbiAgICBmcy53cml0ZUZpbGVTeW5jKHBhdGgsIGRhdGEpO1xyXG59XHJcbmV4cG9ydHMud3JpdGVGaWxlU3luYyA9IHdyaXRlRmlsZVN5bmM7XHJcbmFzeW5jIGZ1bmN0aW9uIHJlYWRGaWxlKHBhdGgpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgZnMucmVhZEZpbGUocGF0aCwgKGVyciwgYnVmZmVyKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlcnIpXHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShidWZmZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5yZWFkRmlsZSA9IHJlYWRGaWxlO1xyXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJyZWFkRmlsZSIsIndyaXRlRmlsZVN5bmMiLCJ3cml0ZUZpbGUiLCJyZWFkIiwib3BlbiIsImNsb3NlIiwic3RhdCIsImNyZWF0ZVJlYWRTdHJlYW0iLCJwYXRoRXhpc3RzIiwiZnMiLCJyZXF1aXJlIiwiZXhpc3RzU3luYyIsInBhdGgiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVyciIsInN0YXRzIiwiZmQiLCJtb2RlIiwiYnVmZmVyIiwib2Zmc2V0IiwibGVuZ3RoIiwicG9zaXRpb24iLCJieXRlc1JlYWQiLCJfYnVmZmVyIiwiZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/strtok3/lib/FsPromise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/strtok3/lib/ReadStreamTokenizer.js":
/*!*********************************************************!*\
  !*** ./node_modules/strtok3/lib/ReadStreamTokenizer.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ReadStreamTokenizer = void 0;\nconst AbstractTokenizer_1 = __webpack_require__(/*! ./AbstractTokenizer */ \"(ssr)/./node_modules/strtok3/lib/AbstractTokenizer.js\");\nconst peek_readable_1 = __webpack_require__(/*! peek-readable */ \"(ssr)/./node_modules/peek-readable/lib/index.js\");\nconst maxBufferSize = 256000;\nclass ReadStreamTokenizer extends AbstractTokenizer_1.AbstractTokenizer {\n    constructor(stream, fileInfo){\n        super(fileInfo);\n        this.streamReader = new peek_readable_1.StreamReader(stream);\n    }\n    /**\r\n     * Get file information, an HTTP-client may implement this doing a HEAD request\r\n     * @return Promise with file information\r\n     */ async getFileInfo() {\n        return this.fileInfo;\n    }\n    /**\r\n     * Read buffer from tokenizer\r\n     * @param uint8Array - Target Uint8Array to fill with data read from the tokenizer-stream\r\n     * @param options - Read behaviour options\r\n     * @returns Promise with number of bytes read\r\n     */ async readBuffer(uint8Array, options) {\n        const normOptions = this.normalizeOptions(uint8Array, options);\n        const skipBytes = normOptions.position - this.position;\n        if (skipBytes > 0) {\n            await this.ignore(skipBytes);\n            return this.readBuffer(uint8Array, options);\n        } else if (skipBytes < 0) {\n            throw new Error(\"`options.position` must be equal or greater than `tokenizer.position`\");\n        }\n        if (normOptions.length === 0) {\n            return 0;\n        }\n        const bytesRead = await this.streamReader.read(uint8Array, normOptions.offset, normOptions.length);\n        this.position += bytesRead;\n        if ((!options || !options.mayBeLess) && bytesRead < normOptions.length) {\n            throw new peek_readable_1.EndOfStreamError();\n        }\n        return bytesRead;\n    }\n    /**\r\n     * Peek (read ahead) buffer from tokenizer\r\n     * @param uint8Array - Uint8Array (or Buffer) to write data to\r\n     * @param options - Read behaviour options\r\n     * @returns Promise with number of bytes peeked\r\n     */ async peekBuffer(uint8Array, options) {\n        const normOptions = this.normalizeOptions(uint8Array, options);\n        let bytesRead = 0;\n        if (normOptions.position) {\n            const skipBytes = normOptions.position - this.position;\n            if (skipBytes > 0) {\n                const skipBuffer = new Uint8Array(normOptions.length + skipBytes);\n                bytesRead = await this.peekBuffer(skipBuffer, {\n                    mayBeLess: normOptions.mayBeLess\n                });\n                uint8Array.set(skipBuffer.subarray(skipBytes), normOptions.offset);\n                return bytesRead - skipBytes;\n            } else if (skipBytes < 0) {\n                throw new Error(\"Cannot peek from a negative offset in a stream\");\n            }\n        }\n        if (normOptions.length > 0) {\n            try {\n                bytesRead = await this.streamReader.peek(uint8Array, normOptions.offset, normOptions.length);\n            } catch (err) {\n                if (options && options.mayBeLess && err instanceof peek_readable_1.EndOfStreamError) {\n                    return 0;\n                }\n                throw err;\n            }\n            if (!normOptions.mayBeLess && bytesRead < normOptions.length) {\n                throw new peek_readable_1.EndOfStreamError();\n            }\n        }\n        return bytesRead;\n    }\n    async ignore(length) {\n        // debug(`ignore ${this.position}...${this.position + length - 1}`);\n        const bufSize = Math.min(maxBufferSize, length);\n        const buf = new Uint8Array(bufSize);\n        let totBytesRead = 0;\n        while(totBytesRead < length){\n            const remaining = length - totBytesRead;\n            const bytesRead = await this.readBuffer(buf, {\n                length: Math.min(bufSize, remaining)\n            });\n            if (bytesRead < 0) {\n                return bytesRead;\n            }\n            totBytesRead += bytesRead;\n        }\n        return totBytesRead;\n    }\n}\nexports.ReadStreamTokenizer = ReadStreamTokenizer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/strtok3/lib/ReadStreamTokenizer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/strtok3/lib/core.js":
/*!******************************************!*\
  !*** ./node_modules/strtok3/lib/core.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fromBuffer = exports.fromStream = exports.EndOfStreamError = void 0;\nconst ReadStreamTokenizer_1 = __webpack_require__(/*! ./ReadStreamTokenizer */ \"(ssr)/./node_modules/strtok3/lib/ReadStreamTokenizer.js\");\nconst BufferTokenizer_1 = __webpack_require__(/*! ./BufferTokenizer */ \"(ssr)/./node_modules/strtok3/lib/BufferTokenizer.js\");\nvar peek_readable_1 = __webpack_require__(/*! peek-readable */ \"(ssr)/./node_modules/peek-readable/lib/index.js\");\nObject.defineProperty(exports, \"EndOfStreamError\", ({\n    enumerable: true,\n    get: function() {\n        return peek_readable_1.EndOfStreamError;\n    }\n}));\n/**\r\n * Construct ReadStreamTokenizer from given Stream.\r\n * Will set fileSize, if provided given Stream has set the .path property/\r\n * @param stream - Read from Node.js Stream.Readable\r\n * @param fileInfo - Pass the file information, like size and MIME-type of the corresponding stream.\r\n * @returns ReadStreamTokenizer\r\n */ function fromStream(stream, fileInfo) {\n    fileInfo = fileInfo ? fileInfo : {};\n    return new ReadStreamTokenizer_1.ReadStreamTokenizer(stream, fileInfo);\n}\nexports.fromStream = fromStream;\n/**\r\n * Construct ReadStreamTokenizer from given Buffer.\r\n * @param uint8Array - Uint8Array to tokenize\r\n * @param fileInfo - Pass additional file information to the tokenizer\r\n * @returns BufferTokenizer\r\n */ function fromBuffer(uint8Array, fileInfo) {\n    return new BufferTokenizer_1.BufferTokenizer(uint8Array, fileInfo);\n}\nexports.fromBuffer = fromBuffer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RydG9rMy9saWIvY29yZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsa0JBQWtCLEdBQUdBLGtCQUFrQixHQUFHQSx3QkFBd0IsR0FBRyxLQUFLO0FBQzFFLE1BQU1LLHdCQUF3QkMsbUJBQU9BLENBQUMsc0ZBQXVCO0FBQzdELE1BQU1DLG9CQUFvQkQsbUJBQU9BLENBQUMsOEVBQW1CO0FBQ3JELElBQUlFLGtCQUFrQkYsbUJBQU9BLENBQUMsc0VBQWU7QUFDN0NSLG9EQUFtRDtJQUFFVyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRixnQkFBZ0JKLGdCQUFnQjtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3ZJOzs7Ozs7Q0FNQyxHQUNELFNBQVNELFdBQVdRLE1BQU0sRUFBRUMsUUFBUTtJQUNoQ0EsV0FBV0EsV0FBV0EsV0FBVyxDQUFDO0lBQ2xDLE9BQU8sSUFBSVAsc0JBQXNCUSxtQkFBbUIsQ0FBQ0YsUUFBUUM7QUFDakU7QUFDQVosa0JBQWtCLEdBQUdHO0FBQ3JCOzs7OztDQUtDLEdBQ0QsU0FBU0QsV0FBV1ksVUFBVSxFQUFFRixRQUFRO0lBQ3BDLE9BQU8sSUFBSUwsa0JBQWtCUSxlQUFlLENBQUNELFlBQVlGO0FBQzdEO0FBQ0FaLGtCQUFrQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3FyLWNvZGUvLi9ub2RlX21vZHVsZXMvc3RydG9rMy9saWIvY29yZS5qcz9mNTU4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuZnJvbUJ1ZmZlciA9IGV4cG9ydHMuZnJvbVN0cmVhbSA9IGV4cG9ydHMuRW5kT2ZTdHJlYW1FcnJvciA9IHZvaWQgMDtcclxuY29uc3QgUmVhZFN0cmVhbVRva2VuaXplcl8xID0gcmVxdWlyZShcIi4vUmVhZFN0cmVhbVRva2VuaXplclwiKTtcclxuY29uc3QgQnVmZmVyVG9rZW5pemVyXzEgPSByZXF1aXJlKFwiLi9CdWZmZXJUb2tlbml6ZXJcIik7XHJcbnZhciBwZWVrX3JlYWRhYmxlXzEgPSByZXF1aXJlKFwicGVlay1yZWFkYWJsZVwiKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRW5kT2ZTdHJlYW1FcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGVla19yZWFkYWJsZV8xLkVuZE9mU3RyZWFtRXJyb3I7IH0gfSk7XHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3QgUmVhZFN0cmVhbVRva2VuaXplciBmcm9tIGdpdmVuIFN0cmVhbS5cclxuICogV2lsbCBzZXQgZmlsZVNpemUsIGlmIHByb3ZpZGVkIGdpdmVuIFN0cmVhbSBoYXMgc2V0IHRoZSAucGF0aCBwcm9wZXJ0eS9cclxuICogQHBhcmFtIHN0cmVhbSAtIFJlYWQgZnJvbSBOb2RlLmpzIFN0cmVhbS5SZWFkYWJsZVxyXG4gKiBAcGFyYW0gZmlsZUluZm8gLSBQYXNzIHRoZSBmaWxlIGluZm9ybWF0aW9uLCBsaWtlIHNpemUgYW5kIE1JTUUtdHlwZSBvZiB0aGUgY29ycmVzcG9uZGluZyBzdHJlYW0uXHJcbiAqIEByZXR1cm5zIFJlYWRTdHJlYW1Ub2tlbml6ZXJcclxuICovXHJcbmZ1bmN0aW9uIGZyb21TdHJlYW0oc3RyZWFtLCBmaWxlSW5mbykge1xyXG4gICAgZmlsZUluZm8gPSBmaWxlSW5mbyA/IGZpbGVJbmZvIDoge307XHJcbiAgICByZXR1cm4gbmV3IFJlYWRTdHJlYW1Ub2tlbml6ZXJfMS5SZWFkU3RyZWFtVG9rZW5pemVyKHN0cmVhbSwgZmlsZUluZm8pO1xyXG59XHJcbmV4cG9ydHMuZnJvbVN0cmVhbSA9IGZyb21TdHJlYW07XHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3QgUmVhZFN0cmVhbVRva2VuaXplciBmcm9tIGdpdmVuIEJ1ZmZlci5cclxuICogQHBhcmFtIHVpbnQ4QXJyYXkgLSBVaW50OEFycmF5IHRvIHRva2VuaXplXHJcbiAqIEBwYXJhbSBmaWxlSW5mbyAtIFBhc3MgYWRkaXRpb25hbCBmaWxlIGluZm9ybWF0aW9uIHRvIHRoZSB0b2tlbml6ZXJcclxuICogQHJldHVybnMgQnVmZmVyVG9rZW5pemVyXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tQnVmZmVyKHVpbnQ4QXJyYXksIGZpbGVJbmZvKSB7XHJcbiAgICByZXR1cm4gbmV3IEJ1ZmZlclRva2VuaXplcl8xLkJ1ZmZlclRva2VuaXplcih1aW50OEFycmF5LCBmaWxlSW5mbyk7XHJcbn1cclxuZXhwb3J0cy5mcm9tQnVmZmVyID0gZnJvbUJ1ZmZlcjtcclxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZnJvbUJ1ZmZlciIsImZyb21TdHJlYW0iLCJFbmRPZlN0cmVhbUVycm9yIiwiUmVhZFN0cmVhbVRva2VuaXplcl8xIiwicmVxdWlyZSIsIkJ1ZmZlclRva2VuaXplcl8xIiwicGVla19yZWFkYWJsZV8xIiwiZW51bWVyYWJsZSIsImdldCIsInN0cmVhbSIsImZpbGVJbmZvIiwiUmVhZFN0cmVhbVRva2VuaXplciIsInVpbnQ4QXJyYXkiLCJCdWZmZXJUb2tlbml6ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/strtok3/lib/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/strtok3/lib/index.js":
/*!*******************************************!*\
  !*** ./node_modules/strtok3/lib/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fromStream = exports.fromBuffer = exports.EndOfStreamError = exports.fromFile = void 0;\nconst fs = __webpack_require__(/*! ./FsPromise */ \"(ssr)/./node_modules/strtok3/lib/FsPromise.js\");\nconst core = __webpack_require__(/*! ./core */ \"(ssr)/./node_modules/strtok3/lib/core.js\");\nvar FileTokenizer_1 = __webpack_require__(/*! ./FileTokenizer */ \"(ssr)/./node_modules/strtok3/lib/FileTokenizer.js\");\nObject.defineProperty(exports, \"fromFile\", ({\n    enumerable: true,\n    get: function() {\n        return FileTokenizer_1.fromFile;\n    }\n}));\nvar core_1 = __webpack_require__(/*! ./core */ \"(ssr)/./node_modules/strtok3/lib/core.js\");\nObject.defineProperty(exports, \"EndOfStreamError\", ({\n    enumerable: true,\n    get: function() {\n        return core_1.EndOfStreamError;\n    }\n}));\nObject.defineProperty(exports, \"fromBuffer\", ({\n    enumerable: true,\n    get: function() {\n        return core_1.fromBuffer;\n    }\n}));\n/**\r\n * Construct ReadStreamTokenizer from given Stream.\r\n * Will set fileSize, if provided given Stream has set the .path property.\r\n * @param stream - Node.js Stream.Readable\r\n * @param fileInfo - Pass additional file information to the tokenizer\r\n * @returns Tokenizer\r\n */ async function fromStream(stream, fileInfo) {\n    fileInfo = fileInfo ? fileInfo : {};\n    if (stream.path) {\n        const stat = await fs.stat(stream.path);\n        fileInfo.path = stream.path;\n        fileInfo.size = stat.size;\n    }\n    return core.fromStream(stream, fileInfo);\n}\nexports.fromStream = fromStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RydG9rMy9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtCQUFrQixHQUFHQSxrQkFBa0IsR0FBR0Esd0JBQXdCLEdBQUdBLGdCQUFnQixHQUFHLEtBQUs7QUFDN0YsTUFBTU0sS0FBS0MsbUJBQU9BLENBQUMsa0VBQWE7QUFDaEMsTUFBTUMsT0FBT0QsbUJBQU9BLENBQUMsd0RBQVE7QUFDN0IsSUFBSUUsa0JBQWtCRixtQkFBT0EsQ0FBQywwRUFBaUI7QUFDL0NULDRDQUEyQztJQUFFWSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRixnQkFBZ0JKLFFBQVE7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN2SCxJQUFJTyxTQUFTTCxtQkFBT0EsQ0FBQyx3REFBUTtBQUM3QlQsb0RBQW1EO0lBQUVZLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLE9BQU9SLGdCQUFnQjtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzlITiw4Q0FBNkM7SUFBRVksWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsT0FBT1QsVUFBVTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2xIOzs7Ozs7Q0FNQyxHQUNELGVBQWVELFdBQVdXLE1BQU0sRUFBRUMsUUFBUTtJQUN0Q0EsV0FBV0EsV0FBV0EsV0FBVyxDQUFDO0lBQ2xDLElBQUlELE9BQU9FLElBQUksRUFBRTtRQUNiLE1BQU1DLE9BQU8sTUFBTVYsR0FBR1UsSUFBSSxDQUFDSCxPQUFPRSxJQUFJO1FBQ3RDRCxTQUFTQyxJQUFJLEdBQUdGLE9BQU9FLElBQUk7UUFDM0JELFNBQVNHLElBQUksR0FBR0QsS0FBS0MsSUFBSTtJQUM3QjtJQUNBLE9BQU9ULEtBQUtOLFVBQVUsQ0FBQ1csUUFBUUM7QUFDbkM7QUFDQWQsa0JBQWtCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXItY29kZS8uL25vZGVfbW9kdWxlcy9zdHJ0b2szL2xpYi9pbmRleC5qcz8xMzkzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuZnJvbVN0cmVhbSA9IGV4cG9ydHMuZnJvbUJ1ZmZlciA9IGV4cG9ydHMuRW5kT2ZTdHJlYW1FcnJvciA9IGV4cG9ydHMuZnJvbUZpbGUgPSB2b2lkIDA7XHJcbmNvbnN0IGZzID0gcmVxdWlyZShcIi4vRnNQcm9taXNlXCIpO1xyXG5jb25zdCBjb3JlID0gcmVxdWlyZShcIi4vY29yZVwiKTtcclxudmFyIEZpbGVUb2tlbml6ZXJfMSA9IHJlcXVpcmUoXCIuL0ZpbGVUb2tlbml6ZXJcIik7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZyb21GaWxlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBGaWxlVG9rZW5pemVyXzEuZnJvbUZpbGU7IH0gfSk7XHJcbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiLi9jb3JlXCIpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFbmRPZlN0cmVhbUVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3JlXzEuRW5kT2ZTdHJlYW1FcnJvcjsgfSB9KTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZnJvbUJ1ZmZlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29yZV8xLmZyb21CdWZmZXI7IH0gfSk7XHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3QgUmVhZFN0cmVhbVRva2VuaXplciBmcm9tIGdpdmVuIFN0cmVhbS5cclxuICogV2lsbCBzZXQgZmlsZVNpemUsIGlmIHByb3ZpZGVkIGdpdmVuIFN0cmVhbSBoYXMgc2V0IHRoZSAucGF0aCBwcm9wZXJ0eS5cclxuICogQHBhcmFtIHN0cmVhbSAtIE5vZGUuanMgU3RyZWFtLlJlYWRhYmxlXHJcbiAqIEBwYXJhbSBmaWxlSW5mbyAtIFBhc3MgYWRkaXRpb25hbCBmaWxlIGluZm9ybWF0aW9uIHRvIHRoZSB0b2tlbml6ZXJcclxuICogQHJldHVybnMgVG9rZW5pemVyXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBmcm9tU3RyZWFtKHN0cmVhbSwgZmlsZUluZm8pIHtcclxuICAgIGZpbGVJbmZvID0gZmlsZUluZm8gPyBmaWxlSW5mbyA6IHt9O1xyXG4gICAgaWYgKHN0cmVhbS5wYXRoKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhdCA9IGF3YWl0IGZzLnN0YXQoc3RyZWFtLnBhdGgpO1xyXG4gICAgICAgIGZpbGVJbmZvLnBhdGggPSBzdHJlYW0ucGF0aDtcclxuICAgICAgICBmaWxlSW5mby5zaXplID0gc3RhdC5zaXplO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvcmUuZnJvbVN0cmVhbShzdHJlYW0sIGZpbGVJbmZvKTtcclxufVxyXG5leHBvcnRzLmZyb21TdHJlYW0gPSBmcm9tU3RyZWFtO1xyXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmcm9tU3RyZWFtIiwiZnJvbUJ1ZmZlciIsIkVuZE9mU3RyZWFtRXJyb3IiLCJmcm9tRmlsZSIsImZzIiwicmVxdWlyZSIsImNvcmUiLCJGaWxlVG9rZW5pemVyXzEiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiY29yZV8xIiwic3RyZWFtIiwiZmlsZUluZm8iLCJwYXRoIiwic3RhdCIsInNpemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/strtok3/lib/index.js\n");

/***/ })

};
;