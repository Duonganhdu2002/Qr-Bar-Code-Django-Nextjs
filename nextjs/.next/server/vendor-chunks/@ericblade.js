/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ericblade";
exports.ids = ["vendor-chunks/@ericblade"];
exports.modules = {

/***/ "(ssr)/./node_modules/@ericblade/quagga2/lib/quagga.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ericblade/quagga2/lib/quagga.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("(function(e, a) {\n    for(var i in a)e[i] = a[i];\n})(exports, /******/ function(modules) {\n    /******/ // The module cache\n    /******/ var installedModules = {};\n    /******/ /******/ // The require function\n    /******/ function __nested_webpack_require_223__(moduleId) {\n        /******/ /******/ // Check if module is in cache\n        /******/ if (installedModules[moduleId]) {\n            /******/ return installedModules[moduleId].exports;\n        /******/ }\n        /******/ // Create a new module (and put it into the cache)\n        /******/ var module = installedModules[moduleId] = {\n            /******/ i: moduleId,\n            /******/ l: false,\n            /******/ exports: {}\n        };\n        /******/ /******/ // Execute the module function\n        /******/ modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_223__);\n        /******/ /******/ // Flag the module as loaded\n        /******/ module.l = true;\n        /******/ /******/ // Return the exports of the module\n        /******/ return module.exports;\n    /******/ }\n    /******/ /******/ /******/ // expose the modules object (__webpack_modules__)\n    /******/ __nested_webpack_require_223__.m = modules;\n    /******/ /******/ // expose the module cache\n    /******/ __nested_webpack_require_223__.c = installedModules;\n    /******/ /******/ // define getter function for harmony exports\n    /******/ __nested_webpack_require_223__.d = function(exports1, name, getter) {\n        /******/ if (!__nested_webpack_require_223__.o(exports1, name)) {\n            /******/ Object.defineProperty(exports1, name, {\n                enumerable: true,\n                get: getter\n            });\n        /******/ }\n    /******/ };\n    /******/ /******/ // define __esModule on exports\n    /******/ __nested_webpack_require_223__.r = function(exports1) {\n        /******/ if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\n            /******/ Object.defineProperty(exports1, Symbol.toStringTag, {\n                value: \"Module\"\n            });\n        /******/ }\n        /******/ Object.defineProperty(exports1, \"__esModule\", {\n            value: true\n        });\n    /******/ };\n    /******/ /******/ // create a fake namespace object\n    /******/ // mode & 1: value is a module id, require it\n    /******/ // mode & 2: merge all properties of value into the ns\n    /******/ // mode & 4: return value when already ns object\n    /******/ // mode & 8|1: behave like require\n    /******/ __nested_webpack_require_223__.t = function(value, mode) {\n        /******/ if (mode & 1) value = __nested_webpack_require_223__(value);\n        /******/ if (mode & 8) return value;\n        /******/ if (mode & 4 && typeof value === \"object\" && value && value.__esModule) return value;\n        /******/ var ns = Object.create(null);\n        /******/ __nested_webpack_require_223__.r(ns);\n        /******/ Object.defineProperty(ns, \"default\", {\n            enumerable: true,\n            value: value\n        });\n        /******/ if (mode & 2 && typeof value != \"string\") for(var key in value)__nested_webpack_require_223__.d(ns, key, (function(key) {\n            return value[key];\n        }).bind(null, key));\n        /******/ return ns;\n    /******/ };\n    /******/ /******/ // getDefaultExport function for compatibility with non-harmony modules\n    /******/ __nested_webpack_require_223__.n = function(module) {\n        /******/ var getter = module && module.__esModule ? /******/ function getDefault() {\n            return module[\"default\"];\n        } : /******/ function getModuleExports() {\n            return module;\n        };\n        /******/ __nested_webpack_require_223__.d(getter, \"a\", getter);\n        /******/ return getter;\n    /******/ };\n    /******/ /******/ // Object.prototype.hasOwnProperty.call\n    /******/ __nested_webpack_require_223__.o = function(object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n    };\n    /******/ /******/ // __webpack_public_path__\n    /******/ __nested_webpack_require_223__.p = \"/\";\n    /******/ /******/ /******/ // Load entry module and return exports\n    /******/ return __nested_webpack_require_223__(__nested_webpack_require_223__.s = 69);\n/******/ }([\n    /* 0 */ /***/ function(module, exports1, __nested_webpack_require_4103__) {\n        var toPropertyKey = __nested_webpack_require_4103__(62);\n        function _defineProperty(obj, key, value) {\n            key = toPropertyKey(key);\n            if (key in obj) {\n                Object.defineProperty(obj, key, {\n                    value: value,\n                    enumerable: true,\n                    configurable: true,\n                    writable: true\n                });\n            } else {\n                obj[key] = value;\n            }\n            return obj;\n        }\n        module.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 1 */ /***/ function(module, exports1) {\n        function _assertThisInitialized(self1) {\n            if (self1 === void 0) {\n                throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n            }\n            return self1;\n        }\n        module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 2 */ /***/ function(module, exports1) {\n        function _getPrototypeOf(o) {\n            module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n                return o.__proto__ || Object.getPrototypeOf(o);\n            }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n            return _getPrototypeOf(o);\n        }\n        module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 3 */ /***/ function(module, exports1) {\n        function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n            }\n        }\n        module.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 4 */ /***/ function(module, exports1, __nested_webpack_require_6168__) {\n        var toPropertyKey = __nested_webpack_require_6168__(62);\n        function _defineProperties(target, props) {\n            for(var i = 0; i < props.length; i++){\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n            }\n        }\n        function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            Object.defineProperty(Constructor, \"prototype\", {\n                writable: false\n            });\n            return Constructor;\n        }\n        module.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 5 */ /***/ function(module, exports1) {\n        module.exports = __webpack_require__(/*! gl-matrix */ \"(ssr)/./node_modules/gl-matrix/esm/index.js\");\n    /***/ },\n    /* 6 */ /***/ function(module, exports1, __nested_webpack_require_7355__) {\n        var _typeof = __nested_webpack_require_7355__(13)[\"default\"];\n        var assertThisInitialized = __nested_webpack_require_7355__(1);\n        function _possibleConstructorReturn(self1, call) {\n            if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n                return call;\n            } else if (call !== void 0) {\n                throw new TypeError(\"Derived constructors may only return object or undefined\");\n            }\n            return assertThisInitialized(self1);\n        }\n        module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 7 */ /***/ function(module, exports1, __nested_webpack_require_8071__) {\n        var setPrototypeOf = __nested_webpack_require_8071__(41);\n        function _inherits(subClass, superClass) {\n            if (typeof superClass !== \"function\" && superClass !== null) {\n                throw new TypeError(\"Super expression must either be null or a function\");\n            }\n            subClass.prototype = Object.create(superClass && superClass.prototype, {\n                constructor: {\n                    value: subClass,\n                    writable: true,\n                    configurable: true\n                }\n            });\n            Object.defineProperty(subClass, \"prototype\", {\n                writable: false\n            });\n            if (superClass) setPrototypeOf(subClass, superClass);\n        }\n        module.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 8 */ /***/ function(module, exports1, __nested_webpack_require_8996__) {\n        // TODO(Babel 8): Remove this file.\n        var runtime = __nested_webpack_require_8996__(137)();\n        module.exports = runtime;\n        // Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\n        try {\n            regeneratorRuntime = runtime;\n        } catch (accidentalStrictMode) {\n            if (typeof globalThis === \"object\") {\n                globalThis.regeneratorRuntime = runtime;\n            } else {\n                Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n            }\n        }\n    /***/ },\n    /* 9 */ /***/ function(module, __nested_webpack_exports__, __webpack_require__) {\n        \"use strict\";\n        /* eslint-disable no-param-reassign */ /* harmony default export */ __nested_webpack_exports__[\"a\"] = {\n            init: function init(arr, val) {\n                arr.fill(val);\n            },\n            /**\n   * IN-PLACE Shuffles the content of an array\n   */ shuffle: function shuffle(arr) {\n                // Durstenfeld shuffle algorithm\n                // https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n                for(var i = arr.length - 1; i > 0; i--){\n                    var j = Math.floor(Math.random() * (i + 1));\n                    var _ref = [\n                        arr[j],\n                        arr[i]\n                    ];\n                    arr[i] = _ref[0];\n                    arr[j] = _ref[1];\n                }\n                return arr;\n            },\n            toPointList: function toPointList(arr) {\n                var rows = arr.reduce(function(p, n) {\n                    var row = \"[\".concat(n.join(\",\"), \"]\");\n                    p.push(row);\n                    return p;\n                }, []);\n                return \"[\".concat(rows.join(\",\\r\\n\"), \"]\");\n            },\n            /**\n   * returns the elements which's score is bigger than the threshold\n   */ // eslint-disable-next-line no-unused-vars\n            threshold: function threshold(arr, _threshold, scoreFunc) {\n                var queue = arr.reduce(function(prev, next) {\n                    if (scoreFunc.apply(arr, [\n                        next\n                    ]) >= _threshold) {\n                        prev.push(next);\n                    }\n                    return prev;\n                }, []);\n                return queue;\n            },\n            maxIndex: function maxIndex(arr) {\n                var max = 0;\n                for(var i = 0; i < arr.length; i++){\n                    if (arr[i] > arr[max]) {\n                        max = i;\n                    }\n                }\n                return max;\n            },\n            max: function max(arr) {\n                var max = 0;\n                for(var i = 0; i < arr.length; i++){\n                    if (arr[i] > max) {\n                        max = arr[i];\n                    }\n                }\n                return max;\n            },\n            sum: function sum(arr) {\n                var length = arr.length;\n                var sum = 0;\n                while(length--){\n                    sum += arr[length];\n                }\n                return sum;\n            }\n        };\n    /***/ },\n    /* 10 */ /***/ function(module, __nested_webpack_exports__, __nested_webpack_require_12284__) {\n        \"use strict\";\n        /* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_12284__(33);\n        /* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __nested_webpack_require_12284__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);\n        /* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_12284__(3);\n        /* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __nested_webpack_require_12284__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);\n        /* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_12284__(4);\n        /* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __nested_webpack_require_12284__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);\n        /* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_12284__(0);\n        /* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __nested_webpack_require_12284__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__);\n        /* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_12284__(5);\n        /* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __nested_webpack_require_12284__.n(gl_matrix__WEBPACK_IMPORTED_MODULE_4__);\n        /* harmony import */ var _array_helper__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_12284__(9);\n        /* harmony import */ var _cv_utils__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_12284__(12);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_4__[\"glMatrix\"].setMatrixArrayType(Array);\n        function assertNumberPositive(val) {\n            if (val < 0) {\n                throw new Error(\"expected positive number, received \".concat(val));\n            }\n        }\n        var ImageWrapper = /*#__PURE__*/ function() {\n            // Represents a basic image combining the data and size. In addition, some methods for\n            // manipulation are contained within.\n            function ImageWrapper(size, data) {\n                var ArrayType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Uint8Array;\n                var initialize = arguments.length > 3 ? arguments[3] : undefined;\n                _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, ImageWrapper);\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, \"data\", void 0);\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, \"size\", void 0);\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, \"indexMapping\", void 0);\n                if (!data) {\n                    this.data = new ArrayType(size.x * size.y);\n                    if (initialize) {\n                        _array_helper__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].init(this.data, 0);\n                    }\n                } else {\n                    this.data = data;\n                }\n                this.size = size;\n            }\n            // tests if a position is within the image, extended out by a border on each side\n            _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(ImageWrapper, [\n                {\n                    key: \"inImageWithBorder\",\n                    value: function inImageWithBorder(imgRef) {\n                        var border = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                        assertNumberPositive(border);\n                        return imgRef.x >= 0 && imgRef.y >= 0 && imgRef.x < this.size.x + border * 2 && imgRef.y < this.size.y + border * 2;\n                    }\n                },\n                {\n                    key: \"subImageAsCopy\",\n                    value: function subImageAsCopy(imageWrapper, from) {\n                        assertNumberPositive(from.x);\n                        assertNumberPositive(from.y);\n                        var _imageWrapper$size = imageWrapper.size, sizeX = _imageWrapper$size.x, sizeY = _imageWrapper$size.y;\n                        for(var x = 0; x < sizeX; x++){\n                            for(var y = 0; y < sizeY; y++){\n                                // eslint-disable-next-line no-param-reassign\n                                imageWrapper.data[y * sizeX + x] = this.data[(from.y + y) * this.size.x + from.x + x];\n                            }\n                        }\n                        return imageWrapper;\n                    // TODO: this function really probably should call into ImageWrapper somewhere to make\n                    // sure that all of it's parameters are set properly, something like\n                    // ImageWrapper.UpdateFrom()\n                    // that might take a provided data and size, and make sure there's no invalid indexMapping\n                    // hanging around, and such.\n                    }\n                },\n                {\n                    key: \"get\",\n                    value: function get(x, y) {\n                        return this.data[y * this.size.x + x];\n                    }\n                },\n                {\n                    key: \"getSafe\",\n                    value: function getSafe(x, y) {\n                        // cache indexMapping because if we're using it once, we'll probably need it a bunch more\n                        // too\n                        if (!this.indexMapping) {\n                            this.indexMapping = {\n                                x: [],\n                                y: []\n                            };\n                            for(var i = 0; i < this.size.x; i++){\n                                this.indexMapping.x[i] = i;\n                                this.indexMapping.x[i + this.size.x] = i;\n                            }\n                            for(var _i = 0; _i < this.size.y; _i++){\n                                this.indexMapping.y[_i] = _i;\n                                this.indexMapping.y[_i + this.size.y] = _i;\n                            }\n                        }\n                        return this.data[this.indexMapping.y[y + this.size.y] * this.size.x + this.indexMapping.x[x + this.size.x]];\n                    }\n                },\n                {\n                    key: \"set\",\n                    value: function set(x, y, value) {\n                        this.data[y * this.size.x + x] = value;\n                        delete this.indexMapping;\n                        return this;\n                    }\n                },\n                {\n                    key: \"zeroBorder\",\n                    value: function zeroBorder() {\n                        var _this$size = this.size, width = _this$size.x, height = _this$size.y;\n                        for(var i = 0; i < width; i++){\n                            // eslint-disable-next-line no-multi-assign\n                            this.data[i] = this.data[(height - 1) * width + i] = 0;\n                        }\n                        for(var _i2 = 1; _i2 < height - 1; _i2++){\n                            // eslint-disable-next-line no-multi-assign\n                            this.data[_i2 * width] = this.data[_i2 * width + (width - 1)] = 0;\n                        }\n                        delete this.indexMapping;\n                        return this;\n                    }\n                },\n                {\n                    key: \"moments\",\n                    value: function moments(labelCount) {\n                        var data = this.data;\n                        var x;\n                        var y;\n                        var height = this.size.y;\n                        var width = this.size.x;\n                        var val;\n                        var ysq;\n                        var labelSum = [];\n                        var i;\n                        var label;\n                        var mu11;\n                        var mu02;\n                        var mu20;\n                        var x_;\n                        var y_;\n                        var tmp;\n                        var result = [];\n                        var PI = Math.PI;\n                        var PI_4 = PI / 4;\n                        if (labelCount <= 0) {\n                            return result;\n                        }\n                        for(i = 0; i < labelCount; i++){\n                            labelSum[i] = {\n                                m00: 0,\n                                m01: 0,\n                                m10: 0,\n                                m11: 0,\n                                m02: 0,\n                                m20: 0,\n                                theta: 0,\n                                rad: 0\n                            };\n                        }\n                        for(y = 0; y < height; y++){\n                            ysq = y * y;\n                            for(x = 0; x < width; x++){\n                                val = data[y * width + x];\n                                if (val > 0) {\n                                    label = labelSum[val - 1];\n                                    label.m00 += 1;\n                                    label.m01 += y;\n                                    label.m10 += x;\n                                    label.m11 += x * y;\n                                    label.m02 += ysq;\n                                    label.m20 += x * x;\n                                }\n                            }\n                        }\n                        for(i = 0; i < labelCount; i++){\n                            label = labelSum[i];\n                            // eslint-disable-next-line no-restricted-globals\n                            if (!isNaN(label.m00) && label.m00 !== 0) {\n                                x_ = label.m10 / label.m00;\n                                y_ = label.m01 / label.m00;\n                                mu11 = label.m11 / label.m00 - x_ * y_;\n                                mu02 = label.m02 / label.m00 - y_ * y_;\n                                mu20 = label.m20 / label.m00 - x_ * x_;\n                                tmp = (mu02 - mu20) / (2 * mu11);\n                                tmp = 0.5 * Math.atan(tmp) + (mu11 >= 0 ? PI_4 : -PI_4) + PI;\n                                // eslint-disable-next-line no-mixed-operators\n                                label.theta = (tmp * 180 / PI + 90) % 180 - 90;\n                                if (label.theta < 0) {\n                                    label.theta += 180;\n                                }\n                                label.rad = tmp > PI ? tmp - PI : tmp;\n                                label.vec = gl_matrix__WEBPACK_IMPORTED_MODULE_4__[\"vec2\"].clone([\n                                    Math.cos(tmp),\n                                    Math.sin(tmp)\n                                ]);\n                                result.push(label);\n                            }\n                        }\n                        return result;\n                    }\n                },\n                {\n                    key: \"getAsRGBA\",\n                    value: function getAsRGBA() {\n                        var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.0;\n                        var ret = new Uint8ClampedArray(4 * this.size.x * this.size.y);\n                        for(var y = 0; y < this.size.y; y++){\n                            for(var x = 0; x < this.size.x; x++){\n                                var pixel = y * this.size.x + x;\n                                var current = this.get(x, y) * scale;\n                                ret[pixel * 4 + 0] = current;\n                                ret[pixel * 4 + 1] = current;\n                                ret[pixel * 4 + 2] = current;\n                                ret[pixel * 4 + 3] = 255;\n                            }\n                        }\n                        return ret;\n                    }\n                },\n                {\n                    key: \"show\",\n                    value: function show(canvas) {\n                        var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.0;\n                        console.warn(\"* imagewrapper show getcontext 2d\");\n                        var ctx = canvas.getContext(\"2d\");\n                        if (!ctx) {\n                            throw new Error(\"Unable to get canvas context\");\n                        }\n                        var frame = ctx.getImageData(0, 0, canvas.width, canvas.height);\n                        var data = this.getAsRGBA(scale);\n                        // eslint-disable-next-line no-param-reassign\n                        canvas.width = this.size.x;\n                        // eslint-disable-next-line no-param-reassign\n                        canvas.height = this.size.y;\n                        var newFrame = new ImageData(data, frame.width, frame.height);\n                        ctx.putImageData(newFrame, 0, 0);\n                    }\n                },\n                {\n                    key: \"overlay\",\n                    value: function overlay(canvas, inScale, from) {\n                        var adjustedScale = inScale < 0 || inScale > 360 ? 360 : inScale;\n                        var hsv = [\n                            0,\n                            1,\n                            1\n                        ];\n                        var rgb = [\n                            0,\n                            0,\n                            0\n                        ];\n                        var whiteRgb = [\n                            255,\n                            255,\n                            255\n                        ];\n                        var blackRgb = [\n                            0,\n                            0,\n                            0\n                        ];\n                        var result = [];\n                        console.warn(\"* imagewrapper overlay getcontext 2d\");\n                        var ctx = canvas.getContext(\"2d\");\n                        if (!ctx) {\n                            throw new Error(\"Unable to get canvas context\");\n                        }\n                        var frame = ctx.getImageData(from.x, from.y, this.size.x, this.size.y);\n                        var data = frame.data;\n                        var length = this.data.length;\n                        while(length--){\n                            hsv[0] = this.data[length] * adjustedScale;\n                            // eslint-disable-next-line no-nested-ternary\n                            result = hsv[0] <= 0 ? whiteRgb : hsv[0] >= 360 ? blackRgb : Object(_cv_utils__WEBPACK_IMPORTED_MODULE_6__[\"hsv2rgb\"])(hsv, rgb);\n                            var pos = length * 4;\n                            var _result = result;\n                            var _result2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_result, 3);\n                            data[pos] = _result2[0];\n                            data[pos + 1] = _result2[1];\n                            data[pos + 2] = _result2[2];\n                            data[pos + 3] = 255;\n                        }\n                        ctx.putImageData(frame, from.x, from.y);\n                    }\n                }\n            ]);\n            return ImageWrapper;\n        }();\n        /* harmony default export */ __nested_webpack_exports__[\"a\"] = ImageWrapper;\n    /***/ },\n    /* 11 */ /***/ function(module, exports1) {\n        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n            try {\n                var info = gen[key](arg);\n                var value = info.value;\n            } catch (error) {\n                reject(error);\n                return;\n            }\n            if (info.done) {\n                resolve(value);\n            } else {\n                Promise.resolve(value).then(_next, _throw);\n            }\n        }\n        function _asyncToGenerator(fn) {\n            return function() {\n                var self1 = this, args = arguments;\n                return new Promise(function(resolve, reject) {\n                    var gen = fn.apply(self1, args);\n                    function _next(value) {\n                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n                    }\n                    function _throw(err) {\n                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n                    }\n                    _next(undefined);\n                });\n            };\n        }\n        module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 12 */ /***/ function(module, __nested_webpack_exports__, __nested_webpack_require_29541__) {\n        \"use strict\";\n        // ESM COMPAT FLAG\n        __nested_webpack_require_29541__.r(__nested_webpack_exports__);\n        // EXPORTS\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"imageRef\", function() {\n            return /* binding */ imageRef;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"computeIntegralImage2\", function() {\n            return /* binding */ computeIntegralImage2;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"computeIntegralImage\", function() {\n            return /* binding */ computeIntegralImage;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"thresholdImage\", function() {\n            return /* binding */ thresholdImage;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"computeHistogram\", function() {\n            return /* binding */ computeHistogram;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"sharpenLine\", function() {\n            return /* binding */ sharpenLine;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"determineOtsuThreshold\", function() {\n            return /* binding */ determineOtsuThreshold;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"otsuThreshold\", function() {\n            return /* binding */ otsuThreshold;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"computeBinaryImage\", function() {\n            return /* binding */ computeBinaryImage;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"cluster\", function() {\n            return /* binding */ cv_utils_cluster;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"Tracer\", function() {\n            return /* binding */ Tracer;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"DILATE\", function() {\n            return /* binding */ DILATE;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"ERODE\", function() {\n            return /* binding */ ERODE;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"dilate\", function() {\n            return /* binding */ dilate;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"erode\", function() {\n            return /* binding */ erode;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"subtract\", function() {\n            return /* binding */ subtract;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"bitwiseOr\", function() {\n            return /* binding */ bitwiseOr;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"countNonZero\", function() {\n            return /* binding */ countNonZero;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"topGeneric\", function() {\n            return /* binding */ topGeneric;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"grayArrayFromImage\", function() {\n            return /* binding */ grayArrayFromImage;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"grayArrayFromContext\", function() {\n            return /* binding */ grayArrayFromContext;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"grayAndHalfSampleFromCanvasData\", function() {\n            return /* binding */ grayAndHalfSampleFromCanvasData;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"computeGray\", function() {\n            return /* binding */ computeGray;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"loadImageArray\", function() {\n            return /* binding */ loadImageArray;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"halfSample\", function() {\n            return /* binding */ halfSample;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"hsv2rgb\", function() {\n            return /* binding */ hsv2rgb;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"_computeDivisors\", function() {\n            return /* binding */ _computeDivisors;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"calculatePatchSize\", function() {\n            return /* binding */ calculatePatchSize;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"_parseCSSDimensionValues\", function() {\n            return /* binding */ _parseCSSDimensionValues;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"_dimensionsConverters\", function() {\n            return /* binding */ _dimensionsConverters;\n        });\n        __nested_webpack_require_29541__.d(__nested_webpack_exports__, \"computeImageArea\", function() {\n            return /* binding */ computeImageArea;\n        });\n        // EXTERNAL MODULE: external \"gl-matrix\"\n        var external_gl_matrix_ = __nested_webpack_require_29541__(5);\n        // EXTERNAL MODULE: ./src/common/array_helper.ts\n        var array_helper = __nested_webpack_require_29541__(9);\n        // CONCATENATED MODULE: ./src/common/cluster.js\n        // TODO: cluster.js and cv_utils.js are pretty tightly intertwined, making for a complex conversion\n        // into typescript. be warned. :-)\n        external_gl_matrix_[\"glMatrix\"].setMatrixArrayType(Array);\n        /**\n * Creates a cluster for grouping similar orientations of datapoints\n */ /* harmony default export */ var cluster = {\n            create: function create(point, threshold) {\n                var points = [];\n                var center = {\n                    rad: 0,\n                    vec: external_gl_matrix_[\"vec2\"].clone([\n                        0,\n                        0\n                    ])\n                };\n                var pointMap = {};\n                function _add(pointToAdd) {\n                    pointMap[pointToAdd.id] = pointToAdd;\n                    points.push(pointToAdd);\n                }\n                function updateCenter() {\n                    var i;\n                    var sum = 0;\n                    for(i = 0; i < points.length; i++){\n                        sum += points[i].rad;\n                    }\n                    center.rad = sum / points.length;\n                    center.vec = external_gl_matrix_[\"vec2\"].clone([\n                        Math.cos(center.rad),\n                        Math.sin(center.rad)\n                    ]);\n                }\n                function init() {\n                    _add(point);\n                    updateCenter();\n                }\n                init();\n                return {\n                    add: function add(pointToAdd) {\n                        if (!pointMap[pointToAdd.id]) {\n                            _add(pointToAdd);\n                            updateCenter();\n                        }\n                    },\n                    fits: function fits(otherPoint) {\n                        // check cosine similarity to center-angle\n                        var similarity = Math.abs(external_gl_matrix_[\"vec2\"].dot(otherPoint.point.vec, center.vec));\n                        if (similarity > threshold) {\n                            return true;\n                        }\n                        return false;\n                    },\n                    getPoints: function getPoints() {\n                        return points;\n                    },\n                    getCenter: function getCenter() {\n                        return center;\n                    }\n                };\n            },\n            createPoint: function createPoint(newPoint, id, property) {\n                return {\n                    rad: newPoint[property],\n                    point: newPoint,\n                    id: id\n                };\n            }\n        };\n        // CONCATENATED MODULE: ./src/common/cv_utils.js\n        /* eslint-disable no-mixed-operators */ /* eslint-disable no-bitwise */ external_gl_matrix_[\"glMatrix\"].setMatrixArrayType(Array);\n        /**\n * @param x x-coordinate\n * @param y y-coordinate\n * @return ImageReference {x,y} Coordinate\n */ function imageRef(x, y) {\n            var that = {\n                x: x,\n                y: y,\n                toVec2: function toVec2() {\n                    return external_gl_matrix_[\"vec2\"].clone([\n                        this.x,\n                        this.y\n                    ]);\n                },\n                toVec3: function toVec3() {\n                    return external_gl_matrix_[\"vec3\"].clone([\n                        this.x,\n                        this.y,\n                        1\n                    ]);\n                },\n                round: function round() {\n                    this.x = this.x > 0.0 ? Math.floor(this.x + 0.5) : Math.floor(this.x - 0.5);\n                    this.y = this.y > 0.0 ? Math.floor(this.y + 0.5) : Math.floor(this.y - 0.5);\n                    return this;\n                }\n            };\n            return that;\n        }\n        /**\n * Computes an integral image of a given grayscale image.\n * @param imageDataContainer {ImageDataContainer} the image to be integrated\n */ function computeIntegralImage2(imageWrapper, integralWrapper) {\n            var imageData = imageWrapper.data;\n            var width = imageWrapper.size.x;\n            var height = imageWrapper.size.y;\n            var integralImageData = integralWrapper.data;\n            var sum = 0;\n            var posA = 0;\n            var posB = 0;\n            var posC = 0;\n            var posD = 0;\n            var x;\n            var y;\n            // sum up first column\n            posB = width;\n            sum = 0;\n            for(y = 1; y < height; y++){\n                sum += imageData[posA];\n                integralImageData[posB] += sum;\n                posA += width;\n                posB += width;\n            }\n            posA = 0;\n            posB = 1;\n            sum = 0;\n            for(x = 1; x < width; x++){\n                sum += imageData[posA];\n                integralImageData[posB] += sum;\n                posA++;\n                posB++;\n            }\n            for(y = 1; y < height; y++){\n                posA = y * width + 1;\n                posB = (y - 1) * width + 1;\n                posC = y * width;\n                posD = (y - 1) * width;\n                for(x = 1; x < width; x++){\n                    integralImageData[posA] += imageData[posA] + integralImageData[posB] + integralImageData[posC] - integralImageData[posD];\n                    posA++;\n                    posB++;\n                    posC++;\n                    posD++;\n                }\n            }\n        }\n        function computeIntegralImage(imageWrapper, integralWrapper) {\n            var imageData = imageWrapper.data;\n            var width = imageWrapper.size.x;\n            var height = imageWrapper.size.y;\n            var integralImageData = integralWrapper.data;\n            var sum = 0;\n            // sum up first row\n            for(var i = 0; i < width; i++){\n                sum += imageData[i];\n                integralImageData[i] = sum;\n            }\n            for(var v = 1; v < height; v++){\n                sum = 0;\n                for(var u = 0; u < width; u++){\n                    sum += imageData[v * width + u];\n                    integralImageData[v * width + u] = sum + integralImageData[(v - 1) * width + u];\n                }\n            }\n        }\n        function thresholdImage(imageWrapper, threshold, targetWrapper) {\n            if (!targetWrapper) {\n                // eslint-disable-next-line no-param-reassign\n                targetWrapper = imageWrapper;\n            }\n            var imageData = imageWrapper.data;\n            var length = imageData.length;\n            var targetData = targetWrapper.data;\n            while(length--){\n                targetData[length] = imageData[length] < threshold ? 1 : 0;\n            }\n        }\n        function computeHistogram(imageWrapper, bitsPerPixel) {\n            if (!bitsPerPixel) {\n                // eslint-disable-next-line no-param-reassign\n                bitsPerPixel = 8;\n            }\n            var imageData = imageWrapper.data;\n            var length = imageData.length;\n            var bitShift = 8 - bitsPerPixel;\n            var bucketCnt = 1 << bitsPerPixel;\n            var hist = new Int32Array(bucketCnt);\n            while(length--){\n                hist[imageData[length] >> bitShift]++;\n            }\n            return hist;\n        }\n        function sharpenLine(line) {\n            var i;\n            var length = line.length;\n            var left = line[0];\n            var center = line[1];\n            var right;\n            for(i = 1; i < length - 1; i++){\n                right = line[i + 1];\n                //  -1 4 -1 kernel\n                // eslint-disable-next-line no-param-reassign\n                line[i - 1] = center * 2 - left - right & 255;\n                left = center;\n                center = right;\n            }\n            return line;\n        }\n        function determineOtsuThreshold(imageWrapper) {\n            var bitsPerPixel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n            var hist;\n            var bitShift = 8 - bitsPerPixel;\n            function px(init, end) {\n                var sum = 0;\n                for(var i = init; i <= end; i++){\n                    sum += hist[i];\n                }\n                return sum;\n            }\n            function mx(init, end) {\n                var sum = 0;\n                for(var i = init; i <= end; i++){\n                    sum += i * hist[i];\n                }\n                return sum;\n            }\n            function determineThreshold() {\n                var vet = [\n                    0\n                ];\n                var p1;\n                var p2;\n                var p12;\n                var m1;\n                var m2;\n                var m12;\n                var max = (1 << bitsPerPixel) - 1;\n                hist = computeHistogram(imageWrapper, bitsPerPixel);\n                for(var k = 1; k < max; k++){\n                    p1 = px(0, k);\n                    p2 = px(k + 1, max);\n                    p12 = p1 * p2;\n                    if (p12 === 0) {\n                        p12 = 1;\n                    }\n                    m1 = mx(0, k) * p2;\n                    m2 = mx(k + 1, max) * p1;\n                    m12 = m1 - m2;\n                    vet[k] = m12 * m12 / p12;\n                }\n                return array_helper[\"a\" /* default */ ].maxIndex(vet);\n            }\n            var threshold = determineThreshold();\n            return threshold << bitShift;\n        }\n        function otsuThreshold(imageWrapper, targetWrapper) {\n            var threshold = determineOtsuThreshold(imageWrapper);\n            thresholdImage(imageWrapper, threshold, targetWrapper);\n            return threshold;\n        }\n        // local thresholding\n        function computeBinaryImage(imageWrapper, integralWrapper, targetWrapper) {\n            computeIntegralImage(imageWrapper, integralWrapper);\n            if (!targetWrapper) {\n                // eslint-disable-next-line no-param-reassign\n                targetWrapper = imageWrapper;\n            }\n            var imageData = imageWrapper.data;\n            var targetData = targetWrapper.data;\n            var width = imageWrapper.size.x;\n            var height = imageWrapper.size.y;\n            var integralImageData = integralWrapper.data;\n            var sum = 0;\n            var v;\n            var u;\n            var kernel = 3;\n            var A;\n            var B;\n            var C;\n            var D;\n            var avg;\n            var size = (kernel * 2 + 1) * (kernel * 2 + 1);\n            // clear out top & bottom-border\n            for(v = 0; v <= kernel; v++){\n                for(u = 0; u < width; u++){\n                    targetData[v * width + u] = 0;\n                    targetData[(height - 1 - v) * width + u] = 0;\n                }\n            }\n            // clear out left & right border\n            for(v = kernel; v < height - kernel; v++){\n                for(u = 0; u <= kernel; u++){\n                    targetData[v * width + u] = 0;\n                    targetData[v * width + (width - 1 - u)] = 0;\n                }\n            }\n            for(v = kernel + 1; v < height - kernel - 1; v++){\n                for(u = kernel + 1; u < width - kernel; u++){\n                    A = integralImageData[(v - kernel - 1) * width + (u - kernel - 1)];\n                    B = integralImageData[(v - kernel - 1) * width + (u + kernel)];\n                    C = integralImageData[(v + kernel) * width + (u - kernel - 1)];\n                    D = integralImageData[(v + kernel) * width + (u + kernel)];\n                    sum = D - C - B + A;\n                    avg = sum / size;\n                    targetData[v * width + u] = imageData[v * width + u] > avg + 5 ? 0 : 1;\n                }\n            }\n        }\n        function cv_utils_cluster(points, threshold, property) {\n            var i;\n            var k;\n            var thisCluster;\n            var point;\n            var clusters = [];\n            if (!property) {\n                // eslint-disable-next-line no-param-reassign\n                property = \"rad\";\n            }\n            function addToCluster(newPoint) {\n                var found = false;\n                for(k = 0; k < clusters.length; k++){\n                    thisCluster = clusters[k];\n                    if (thisCluster.fits(newPoint)) {\n                        thisCluster.add(newPoint);\n                        found = true;\n                    }\n                }\n                return found;\n            }\n            // iterate over each cloud\n            for(i = 0; i < points.length; i++){\n                point = cluster.createPoint(points[i], i, property);\n                if (!addToCluster(point)) {\n                    clusters.push(cluster.create(point, threshold));\n                }\n            }\n            return clusters;\n        }\n        var Tracer = {\n            trace: function trace(points, vec) {\n                var iteration;\n                var maxIterations = 10;\n                var top = [];\n                var result = [];\n                var centerPos = 0;\n                var currentPos = 0;\n                function trace(idx, forward) {\n                    var to;\n                    var toIdx;\n                    var predictedPos;\n                    var thresholdX = 1;\n                    var thresholdY = Math.abs(vec[1] / 10);\n                    var found = false;\n                    function match(pos, predicted) {\n                        if (pos.x > predicted.x - thresholdX && pos.x < predicted.x + thresholdX && pos.y > predicted.y - thresholdY && pos.y < predicted.y + thresholdY) {\n                            return true;\n                        }\n                        return false;\n                    }\n                    // check if the next index is within the vec specifications\n                    // if not, check as long as the threshold is met\n                    var from = points[idx];\n                    if (forward) {\n                        predictedPos = {\n                            x: from.x + vec[0],\n                            y: from.y + vec[1]\n                        };\n                    } else {\n                        predictedPos = {\n                            x: from.x - vec[0],\n                            y: from.y - vec[1]\n                        };\n                    }\n                    toIdx = forward ? idx + 1 : idx - 1;\n                    to = points[toIdx];\n                    // eslint-disable-next-line no-cond-assign\n                    while(to && (found = match(to, predictedPos)) !== true && Math.abs(to.y - from.y) < vec[1]){\n                        toIdx = forward ? toIdx + 1 : toIdx - 1;\n                        to = points[toIdx];\n                    }\n                    return found ? toIdx : null;\n                }\n                for(iteration = 0; iteration < maxIterations; iteration++){\n                    // randomly select point to start with\n                    centerPos = Math.floor(Math.random() * points.length);\n                    // trace forward\n                    top = [];\n                    currentPos = centerPos;\n                    top.push(points[currentPos]);\n                    // eslint-disable-next-line no-cond-assign\n                    while((currentPos = trace(currentPos, true)) !== null){\n                        top.push(points[currentPos]);\n                    }\n                    if (centerPos > 0) {\n                        currentPos = centerPos;\n                        // eslint-disable-next-line no-cond-assign\n                        while((currentPos = trace(currentPos, false)) !== null){\n                            top.push(points[currentPos]);\n                        }\n                    }\n                    if (top.length > result.length) {\n                        result = top;\n                    }\n                }\n                return result;\n            }\n        };\n        var DILATE = 1;\n        var ERODE = 2;\n        function dilate(inImageWrapper, outImageWrapper) {\n            var v;\n            var u;\n            var inImageData = inImageWrapper.data;\n            var outImageData = outImageWrapper.data;\n            var height = inImageWrapper.size.y;\n            var width = inImageWrapper.size.x;\n            var sum;\n            var yStart1;\n            var yStart2;\n            var xStart1;\n            var xStart2;\n            for(v = 1; v < height - 1; v++){\n                for(u = 1; u < width - 1; u++){\n                    yStart1 = v - 1;\n                    yStart2 = v + 1;\n                    xStart1 = u - 1;\n                    xStart2 = u + 1;\n                    sum = inImageData[yStart1 * width + xStart1] + inImageData[yStart1 * width + xStart2] + inImageData[v * width + u] + inImageData[yStart2 * width + xStart1] + inImageData[yStart2 * width + xStart2];\n                    outImageData[v * width + u] = sum > 0 ? 1 : 0;\n                }\n            }\n        }\n        function erode(inImageWrapper, outImageWrapper) {\n            var v;\n            var u;\n            var inImageData = inImageWrapper.data;\n            var outImageData = outImageWrapper.data;\n            var height = inImageWrapper.size.y;\n            var width = inImageWrapper.size.x;\n            var sum;\n            var yStart1;\n            var yStart2;\n            var xStart1;\n            var xStart2;\n            for(v = 1; v < height - 1; v++){\n                for(u = 1; u < width - 1; u++){\n                    yStart1 = v - 1;\n                    yStart2 = v + 1;\n                    xStart1 = u - 1;\n                    xStart2 = u + 1;\n                    sum = inImageData[yStart1 * width + xStart1] + inImageData[yStart1 * width + xStart2] + inImageData[v * width + u] + inImageData[yStart2 * width + xStart1] + inImageData[yStart2 * width + xStart2];\n                    outImageData[v * width + u] = sum === 5 ? 1 : 0;\n                }\n            }\n        }\n        function subtract(aImageWrapper, bImageWrapper, resultImageWrapper) {\n            if (!resultImageWrapper) {\n                // eslint-disable-next-line no-param-reassign\n                resultImageWrapper = aImageWrapper;\n            }\n            var length = aImageWrapper.data.length;\n            var aImageData = aImageWrapper.data;\n            var bImageData = bImageWrapper.data;\n            var cImageData = resultImageWrapper.data;\n            while(length--){\n                cImageData[length] = aImageData[length] - bImageData[length];\n            }\n        }\n        function bitwiseOr(aImageWrapper, bImageWrapper, resultImageWrapper) {\n            if (!resultImageWrapper) {\n                // eslint-disable-next-line no-param-reassign\n                resultImageWrapper = aImageWrapper;\n            }\n            var length = aImageWrapper.data.length;\n            var aImageData = aImageWrapper.data;\n            var bImageData = bImageWrapper.data;\n            var cImageData = resultImageWrapper.data;\n            while(length--){\n                cImageData[length] = aImageData[length] || bImageData[length];\n            }\n        }\n        function countNonZero(imageWrapper) {\n            var length = imageWrapper.data.length;\n            var data = imageWrapper.data;\n            var sum = 0;\n            while(length--){\n                sum += data[length];\n            }\n            return sum;\n        }\n        function topGeneric(list, top, scoreFunc) {\n            var i;\n            var minIdx = 0;\n            var min = 0;\n            var queue = [];\n            var score;\n            var hit;\n            var pos;\n            for(i = 0; i < top; i++){\n                queue[i] = {\n                    score: 0,\n                    item: null\n                };\n            }\n            for(i = 0; i < list.length; i++){\n                score = scoreFunc.apply(this, [\n                    list[i]\n                ]);\n                if (score > min) {\n                    hit = queue[minIdx];\n                    hit.score = score;\n                    hit.item = list[i];\n                    min = Number.MAX_VALUE;\n                    for(pos = 0; pos < top; pos++){\n                        if (queue[pos].score < min) {\n                            min = queue[pos].score;\n                            minIdx = pos;\n                        }\n                    }\n                }\n            }\n            return queue;\n        }\n        function grayArrayFromImage(htmlImage, offsetX, ctx, array) {\n            ctx.drawImage(htmlImage, offsetX, 0, htmlImage.width, htmlImage.height);\n            var ctxData = ctx.getImageData(offsetX, 0, htmlImage.width, htmlImage.height).data;\n            computeGray(ctxData, array);\n        }\n        function grayArrayFromContext(ctx, size, offset, array) {\n            var ctxData = ctx.getImageData(offset.x, offset.y, size.x, size.y).data;\n            computeGray(ctxData, array);\n        }\n        function grayAndHalfSampleFromCanvasData(canvasData, size, outArray) {\n            var topRowIdx = 0;\n            var bottomRowIdx = size.x;\n            var endIdx = Math.floor(canvasData.length / 4);\n            var outWidth = size.x / 2;\n            var outImgIdx = 0;\n            var inWidth = size.x;\n            var i;\n            while(bottomRowIdx < endIdx){\n                for(i = 0; i < outWidth; i++){\n                    // eslint-disable-next-line no-param-reassign\n                    outArray[outImgIdx] = (0.299 * canvasData[topRowIdx * 4 + 0] + 0.587 * canvasData[topRowIdx * 4 + 1] + 0.114 * canvasData[topRowIdx * 4 + 2] + (0.299 * canvasData[(topRowIdx + 1) * 4 + 0] + 0.587 * canvasData[(topRowIdx + 1) * 4 + 1] + 0.114 * canvasData[(topRowIdx + 1) * 4 + 2]) + (0.299 * canvasData[bottomRowIdx * 4 + 0] + 0.587 * canvasData[bottomRowIdx * 4 + 1] + 0.114 * canvasData[bottomRowIdx * 4 + 2]) + (0.299 * canvasData[(bottomRowIdx + 1) * 4 + 0] + 0.587 * canvasData[(bottomRowIdx + 1) * 4 + 1] + 0.114 * canvasData[(bottomRowIdx + 1) * 4 + 2])) / 4;\n                    outImgIdx++;\n                    topRowIdx += 2;\n                    bottomRowIdx += 2;\n                }\n                topRowIdx += inWidth;\n                bottomRowIdx += inWidth;\n            }\n        }\n        function computeGray(imageData, outArray, config) {\n            var l = imageData.length / 4 | 0;\n            var singleChannel = config && config.singleChannel === true;\n            if (singleChannel) {\n                for(var i = 0; i < l; i++){\n                    // eslint-disable-next-line no-param-reassign\n                    outArray[i] = imageData[i * 4 + 0];\n                }\n            } else {\n                for(var _i = 0; _i < l; _i++){\n                    // eslint-disable-next-line no-param-reassign\n                    outArray[_i] = 0.299 * imageData[_i * 4 + 0] + 0.587 * imageData[_i * 4 + 1] + 0.114 * imageData[_i * 4 + 2];\n                }\n            }\n        }\n        function loadImageArray(src, callback) {\n            var canvas = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document && document.createElement(\"canvas\");\n            var img = new Image();\n            img.callback = callback;\n            img.onload = function() {\n                // eslint-disable-next-line no-param-reassign\n                canvas.width = this.width;\n                // eslint-disable-next-line no-param-reassign\n                canvas.height = this.height;\n                console.warn(\"* loadImageArray getContext 2d\");\n                var ctx = canvas.getContext(\"2d\");\n                ctx.drawImage(this, 0, 0);\n                var array = new Uint8Array(this.width * this.height);\n                ctx.drawImage(this, 0, 0);\n                var _ctx$getImageData = ctx.getImageData(0, 0, this.width, this.height), data = _ctx$getImageData.data;\n                computeGray(data, array);\n                this.callback(array, {\n                    x: this.width,\n                    y: this.height\n                }, this);\n            };\n            img.src = src;\n        }\n        /**\n * @param inImg {ImageWrapper} input image to be sampled\n * @param outImg {ImageWrapper} to be stored in\n */ function halfSample(inImgWrapper, outImgWrapper) {\n            var inImg = inImgWrapper.data;\n            var inWidth = inImgWrapper.size.x;\n            var outImg = outImgWrapper.data;\n            var topRowIdx = 0;\n            var bottomRowIdx = inWidth;\n            var endIdx = inImg.length;\n            var outWidth = inWidth / 2;\n            var outImgIdx = 0;\n            while(bottomRowIdx < endIdx){\n                for(var i = 0; i < outWidth; i++){\n                    outImg[outImgIdx] = Math.floor((inImg[topRowIdx] + inImg[topRowIdx + 1] + inImg[bottomRowIdx] + inImg[bottomRowIdx + 1]) / 4);\n                    outImgIdx++;\n                    topRowIdx += 2;\n                    bottomRowIdx += 2;\n                }\n                topRowIdx += inWidth;\n                bottomRowIdx += inWidth;\n            }\n        }\n        function hsv2rgb(hsv) {\n            var rgb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [\n                0,\n                0,\n                0\n            ];\n            var h = hsv[0];\n            var s = hsv[1];\n            var v = hsv[2];\n            var c = v * s;\n            var x = c * (1 - Math.abs(h / 60 % 2 - 1));\n            var m = v - c;\n            var r = 0;\n            var g = 0;\n            var b = 0;\n            if (h < 60) {\n                r = c;\n                g = x;\n            } else if (h < 120) {\n                r = x;\n                g = c;\n            } else if (h < 180) {\n                g = c;\n                b = x;\n            } else if (h < 240) {\n                g = x;\n                b = c;\n            } else if (h < 300) {\n                r = x;\n                b = c;\n            } else if (h < 360) {\n                r = c;\n                b = x;\n            }\n            // eslint-disable-next-line no-param-reassign\n            rgb[0] = (r + m) * 255 | 0;\n            // eslint-disable-next-line no-param-reassign\n            rgb[1] = (g + m) * 255 | 0;\n            // eslint-disable-next-line no-param-reassign\n            rgb[2] = (b + m) * 255 | 0;\n            return rgb;\n        }\n        function _computeDivisors(n) {\n            var largeDivisors = [];\n            var divisors = [];\n            for(var i = 1; i < Math.sqrt(n) + 1; i++){\n                if (n % i === 0) {\n                    divisors.push(i);\n                    if (i !== n / i) {\n                        largeDivisors.unshift(Math.floor(n / i));\n                    }\n                }\n            }\n            return divisors.concat(largeDivisors);\n        }\n        function _computeIntersection(arr1, arr2) {\n            var i = 0;\n            var j = 0;\n            var result = [];\n            while(i < arr1.length && j < arr2.length){\n                if (arr1[i] === arr2[j]) {\n                    result.push(arr1[i]);\n                    i++;\n                    j++;\n                } else if (arr1[i] > arr2[j]) {\n                    j++;\n                } else {\n                    i++;\n                }\n            }\n            return result;\n        }\n        function calculatePatchSize(patchSize, imgSize) {\n            var divisorsX = _computeDivisors(imgSize.x);\n            var divisorsY = _computeDivisors(imgSize.y);\n            var wideSide = Math.max(imgSize.x, imgSize.y);\n            var common = _computeIntersection(divisorsX, divisorsY);\n            var nrOfPatchesList = [\n                8,\n                10,\n                15,\n                20,\n                32,\n                60,\n                80\n            ];\n            var nrOfPatchesMap = {\n                \"x-small\": 5,\n                small: 4,\n                medium: 3,\n                large: 2,\n                \"x-large\": 1\n            };\n            var nrOfPatchesIdx = nrOfPatchesMap[patchSize] || nrOfPatchesMap.medium;\n            var nrOfPatches = nrOfPatchesList[nrOfPatchesIdx];\n            var desiredPatchSize = Math.floor(wideSide / nrOfPatches);\n            var optimalPatchSize;\n            function findPatchSizeForDivisors(divisors) {\n                var i = 0;\n                var found = divisors[Math.floor(divisors.length / 2)];\n                while(i < divisors.length - 1 && divisors[i] < desiredPatchSize){\n                    i++;\n                }\n                if (i > 0) {\n                    if (Math.abs(divisors[i] - desiredPatchSize) > Math.abs(divisors[i - 1] - desiredPatchSize)) {\n                        found = divisors[i - 1];\n                    } else {\n                        found = divisors[i];\n                    }\n                }\n                if (desiredPatchSize / found < nrOfPatchesList[nrOfPatchesIdx + 1] / nrOfPatchesList[nrOfPatchesIdx] && desiredPatchSize / found > nrOfPatchesList[nrOfPatchesIdx - 1] / nrOfPatchesList[nrOfPatchesIdx]) {\n                    return {\n                        x: found,\n                        y: found\n                    };\n                }\n                return null;\n            }\n            optimalPatchSize = findPatchSizeForDivisors(common);\n            if (!optimalPatchSize) {\n                optimalPatchSize = findPatchSizeForDivisors(_computeDivisors(wideSide));\n                if (!optimalPatchSize) {\n                    optimalPatchSize = findPatchSizeForDivisors(_computeDivisors(desiredPatchSize * nrOfPatches));\n                }\n            }\n            return optimalPatchSize;\n        }\n        function _parseCSSDimensionValues(value) {\n            var dimension = {\n                value: parseFloat(value),\n                unit: value.indexOf(\"%\") === value.length - 1 ? \"%\" : \"%\"\n            };\n            return dimension;\n        }\n        var _dimensionsConverters = {\n            top: function top(dimension, context) {\n                return dimension.unit === \"%\" ? Math.floor(context.height * (dimension.value / 100)) : null;\n            },\n            right: function right(dimension, context) {\n                return dimension.unit === \"%\" ? Math.floor(context.width - context.width * (dimension.value / 100)) : null;\n            },\n            bottom: function bottom(dimension, context) {\n                return dimension.unit === \"%\" ? Math.floor(context.height - context.height * (dimension.value / 100)) : null;\n            },\n            left: function left(dimension, context) {\n                return dimension.unit === \"%\" ? Math.floor(context.width * (dimension.value / 100)) : null;\n            }\n        };\n        function computeImageArea(inputWidth, inputHeight, area) {\n            var context = {\n                width: inputWidth,\n                height: inputHeight\n            };\n            var parsedArea = Object.keys(area).reduce(function(result, key) {\n                var value = area[key];\n                var parsed = _parseCSSDimensionValues(value);\n                var calculated = _dimensionsConverters[key](parsed, context);\n                // eslint-disable-next-line no-param-reassign\n                result[key] = calculated;\n                return result;\n            }, {});\n            return {\n                sx: parsedArea.left,\n                sy: parsedArea.top,\n                sw: parsedArea.right - parsedArea.left,\n                sh: parsedArea.bottom - parsedArea.top\n            };\n        }\n    /***/ },\n    /* 13 */ /***/ function(module, exports1) {\n        function _typeof(o) {\n            \"@babel/helpers - typeof\";\n            return module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n                return typeof o;\n            } : function(o) {\n                return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n            }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof(o);\n        }\n        module.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 14 */ /***/ function(module, exports1, __nested_webpack_require_66715__) {\n        var superPropBase = __nested_webpack_require_66715__(138);\n        function _get() {\n            if (typeof Reflect !== \"undefined\" && Reflect.get) {\n                module.exports = _get = Reflect.get.bind(), module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n            } else {\n                module.exports = _get = function _get(target, property, receiver) {\n                    var base = superPropBase(target, property);\n                    if (!base) return;\n                    var desc = Object.getOwnPropertyDescriptor(base, property);\n                    if (desc.get) {\n                        return desc.get.call(arguments.length < 3 ? target : receiver);\n                    }\n                    return desc.value;\n                }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n            }\n            return _get.apply(this, arguments);\n        }\n        module.exports = _get, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 15 */ /***/ function(module, exports1) {\n        /**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */ function isObject(value) {\n            var type = typeof value;\n            return value != null && (type == \"object\" || type == \"function\");\n        }\n        module.exports = isObject;\n    /***/ },\n    /* 16 */ /***/ function(module, exports1) {\n        /**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */ var isArray = Array.isArray;\n        module.exports = isArray;\n    /***/ },\n    /* 17 */ /***/ function(module, __nested_webpack_exports__, __webpack_require__) {\n        \"use strict\";\n        // TODO: XYPosition should be an XYObject, but that breaks XYDefinition, which breaks drawPath() below.\n        // XYDefinition tells us which component of a given array or object is the \"X\" and which is the \"Y\".\n        // Usually this is 0 for X and 1 for Y, but might be used as 'x' for x and 'y' for Y.\n        /* harmony default export */ __nested_webpack_exports__[\"a\"] = {\n            drawRect: function drawRect(pos, size, ctx, style) {\n                ctx.strokeStyle = style.color;\n                ctx.fillStyle = style.color;\n                ctx.lineWidth = style.lineWidth || 1;\n                ctx.beginPath();\n                ctx.strokeRect(pos.x, pos.y, size.x, size.y);\n            },\n            drawPath: function drawPath(path, def, ctx, style) {\n                ctx.strokeStyle = style.color;\n                ctx.fillStyle = style.color;\n                ctx.lineWidth = style.lineWidth;\n                ctx.beginPath();\n                ctx.moveTo(path[0][def.x], path[0][def.y]);\n                for(var j = 1; j < path.length; j++){\n                    ctx.lineTo(path[j][def.x], path[j][def.y]);\n                }\n                ctx.closePath();\n                ctx.stroke();\n            },\n            drawImage: function drawImage(imageData, size, ctx) {\n                var canvasData = ctx.getImageData(0, 0, size.x, size.y);\n                var data = canvasData.data;\n                var canvasDataPos = data.length;\n                var imageDataPos = imageData.length;\n                if (canvasDataPos / imageDataPos !== 4) {\n                    return false;\n                }\n                while(imageDataPos--){\n                    var value = imageData[imageDataPos];\n                    data[--canvasDataPos] = 255;\n                    data[--canvasDataPos] = value;\n                    data[--canvasDataPos] = value;\n                    data[--canvasDataPos] = value;\n                }\n                ctx.putImageData(canvasData, 0, 0);\n                return true;\n            }\n        };\n    /***/ },\n    /* 18 */ /***/ function(module, exports1, __nested_webpack_require_71379__) {\n        var baseMerge = __nested_webpack_require_71379__(70), createAssigner = __nested_webpack_require_71379__(125);\n        /**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */ var merge = createAssigner(function(object, source, srcIndex) {\n            baseMerge(object, source, srcIndex);\n        });\n        module.exports = merge;\n    /***/ },\n    /* 19 */ /***/ function(module, exports1, __nested_webpack_require_72713__) {\n        var freeGlobal = __nested_webpack_require_72713__(45);\n        /** Detect free variable `self`. */ var freeSelf = typeof self == \"object\" && self && self.Object === Object && self;\n        /** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function(\"return this\")();\n        module.exports = root;\n    /***/ },\n    /* 20 */ /***/ function(module, exports1) {\n        /**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */ function isObjectLike(value) {\n            return value != null && typeof value == \"object\";\n        }\n        module.exports = isObjectLike;\n    /***/ },\n    /* 21 */ /***/ function(module, __nested_webpack_exports__, __webpack_require__) {\n        \"use strict\";\n        /**\n * http://www.codeproject.com/Tips/407172/Connected-Component-Labeling-and-Vectorization\n */ var Tracer = {\n            searchDirections: [\n                [\n                    0,\n                    1\n                ],\n                [\n                    1,\n                    1\n                ],\n                [\n                    1,\n                    0\n                ],\n                [\n                    1,\n                    -1\n                ],\n                [\n                    0,\n                    -1\n                ],\n                [\n                    -1,\n                    -1\n                ],\n                [\n                    -1,\n                    0\n                ],\n                [\n                    -1,\n                    1\n                ]\n            ],\n            create: function create(imageWrapper, labelWrapper) {\n                var imageData = imageWrapper.data;\n                var labelData = labelWrapper.data;\n                var searchDirections = this.searchDirections;\n                var width = imageWrapper.size.x;\n                var pos;\n                function _trace(current, color, label, edgelabel) {\n                    var i;\n                    var y;\n                    var x;\n                    for(i = 0; i < searchDirections.length; i++){\n                        y = current.cy + searchDirections[current.dir][0];\n                        x = current.cx + searchDirections[current.dir][1];\n                        pos = y * width + x;\n                        if (imageData[pos] === color && (labelData[pos] === 0 || labelData[pos] === label)) {\n                            labelData[pos] = label;\n                            current.cy = y;\n                            current.cx = x;\n                            return true;\n                        }\n                        if (labelData[pos] === 0) {\n                            labelData[pos] = edgelabel;\n                        }\n                        current.dir = (current.dir + 1) % 8;\n                    }\n                    return false;\n                }\n                function vertex2D(x, y, dir) {\n                    return {\n                        dir: dir,\n                        x: x,\n                        y: y,\n                        next: null,\n                        prev: null\n                    };\n                }\n                function _contourTracing(sy, sx, label, color, edgelabel) {\n                    var Fv = null;\n                    var Cv;\n                    var P;\n                    var ldir;\n                    var current = {\n                        cx: sx,\n                        cy: sy,\n                        dir: 0\n                    };\n                    if (_trace(current, color, label, edgelabel)) {\n                        Fv = vertex2D(sx, sy, current.dir);\n                        Cv = Fv;\n                        ldir = current.dir;\n                        P = vertex2D(current.cx, current.cy, 0);\n                        P.prev = Cv;\n                        Cv.next = P;\n                        P.next = null;\n                        Cv = P;\n                        var totalPixelCount = imageWrapper.size.x * imageWrapper.size.y;\n                        var pixelCounter = 0;\n                        do {\n                            current.dir = (current.dir + 6) % 8;\n                            _trace(current, color, label, edgelabel);\n                            if (ldir !== current.dir) {\n                                Cv.dir = current.dir;\n                                P = vertex2D(current.cx, current.cy, 0);\n                                P.prev = Cv;\n                                Cv.next = P;\n                                P.next = null;\n                                Cv = P;\n                            } else {\n                                Cv.dir = ldir;\n                                Cv.x = current.cx;\n                                Cv.y = current.cy;\n                            }\n                            ldir = current.dir;\n                        }while ((current.cx !== sx || current.cy !== sy) && ++pixelCounter < totalPixelCount);\n                        Fv.prev = Cv.prev;\n                        Cv.prev.next = Fv;\n                    }\n                    return Fv;\n                }\n                return {\n                    trace: function trace(current, color, label, edgelabel) {\n                        return _trace(current, color, label, edgelabel);\n                    },\n                    contourTracing: function contourTracing(sy, sx, label, color, edgelabel) {\n                        return _contourTracing(sy, sx, label, color, edgelabel);\n                    }\n                };\n            }\n        };\n        /* harmony default export */ __nested_webpack_exports__[\"a\"] = Tracer;\n    /***/ },\n    /* 22 */ /***/ function(module, exports1, __nested_webpack_require_78825__) {\n        var Symbol1 = __nested_webpack_require_78825__(27), getRawTag = __nested_webpack_require_78825__(83), objectToString = __nested_webpack_require_78825__(84);\n        /** `Object#toString` result references. */ var nullTag = \"[object Null]\", undefinedTag = \"[object Undefined]\";\n        /** Built-in value references. */ var symToStringTag = Symbol1 ? Symbol1.toStringTag : undefined;\n        /**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */ function baseGetTag(value) {\n            if (value == null) {\n                return value === undefined ? undefinedTag : nullTag;\n            }\n            return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n        }\n        module.exports = baseGetTag;\n    /***/ },\n    /* 23 */ /***/ function(module, __nested_webpack_exports__, __nested_webpack_require_79775__) {\n        \"use strict\";\n        /* WEBPACK VAR INJECTION */ (function(global) {\n            var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_79775__(5);\n            /* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __nested_webpack_require_79775__.n(gl_matrix__WEBPACK_IMPORTED_MODULE_0__);\n            /* harmony import */ var _common_image_wrapper__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_79775__(10);\n            /* harmony import */ var _common_cv_utils__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_79775__(12);\n            /* harmony import */ var _common_array_helper__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_79775__(9);\n            /* harmony import */ var _common_image_debug__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_79775__(17);\n            /* harmony import */ var _rasterizer__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_79775__(67);\n            /* harmony import */ var _tracer__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_79775__(21);\n            /* harmony import */ var _skeletonizer__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_79775__(68);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_0__[\"glMatrix\"].setMatrixArrayType(Array);\n            var _config;\n            var _currentImageWrapper;\n            var _skelImageWrapper;\n            var _subImageWrapper;\n            var _labelImageWrapper;\n            var _patchGrid;\n            var _patchLabelGrid;\n            var _imageToPatchGrid;\n            var _binaryImageWrapper;\n            var _patchSize;\n            var _canvasContainer = {\n                ctx: {\n                    binary: null\n                },\n                dom: {\n                    binary: null\n                }\n            };\n            var _numPatches = {\n                x: 0,\n                y: 0\n            };\n            var _inputImageWrapper;\n            var _skeletonizer;\n            function initBuffers() {\n                if (_config.halfSample) {\n                    _currentImageWrapper = new _common_image_wrapper__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"]({\n                        // eslint-disable-next-line no-bitwise\n                        x: _inputImageWrapper.size.x / 2 | 0,\n                        // eslint-disable-next-line no-bitwise\n                        y: _inputImageWrapper.size.y / 2 | 0\n                    });\n                } else {\n                    _currentImageWrapper = _inputImageWrapper;\n                }\n                _patchSize = Object(_common_cv_utils__WEBPACK_IMPORTED_MODULE_2__[\"calculatePatchSize\"])(_config.patchSize, _currentImageWrapper.size);\n                // eslint-disable-next-line no-bitwise\n                _numPatches.x = _currentImageWrapper.size.x / _patchSize.x | 0;\n                // eslint-disable-next-line no-bitwise\n                _numPatches.y = _currentImageWrapper.size.y / _patchSize.y | 0;\n                _binaryImageWrapper = new _common_image_wrapper__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"](_currentImageWrapper.size, undefined, Uint8Array, false);\n                _labelImageWrapper = new _common_image_wrapper__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"](_patchSize, undefined, Array, true);\n                var skeletonImageData = new ArrayBuffer(64 * 1024);\n                _subImageWrapper = new _common_image_wrapper__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"](_patchSize, new Uint8Array(skeletonImageData, 0, _patchSize.x * _patchSize.y));\n                _skelImageWrapper = new _common_image_wrapper__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"](_patchSize, new Uint8Array(skeletonImageData, _patchSize.x * _patchSize.y * 3, _patchSize.x * _patchSize.y), undefined, true);\n                _skeletonizer = Object(_skeletonizer__WEBPACK_IMPORTED_MODULE_7__[/* default */ \"a\"])( false ? 0 : typeof self !== \"undefined\" ? self : global, {\n                    size: _patchSize.x\n                }, skeletonImageData);\n                _imageToPatchGrid = new _common_image_wrapper__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"]({\n                    // eslint-disable-next-line no-bitwise\n                    x: _currentImageWrapper.size.x / _subImageWrapper.size.x | 0,\n                    // eslint-disable-next-line no-bitwise\n                    y: _currentImageWrapper.size.y / _subImageWrapper.size.y | 0\n                }, undefined, Array, true);\n                _patchGrid = new _common_image_wrapper__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"](_imageToPatchGrid.size, undefined, undefined, true);\n                _patchLabelGrid = new _common_image_wrapper__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"](_imageToPatchGrid.size, undefined, Int32Array, true);\n            }\n            function initCanvas() {\n                if (_config.useWorker || typeof document === \"undefined\") {\n                    return;\n                }\n                _canvasContainer.dom.binary = document.createElement(\"canvas\");\n                _canvasContainer.dom.binary.className = \"binaryBuffer\";\n                if (false) {}\n                var willReadFrequently = !!_config.willReadFrequently;\n                console.warn(\"* initCanvas willReadFrequently\", willReadFrequently, _config);\n                _canvasContainer.ctx.binary = _canvasContainer.dom.binary.getContext(\"2d\", {\n                    willReadFrequently: willReadFrequently\n                });\n                _canvasContainer.dom.binary.width = _binaryImageWrapper.size.x;\n                _canvasContainer.dom.binary.height = _binaryImageWrapper.size.y;\n            }\n            /**\n * Creates a bounding box which encloses all the given patches\n * @returns {Array} The minimal bounding box\n */ function boxFromPatches(patches) {\n                var overAvg;\n                var i;\n                var j;\n                var patch;\n                var transMat;\n                var minx = _binaryImageWrapper.size.x;\n                var miny = _binaryImageWrapper.size.y;\n                var maxx = -_binaryImageWrapper.size.x;\n                var maxy = -_binaryImageWrapper.size.y;\n                var box;\n                var scale;\n                // draw all patches which are to be taken into consideration\n                overAvg = 0;\n                for(i = 0; i < patches.length; i++){\n                    patch = patches[i];\n                    overAvg += patch.rad;\n                    if (false) {}\n                }\n                overAvg /= patches.length;\n                overAvg = (overAvg * 180 / Math.PI + 90) % 180 - 90;\n                if (overAvg < 0) {\n                    overAvg += 180;\n                }\n                overAvg = (180 - overAvg) * Math.PI / 180;\n                transMat = gl_matrix__WEBPACK_IMPORTED_MODULE_0__[\"mat2\"].copy(gl_matrix__WEBPACK_IMPORTED_MODULE_0__[\"mat2\"].create(), [\n                    Math.cos(overAvg),\n                    Math.sin(overAvg),\n                    -Math.sin(overAvg),\n                    Math.cos(overAvg)\n                ]);\n                // iterate over patches and rotate by angle\n                for(i = 0; i < patches.length; i++){\n                    patch = patches[i];\n                    for(j = 0; j < 4; j++){\n                        gl_matrix__WEBPACK_IMPORTED_MODULE_0__[\"vec2\"].transformMat2(patch.box[j], patch.box[j], transMat);\n                    }\n                    if (false) {}\n                }\n                // find bounding box\n                for(i = 0; i < patches.length; i++){\n                    patch = patches[i];\n                    for(j = 0; j < 4; j++){\n                        if (patch.box[j][0] < minx) {\n                            minx = patch.box[j][0];\n                        }\n                        if (patch.box[j][0] > maxx) {\n                            maxx = patch.box[j][0];\n                        }\n                        if (patch.box[j][1] < miny) {\n                            miny = patch.box[j][1];\n                        }\n                        if (patch.box[j][1] > maxy) {\n                            maxy = patch.box[j][1];\n                        }\n                    }\n                }\n                box = [\n                    [\n                        minx,\n                        miny\n                    ],\n                    [\n                        maxx,\n                        miny\n                    ],\n                    [\n                        maxx,\n                        maxy\n                    ],\n                    [\n                        minx,\n                        maxy\n                    ]\n                ];\n                if (false) {}\n                scale = _config.halfSample ? 2 : 1;\n                // reverse rotation;\n                transMat = gl_matrix__WEBPACK_IMPORTED_MODULE_0__[\"mat2\"].invert(transMat, transMat);\n                for(j = 0; j < 4; j++){\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_0__[\"vec2\"].transformMat2(box[j], box[j], transMat);\n                }\n                if (false) {}\n                for(j = 0; j < 4; j++){\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_0__[\"vec2\"].scale(box[j], box[j], scale);\n                }\n                return box;\n            }\n            /**\n * Creates a binary image of the current image\n */ function binarizeImage() {\n                Object(_common_cv_utils__WEBPACK_IMPORTED_MODULE_2__[\"otsuThreshold\"])(_currentImageWrapper, _binaryImageWrapper);\n                _binaryImageWrapper.zeroBorder();\n                if (false) {}\n            }\n            /**\n * Iterate over the entire image\n * extract patches\n */ function findPatches() {\n                var i;\n                var j;\n                var x;\n                var y;\n                var moments;\n                var patchesFound = [];\n                var rasterizer;\n                var rasterResult;\n                var patch;\n                for(i = 0; i < _numPatches.x; i++){\n                    for(j = 0; j < _numPatches.y; j++){\n                        x = _subImageWrapper.size.x * i;\n                        y = _subImageWrapper.size.y * j;\n                        // seperate parts\n                        skeletonize(x, y);\n                        // Rasterize, find individual bars\n                        _skelImageWrapper.zeroBorder();\n                        _common_array_helper__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].init(_labelImageWrapper.data, 0);\n                        rasterizer = _rasterizer__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].create(_skelImageWrapper, _labelImageWrapper);\n                        rasterResult = rasterizer.rasterize(0);\n                        if (false) {}\n                        // calculate moments from the skeletonized patch\n                        moments = _labelImageWrapper.moments(rasterResult.count);\n                        // extract eligible patches\n                        patchesFound = patchesFound.concat(describePatch(moments, [\n                            i,\n                            j\n                        ], x, y));\n                    }\n                }\n                if (false) {}\n                return patchesFound;\n            }\n            /**\n * Finds those connected areas which contain at least 6 patches\n * and returns them ordered DESC by the number of contained patches\n * @param {Number} maxLabel\n */ function findBiggestConnectedAreas(maxLabel) {\n                var i;\n                var sum;\n                var labelHist = [];\n                var topLabels = [];\n                for(i = 0; i < maxLabel; i++){\n                    labelHist.push(0);\n                }\n                sum = _patchLabelGrid.data.length;\n                while(sum--){\n                    if (_patchLabelGrid.data[sum] > 0) {\n                        labelHist[_patchLabelGrid.data[sum] - 1]++;\n                    }\n                }\n                labelHist = labelHist.map(function(val, idx) {\n                    return {\n                        val: val,\n                        label: idx + 1\n                    };\n                });\n                labelHist.sort(function(a, b) {\n                    return b.val - a.val;\n                });\n                // extract top areas with at least 6 patches present\n                topLabels = labelHist.filter(function(el) {\n                    return el.val >= 5;\n                });\n                return topLabels;\n            }\n            /**\n *\n */ function findBoxes(topLabels, maxLabel) {\n                var i;\n                var j;\n                var sum;\n                var patches = [];\n                var patch;\n                var box;\n                var boxes = [];\n                var hsv = [\n                    0,\n                    1,\n                    1\n                ];\n                var rgb = [\n                    0,\n                    0,\n                    0\n                ];\n                for(i = 0; i < topLabels.length; i++){\n                    sum = _patchLabelGrid.data.length;\n                    patches.length = 0;\n                    while(sum--){\n                        if (_patchLabelGrid.data[sum] === topLabels[i].label) {\n                            patch = _imageToPatchGrid.data[sum];\n                            patches.push(patch);\n                        }\n                    }\n                    box = boxFromPatches(patches);\n                    if (box) {\n                        boxes.push(box);\n                        // draw patch-labels if requested\n                        if (false) {}\n                    }\n                }\n                return boxes;\n            }\n            /**\n * Find similar moments (via cluster)\n * @param {Object} moments\n */ function similarMoments(moments) {\n                var clusters = Object(_common_cv_utils__WEBPACK_IMPORTED_MODULE_2__[\"cluster\"])(moments, 0.90);\n                var topCluster = Object(_common_cv_utils__WEBPACK_IMPORTED_MODULE_2__[\"topGeneric\"])(clusters, 1, function(e) {\n                    return e.getPoints().length;\n                });\n                var points = [];\n                var result = [];\n                if (topCluster.length === 1) {\n                    points = topCluster[0].item.getPoints();\n                    for(var i = 0; i < points.length; i++){\n                        result.push(points[i].point);\n                    }\n                }\n                return result;\n            }\n            function skeletonize(x, y) {\n                _binaryImageWrapper.subImageAsCopy(_subImageWrapper, Object(_common_cv_utils__WEBPACK_IMPORTED_MODULE_2__[\"imageRef\"])(x, y));\n                _skeletonizer.skeletonize();\n                // Show skeleton if requested\n                if (false) {}\n            }\n            /**\n * Extracts and describes those patches which seem to contain a barcode pattern\n * @param {Array} moments\n * @param {Object} patchPos,\n * @param {Number} x\n * @param {Number} y\n * @returns {Array} list of patches\n */ function describePatch(moments, patchPos, x, y) {\n                var k;\n                var avg;\n                var eligibleMoments = [];\n                var matchingMoments;\n                var patch;\n                var patchesFound = [];\n                var minComponentWeight = Math.ceil(_patchSize.x / 3);\n                if (moments.length >= 2) {\n                    // only collect moments which's area covers at least minComponentWeight pixels.\n                    for(k = 0; k < moments.length; k++){\n                        if (moments[k].m00 > minComponentWeight) {\n                            eligibleMoments.push(moments[k]);\n                        }\n                    }\n                    // if at least 2 moments are found which have at least minComponentWeights covered\n                    if (eligibleMoments.length >= 2) {\n                        matchingMoments = similarMoments(eligibleMoments);\n                        avg = 0;\n                        // determine the similarity of the moments\n                        for(k = 0; k < matchingMoments.length; k++){\n                            var _matchingMoments$k$ra, _matchingMoments$k;\n                            avg += (_matchingMoments$k$ra = (_matchingMoments$k = matchingMoments[k]) === null || _matchingMoments$k === void 0 ? void 0 : _matchingMoments$k.rad) !== null && _matchingMoments$k$ra !== void 0 ? _matchingMoments$k$ra : 0;\n                        }\n                        // Only two of the moments are allowed not to fit into the equation\n                        // add the patch to the set\n                        if (matchingMoments.length > 1 && matchingMoments.length >= eligibleMoments.length / 4 * 3 && matchingMoments.length > moments.length / 4) {\n                            avg /= matchingMoments.length;\n                            patch = {\n                                index: patchPos[1] * _numPatches.x + patchPos[0],\n                                pos: {\n                                    x: x,\n                                    y: y\n                                },\n                                box: [\n                                    gl_matrix__WEBPACK_IMPORTED_MODULE_0__[\"vec2\"].clone([\n                                        x,\n                                        y\n                                    ]),\n                                    gl_matrix__WEBPACK_IMPORTED_MODULE_0__[\"vec2\"].clone([\n                                        x + _subImageWrapper.size.x,\n                                        y\n                                    ]),\n                                    gl_matrix__WEBPACK_IMPORTED_MODULE_0__[\"vec2\"].clone([\n                                        x + _subImageWrapper.size.x,\n                                        y + _subImageWrapper.size.y\n                                    ]),\n                                    gl_matrix__WEBPACK_IMPORTED_MODULE_0__[\"vec2\"].clone([\n                                        x,\n                                        y + _subImageWrapper.size.y\n                                    ])\n                                ],\n                                moments: matchingMoments,\n                                rad: avg,\n                                vec: gl_matrix__WEBPACK_IMPORTED_MODULE_0__[\"vec2\"].clone([\n                                    Math.cos(avg),\n                                    Math.sin(avg)\n                                ])\n                            };\n                            patchesFound.push(patch);\n                        }\n                    }\n                }\n                return patchesFound;\n            }\n            /**\n * finds patches which are connected and share the same orientation\n * @param {Object} patchesFound\n */ function rasterizeAngularSimilarity(patchesFound) {\n                var label = 0;\n                var threshold = 0.95;\n                var currIdx = 0;\n                var j;\n                var patch;\n                var hsv = [\n                    0,\n                    1,\n                    1\n                ];\n                var rgb = [\n                    0,\n                    0,\n                    0\n                ];\n                function notYetProcessed() {\n                    var i;\n                    for(i = 0; i < _patchLabelGrid.data.length; i++){\n                        if (_patchLabelGrid.data[i] === 0 && _patchGrid.data[i] === 1) {\n                            return i;\n                        }\n                    }\n                    return _patchLabelGrid.data.length;\n                }\n                function trace(currentIdx) {\n                    var x;\n                    var y;\n                    var currentPatch;\n                    var idx;\n                    var dir;\n                    var current = {\n                        x: currentIdx % _patchLabelGrid.size.x,\n                        y: currentIdx / _patchLabelGrid.size.x | 0\n                    };\n                    var similarity;\n                    if (currentIdx < _patchLabelGrid.data.length) {\n                        currentPatch = _imageToPatchGrid.data[currentIdx];\n                        // assign label\n                        _patchLabelGrid.data[currentIdx] = label;\n                        for(dir = 0; dir < _tracer__WEBPACK_IMPORTED_MODULE_6__[/* default */ \"a\"].searchDirections.length; dir++){\n                            y = current.y + _tracer__WEBPACK_IMPORTED_MODULE_6__[/* default */ \"a\"].searchDirections[dir][0];\n                            x = current.x + _tracer__WEBPACK_IMPORTED_MODULE_6__[/* default */ \"a\"].searchDirections[dir][1];\n                            idx = y * _patchLabelGrid.size.x + x;\n                            // continue if patch empty\n                            if (_patchGrid.data[idx] === 0) {\n                                _patchLabelGrid.data[idx] = Number.MAX_VALUE;\n                                continue;\n                            }\n                            if (_patchLabelGrid.data[idx] === 0) {\n                                similarity = Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_0__[\"vec2\"].dot(_imageToPatchGrid.data[idx].vec, currentPatch.vec));\n                                if (similarity > threshold) {\n                                    trace(idx);\n                                }\n                            }\n                        }\n                    }\n                }\n                // prepare for finding the right patches\n                _common_array_helper__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].init(_patchGrid.data, 0);\n                _common_array_helper__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].init(_patchLabelGrid.data, 0);\n                _common_array_helper__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].init(_imageToPatchGrid.data, null);\n                for(j = 0; j < patchesFound.length; j++){\n                    patch = patchesFound[j];\n                    _imageToPatchGrid.data[patch.index] = patch;\n                    _patchGrid.data[patch.index] = 1;\n                }\n                // rasterize the patches found to determine area\n                _patchGrid.zeroBorder();\n                // eslint-disable-next-line no-cond-assign\n                while((currIdx = notYetProcessed()) < _patchLabelGrid.data.length){\n                    label++;\n                    trace(currIdx);\n                }\n                // draw patch-labels if requested\n                if (false) {}\n                return label;\n            }\n            /* harmony default export */ __nested_webpack_exports__[\"a\"] = {\n                init: function init(inputImageWrapper, config) {\n                    _config = config;\n                    _inputImageWrapper = inputImageWrapper;\n                    initBuffers();\n                    initCanvas();\n                },\n                locate: function locate() {\n                    if (_config.halfSample) {\n                        Object(_common_cv_utils__WEBPACK_IMPORTED_MODULE_2__[\"halfSample\"])(_inputImageWrapper, _currentImageWrapper);\n                    }\n                    binarizeImage();\n                    var patchesFound = findPatches();\n                    // return unless 5% or more patches are found\n                    if (patchesFound.length < _numPatches.x * _numPatches.y * 0.05) {\n                        return null;\n                    }\n                    // rasterrize area by comparing angular similarity;\n                    var maxLabel = rasterizeAngularSimilarity(patchesFound);\n                    if (maxLabel < 1) {\n                        return null;\n                    }\n                    // search for area with the most patches (biggest connected area)\n                    var topLabels = findBiggestConnectedAreas(maxLabel);\n                    if (topLabels.length === 0) {\n                        return null;\n                    }\n                    var boxes = findBoxes(topLabels, maxLabel);\n                    return boxes;\n                },\n                checkImageConstraints: function checkImageConstraints(inputStream, config) {\n                    var patchSize;\n                    var width = inputStream.getWidth();\n                    var height = inputStream.getHeight();\n                    var thisHalfSample = config.halfSample ? 0.5 : 1;\n                    var area;\n                    // calculate width and height based on area\n                    if (inputStream.getConfig().area) {\n                        area = Object(_common_cv_utils__WEBPACK_IMPORTED_MODULE_2__[\"computeImageArea\"])(width, height, inputStream.getConfig().area);\n                        inputStream.setTopRight({\n                            x: area.sx,\n                            y: area.sy\n                        });\n                        inputStream.setCanvasSize({\n                            x: width,\n                            y: height\n                        });\n                        width = area.sw;\n                        height = area.sh;\n                    }\n                    var size = {\n                        x: Math.floor(width * thisHalfSample),\n                        y: Math.floor(height * thisHalfSample)\n                    };\n                    patchSize = Object(_common_cv_utils__WEBPACK_IMPORTED_MODULE_2__[\"calculatePatchSize\"])(config.patchSize, size);\n                    if (false) {}\n                    inputStream.setWidth(Math.max(Math.floor(Math.floor(size.x / patchSize.x) * (1 / thisHalfSample) * patchSize.x), patchSize.x));\n                    inputStream.setHeight(Math.max(Math.floor(Math.floor(size.y / patchSize.y) * (1 / thisHalfSample) * patchSize.y), patchSize.y));\n                    if (inputStream.getWidth() % patchSize.x === 0 && inputStream.getHeight() % patchSize.y === 0) {\n                        return true;\n                    }\n                    throw new Error(\"Image dimensions do not comply with the current settings: Width (\".concat(width, \" )and height (\").concat(height, \") must a multiple of \").concat(patchSize.x));\n                }\n            };\n        /* WEBPACK VAR INJECTION */ }).call(this, __nested_webpack_require_79775__(46));\n    /***/ },\n    /* 24 */ /***/ function(module, exports1, __nested_webpack_require_106077__) {\n        var listCacheClear = __nested_webpack_require_106077__(72), listCacheDelete = __nested_webpack_require_106077__(73), listCacheGet = __nested_webpack_require_106077__(74), listCacheHas = __nested_webpack_require_106077__(75), listCacheSet = __nested_webpack_require_106077__(76);\n        /**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function ListCache(entries) {\n            var index = -1, length = entries == null ? 0 : entries.length;\n            this.clear();\n            while(++index < length){\n                var entry = entries[index];\n                this.set(entry[0], entry[1]);\n            }\n        }\n        // Add methods to `ListCache`.\n        ListCache.prototype.clear = listCacheClear;\n        ListCache.prototype[\"delete\"] = listCacheDelete;\n        ListCache.prototype.get = listCacheGet;\n        ListCache.prototype.has = listCacheHas;\n        ListCache.prototype.set = listCacheSet;\n        module.exports = ListCache;\n    /***/ },\n    /* 25 */ /***/ function(module, exports1, __nested_webpack_require_107124__) {\n        var eq = __nested_webpack_require_107124__(26);\n        /**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */ function assocIndexOf(array, key) {\n            var length = array.length;\n            while(length--){\n                if (eq(array[length][0], key)) {\n                    return length;\n                }\n            }\n            return -1;\n        }\n        module.exports = assocIndexOf;\n    /***/ },\n    /* 26 */ /***/ function(module, exports1) {\n        /**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */ function eq(value, other) {\n            return value === other || value !== value && other !== other;\n        }\n        module.exports = eq;\n    /***/ },\n    /* 27 */ /***/ function(module, exports1, __nested_webpack_require_108698__) {\n        var root = __nested_webpack_require_108698__(19);\n        /** Built-in value references. */ var Symbol1 = root.Symbol;\n        module.exports = Symbol1;\n    /***/ },\n    /* 28 */ /***/ function(module, exports1, __nested_webpack_require_108927__) {\n        var getNative = __nested_webpack_require_108927__(35);\n        /* Built-in method references that are verified to be native. */ var nativeCreate = getNative(Object, \"create\");\n        module.exports = nativeCreate;\n    /***/ },\n    /* 29 */ /***/ function(module, exports1, __nested_webpack_require_109218__) {\n        var isKeyable = __nested_webpack_require_109218__(97);\n        /**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */ function getMapData(map, key) {\n            var data = map.__data__;\n            return isKeyable(key) ? data[typeof key == \"string\" ? \"string\" : \"hash\"] : data.map;\n        }\n        module.exports = getMapData;\n    /***/ },\n    /* 30 */ /***/ function(module, exports1, __nested_webpack_require_109742__) {\n        var baseIsArguments = __nested_webpack_require_109742__(112), isObjectLike = __nested_webpack_require_109742__(20);\n        /** Used for built-in method references. */ var objectProto = Object.prototype;\n        /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n        /** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;\n        /**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */ var isArguments = baseIsArguments(function() {\n            return arguments;\n        }()) ? baseIsArguments : function(value) {\n            return isObjectLike(value) && hasOwnProperty.call(value, \"callee\") && !propertyIsEnumerable.call(value, \"callee\");\n        };\n        module.exports = isArguments;\n    /***/ },\n    /* 31 */ /***/ function(module, exports1) {\n        /** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;\n        /** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\\d*)$/;\n        /**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */ function isIndex(value, length) {\n            var type = typeof value;\n            length = length == null ? MAX_SAFE_INTEGER : length;\n            return !!length && (type == \"number\" || type != \"symbol\" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n        }\n        module.exports = isIndex;\n    /***/ },\n    /* 32 */ /***/ function(module, exports1, __nested_webpack_require_111780__) {\n        var isArray = __nested_webpack_require_111780__(16), isKey = __nested_webpack_require_111780__(145), stringToPath = __nested_webpack_require_111780__(146), toString = __nested_webpack_require_111780__(149);\n        /**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */ function castPath(value, object) {\n            if (isArray(value)) {\n                return value;\n            }\n            return isKey(value, object) ? [\n                value\n            ] : stringToPath(toString(value));\n        }\n        module.exports = castPath;\n    /***/ },\n    /* 33 */ /***/ function(module, exports1, __nested_webpack_require_112530__) {\n        var arrayWithHoles = __nested_webpack_require_112530__(133);\n        var iterableToArrayLimit = __nested_webpack_require_112530__(134);\n        var unsupportedIterableToArray = __nested_webpack_require_112530__(60);\n        var nonIterableRest = __nested_webpack_require_112530__(135);\n        function _slicedToArray(arr, i) {\n            return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n        }\n        module.exports = _slicedToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 34 */ /***/ function(module, exports1, __nested_webpack_require_113152__) {\n        var arrayWithoutHoles = __nested_webpack_require_113152__(139);\n        var iterableToArray = __nested_webpack_require_113152__(140);\n        var unsupportedIterableToArray = __nested_webpack_require_113152__(60);\n        var nonIterableSpread = __nested_webpack_require_113152__(141);\n        function _toConsumableArray(arr) {\n            return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n        }\n        module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 35 */ /***/ function(module, exports1, __nested_webpack_require_113773__) {\n        var baseIsNative = __nested_webpack_require_113773__(82), getValue = __nested_webpack_require_113773__(88);\n        /**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */ function getNative(object, key) {\n            var value = getValue(object, key);\n            return baseIsNative(value) ? value : undefined;\n        }\n        module.exports = getNative;\n    /***/ },\n    /* 36 */ /***/ function(module, exports1, __nested_webpack_require_114382__) {\n        var baseGetTag = __nested_webpack_require_114382__(22), isObject = __nested_webpack_require_114382__(15);\n        /** `Object#toString` result references. */ var asyncTag = \"[object AsyncFunction]\", funcTag = \"[object Function]\", genTag = \"[object GeneratorFunction]\", proxyTag = \"[object Proxy]\";\n        /**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */ function isFunction(value) {\n            if (!isObject(value)) {\n                return false;\n            }\n            // The use of `Object#toString` avoids issues with the `typeof` operator\n            // in Safari 9 which returns 'object' for typed arrays and other constructors.\n            var tag = baseGetTag(value);\n            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n        }\n        module.exports = isFunction;\n    /***/ },\n    /* 37 */ /***/ function(module, exports1, __nested_webpack_require_115551__) {\n        var defineProperty = __nested_webpack_require_115551__(49);\n        /**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */ function baseAssignValue(object, key, value) {\n            if (key == \"__proto__\" && defineProperty) {\n                defineProperty(object, key, {\n                    \"configurable\": true,\n                    \"enumerable\": true,\n                    \"value\": value,\n                    \"writable\": true\n                });\n            } else {\n                object[key] = value;\n            }\n        }\n        module.exports = baseAssignValue;\n    /***/ },\n    /* 38 */ /***/ function(module, exports1) {\n        module.exports = function(module) {\n            if (!module.webpackPolyfill) {\n                module.deprecate = function() {};\n                module.paths = [];\n                // module.parent = undefined by default\n                if (!module.children) module.children = [];\n                Object.defineProperty(module, \"loaded\", {\n                    enumerable: true,\n                    get: function() {\n                        return module.l;\n                    }\n                });\n                Object.defineProperty(module, \"id\", {\n                    enumerable: true,\n                    get: function() {\n                        return module.i;\n                    }\n                });\n                module.webpackPolyfill = 1;\n            }\n            return module;\n        };\n    /***/ },\n    /* 39 */ /***/ function(module, exports1, __nested_webpack_require_117280__) {\n        var isFunction = __nested_webpack_require_117280__(36), isLength = __nested_webpack_require_117280__(40);\n        /**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */ function isArrayLike(value) {\n            return value != null && isLength(value.length) && !isFunction(value);\n        }\n        module.exports = isArrayLike;\n    /***/ },\n    /* 40 */ /***/ function(module, exports1) {\n        /** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;\n        /**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */ function isLength(value) {\n            return typeof value == \"number\" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n        }\n        module.exports = isLength;\n    /***/ },\n    /* 41 */ /***/ function(module, exports1) {\n        function _setPrototypeOf(o, p) {\n            module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n                o.__proto__ = p;\n                return o;\n            }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n            return _setPrototypeOf(o, p);\n        }\n        module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 42 */ /***/ function(module, exports1, __nested_webpack_require_119690__) {\n        var baseGetTag = __nested_webpack_require_119690__(22), isObjectLike = __nested_webpack_require_119690__(20);\n        /** `Object#toString` result references. */ var symbolTag = \"[object Symbol]\";\n        /**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */ function isSymbol(value) {\n            return typeof value == \"symbol\" || isObjectLike(value) && baseGetTag(value) == symbolTag;\n        }\n        module.exports = isSymbol;\n    /***/ },\n    /* 43 */ /***/ function(module, exports1, __nested_webpack_require_120488__) {\n        var isSymbol = __nested_webpack_require_120488__(42);\n        /** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;\n        /**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */ function toKey(value) {\n            if (typeof value == \"string\" || isSymbol(value)) {\n                return value;\n            }\n            var result = value + \"\";\n            return result == \"0\" && 1 / value == -INFINITY ? \"-0\" : result;\n        }\n        module.exports = toKey;\n    /***/ },\n    /* 44 */ /***/ function(module, exports1, __nested_webpack_require_121178__) {\n        var getNative = __nested_webpack_require_121178__(35), root = __nested_webpack_require_121178__(19);\n        /* Built-in method references that are verified to be native. */ var Map1 = getNative(root, \"Map\");\n        module.exports = Map1;\n    /***/ },\n    /* 45 */ /***/ function(module, exports1, __nested_webpack_require_121480__) {\n        /* WEBPACK VAR INJECTION */ (function(global) {\n            var freeGlobal = typeof global == \"object\" && global && global.Object === Object && global;\n            module.exports = freeGlobal;\n        /* WEBPACK VAR INJECTION */ }).call(this, __nested_webpack_require_121480__(46));\n    /***/ },\n    /* 46 */ /***/ function(module, exports1) {\n        var g;\n        // This works in non-strict mode\n        g = function() {\n            return this;\n        }();\n        try {\n            // This works if eval is allowed (see CSP)\n            g = g || new Function(\"return this\")();\n        } catch (e) {\n            // This works if the window reference is available\n            if (false) {}\n        }\n        // g can still be undefined, but nothing to do about it...\n        // We return undefined, instead of nothing here, so it's\n        // easier to handle this case. if(!global) { ...}\n        module.exports = g;\n    /***/ },\n    /* 47 */ /***/ function(module, exports1, __nested_webpack_require_122507__) {\n        var mapCacheClear = __nested_webpack_require_122507__(89), mapCacheDelete = __nested_webpack_require_122507__(96), mapCacheGet = __nested_webpack_require_122507__(98), mapCacheHas = __nested_webpack_require_122507__(99), mapCacheSet = __nested_webpack_require_122507__(100);\n        /**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function MapCache(entries) {\n            var index = -1, length = entries == null ? 0 : entries.length;\n            this.clear();\n            while(++index < length){\n                var entry = entries[index];\n                this.set(entry[0], entry[1]);\n            }\n        }\n        // Add methods to `MapCache`.\n        MapCache.prototype.clear = mapCacheClear;\n        MapCache.prototype[\"delete\"] = mapCacheDelete;\n        MapCache.prototype.get = mapCacheGet;\n        MapCache.prototype.has = mapCacheHas;\n        MapCache.prototype.set = mapCacheSet;\n        module.exports = MapCache;\n    /***/ },\n    /* 48 */ /***/ function(module, exports1, __nested_webpack_require_123560__) {\n        var baseAssignValue = __nested_webpack_require_123560__(37), eq = __nested_webpack_require_123560__(26);\n        /**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */ function assignMergeValue(object, key, value) {\n            if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {\n                baseAssignValue(object, key, value);\n            }\n        }\n        module.exports = assignMergeValue;\n    /***/ },\n    /* 49 */ /***/ function(module, exports1, __nested_webpack_require_124274__) {\n        var getNative = __nested_webpack_require_124274__(35);\n        var defineProperty = function() {\n            try {\n                var func = getNative(Object, \"defineProperty\");\n                func({}, \"\", {});\n                return func;\n            } catch (e) {}\n        }();\n        module.exports = defineProperty;\n    /***/ },\n    /* 50 */ /***/ function(module, exports1, __nested_webpack_require_124673__) {\n        var overArg = __nested_webpack_require_124673__(111);\n        /** Built-in value references. */ var getPrototype = overArg(Object.getPrototypeOf, Object);\n        module.exports = getPrototype;\n    /***/ },\n    /* 51 */ /***/ function(module, exports1) {\n        /** Used for built-in method references. */ var objectProto = Object.prototype;\n        /**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */ function isPrototype(value) {\n            var Ctor = value && value.constructor, proto = typeof Ctor == \"function\" && Ctor.prototype || objectProto;\n            return value === proto;\n        }\n        module.exports = isPrototype;\n    /***/ },\n    /* 52 */ /***/ function(module, exports1, __nested_webpack_require_125525__) {\n        /* WEBPACK VAR INJECTION */ (function(module) {\n            var root = __nested_webpack_require_125525__(19), stubFalse = __nested_webpack_require_125525__(114);\n            /** Detect free variable `exports`. */ var freeExports =  true && exports1 && !exports1.nodeType && exports1;\n            /** Detect free variable `module`. */ var freeModule = freeExports && typeof module == \"object\" && module && !module.nodeType && module;\n            /** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;\n            /** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined;\n            /* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n            /**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */ var isBuffer = nativeIsBuffer || stubFalse;\n            module.exports = isBuffer;\n        /* WEBPACK VAR INJECTION */ }).call(this, __nested_webpack_require_125525__(38)(module));\n    /***/ },\n    /* 53 */ /***/ function(module, exports1, __nested_webpack_require_126934__) {\n        var baseIsTypedArray = __nested_webpack_require_126934__(116), baseUnary = __nested_webpack_require_126934__(117), nodeUtil = __nested_webpack_require_126934__(118);\n        /* Node.js helper references. */ var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n        /**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n        module.exports = isTypedArray;\n    /***/ },\n    /* 54 */ /***/ function(module, exports1) {\n        /**\n * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */ function safeGet(object, key) {\n            if (key === \"constructor\" && typeof object[key] === \"function\") {\n                return;\n            }\n            if (key == \"__proto__\") {\n                return;\n            }\n            return object[key];\n        }\n        module.exports = safeGet;\n    /***/ },\n    /* 55 */ /***/ function(module, exports1, __nested_webpack_require_128341__) {\n        var baseAssignValue = __nested_webpack_require_128341__(37), eq = __nested_webpack_require_128341__(26);\n        /** Used for built-in method references. */ var objectProto = Object.prototype;\n        /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n        /**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */ function assignValue(object, key, value) {\n            var objValue = object[key];\n            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {\n                baseAssignValue(object, key, value);\n            }\n        }\n        module.exports = assignValue;\n    /***/ },\n    /* 56 */ /***/ function(module, exports1, __nested_webpack_require_129398__) {\n        var arrayLikeKeys = __nested_webpack_require_129398__(121), baseKeysIn = __nested_webpack_require_129398__(123), isArrayLike = __nested_webpack_require_129398__(39);\n        /**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */ function keysIn(object) {\n            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n        }\n        module.exports = keysIn;\n    /***/ },\n    /* 57 */ /***/ function(module, exports1) {\n        /**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */ function identity(value) {\n            return value;\n        }\n        module.exports = identity;\n    /***/ },\n    /* 58 */ /***/ function(module, exports1, __nested_webpack_require_130750__) {\n        var apply = __nested_webpack_require_130750__(127);\n        /* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;\n        /**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */ function overRest(func, start, transform) {\n            start = nativeMax(start === undefined ? func.length - 1 : start, 0);\n            return function() {\n                var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);\n                while(++index < length){\n                    array[index] = args[start + index];\n                }\n                index = -1;\n                var otherArgs = Array(start + 1);\n                while(++index < start){\n                    otherArgs[index] = args[index];\n                }\n                otherArgs[start] = transform(array);\n                return apply(func, this, otherArgs);\n            };\n        }\n        module.exports = overRest;\n    /***/ },\n    /* 59 */ /***/ function(module, exports1, __nested_webpack_require_132105__) {\n        var baseSetToString = __nested_webpack_require_132105__(128), shortOut = __nested_webpack_require_132105__(130);\n        /**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */ var setToString = shortOut(baseSetToString);\n        module.exports = setToString;\n    /***/ },\n    /* 60 */ /***/ function(module, exports1, __nested_webpack_require_132594__) {\n        var arrayLikeToArray = __nested_webpack_require_132594__(61);\n        function _unsupportedIterableToArray(o, minLen) {\n            if (!o) return;\n            if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n            var n = Object.prototype.toString.call(o).slice(8, -1);\n            if (n === \"Object\" && o.constructor) n = o.constructor.name;\n            if (n === \"Map\" || n === \"Set\") return Array.from(o);\n            if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n        }\n        module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 61 */ /***/ function(module, exports1) {\n        function _arrayLikeToArray(arr, len) {\n            if (len == null || len > arr.length) len = arr.length;\n            for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n            return arr2;\n        }\n        module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 62 */ /***/ function(module, exports1, __nested_webpack_require_133780__) {\n        var _typeof = __nested_webpack_require_133780__(13)[\"default\"];\n        var toPrimitive = __nested_webpack_require_133780__(136);\n        function _toPropertyKey(arg) {\n            var key = toPrimitive(arg, \"string\");\n            return _typeof(key) === \"symbol\" ? key : String(key);\n        }\n        module.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 63 */ /***/ function(module, exports1, __nested_webpack_require_134256__) {\n        var basePick = __nested_webpack_require_134256__(142), flatRest = __nested_webpack_require_134256__(156);\n        /**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */ var pick = flatRest(function(object, paths) {\n            return object == null ? {} : basePick(object, paths);\n        });\n        module.exports = pick;\n    /***/ },\n    /* 64 */ /***/ function(module, exports1, __nested_webpack_require_135007__) {\n        var getPrototypeOf = __nested_webpack_require_135007__(2);\n        var setPrototypeOf = __nested_webpack_require_135007__(41);\n        var isNativeFunction = __nested_webpack_require_135007__(161);\n        var construct = __nested_webpack_require_135007__(162);\n        function _wrapNativeSuper(Class) {\n            var _cache = typeof Map === \"function\" ? new Map() : undefined;\n            module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n                if (Class === null || !isNativeFunction(Class)) return Class;\n                if (typeof Class !== \"function\") {\n                    throw new TypeError(\"Super expression must either be null or a function\");\n                }\n                if (typeof _cache !== \"undefined\") {\n                    if (_cache.has(Class)) return _cache.get(Class);\n                    _cache.set(Class, Wrapper);\n                }\n                function Wrapper() {\n                    return construct(Class, arguments, getPrototypeOf(this).constructor);\n                }\n                Wrapper.prototype = Object.create(Class.prototype, {\n                    constructor: {\n                        value: Wrapper,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n                return setPrototypeOf(Wrapper, Class);\n            }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n            return _wrapNativeSuper(Class);\n        }\n        module.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 65 */ /***/ function(module, exports1, __nested_webpack_require_136715__) {\n        // NOTE FOR ANYONE IN HERE IN THE FUTURE: This module is used when the module is built for use in Node.\n        // Webpack.config.js explicitly REPLACES this module with the file called frame_grabber_browser when it is packing the Browser distribution.\n        var CVUtils = __nested_webpack_require_136715__(12);\n        var Ndarray = __nested_webpack_require_136715__(164);\n        var Interp2D = __nested_webpack_require_136715__(165).d2;\n        var FrameGrabber = {};\n        FrameGrabber.create = function(inputStream, canvas) {\n            // console.warn('*** FrameGrabberNode create()');\n            var _that = {};\n            var _videoSize = CVUtils.imageRef(inputStream.getRealWidth(), inputStream.getRealHeight());\n            var _canvasSize = inputStream.getCanvasSize();\n            var _size = CVUtils.imageRef(inputStream.getWidth(), inputStream.getHeight());\n            var _topRight = inputStream.getTopRight();\n            var _data = new Uint8Array(_size.x * _size.y);\n            var _grayData = new Uint8Array(_videoSize.x * _videoSize.y);\n            var _canvasData = new Uint8Array(_canvasSize.x * _canvasSize.y);\n            /* eslint-disable new-cap */ var _grayImageArray = Ndarray(_grayData, [\n                _videoSize.y,\n                _videoSize.x\n            ]).transpose(1, 0);\n            var _canvasImageArray = Ndarray(_canvasData, [\n                _canvasSize.y,\n                _canvasSize.x\n            ]).transpose(1, 0);\n            var _targetImageArray = _canvasImageArray.hi(_topRight.x + _size.x, _topRight.y + _size.y).lo(_topRight.x, _topRight.y);\n            var _stepSizeX = _videoSize.x / _canvasSize.x;\n            var _stepSizeY = _videoSize.y / _canvasSize.y;\n            if (false) {}\n            /**\n   * Uses the given array as frame-buffer\n   */ _that.attachData = function(data) {\n                _data = data;\n            };\n            /**\n   * Returns the used frame-buffer\n   */ _that.getData = function() {\n                return _data;\n            };\n            /**\n   * Fetches a frame from the input-stream and puts into the frame-buffer.\n   * The image-data is converted to gray-scale and then half-sampled if configured.\n   */ _that.grab = function() {\n                var frame = inputStream.getFrame();\n                if (frame) {\n                    this.scaleAndCrop(frame);\n                    return true;\n                }\n                return false;\n            };\n            // eslint-disable-next-line\n            _that.scaleAndCrop = function(frame) {\n                // 1. compute full-sized gray image\n                CVUtils.computeGray(frame.data, _grayData);\n                // 2. interpolate\n                for(var y = 0; y < _canvasSize.y; y++){\n                    for(var x = 0; x < _canvasSize.x; x++){\n                        // eslint-disable-next-line no-bitwise\n                        _canvasImageArray.set(x, y, Interp2D(_grayImageArray, x * _stepSizeX, y * _stepSizeY) | 0);\n                    }\n                }\n                // targetImageArray must be equal to targetSize\n                if (_targetImageArray.shape[0] !== _size.x || _targetImageArray.shape[1] !== _size.y) {\n                    throw new Error(\"Shapes do not match!\");\n                }\n                // 3. crop\n                for(var _y = 0; _y < _size.y; _y++){\n                    for(var _x = 0; _x < _size.x; _x++){\n                        _data[_y * _size.x + _x] = _targetImageArray.get(_x, _y);\n                    }\n                }\n            };\n            _that.getSize = function() {\n                return _size;\n            };\n            return _that;\n        };\n        module.exports = FrameGrabber;\n    /***/ },\n    /* 66 */ /***/ function(module, exports1) {\n        module.exports = __webpack_require__(/*! get-pixels */ \"(ssr)/./node_modules/get-pixels/node-pixels.js\");\n    /***/ },\n    /* 67 */ /***/ function(module, __nested_webpack_exports__, __nested_webpack_require_140591__) {\n        \"use strict\";\n        /* harmony import */ var _tracer__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_140591__(21);\n        /**\n * http://www.codeproject.com/Tips/407172/Connected-Component-Labeling-and-Vectorization\n */ var Rasterizer = {\n            createContour2D: function createContour2D() {\n                return {\n                    dir: null,\n                    index: null,\n                    firstVertex: null,\n                    insideContours: null,\n                    nextpeer: null,\n                    prevpeer: null\n                };\n            },\n            CONTOUR_DIR: {\n                CW_DIR: 0,\n                CCW_DIR: 1,\n                UNKNOWN_DIR: 2\n            },\n            DIR: {\n                OUTSIDE_EDGE: -32767,\n                INSIDE_EDGE: -32766\n            },\n            create: function create(imageWrapper, labelWrapper) {\n                var imageData = imageWrapper.data;\n                var labelData = labelWrapper.data;\n                var width = imageWrapper.size.x;\n                var height = imageWrapper.size.y;\n                var tracer = _tracer__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"].create(imageWrapper, labelWrapper);\n                return {\n                    rasterize: function rasterize(depthlabel) {\n                        var color;\n                        var bc;\n                        var lc;\n                        var labelindex;\n                        var cx;\n                        var cy;\n                        var colorMap = [];\n                        var vertex;\n                        var p;\n                        var cc;\n                        var sc;\n                        var pos;\n                        var connectedCount = 0;\n                        var i;\n                        for(i = 0; i < 400; i++){\n                            colorMap[i] = 0;\n                        }\n                        colorMap[0] = imageData[0];\n                        cc = null;\n                        for(cy = 1; cy < height - 1; cy++){\n                            labelindex = 0;\n                            bc = colorMap[0];\n                            for(cx = 1; cx < width - 1; cx++){\n                                pos = cy * width + cx;\n                                if (labelData[pos] === 0) {\n                                    color = imageData[pos];\n                                    if (color !== bc) {\n                                        if (labelindex === 0) {\n                                            lc = connectedCount + 1;\n                                            colorMap[lc] = color;\n                                            bc = color;\n                                            vertex = tracer.contourTracing(cy, cx, lc, color, Rasterizer.DIR.OUTSIDE_EDGE);\n                                            if (vertex !== null) {\n                                                connectedCount++;\n                                                labelindex = lc;\n                                                p = Rasterizer.createContour2D();\n                                                p.dir = Rasterizer.CONTOUR_DIR.CW_DIR;\n                                                p.index = labelindex;\n                                                p.firstVertex = vertex;\n                                                p.nextpeer = cc;\n                                                p.insideContours = null;\n                                                if (cc !== null) {\n                                                    cc.prevpeer = p;\n                                                }\n                                                cc = p;\n                                            }\n                                        } else {\n                                            vertex = tracer.contourTracing(cy, cx, Rasterizer.DIR.INSIDE_EDGE, color, labelindex);\n                                            if (vertex !== null) {\n                                                p = Rasterizer.createContour2D();\n                                                p.firstVertex = vertex;\n                                                p.insideContours = null;\n                                                if (depthlabel === 0) {\n                                                    p.dir = Rasterizer.CONTOUR_DIR.CCW_DIR;\n                                                } else {\n                                                    p.dir = Rasterizer.CONTOUR_DIR.CW_DIR;\n                                                }\n                                                p.index = depthlabel;\n                                                sc = cc;\n                                                while(sc !== null && sc.index !== labelindex){\n                                                    sc = sc.nextpeer;\n                                                }\n                                                if (sc !== null) {\n                                                    p.nextpeer = sc.insideContours;\n                                                    if (sc.insideContours !== null) {\n                                                        sc.insideContours.prevpeer = p;\n                                                    }\n                                                    sc.insideContours = p;\n                                                }\n                                            }\n                                        }\n                                    } else {\n                                        labelData[pos] = labelindex;\n                                    }\n                                } else if (labelData[pos] === Rasterizer.DIR.OUTSIDE_EDGE || labelData[pos] === Rasterizer.DIR.INSIDE_EDGE) {\n                                    labelindex = 0;\n                                    if (labelData[pos] === Rasterizer.DIR.INSIDE_EDGE) {\n                                        bc = imageData[pos];\n                                    } else {\n                                        bc = colorMap[0];\n                                    }\n                                } else {\n                                    labelindex = labelData[pos];\n                                    bc = colorMap[labelindex];\n                                }\n                            }\n                        }\n                        sc = cc;\n                        while(sc !== null){\n                            sc.index = depthlabel;\n                            sc = sc.nextpeer;\n                        }\n                        return {\n                            cc: cc,\n                            count: connectedCount\n                        };\n                    },\n                    debug: {\n                        drawContour: function drawContour(canvas, firstContour) {\n                            var ctx = canvas.getContext(\"2d\");\n                            var pq = firstContour;\n                            var iq;\n                            var q;\n                            var p;\n                            ctx.strokeStyle = \"red\";\n                            ctx.fillStyle = \"red\";\n                            ctx.lineWidth = 1;\n                            if (pq !== null) {\n                                iq = pq.insideContours;\n                            } else {\n                                iq = null;\n                            }\n                            while(pq !== null){\n                                if (iq !== null) {\n                                    q = iq;\n                                    iq = iq.nextpeer;\n                                } else {\n                                    q = pq;\n                                    pq = pq.nextpeer;\n                                    if (pq !== null) {\n                                        iq = pq.insideContours;\n                                    } else {\n                                        iq = null;\n                                    }\n                                }\n                                switch(q.dir){\n                                    case Rasterizer.CONTOUR_DIR.CW_DIR:\n                                        ctx.strokeStyle = \"red\";\n                                        break;\n                                    case Rasterizer.CONTOUR_DIR.CCW_DIR:\n                                        ctx.strokeStyle = \"blue\";\n                                        break;\n                                    case Rasterizer.CONTOUR_DIR.UNKNOWN_DIR:\n                                        ctx.strokeStyle = \"green\";\n                                        break;\n                                }\n                                p = q.firstVertex;\n                                ctx.beginPath();\n                                ctx.moveTo(p.x, p.y);\n                                do {\n                                    p = p.next;\n                                    ctx.lineTo(p.x, p.y);\n                                }while (p !== q.firstVertex);\n                                ctx.stroke();\n                            }\n                        }\n                    }\n                };\n            }\n        };\n        /* harmony default export */ __nested_webpack_exports__[\"a\"] = Rasterizer;\n    /***/ },\n    /* 68 */ /***/ function(module, __nested_webpack_exports__, __webpack_require__) {\n        \"use strict\";\n        /* eslint-disable no-param-reassign */ /* eslint-disable no-bitwise */ /* eslint-disable eqeqeq */ /* @preserve ASM BEGIN */ function Skeletonizer(stdlib, foreign, buffer) {\n            \"use asm\";\n            var images = new stdlib.Uint8Array(buffer);\n            var size = foreign.size | 0;\n            var imul = stdlib.Math.imul;\n            function erode(inImagePtr, outImagePtr) {\n                inImagePtr |= 0;\n                outImagePtr |= 0;\n                var v = 0;\n                var u = 0;\n                var sum = 0;\n                var yStart1 = 0;\n                var yStart2 = 0;\n                var xStart1 = 0;\n                var xStart2 = 0;\n                var offset = 0;\n                for(v = 1; (v | 0) < (size - 1 | 0); v = v + 1 | 0){\n                    offset = offset + size | 0;\n                    for(u = 1; (u | 0) < (size - 1 | 0); u = u + 1 | 0){\n                        yStart1 = offset - size | 0;\n                        yStart2 = offset + size | 0;\n                        xStart1 = u - 1 | 0;\n                        xStart2 = u + 1 | 0;\n                        sum = (images[inImagePtr + yStart1 + xStart1 | 0] | 0) + (images[inImagePtr + yStart1 + xStart2 | 0] | 0) + (images[inImagePtr + offset + u | 0] | 0) + (images[inImagePtr + yStart2 + xStart1 | 0] | 0) + (images[inImagePtr + yStart2 + xStart2 | 0] | 0) | 0;\n                        if ((sum | 0) == (5 | 0)) {\n                            images[outImagePtr + offset + u | 0] = 1;\n                        } else {\n                            images[outImagePtr + offset + u | 0] = 0;\n                        }\n                    }\n                }\n            }\n            function subtract(aImagePtr, bImagePtr, outImagePtr) {\n                aImagePtr |= 0;\n                bImagePtr |= 0;\n                outImagePtr |= 0;\n                var length = 0;\n                length = imul(size, size) | 0;\n                while((length | 0) > 0){\n                    length = length - 1 | 0;\n                    images[outImagePtr + length | 0] = (images[aImagePtr + length | 0] | 0) - (images[bImagePtr + length | 0] | 0) | 0;\n                }\n            }\n            function bitwiseOr(aImagePtr, bImagePtr, outImagePtr) {\n                aImagePtr |= 0;\n                bImagePtr |= 0;\n                outImagePtr |= 0;\n                var length = 0;\n                length = imul(size, size) | 0;\n                while((length | 0) > 0){\n                    length = length - 1 | 0;\n                    images[outImagePtr + length | 0] = images[aImagePtr + length | 0] | 0 | (images[bImagePtr + length | 0] | 0) | 0;\n                }\n            }\n            function countNonZero(imagePtr) {\n                imagePtr |= 0;\n                var sum = 0;\n                var length = 0;\n                length = imul(size, size) | 0;\n                while((length | 0) > 0){\n                    length = length - 1 | 0;\n                    sum = (sum | 0) + (images[imagePtr + length | 0] | 0) | 0;\n                }\n                return sum | 0;\n            }\n            function init(imagePtr, value) {\n                imagePtr |= 0;\n                value |= 0;\n                var length = 0;\n                length = imul(size, size) | 0;\n                while((length | 0) > 0){\n                    length = length - 1 | 0;\n                    images[imagePtr + length | 0] = value;\n                }\n            }\n            function dilate(inImagePtr, outImagePtr) {\n                inImagePtr |= 0;\n                outImagePtr |= 0;\n                var v = 0;\n                var u = 0;\n                var sum = 0;\n                var yStart1 = 0;\n                var yStart2 = 0;\n                var xStart1 = 0;\n                var xStart2 = 0;\n                var offset = 0;\n                for(v = 1; (v | 0) < (size - 1 | 0); v = v + 1 | 0){\n                    offset = offset + size | 0;\n                    for(u = 1; (u | 0) < (size - 1 | 0); u = u + 1 | 0){\n                        yStart1 = offset - size | 0;\n                        yStart2 = offset + size | 0;\n                        xStart1 = u - 1 | 0;\n                        xStart2 = u + 1 | 0;\n                        sum = (images[inImagePtr + yStart1 + xStart1 | 0] | 0) + (images[inImagePtr + yStart1 + xStart2 | 0] | 0) + (images[inImagePtr + offset + u | 0] | 0) + (images[inImagePtr + yStart2 + xStart1 | 0] | 0) + (images[inImagePtr + yStart2 + xStart2 | 0] | 0) | 0;\n                        if ((sum | 0) > (0 | 0)) {\n                            images[outImagePtr + offset + u | 0] = 1;\n                        } else {\n                            images[outImagePtr + offset + u | 0] = 0;\n                        }\n                    }\n                }\n            }\n            function memcpy(srcImagePtr, dstImagePtr) {\n                srcImagePtr |= 0;\n                dstImagePtr |= 0;\n                var length = 0;\n                length = imul(size, size) | 0;\n                while((length | 0) > 0){\n                    length = length - 1 | 0;\n                    images[dstImagePtr + length | 0] = images[srcImagePtr + length | 0] | 0;\n                }\n            }\n            function zeroBorder(imagePtr) {\n                imagePtr |= 0;\n                var x = 0;\n                var y = 0;\n                for(x = 0; (x | 0) < (size - 1 | 0); x = x + 1 | 0){\n                    images[imagePtr + x | 0] = 0;\n                    images[imagePtr + y | 0] = 0;\n                    y = y + size - 1 | 0;\n                    images[imagePtr + y | 0] = 0;\n                    y = y + 1 | 0;\n                }\n                for(x = 0; (x | 0) < (size | 0); x = x + 1 | 0){\n                    images[imagePtr + y | 0] = 0;\n                    y = y + 1 | 0;\n                }\n            }\n            function skeletonize() {\n                var subImagePtr = 0;\n                var erodedImagePtr = 0;\n                var tempImagePtr = 0;\n                var skelImagePtr = 0;\n                var sum = 0;\n                var done = 0;\n                erodedImagePtr = imul(size, size) | 0;\n                tempImagePtr = erodedImagePtr + erodedImagePtr | 0;\n                skelImagePtr = tempImagePtr + erodedImagePtr | 0;\n                // init skel-image\n                init(skelImagePtr, 0);\n                zeroBorder(subImagePtr);\n                do {\n                    erode(subImagePtr, erodedImagePtr);\n                    dilate(erodedImagePtr, tempImagePtr);\n                    subtract(subImagePtr, tempImagePtr, tempImagePtr);\n                    bitwiseOr(skelImagePtr, tempImagePtr, skelImagePtr);\n                    memcpy(erodedImagePtr, subImagePtr);\n                    sum = countNonZero(subImagePtr) | 0;\n                    done = (sum | 0) == 0 | 0;\n                }while (!done);\n            }\n            return {\n                skeletonize: skeletonize\n            };\n        }\n        /* @preserve ASM END */ /* harmony default export */ __nested_webpack_exports__[\"a\"] = Skeletonizer;\n    /* eslint-enable eqeqeq */ /***/ },\n    /* 69 */ /***/ function(module, exports1, __nested_webpack_require_157216__) {\n        module.exports = __nested_webpack_require_157216__(166);\n    /***/ },\n    /* 70 */ /***/ function(module, exports1, __nested_webpack_require_157349__) {\n        var Stack = __nested_webpack_require_157349__(71), assignMergeValue = __nested_webpack_require_157349__(48), baseFor = __nested_webpack_require_157349__(101), baseMergeDeep = __nested_webpack_require_157349__(103), isObject = __nested_webpack_require_157349__(15), keysIn = __nested_webpack_require_157349__(56), safeGet = __nested_webpack_require_157349__(54);\n        /**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */ function baseMerge(object, source, srcIndex, customizer, stack) {\n            if (object === source) {\n                return;\n            }\n            baseFor(source, function(srcValue, key) {\n                stack || (stack = new Stack());\n                if (isObject(srcValue)) {\n                    baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n                } else {\n                    var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + \"\", object, source, stack) : undefined;\n                    if (newValue === undefined) {\n                        newValue = srcValue;\n                    }\n                    assignMergeValue(object, key, newValue);\n                }\n            }, keysIn);\n        }\n        module.exports = baseMerge;\n    /***/ },\n    /* 71 */ /***/ function(module, exports1, __nested_webpack_require_158935__) {\n        var ListCache = __nested_webpack_require_158935__(24), stackClear = __nested_webpack_require_158935__(77), stackDelete = __nested_webpack_require_158935__(78), stackGet = __nested_webpack_require_158935__(79), stackHas = __nested_webpack_require_158935__(80), stackSet = __nested_webpack_require_158935__(81);\n        /**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function Stack(entries) {\n            var data = this.__data__ = new ListCache(entries);\n            this.size = data.size;\n        }\n        // Add methods to `Stack`.\n        Stack.prototype.clear = stackClear;\n        Stack.prototype[\"delete\"] = stackDelete;\n        Stack.prototype.get = stackGet;\n        Stack.prototype.has = stackHas;\n        Stack.prototype.set = stackSet;\n        module.exports = Stack;\n    /***/ },\n    /* 72 */ /***/ function(module, exports1) {\n        /**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */ function listCacheClear() {\n            this.__data__ = [];\n            this.size = 0;\n        }\n        module.exports = listCacheClear;\n    /***/ },\n    /* 73 */ /***/ function(module, exports1, __nested_webpack_require_160150__) {\n        var assocIndexOf = __nested_webpack_require_160150__(25);\n        /** Used for built-in method references. */ var arrayProto = Array.prototype;\n        /** Built-in value references. */ var splice = arrayProto.splice;\n        /**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function listCacheDelete(key) {\n            var data = this.__data__, index = assocIndexOf(data, key);\n            if (index < 0) {\n                return false;\n            }\n            var lastIndex = data.length - 1;\n            if (index == lastIndex) {\n                data.pop();\n            } else {\n                splice.call(data, index, 1);\n            }\n            --this.size;\n            return true;\n        }\n        module.exports = listCacheDelete;\n    /***/ },\n    /* 74 */ /***/ function(module, exports1, __nested_webpack_require_161167__) {\n        var assocIndexOf = __nested_webpack_require_161167__(25);\n        /**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function listCacheGet(key) {\n            var data = this.__data__, index = assocIndexOf(data, key);\n            return index < 0 ? undefined : data[index][1];\n        }\n        module.exports = listCacheGet;\n    /***/ },\n    /* 75 */ /***/ function(module, exports1, __nested_webpack_require_161709__) {\n        var assocIndexOf = __nested_webpack_require_161709__(25);\n        /**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function listCacheHas(key) {\n            return assocIndexOf(this.__data__, key) > -1;\n        }\n        module.exports = listCacheHas;\n    /***/ },\n    /* 76 */ /***/ function(module, exports1, __nested_webpack_require_162231__) {\n        var assocIndexOf = __nested_webpack_require_162231__(25);\n        /**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */ function listCacheSet(key, value) {\n            var data = this.__data__, index = assocIndexOf(data, key);\n            if (index < 0) {\n                ++this.size;\n                data.push([\n                    key,\n                    value\n                ]);\n            } else {\n                data[index][1] = value;\n            }\n            return this;\n        }\n        module.exports = listCacheSet;\n    /***/ },\n    /* 77 */ /***/ function(module, exports1, __nested_webpack_require_163030__) {\n        var ListCache = __nested_webpack_require_163030__(24);\n        /**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */ function stackClear() {\n            this.__data__ = new ListCache();\n            this.size = 0;\n        }\n        module.exports = stackClear;\n    /***/ },\n    /* 78 */ /***/ function(module, exports1) {\n        /**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function stackDelete(key) {\n            var data = this.__data__, result = data[\"delete\"](key);\n            this.size = data.size;\n            return result;\n        }\n        module.exports = stackDelete;\n    /***/ },\n    /* 79 */ /***/ function(module, exports1) {\n        /**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function stackGet(key) {\n            return this.__data__.get(key);\n        }\n        module.exports = stackGet;\n    /***/ },\n    /* 80 */ /***/ function(module, exports1) {\n        /**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function stackHas(key) {\n            return this.__data__.has(key);\n        }\n        module.exports = stackHas;\n    /***/ },\n    /* 81 */ /***/ function(module, exports1, __nested_webpack_require_164712__) {\n        var ListCache = __nested_webpack_require_164712__(24), Map1 = __nested_webpack_require_164712__(44), MapCache = __nested_webpack_require_164712__(47);\n        /** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;\n        /**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */ function stackSet(key, value) {\n            var data = this.__data__;\n            if (data instanceof ListCache) {\n                var pairs = data.__data__;\n                if (!Map1 || pairs.length < LARGE_ARRAY_SIZE - 1) {\n                    pairs.push([\n                        key,\n                        value\n                    ]);\n                    this.size = ++data.size;\n                    return this;\n                }\n                data = this.__data__ = new MapCache(pairs);\n            }\n            data.set(key, value);\n            this.size = data.size;\n            return this;\n        }\n        module.exports = stackSet;\n    /***/ },\n    /* 82 */ /***/ function(module, exports1, __nested_webpack_require_165903__) {\n        var isFunction = __nested_webpack_require_165903__(36), isMasked = __nested_webpack_require_165903__(85), isObject = __nested_webpack_require_165903__(15), toSource = __nested_webpack_require_165903__(87);\n        /**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */ var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n        /** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n        /** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;\n        /** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;\n        /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n        /** Used to detect if a method is native. */ var reIsNative = RegExp(\"^\" + funcToString.call(hasOwnProperty).replace(reRegExpChar, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\");\n        /**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */ function baseIsNative(value) {\n            if (!isObject(value) || isMasked(value)) {\n                return false;\n            }\n            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n            return pattern.test(toSource(value));\n        }\n        module.exports = baseIsNative;\n    /***/ },\n    /* 83 */ /***/ function(module, exports1, __nested_webpack_require_167508__) {\n        var Symbol1 = __nested_webpack_require_167508__(27);\n        /** Used for built-in method references. */ var objectProto = Object.prototype;\n        /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n        /**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */ var nativeObjectToString = objectProto.toString;\n        /** Built-in value references. */ var symToStringTag = Symbol1 ? Symbol1.toStringTag : undefined;\n        /**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */ function getRawTag(value) {\n            var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n            try {\n                value[symToStringTag] = undefined;\n                var unmasked = true;\n            } catch (e) {}\n            var result = nativeObjectToString.call(value);\n            if (unmasked) {\n                if (isOwn) {\n                    value[symToStringTag] = tag;\n                } else {\n                    delete value[symToStringTag];\n                }\n            }\n            return result;\n        }\n        module.exports = getRawTag;\n    /***/ },\n    /* 84 */ /***/ function(module, exports1) {\n        /** Used for built-in method references. */ var objectProto = Object.prototype;\n        /**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */ var nativeObjectToString = objectProto.toString;\n        /**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */ function objectToString(value) {\n            return nativeObjectToString.call(value);\n        }\n        module.exports = objectToString;\n    /***/ },\n    /* 85 */ /***/ function(module, exports1, __nested_webpack_require_169616__) {\n        var coreJsData = __nested_webpack_require_169616__(86);\n        /** Used to detect methods masquerading as native. */ var maskSrcKey = function() {\n            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || \"\");\n            return uid ? \"Symbol(src)_1.\" + uid : \"\";\n        }();\n        /**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */ function isMasked(func) {\n            return !!maskSrcKey && maskSrcKey in func;\n        }\n        module.exports = isMasked;\n    /***/ },\n    /* 86 */ /***/ function(module, exports1, __nested_webpack_require_170330__) {\n        var root = __nested_webpack_require_170330__(19);\n        /** Used to detect overreaching core-js shims. */ var coreJsData = root[\"__core-js_shared__\"];\n        module.exports = coreJsData;\n    /***/ },\n    /* 87 */ /***/ function(module, exports1) {\n        /** Used for built-in method references. */ var funcProto = Function.prototype;\n        /** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;\n        /**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */ function toSource(func) {\n            if (func != null) {\n                try {\n                    return funcToString.call(func);\n                } catch (e) {}\n                try {\n                    return func + \"\";\n                } catch (e) {}\n            }\n            return \"\";\n        }\n        module.exports = toSource;\n    /***/ },\n    /* 88 */ /***/ function(module, exports1) {\n        /**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */ function getValue(object, key) {\n            return object == null ? undefined : object[key];\n        }\n        module.exports = getValue;\n    /***/ },\n    /* 89 */ /***/ function(module, exports1, __nested_webpack_require_171773__) {\n        var Hash = __nested_webpack_require_171773__(90), ListCache = __nested_webpack_require_171773__(24), Map1 = __nested_webpack_require_171773__(44);\n        /**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */ function mapCacheClear() {\n            this.size = 0;\n            this.__data__ = {\n                \"hash\": new Hash(),\n                \"map\": new (Map1 || ListCache)(),\n                \"string\": new Hash()\n            };\n        }\n        module.exports = mapCacheClear;\n    /***/ },\n    /* 90 */ /***/ function(module, exports1, __nested_webpack_require_172355__) {\n        var hashClear = __nested_webpack_require_172355__(91), hashDelete = __nested_webpack_require_172355__(92), hashGet = __nested_webpack_require_172355__(93), hashHas = __nested_webpack_require_172355__(94), hashSet = __nested_webpack_require_172355__(95);\n        /**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function Hash(entries) {\n            var index = -1, length = entries == null ? 0 : entries.length;\n            this.clear();\n            while(++index < length){\n                var entry = entries[index];\n                this.set(entry[0], entry[1]);\n            }\n        }\n        // Add methods to `Hash`.\n        Hash.prototype.clear = hashClear;\n        Hash.prototype[\"delete\"] = hashDelete;\n        Hash.prototype.get = hashGet;\n        Hash.prototype.has = hashHas;\n        Hash.prototype.set = hashSet;\n        module.exports = Hash;\n    /***/ },\n    /* 91 */ /***/ function(module, exports1, __nested_webpack_require_173305__) {\n        var nativeCreate = __nested_webpack_require_173305__(28);\n        /**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */ function hashClear() {\n            this.__data__ = nativeCreate ? nativeCreate(null) : {};\n            this.size = 0;\n        }\n        module.exports = hashClear;\n    /***/ },\n    /* 92 */ /***/ function(module, exports1) {\n        /**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function hashDelete(key) {\n            var result = this.has(key) && delete this.__data__[key];\n            this.size -= result ? 1 : 0;\n            return result;\n        }\n        module.exports = hashDelete;\n    /***/ },\n    /* 93 */ /***/ function(module, exports1, __nested_webpack_require_174274__) {\n        var nativeCreate = __nested_webpack_require_174274__(28);\n        /** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = \"__lodash_hash_undefined__\";\n        /** Used for built-in method references. */ var objectProto = Object.prototype;\n        /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n        /**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function hashGet(key) {\n            var data = this.__data__;\n            if (nativeCreate) {\n                var result = data[key];\n                return result === HASH_UNDEFINED ? undefined : result;\n            }\n            return hasOwnProperty.call(data, key) ? data[key] : undefined;\n        }\n        module.exports = hashGet;\n    /***/ },\n    /* 94 */ /***/ function(module, exports1, __nested_webpack_require_175240__) {\n        var nativeCreate = __nested_webpack_require_175240__(28);\n        /** Used for built-in method references. */ var objectProto = Object.prototype;\n        /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n        /**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function hashHas(key) {\n            var data = this.__data__;\n            return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n        }\n        module.exports = hashHas;\n    /***/ },\n    /* 95 */ /***/ function(module, exports1, __nested_webpack_require_176007__) {\n        var nativeCreate = __nested_webpack_require_176007__(28);\n        /** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = \"__lodash_hash_undefined__\";\n        /**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */ function hashSet(key, value) {\n            var data = this.__data__;\n            this.size += this.has(key) ? 0 : 1;\n            data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;\n            return this;\n        }\n        module.exports = hashSet;\n    /***/ },\n    /* 96 */ /***/ function(module, exports1, __nested_webpack_require_176759__) {\n        var getMapData = __nested_webpack_require_176759__(29);\n        /**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function mapCacheDelete(key) {\n            var result = getMapData(this, key)[\"delete\"](key);\n            this.size -= result ? 1 : 0;\n            return result;\n        }\n        module.exports = mapCacheDelete;\n    /***/ },\n    /* 97 */ /***/ function(module, exports1) {\n        /**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */ function isKeyable(value) {\n            var type = typeof value;\n            return type == \"string\" || type == \"number\" || type == \"symbol\" || type == \"boolean\" ? value !== \"__proto__\" : value === null;\n        }\n        module.exports = isKeyable;\n    /***/ },\n    /* 98 */ /***/ function(module, exports1, __nested_webpack_require_177870__) {\n        var getMapData = __nested_webpack_require_177870__(29);\n        /**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function mapCacheGet(key) {\n            return getMapData(this, key).get(key);\n        }\n        module.exports = mapCacheGet;\n    /***/ },\n    /* 99 */ /***/ function(module, exports1, __nested_webpack_require_178321__) {\n        var getMapData = __nested_webpack_require_178321__(29);\n        /**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function mapCacheHas(key) {\n            return getMapData(this, key).has(key);\n        }\n        module.exports = mapCacheHas;\n    /***/ },\n    /* 100 */ /***/ function(module, exports1, __nested_webpack_require_178825__) {\n        var getMapData = __nested_webpack_require_178825__(29);\n        /**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */ function mapCacheSet(key, value) {\n            var data = getMapData(this, key), size = data.size;\n            data.set(key, value);\n            this.size += data.size == size ? 0 : 1;\n            return this;\n        }\n        module.exports = mapCacheSet;\n    /***/ },\n    /* 101 */ /***/ function(module, exports1, __nested_webpack_require_179459__) {\n        var createBaseFor = __nested_webpack_require_179459__(102);\n        /**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */ var baseFor = createBaseFor();\n        module.exports = baseFor;\n    /***/ },\n    /* 102 */ /***/ function(module, exports1) {\n        /**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */ function createBaseFor(fromRight) {\n            return function(object, iteratee, keysFunc) {\n                var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;\n                while(length--){\n                    var key = props[fromRight ? length : ++index];\n                    if (iteratee(iterable[key], key, iterable) === false) {\n                        break;\n                    }\n                }\n                return object;\n            };\n        }\n        module.exports = createBaseFor;\n    /***/ },\n    /* 103 */ /***/ function(module, exports1, __nested_webpack_require_180986__) {\n        var assignMergeValue = __nested_webpack_require_180986__(48), cloneBuffer = __nested_webpack_require_180986__(104), cloneTypedArray = __nested_webpack_require_180986__(105), copyArray = __nested_webpack_require_180986__(108), initCloneObject = __nested_webpack_require_180986__(109), isArguments = __nested_webpack_require_180986__(30), isArray = __nested_webpack_require_180986__(16), isArrayLikeObject = __nested_webpack_require_180986__(113), isBuffer = __nested_webpack_require_180986__(52), isFunction = __nested_webpack_require_180986__(36), isObject = __nested_webpack_require_180986__(15), isPlainObject = __nested_webpack_require_180986__(115), isTypedArray = __nested_webpack_require_180986__(53), safeGet = __nested_webpack_require_180986__(54), toPlainObject = __nested_webpack_require_180986__(119);\n        /**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */ function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);\n            if (stacked) {\n                assignMergeValue(object, key, stacked);\n                return;\n            }\n            var newValue = customizer ? customizer(objValue, srcValue, key + \"\", object, source, stack) : undefined;\n            var isCommon = newValue === undefined;\n            if (isCommon) {\n                var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n                newValue = srcValue;\n                if (isArr || isBuff || isTyped) {\n                    if (isArray(objValue)) {\n                        newValue = objValue;\n                    } else if (isArrayLikeObject(objValue)) {\n                        newValue = copyArray(objValue);\n                    } else if (isBuff) {\n                        isCommon = false;\n                        newValue = cloneBuffer(srcValue, true);\n                    } else if (isTyped) {\n                        isCommon = false;\n                        newValue = cloneTypedArray(srcValue, true);\n                    } else {\n                        newValue = [];\n                    }\n                } else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n                    newValue = objValue;\n                    if (isArguments(objValue)) {\n                        newValue = toPlainObject(objValue);\n                    } else if (!isObject(objValue) || isFunction(objValue)) {\n                        newValue = initCloneObject(srcValue);\n                    }\n                } else {\n                    isCommon = false;\n                }\n            }\n            if (isCommon) {\n                // Recursively merge objects and arrays (susceptible to call stack limits).\n                stack.set(srcValue, newValue);\n                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n                stack[\"delete\"](srcValue);\n            }\n            assignMergeValue(object, key, newValue);\n        }\n        module.exports = baseMergeDeep;\n    /***/ },\n    /* 104 */ /***/ function(module, exports1, __nested_webpack_require_184553__) {\n        /* WEBPACK VAR INJECTION */ (function(module) {\n            var root = __nested_webpack_require_184553__(19);\n            /** Detect free variable `exports`. */ var freeExports =  true && exports1 && !exports1.nodeType && exports1;\n            /** Detect free variable `module`. */ var freeModule = freeExports && typeof module == \"object\" && module && !module.nodeType && module;\n            /** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;\n            /** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n            /**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */ function cloneBuffer(buffer, isDeep) {\n                if (isDeep) {\n                    return buffer.slice();\n                }\n                var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n                buffer.copy(result);\n                return result;\n            }\n            module.exports = cloneBuffer;\n        /* WEBPACK VAR INJECTION */ }).call(this, __nested_webpack_require_184553__(38)(module));\n    /***/ },\n    /* 105 */ /***/ function(module, exports1, __nested_webpack_require_185983__) {\n        var cloneArrayBuffer = __nested_webpack_require_185983__(106);\n        /**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */ function cloneTypedArray(typedArray, isDeep) {\n            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n        }\n        module.exports = cloneTypedArray;\n    /***/ },\n    /* 106 */ /***/ function(module, exports1, __nested_webpack_require_186637__) {\n        var Uint8Array1 = __nested_webpack_require_186637__(107);\n        /**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */ function cloneArrayBuffer(arrayBuffer) {\n            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n            new Uint8Array1(result).set(new Uint8Array1(arrayBuffer));\n            return result;\n        }\n        module.exports = cloneArrayBuffer;\n    /***/ },\n    /* 107 */ /***/ function(module, exports1, __nested_webpack_require_187232__) {\n        var root = __nested_webpack_require_187232__(19);\n        /** Built-in value references. */ var Uint8Array1 = root.Uint8Array;\n        module.exports = Uint8Array1;\n    /***/ },\n    /* 108 */ /***/ function(module, exports1) {\n        /**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */ function copyArray(source, array) {\n            var index = -1, length = source.length;\n            array || (array = Array(length));\n            while(++index < length){\n                array[index] = source[index];\n            }\n            return array;\n        }\n        module.exports = copyArray;\n    /***/ },\n    /* 109 */ /***/ function(module, exports1, __nested_webpack_require_188066__) {\n        var baseCreate = __nested_webpack_require_188066__(110), getPrototype = __nested_webpack_require_188066__(50), isPrototype = __nested_webpack_require_188066__(51);\n        /**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */ function initCloneObject(object) {\n            return typeof object.constructor == \"function\" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};\n        }\n        module.exports = initCloneObject;\n    /***/ },\n    /* 110 */ /***/ function(module, exports1, __nested_webpack_require_188652__) {\n        var isObject = __nested_webpack_require_188652__(15);\n        /** Built-in value references. */ var objectCreate = Object.create;\n        /**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */ var baseCreate = function() {\n            function object() {}\n            return function(proto) {\n                if (!isObject(proto)) {\n                    return {};\n                }\n                if (objectCreate) {\n                    return objectCreate(proto);\n                }\n                object.prototype = proto;\n                var result = new object();\n                object.prototype = undefined;\n                return result;\n            };\n        }();\n        module.exports = baseCreate;\n    /***/ },\n    /* 111 */ /***/ function(module, exports1) {\n        /**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */ function overArg(func, transform) {\n            return function(arg) {\n                return func(transform(arg));\n            };\n        }\n        module.exports = overArg;\n    /***/ },\n    /* 112 */ /***/ function(module, exports1, __nested_webpack_require_190113__) {\n        var baseGetTag = __nested_webpack_require_190113__(22), isObjectLike = __nested_webpack_require_190113__(20);\n        /** `Object#toString` result references. */ var argsTag = \"[object Arguments]\";\n        /**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */ function baseIsArguments(value) {\n            return isObjectLike(value) && baseGetTag(value) == argsTag;\n        }\n        module.exports = baseIsArguments;\n    /***/ },\n    /* 113 */ /***/ function(module, exports1, __nested_webpack_require_190724__) {\n        var isArrayLike = __nested_webpack_require_190724__(39), isObjectLike = __nested_webpack_require_190724__(20);\n        /**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */ function isArrayLikeObject(value) {\n            return isObjectLike(value) && isArrayLike(value);\n        }\n        module.exports = isArrayLikeObject;\n    /***/ },\n    /* 114 */ /***/ function(module, exports1) {\n        /**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */ function stubFalse() {\n            return false;\n        }\n        module.exports = stubFalse;\n    /***/ },\n    /* 115 */ /***/ function(module, exports1, __nested_webpack_require_191957__) {\n        var baseGetTag = __nested_webpack_require_191957__(22), getPrototype = __nested_webpack_require_191957__(50), isObjectLike = __nested_webpack_require_191957__(20);\n        /** `Object#toString` result references. */ var objectTag = \"[object Object]\";\n        /** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;\n        /** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;\n        /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n        /** Used to infer the `Object` constructor. */ var objectCtorString = funcToString.call(Object);\n        /**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */ function isPlainObject(value) {\n            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n                return false;\n            }\n            var proto = getPrototype(value);\n            if (proto === null) {\n                return true;\n            }\n            var Ctor = hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n            return typeof Ctor == \"function\" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;\n        }\n        module.exports = isPlainObject;\n    /***/ },\n    /* 116 */ /***/ function(module, exports1, __nested_webpack_require_193827__) {\n        var baseGetTag = __nested_webpack_require_193827__(22), isLength = __nested_webpack_require_193827__(40), isObjectLike = __nested_webpack_require_193827__(20);\n        /** `Object#toString` result references. */ var argsTag = \"[object Arguments]\", arrayTag = \"[object Array]\", boolTag = \"[object Boolean]\", dateTag = \"[object Date]\", errorTag = \"[object Error]\", funcTag = \"[object Function]\", mapTag = \"[object Map]\", numberTag = \"[object Number]\", objectTag = \"[object Object]\", regexpTag = \"[object RegExp]\", setTag = \"[object Set]\", stringTag = \"[object String]\", weakMapTag = \"[object WeakMap]\";\n        var arrayBufferTag = \"[object ArrayBuffer]\", dataViewTag = \"[object DataView]\", float32Tag = \"[object Float32Array]\", float64Tag = \"[object Float64Array]\", int8Tag = \"[object Int8Array]\", int16Tag = \"[object Int16Array]\", int32Tag = \"[object Int32Array]\", uint8Tag = \"[object Uint8Array]\", uint8ClampedTag = \"[object Uint8ClampedArray]\", uint16Tag = \"[object Uint16Array]\", uint32Tag = \"[object Uint32Array]\";\n        /** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {};\n        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\n        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n        /**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */ function baseIsTypedArray(value) {\n            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n        }\n        module.exports = baseIsTypedArray;\n    /***/ },\n    /* 117 */ /***/ function(module, exports1) {\n        /**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */ function baseUnary(func) {\n            return function(value) {\n                return func(value);\n            };\n        }\n        module.exports = baseUnary;\n    /***/ },\n    /* 118 */ /***/ function(module, exports1, __nested_webpack_require_196557__) {\n        /* WEBPACK VAR INJECTION */ (function(module) {\n            var freeGlobal = __nested_webpack_require_196557__(45);\n            /** Detect free variable `exports`. */ var freeExports =  true && exports1 && !exports1.nodeType && exports1;\n            /** Detect free variable `module`. */ var freeModule = freeExports && typeof module == \"object\" && module && !module.nodeType && module;\n            /** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;\n            /** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;\n            /** Used to access faster Node.js helpers. */ var nodeUtil = function() {\n                try {\n                    // Use `util.types` for Node.js 10+.\n                    var types = freeModule && freeModule.require && freeModule.require(\"util\").types;\n                    if (types) {\n                        return types;\n                    }\n                    // Legacy `process.binding('util')` for Node.js < 10.\n                    return freeProcess && freeProcess.binding && freeProcess.binding(\"util\");\n                } catch (e) {}\n            }();\n            module.exports = nodeUtil;\n        /* WEBPACK VAR INJECTION */ }).call(this, __nested_webpack_require_196557__(38)(module));\n    /***/ },\n    /* 119 */ /***/ function(module, exports1, __nested_webpack_require_197983__) {\n        var copyObject = __nested_webpack_require_197983__(120), keysIn = __nested_webpack_require_197983__(56);\n        /**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */ function toPlainObject(value) {\n            return copyObject(value, keysIn(value));\n        }\n        module.exports = toPlainObject;\n    /***/ },\n    /* 120 */ /***/ function(module, exports1, __nested_webpack_require_198850__) {\n        var assignValue = __nested_webpack_require_198850__(55), baseAssignValue = __nested_webpack_require_198850__(37);\n        /**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */ function copyObject(source, props, object, customizer) {\n            var isNew = !object;\n            object || (object = {});\n            var index = -1, length = props.length;\n            while(++index < length){\n                var key = props[index];\n                var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;\n                if (newValue === undefined) {\n                    newValue = source[key];\n                }\n                if (isNew) {\n                    baseAssignValue(object, key, newValue);\n                } else {\n                    assignValue(object, key, newValue);\n                }\n            }\n            return object;\n        }\n        module.exports = copyObject;\n    /***/ },\n    /* 121 */ /***/ function(module, exports1, __nested_webpack_require_200157__) {\n        var baseTimes = __nested_webpack_require_200157__(122), isArguments = __nested_webpack_require_200157__(30), isArray = __nested_webpack_require_200157__(16), isBuffer = __nested_webpack_require_200157__(52), isIndex = __nested_webpack_require_200157__(31), isTypedArray = __nested_webpack_require_200157__(53);\n        /** Used for built-in method references. */ var objectProto = Object.prototype;\n        /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n        /**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */ function arrayLikeKeys(value, inherited) {\n            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;\n            for(var key in value){\n                if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.\n                (key == \"length\" || // Node.js 0.10 has enumerable non-index properties on buffers.\n                isBuff && (key == \"offset\" || key == \"parent\") || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n                isType && (key == \"buffer\" || key == \"byteLength\" || key == \"byteOffset\") || // Skip index properties.\n                isIndex(key, length)))) {\n                    result.push(key);\n                }\n            }\n            return result;\n        }\n        module.exports = arrayLikeKeys;\n    /***/ },\n    /* 122 */ /***/ function(module, exports1) {\n        /**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */ function baseTimes(n, iteratee) {\n            var index = -1, result = Array(n);\n            while(++index < n){\n                result[index] = iteratee(index);\n            }\n            return result;\n        }\n        module.exports = baseTimes;\n    /***/ },\n    /* 123 */ /***/ function(module, exports1, __nested_webpack_require_202672__) {\n        var isObject = __nested_webpack_require_202672__(15), isPrototype = __nested_webpack_require_202672__(51), nativeKeysIn = __nested_webpack_require_202672__(124);\n        /** Used for built-in method references. */ var objectProto = Object.prototype;\n        /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n        /**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */ function baseKeysIn(object) {\n            if (!isObject(object)) {\n                return nativeKeysIn(object);\n            }\n            var isProto = isPrototype(object), result = [];\n            for(var key in object){\n                if (!(key == \"constructor\" && (isProto || !hasOwnProperty.call(object, key)))) {\n                    result.push(key);\n                }\n            }\n            return result;\n        }\n        module.exports = baseKeysIn;\n    /***/ },\n    /* 124 */ /***/ function(module, exports1) {\n        /**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */ function nativeKeysIn(object) {\n            var result = [];\n            if (object != null) {\n                for(var key in Object(object)){\n                    result.push(key);\n                }\n            }\n            return result;\n        }\n        module.exports = nativeKeysIn;\n    /***/ },\n    /* 125 */ /***/ function(module, exports1, __nested_webpack_require_204411__) {\n        var baseRest = __nested_webpack_require_204411__(126), isIterateeCall = __nested_webpack_require_204411__(131);\n        /**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */ function createAssigner(assigner) {\n            return baseRest(function(object, sources) {\n                var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;\n                customizer = assigner.length > 3 && typeof customizer == \"function\" ? (length--, customizer) : undefined;\n                if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n                    customizer = length < 3 ? undefined : customizer;\n                    length = 1;\n                }\n                object = Object(object);\n                while(++index < length){\n                    var source = sources[index];\n                    if (source) {\n                        assigner(object, source, index, customizer);\n                    }\n                }\n                return object;\n            });\n        }\n        module.exports = createAssigner;\n    /***/ },\n    /* 126 */ /***/ function(module, exports1, __nested_webpack_require_205720__) {\n        var identity = __nested_webpack_require_205720__(57), overRest = __nested_webpack_require_205720__(58), setToString = __nested_webpack_require_205720__(59);\n        /**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */ function baseRest(func, start) {\n            return setToString(overRest(func, start, identity), func + \"\");\n        }\n        module.exports = baseRest;\n    /***/ },\n    /* 127 */ /***/ function(module, exports1) {\n        /**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */ function apply(func, thisArg, args) {\n            switch(args.length){\n                case 0:\n                    return func.call(thisArg);\n                case 1:\n                    return func.call(thisArg, args[0]);\n                case 2:\n                    return func.call(thisArg, args[0], args[1]);\n                case 3:\n                    return func.call(thisArg, args[0], args[1], args[2]);\n            }\n            return func.apply(thisArg, args);\n        }\n        module.exports = apply;\n    /***/ },\n    /* 128 */ /***/ function(module, exports1, __nested_webpack_require_207350__) {\n        var constant = __nested_webpack_require_207350__(129), defineProperty = __nested_webpack_require_207350__(49), identity = __nested_webpack_require_207350__(57);\n        /**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */ var baseSetToString = !defineProperty ? identity : function(func, string) {\n            return defineProperty(func, \"toString\", {\n                \"configurable\": true,\n                \"enumerable\": false,\n                \"value\": constant(string),\n                \"writable\": true\n            });\n        };\n        module.exports = baseSetToString;\n    /***/ },\n    /* 129 */ /***/ function(module, exports1) {\n        /**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */ function constant(value) {\n            return function() {\n                return value;\n            };\n        }\n        module.exports = constant;\n    /***/ },\n    /* 130 */ /***/ function(module, exports1) {\n        /** Used to detect hot functions by number of calls within a span of milliseconds. */ var HOT_COUNT = 800, HOT_SPAN = 16;\n        /* Built-in method references for those with the same name as other `lodash` methods. */ var nativeNow = Date.now;\n        /**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */ function shortOut(func) {\n            var count = 0, lastCalled = 0;\n            return function() {\n                var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);\n                lastCalled = stamp;\n                if (remaining > 0) {\n                    if (++count >= HOT_COUNT) {\n                        return arguments[0];\n                    }\n                } else {\n                    count = 0;\n                }\n                return func.apply(undefined, arguments);\n            };\n        }\n        module.exports = shortOut;\n    /***/ },\n    /* 131 */ /***/ function(module, exports1, __nested_webpack_require_209989__) {\n        var eq = __nested_webpack_require_209989__(26), isArrayLike = __nested_webpack_require_209989__(39), isIndex = __nested_webpack_require_209989__(31), isObject = __nested_webpack_require_209989__(15);\n        /**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */ function isIterateeCall(value, index, object) {\n            if (!isObject(object)) {\n                return false;\n            }\n            var type = typeof index;\n            if (type == \"number\" ? isArrayLike(object) && isIndex(index, object.length) : type == \"string\" && index in object) {\n                return eq(object[index], value);\n            }\n            return false;\n        }\n        module.exports = isIterateeCall;\n    /***/ },\n    /* 132 */ /***/ function(module, exports1) {\n        /*\n * typedefs.js\n * Normalizes browser-specific prefixes and provide some basic polyfills\n */ if (false) {}\n        if (typeof Math.imul !== \"function\") {\n            /* eslint-disable no-bitwise */ Math.imul = function(a, b) {\n                var ah = a >>> 16 & 0xffff;\n                var al = a & 0xffff;\n                var bh = b >>> 16 & 0xffff;\n                var bl = b & 0xffff;\n                // the shift by 0 fixes the sign on the high part\n                // the final |0 converts the unsigned value into a signed value\n                return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;\n            };\n        /* eslint-enable no-bitwise */ }\n        if (typeof Object.assign !== \"function\") {\n            Object.assign = function(target) {\n                // .length of function is 2\n                \"use strict\";\n                if (target === null) {\n                    // TypeError if undefined or null\n                    throw new TypeError(\"Cannot convert undefined or null to object\");\n                }\n                var to = Object(target);\n                for(var index = 1; index < arguments.length; index++){\n                    // eslint-disable-next-line prefer-rest-params\n                    var nextSource = arguments[index];\n                    if (nextSource !== null) {\n                        // Skip over if undefined or null\n                        // eslint-disable-next-line no-restricted-syntax\n                        for(var nextKey in nextSource){\n                            // Avoid bugs when hasOwnProperty is shadowed\n                            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                                to[nextKey] = nextSource[nextKey];\n                            }\n                        }\n                    }\n                }\n                return to;\n            };\n        }\n    /***/ },\n    /* 133 */ /***/ function(module, exports1) {\n        function _arrayWithHoles(arr) {\n            if (Array.isArray(arr)) return arr;\n        }\n        module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 134 */ /***/ function(module, exports1) {\n        function _iterableToArrayLimit(r, l) {\n            var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n            if (null != t) {\n                var e, n, i, u, a = [], f = !0, o = !1;\n                try {\n                    if (i = (t = t.call(r)).next, 0 === l) {\n                        if (Object(t) !== t) return;\n                        f = !1;\n                    } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n                } catch (r) {\n                    o = !0, n = r;\n                } finally{\n                    try {\n                        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n                    } finally{\n                        if (o) throw n;\n                    }\n                }\n                return a;\n            }\n        }\n        module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 135 */ /***/ function(module, exports1) {\n        function _nonIterableRest() {\n            throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n        }\n        module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 136 */ /***/ function(module, exports1, __nested_webpack_require_215247__) {\n        var _typeof = __nested_webpack_require_215247__(13)[\"default\"];\n        function _toPrimitive(input, hint) {\n            if (_typeof(input) !== \"object\" || input === null) return input;\n            var prim = input[Symbol.toPrimitive];\n            if (prim !== undefined) {\n                var res = prim.call(input, hint || \"default\");\n                if (_typeof(res) !== \"object\") return res;\n                throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n            }\n            return (hint === \"string\" ? String : Number)(input);\n        }\n        module.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 137 */ /***/ function(module, exports1, __nested_webpack_require_216011__) {\n        var _typeof = __nested_webpack_require_216011__(13)[\"default\"];\n        function _regeneratorRuntime() {\n            \"use strict\";\n            /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n                return e;\n            }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n            var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function(t, e, r) {\n                t[e] = r.value;\n            }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\";\n            function define(t, e, r) {\n                return Object.defineProperty(t, e, {\n                    value: r,\n                    enumerable: !0,\n                    configurable: !0,\n                    writable: !0\n                }), t[e];\n            }\n            try {\n                define({}, \"\");\n            } catch (t) {\n                define = function define(t, e, r) {\n                    return t[e] = r;\n                };\n            }\n            function wrap(t, e, r, n) {\n                var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []);\n                return o(a, \"_invoke\", {\n                    value: makeInvokeMethod(t, r, c)\n                }), a;\n            }\n            function tryCatch(t, e, r) {\n                try {\n                    return {\n                        type: \"normal\",\n                        arg: t.call(e, r)\n                    };\n                } catch (t) {\n                    return {\n                        type: \"throw\",\n                        arg: t\n                    };\n                }\n            }\n            e.wrap = wrap;\n            var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {};\n            function Generator() {}\n            function GeneratorFunction() {}\n            function GeneratorFunctionPrototype() {}\n            var p = {};\n            define(p, a, function() {\n                return this;\n            });\n            var d = Object.getPrototypeOf, v = d && d(d(values([])));\n            v && v !== r && n.call(v, a) && (p = v);\n            var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n            function defineIteratorMethods(t) {\n                [\n                    \"next\",\n                    \"throw\",\n                    \"return\"\n                ].forEach(function(e) {\n                    define(t, e, function(t) {\n                        return this._invoke(e, t);\n                    });\n                });\n            }\n            function AsyncIterator(t, e) {\n                function invoke(r, o, i, a) {\n                    var c = tryCatch(t[r], t, o);\n                    if (\"throw\" !== c.type) {\n                        var u = c.arg, h = u.value;\n                        return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function(t) {\n                            invoke(\"next\", t, i, a);\n                        }, function(t) {\n                            invoke(\"throw\", t, i, a);\n                        }) : e.resolve(h).then(function(t) {\n                            u.value = t, i(u);\n                        }, function(t) {\n                            return invoke(\"throw\", t, i, a);\n                        });\n                    }\n                    a(c.arg);\n                }\n                var r;\n                o(this, \"_invoke\", {\n                    value: function value(t, n) {\n                        function callInvokeWithMethodAndArg() {\n                            return new e(function(e, r) {\n                                invoke(t, n, e, r);\n                            });\n                        }\n                        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n                    }\n                });\n            }\n            function makeInvokeMethod(e, r, n) {\n                var o = h;\n                return function(i, a) {\n                    if (o === f) throw new Error(\"Generator is already running\");\n                    if (o === s) {\n                        if (\"throw\" === i) throw a;\n                        return {\n                            value: t,\n                            done: !0\n                        };\n                    }\n                    for(n.method = i, n.arg = a;;){\n                        var c = n.delegate;\n                        if (c) {\n                            var u = maybeInvokeDelegate(c, n);\n                            if (u) {\n                                if (u === y) continue;\n                                return u;\n                            }\n                        }\n                        if (\"next\" === n.method) n.sent = n._sent = n.arg;\n                        else if (\"throw\" === n.method) {\n                            if (o === h) throw o = s, n.arg;\n                            n.dispatchException(n.arg);\n                        } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n                        o = f;\n                        var p = tryCatch(e, r, n);\n                        if (\"normal\" === p.type) {\n                            if (o = n.done ? s : l, p.arg === y) continue;\n                            return {\n                                value: p.arg,\n                                done: n.done\n                            };\n                        }\n                        \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n                    }\n                };\n            }\n            function maybeInvokeDelegate(e, r) {\n                var n = r.method, o = e.iterator[n];\n                if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n                var i = tryCatch(o, e.iterator, r.arg);\n                if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n                var a = i.arg;\n                return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n            }\n            function pushTryEntry(t) {\n                var e = {\n                    tryLoc: t[0]\n                };\n                1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n            }\n            function resetTryEntry(t) {\n                var e = t.completion || {};\n                e.type = \"normal\", delete e.arg, t.completion = e;\n            }\n            function Context(t) {\n                this.tryEntries = [\n                    {\n                        tryLoc: \"root\"\n                    }\n                ], t.forEach(pushTryEntry, this), this.reset(!0);\n            }\n            function values(e) {\n                if (e || \"\" === e) {\n                    var r = e[a];\n                    if (r) return r.call(e);\n                    if (\"function\" == typeof e.next) return e;\n                    if (!isNaN(e.length)) {\n                        var o = -1, i = function next() {\n                            for(; ++o < e.length;)if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n                            return next.value = t, next.done = !0, next;\n                        };\n                        return i.next = i;\n                    }\n                }\n                throw new TypeError(_typeof(e) + \" is not iterable\");\n            }\n            return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n                value: GeneratorFunctionPrototype,\n                configurable: !0\n            }), o(GeneratorFunctionPrototype, \"constructor\", {\n                value: GeneratorFunction,\n                configurable: !0\n            }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function(t) {\n                var e = \"function\" == typeof t && t.constructor;\n                return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n            }, e.mark = function(t) {\n                return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n            }, e.awrap = function(t) {\n                return {\n                    __await: t\n                };\n            }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function() {\n                return this;\n            }), e.AsyncIterator = AsyncIterator, e.async = function(t, r, n, o, i) {\n                void 0 === i && (i = Promise);\n                var a = new AsyncIterator(wrap(t, r, n, o), i);\n                return e.isGeneratorFunction(r) ? a : a.next().then(function(t) {\n                    return t.done ? t.value : a.next();\n                });\n            }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function() {\n                return this;\n            }), define(g, \"toString\", function() {\n                return \"[object Generator]\";\n            }), e.keys = function(t) {\n                var e = Object(t), r = [];\n                for(var n in e)r.push(n);\n                return r.reverse(), function next() {\n                    for(; r.length;){\n                        var t = r.pop();\n                        if (t in e) return next.value = t, next.done = !1, next;\n                    }\n                    return next.done = !0, next;\n                };\n            }, e.values = values, Context.prototype = {\n                constructor: Context,\n                reset: function reset(e) {\n                    if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for(var r in this)\"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n                },\n                stop: function stop() {\n                    this.done = !0;\n                    var t = this.tryEntries[0].completion;\n                    if (\"throw\" === t.type) throw t.arg;\n                    return this.rval;\n                },\n                dispatchException: function dispatchException(e) {\n                    if (this.done) throw e;\n                    var r = this;\n                    function handle(n, o) {\n                        return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n                    }\n                    for(var o = this.tryEntries.length - 1; o >= 0; --o){\n                        var i = this.tryEntries[o], a = i.completion;\n                        if (\"root\" === i.tryLoc) return handle(\"end\");\n                        if (i.tryLoc <= this.prev) {\n                            var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\");\n                            if (c && u) {\n                                if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n                                if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n                            } else if (c) {\n                                if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n                            } else {\n                                if (!u) throw new Error(\"try statement without catch or finally\");\n                                if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n                            }\n                        }\n                    }\n                },\n                abrupt: function abrupt(t, e) {\n                    for(var r = this.tryEntries.length - 1; r >= 0; --r){\n                        var o = this.tryEntries[r];\n                        if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n                            var i = o;\n                            break;\n                        }\n                    }\n                    i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n                    var a = i ? i.completion : {};\n                    return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n                },\n                complete: function complete(t, e) {\n                    if (\"throw\" === t.type) throw t.arg;\n                    return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n                },\n                finish: function finish(t) {\n                    for(var e = this.tryEntries.length - 1; e >= 0; --e){\n                        var r = this.tryEntries[e];\n                        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n                    }\n                },\n                \"catch\": function _catch(t) {\n                    for(var e = this.tryEntries.length - 1; e >= 0; --e){\n                        var r = this.tryEntries[e];\n                        if (r.tryLoc === t) {\n                            var n = r.completion;\n                            if (\"throw\" === n.type) {\n                                var o = n.arg;\n                                resetTryEntry(r);\n                            }\n                            return o;\n                        }\n                    }\n                    throw new Error(\"illegal catch attempt\");\n                },\n                delegateYield: function delegateYield(e, r, n) {\n                    return this.delegate = {\n                        iterator: values(e),\n                        resultName: r,\n                        nextLoc: n\n                    }, \"next\" === this.method && (this.arg = t), y;\n                }\n            }, e;\n        }\n        module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 138 */ /***/ function(module, exports1, __nested_webpack_require_230977__) {\n        var getPrototypeOf = __nested_webpack_require_230977__(2);\n        function _superPropBase(object, property) {\n            while(!Object.prototype.hasOwnProperty.call(object, property)){\n                object = getPrototypeOf(object);\n                if (object === null) break;\n            }\n            return object;\n        }\n        module.exports = _superPropBase, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 139 */ /***/ function(module, exports1, __nested_webpack_require_231504__) {\n        var arrayLikeToArray = __nested_webpack_require_231504__(61);\n        function _arrayWithoutHoles(arr) {\n            if (Array.isArray(arr)) return arrayLikeToArray(arr);\n        }\n        module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 140 */ /***/ function(module, exports1) {\n        function _iterableToArray(iter) {\n            if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n        }\n        module.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 141 */ /***/ function(module, exports1) {\n        function _nonIterableSpread() {\n            throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n        }\n        module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 142 */ /***/ function(module, exports1, __nested_webpack_require_232659__) {\n        var basePickBy = __nested_webpack_require_232659__(143), hasIn = __nested_webpack_require_232659__(153);\n        /**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */ function basePick(object, paths) {\n            return basePickBy(object, paths, function(value, path) {\n                return hasIn(object, path);\n            });\n        }\n        module.exports = basePick;\n    /***/ },\n    /* 143 */ /***/ function(module, exports1, __nested_webpack_require_233307__) {\n        var baseGet = __nested_webpack_require_233307__(144), baseSet = __nested_webpack_require_233307__(152), castPath = __nested_webpack_require_233307__(32);\n        /**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */ function basePickBy(object, paths, predicate) {\n            var index = -1, length = paths.length, result = {};\n            while(++index < length){\n                var path = paths[index], value = baseGet(object, path);\n                if (predicate(value, path)) {\n                    baseSet(result, castPath(path, object), value);\n                }\n            }\n            return result;\n        }\n        module.exports = basePickBy;\n    /***/ },\n    /* 144 */ /***/ function(module, exports1, __nested_webpack_require_234276__) {\n        var castPath = __nested_webpack_require_234276__(32), toKey = __nested_webpack_require_234276__(43);\n        /**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */ function baseGet(object, path) {\n            path = castPath(path, object);\n            var index = 0, length = path.length;\n            while(object != null && index < length){\n                object = object[toKey(path[index++])];\n            }\n            return index && index == length ? object : undefined;\n        }\n        module.exports = baseGet;\n    /***/ },\n    /* 145 */ /***/ function(module, exports1, __nested_webpack_require_235056__) {\n        var isArray = __nested_webpack_require_235056__(16), isSymbol = __nested_webpack_require_235056__(42);\n        /** Used to match property names within property paths. */ var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/, reIsPlainProp = /^\\w*$/;\n        /**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */ function isKey(value, object) {\n            if (isArray(value)) {\n                return false;\n            }\n            var type = typeof value;\n            if (type == \"number\" || type == \"symbol\" || type == \"boolean\" || value == null || isSymbol(value)) {\n                return true;\n            }\n            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);\n        }\n        module.exports = isKey;\n    /***/ },\n    /* 146 */ /***/ function(module, exports1, __nested_webpack_require_236125__) {\n        var memoizeCapped = __nested_webpack_require_236125__(147);\n        /** Used to match property names within property paths. */ var rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n        /** Used to match backslashes in property paths. */ var reEscapeChar = /\\\\(\\\\)?/g;\n        /**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */ var stringToPath = memoizeCapped(function(string) {\n            var result = [];\n            if (string.charCodeAt(0) === 46 /* . */ ) {\n                result.push(\"\");\n            }\n            string.replace(rePropName, function(match, number, quote, subString) {\n                result.push(quote ? subString.replace(reEscapeChar, \"$1\") : number || match);\n            });\n            return result;\n        });\n        module.exports = stringToPath;\n    /***/ },\n    /* 147 */ /***/ function(module, exports1, __nested_webpack_require_237172__) {\n        var memoize = __nested_webpack_require_237172__(148);\n        /** Used as the maximum memoize cache size. */ var MAX_MEMOIZE_SIZE = 500;\n        /**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */ function memoizeCapped(func) {\n            var result = memoize(func, function(key) {\n                if (cache.size === MAX_MEMOIZE_SIZE) {\n                    cache.clear();\n                }\n                return key;\n            });\n            var cache = result.cache;\n            return result;\n        }\n        module.exports = memoizeCapped;\n    /***/ },\n    /* 148 */ /***/ function(module, exports1, __nested_webpack_require_238018__) {\n        var MapCache = __nested_webpack_require_238018__(47);\n        /** Error message constants. */ var FUNC_ERROR_TEXT = \"Expected a function\";\n        /**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */ function memoize(func, resolver) {\n            if (typeof func != \"function\" || resolver != null && typeof resolver != \"function\") {\n                throw new TypeError(FUNC_ERROR_TEXT);\n            }\n            var memoized = function() {\n                var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;\n                if (cache.has(key)) {\n                    return cache.get(key);\n                }\n                var result = func.apply(this, args);\n                memoized.cache = cache.set(key, result) || cache;\n                return result;\n            };\n            memoized.cache = new (memoize.Cache || MapCache)();\n            return memoized;\n        }\n        // Expose `MapCache`.\n        memoize.Cache = MapCache;\n        module.exports = memoize;\n    /***/ },\n    /* 149 */ /***/ function(module, exports1, __nested_webpack_require_240519__) {\n        var baseToString = __nested_webpack_require_240519__(150);\n        /**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */ function toString(value) {\n            return value == null ? \"\" : baseToString(value);\n        }\n        module.exports = toString;\n    /***/ },\n    /* 150 */ /***/ function(module, exports1, __nested_webpack_require_241220__) {\n        var Symbol1 = __nested_webpack_require_241220__(27), arrayMap = __nested_webpack_require_241220__(151), isArray = __nested_webpack_require_241220__(16), isSymbol = __nested_webpack_require_241220__(42);\n        /** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;\n        /** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol1 ? Symbol1.prototype : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;\n        /**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */ function baseToString(value) {\n            // Exit early for strings to avoid a performance hit in some environments.\n            if (typeof value == \"string\") {\n                return value;\n            }\n            if (isArray(value)) {\n                // Recursively convert values (susceptible to call stack limits).\n                return arrayMap(value, baseToString) + \"\";\n            }\n            if (isSymbol(value)) {\n                return symbolToString ? symbolToString.call(value) : \"\";\n            }\n            var result = value + \"\";\n            return result == \"0\" && 1 / value == -INFINITY ? \"-0\" : result;\n        }\n        module.exports = baseToString;\n    /***/ },\n    /* 151 */ /***/ function(module, exports1) {\n        /**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */ function arrayMap(array, iteratee) {\n            var index = -1, length = array == null ? 0 : array.length, result = Array(length);\n            while(++index < length){\n                result[index] = iteratee(array[index], index, array);\n            }\n            return result;\n        }\n        module.exports = arrayMap;\n    /***/ },\n    /* 152 */ /***/ function(module, exports1, __nested_webpack_require_243308__) {\n        var assignValue = __nested_webpack_require_243308__(55), castPath = __nested_webpack_require_243308__(32), isIndex = __nested_webpack_require_243308__(31), isObject = __nested_webpack_require_243308__(15), toKey = __nested_webpack_require_243308__(43);\n        /**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */ function baseSet(object, path, value, customizer) {\n            if (!isObject(object)) {\n                return object;\n            }\n            path = castPath(path, object);\n            var index = -1, length = path.length, lastIndex = length - 1, nested = object;\n            while(nested != null && ++index < length){\n                var key = toKey(path[index]), newValue = value;\n                if (key === \"__proto__\" || key === \"constructor\" || key === \"prototype\") {\n                    return object;\n                }\n                if (index != lastIndex) {\n                    var objValue = nested[key];\n                    newValue = customizer ? customizer(objValue, key, nested) : undefined;\n                    if (newValue === undefined) {\n                        newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};\n                    }\n                }\n                assignValue(nested, key, newValue);\n                nested = nested[key];\n            }\n            return object;\n        }\n        module.exports = baseSet;\n    /***/ },\n    /* 153 */ /***/ function(module, exports1, __nested_webpack_require_244995__) {\n        var baseHasIn = __nested_webpack_require_244995__(154), hasPath = __nested_webpack_require_244995__(155);\n        /**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */ function hasIn(object, path) {\n            return object != null && hasPath(object, path, baseHasIn);\n        }\n        module.exports = hasIn;\n    /***/ },\n    /* 154 */ /***/ function(module, exports1) {\n        /**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */ function baseHasIn(object, key) {\n            return object != null && key in Object(object);\n        }\n        module.exports = baseHasIn;\n    /***/ },\n    /* 155 */ /***/ function(module, exports1, __nested_webpack_require_246340__) {\n        var castPath = __nested_webpack_require_246340__(32), isArguments = __nested_webpack_require_246340__(30), isArray = __nested_webpack_require_246340__(16), isIndex = __nested_webpack_require_246340__(31), isLength = __nested_webpack_require_246340__(40), toKey = __nested_webpack_require_246340__(43);\n        /**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */ function hasPath(object, path, hasFunc) {\n            path = castPath(path, object);\n            var index = -1, length = path.length, result = false;\n            while(++index < length){\n                var key = toKey(path[index]);\n                if (!(result = object != null && hasFunc(object, key))) {\n                    break;\n                }\n                object = object[key];\n            }\n            if (result || ++index != length) {\n                return result;\n            }\n            length = object == null ? 0 : object.length;\n            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));\n        }\n        module.exports = hasPath;\n    /***/ },\n    /* 156 */ /***/ function(module, exports1, __nested_webpack_require_247663__) {\n        var flatten = __nested_webpack_require_247663__(157), overRest = __nested_webpack_require_247663__(58), setToString = __nested_webpack_require_247663__(59);\n        /**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */ function flatRest(func) {\n            return setToString(overRest(func, undefined, flatten), func + \"\");\n        }\n        module.exports = flatRest;\n    /***/ },\n    /* 157 */ /***/ function(module, exports1, __nested_webpack_require_248238__) {\n        var baseFlatten = __nested_webpack_require_248238__(158);\n        /**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */ function flatten(array) {\n            var length = array == null ? 0 : array.length;\n            return length ? baseFlatten(array, 1) : [];\n        }\n        module.exports = flatten;\n    /***/ },\n    /* 158 */ /***/ function(module, exports1, __nested_webpack_require_248859__) {\n        var arrayPush = __nested_webpack_require_248859__(159), isFlattenable = __nested_webpack_require_248859__(160);\n        /**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */ function baseFlatten(array, depth, predicate, isStrict, result) {\n            var index = -1, length = array.length;\n            predicate || (predicate = isFlattenable);\n            result || (result = []);\n            while(++index < length){\n                var value = array[index];\n                if (depth > 0 && predicate(value)) {\n                    if (depth > 1) {\n                        // Recursively flatten arrays (susceptible to call stack limits).\n                        baseFlatten(value, depth - 1, predicate, isStrict, result);\n                    } else {\n                        arrayPush(result, value);\n                    }\n                } else if (!isStrict) {\n                    result[result.length] = value;\n                }\n            }\n            return result;\n        }\n        module.exports = baseFlatten;\n    /***/ },\n    /* 159 */ /***/ function(module, exports1) {\n        /**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */ function arrayPush(array, values) {\n            var index = -1, length = values.length, offset = array.length;\n            while(++index < length){\n                array[offset + index] = values[index];\n            }\n            return array;\n        }\n        module.exports = arrayPush;\n    /***/ },\n    /* 160 */ /***/ function(module, exports1, __nested_webpack_require_250928__) {\n        var Symbol1 = __nested_webpack_require_250928__(27), isArguments = __nested_webpack_require_250928__(30), isArray = __nested_webpack_require_250928__(16);\n        /** Built-in value references. */ var spreadableSymbol = Symbol1 ? Symbol1.isConcatSpreadable : undefined;\n        /**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */ function isFlattenable(value) {\n            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);\n        }\n        module.exports = isFlattenable;\n    /***/ },\n    /* 161 */ /***/ function(module, exports1) {\n        function _isNativeFunction(fn) {\n            try {\n                return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n            } catch (e) {\n                return typeof fn === \"function\";\n            }\n        }\n        module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 162 */ /***/ function(module, exports1, __nested_webpack_require_252087__) {\n        var setPrototypeOf = __nested_webpack_require_252087__(41);\n        var isNativeReflectConstruct = __nested_webpack_require_252087__(163);\n        function _construct(Parent, args, Class) {\n            if (isNativeReflectConstruct()) {\n                module.exports = _construct = Reflect.construct.bind(), module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n            } else {\n                module.exports = _construct = function _construct(Parent, args, Class) {\n                    var a = [\n                        null\n                    ];\n                    a.push.apply(a, args);\n                    var Constructor = Function.bind.apply(Parent, a);\n                    var instance = new Constructor();\n                    if (Class) setPrototypeOf(instance, Class.prototype);\n                    return instance;\n                }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n            }\n            return _construct.apply(null, arguments);\n        }\n        module.exports = _construct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 163 */ /***/ function(module, exports1) {\n        function _isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n            try {\n                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n        module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    /***/ },\n    /* 164 */ /***/ function(module, exports1) {\n        module.exports = __webpack_require__(/*! ndarray */ \"(ssr)/./node_modules/ndarray/ndarray.js\");\n    /***/ },\n    /* 165 */ /***/ function(module, exports1) {\n        module.exports = __webpack_require__(/*! ndarray-linear-interpolate */ \"(ssr)/./node_modules/ndarray-linear-interpolate/interp.js\");\n    /***/ },\n    /* 166 */ /***/ function(module, __nested_webpack_exports__, __nested_webpack_require_254197__) {\n        \"use strict\";\n        // ESM COMPAT FLAG\n        __nested_webpack_require_254197__.r(__nested_webpack_exports__);\n        // EXPORTS\n        __nested_webpack_require_254197__.d(__nested_webpack_exports__, \"BarcodeDecoder\", function() {\n            return /* reexport */ barcode_decoder;\n        });\n        __nested_webpack_require_254197__.d(__nested_webpack_exports__, \"Readers\", function() {\n            return /* reexport */ reader_namespaceObject;\n        });\n        __nested_webpack_require_254197__.d(__nested_webpack_exports__, \"CameraAccess\", function() {\n            return /* reexport */ camera_access;\n        });\n        __nested_webpack_require_254197__.d(__nested_webpack_exports__, \"ImageDebug\", function() {\n            return /* reexport */ image_debug[\"a\" /* default */ ];\n        });\n        __nested_webpack_require_254197__.d(__nested_webpack_exports__, \"ImageWrapper\", function() {\n            return /* reexport */ image_wrapper[\"a\" /* default */ ];\n        });\n        __nested_webpack_require_254197__.d(__nested_webpack_exports__, \"ResultCollector\", function() {\n            return /* reexport */ result_collector;\n        });\n        // NAMESPACE OBJECT: ./src/reader/index.ts\n        var reader_namespaceObject = {};\n        __nested_webpack_require_254197__.r(reader_namespaceObject);\n        __nested_webpack_require_254197__.d(reader_namespaceObject, \"BarcodeReader\", function() {\n            return barcode_reader;\n        });\n        __nested_webpack_require_254197__.d(reader_namespaceObject, \"TwoOfFiveReader\", function() {\n            return _2of5_reader;\n        });\n        __nested_webpack_require_254197__.d(reader_namespaceObject, \"NewCodabarReader\", function() {\n            return codabar_reader;\n        });\n        __nested_webpack_require_254197__.d(reader_namespaceObject, \"Code128Reader\", function() {\n            return code_128_reader;\n        });\n        __nested_webpack_require_254197__.d(reader_namespaceObject, \"Code32Reader\", function() {\n            return code_32_reader;\n        });\n        __nested_webpack_require_254197__.d(reader_namespaceObject, \"Code39Reader\", function() {\n            return code_39_reader;\n        });\n        __nested_webpack_require_254197__.d(reader_namespaceObject, \"Code39VINReader\", function() {\n            return code_39_vin_reader;\n        });\n        __nested_webpack_require_254197__.d(reader_namespaceObject, \"Code93Reader\", function() {\n            return code_93_reader;\n        });\n        __nested_webpack_require_254197__.d(reader_namespaceObject, \"EAN2Reader\", function() {\n            return ean_2_reader;\n        });\n        __nested_webpack_require_254197__.d(reader_namespaceObject, \"EAN5Reader\", function() {\n            return ean_5_reader;\n        });\n        __nested_webpack_require_254197__.d(reader_namespaceObject, \"EAN8Reader\", function() {\n            return ean_8_reader;\n        });\n        __nested_webpack_require_254197__.d(reader_namespaceObject, \"EANReader\", function() {\n            return ean_reader;\n        });\n        __nested_webpack_require_254197__.d(reader_namespaceObject, \"I2of5Reader\", function() {\n            return i2of5_reader;\n        });\n        __nested_webpack_require_254197__.d(reader_namespaceObject, \"UPCEReader\", function() {\n            return upc_e_reader;\n        });\n        __nested_webpack_require_254197__.d(reader_namespaceObject, \"UPCReader\", function() {\n            return upc_reader;\n        });\n        // EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/typeof.js\n        var helpers_typeof = __nested_webpack_require_254197__(13);\n        var typeof_default = /*#__PURE__*/ __nested_webpack_require_254197__.n(helpers_typeof);\n        // EXTERNAL MODULE: ./node_modules/lodash/merge.js\n        var merge = __nested_webpack_require_254197__(18);\n        var merge_default = /*#__PURE__*/ __nested_webpack_require_254197__.n(merge);\n        // EXTERNAL MODULE: ./src/common/typedefs.js\n        var typedefs = __nested_webpack_require_254197__(132);\n        // EXTERNAL MODULE: ./src/common/image_wrapper.ts\n        var image_wrapper = __nested_webpack_require_254197__(10);\n        // EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js\n        var asyncToGenerator = __nested_webpack_require_254197__(11);\n        var asyncToGenerator_default = /*#__PURE__*/ __nested_webpack_require_254197__.n(asyncToGenerator);\n        // EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js\n        var regenerator = __nested_webpack_require_254197__(8);\n        var regenerator_default = /*#__PURE__*/ __nested_webpack_require_254197__.n(regenerator);\n        // EXTERNAL MODULE: ./src/common/image_debug.ts\n        var image_debug = __nested_webpack_require_254197__(17);\n        // EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js\n        var classCallCheck = __nested_webpack_require_254197__(3);\n        var classCallCheck_default = /*#__PURE__*/ __nested_webpack_require_254197__.n(classCallCheck);\n        // EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js\n        var createClass = __nested_webpack_require_254197__(4);\n        var createClass_default = /*#__PURE__*/ __nested_webpack_require_254197__.n(createClass);\n        // EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/assertThisInitialized.js\n        var assertThisInitialized = __nested_webpack_require_254197__(1);\n        var assertThisInitialized_default = /*#__PURE__*/ __nested_webpack_require_254197__.n(assertThisInitialized);\n        // EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js\n        var inherits = __nested_webpack_require_254197__(7);\n        var inherits_default = /*#__PURE__*/ __nested_webpack_require_254197__.n(inherits);\n        // EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\n        var possibleConstructorReturn = __nested_webpack_require_254197__(6);\n        var possibleConstructorReturn_default = /*#__PURE__*/ __nested_webpack_require_254197__.n(possibleConstructorReturn);\n        // EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js\n        var getPrototypeOf = __nested_webpack_require_254197__(2);\n        var getPrototypeOf_default = /*#__PURE__*/ __nested_webpack_require_254197__.n(getPrototypeOf);\n        // EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js\n        var defineProperty = __nested_webpack_require_254197__(0);\n        var defineProperty_default = /*#__PURE__*/ __nested_webpack_require_254197__.n(defineProperty);\n        // EXTERNAL MODULE: ./src/common/array_helper.ts\n        var array_helper = __nested_webpack_require_254197__(9);\n        // CONCATENATED MODULE: ./src/reader/barcode_reader.ts\n        /* eslint-disable no-unused-vars */ /* eslint-disable class-methods-use-this */ // eslint-disable-next-line import/no-cycle\n        // for some reason this throws a shadow error on itself?!\n        // eslint-disable-next-line no-shadow\n        var BarcodeDirection = /*#__PURE__*/ function(BarcodeDirection) {\n            BarcodeDirection[BarcodeDirection[\"Forward\"] = 1] = \"Forward\";\n            BarcodeDirection[BarcodeDirection[\"Reverse\"] = -1] = \"Reverse\";\n            return BarcodeDirection;\n        }({});\n        var barcode_reader_BarcodeReader = /*#__PURE__*/ function() {\n            function BarcodeReader(config, supplements) {\n                classCallCheck_default()(this, BarcodeReader);\n                defineProperty_default()(this, \"_row\", []);\n                defineProperty_default()(this, \"config\", {});\n                defineProperty_default()(this, \"supplements\", []);\n                defineProperty_default()(this, \"SINGLE_CODE_ERROR\", 0);\n                defineProperty_default()(this, \"FORMAT\", \"unknown\");\n                defineProperty_default()(this, \"CONFIG_KEYS\", {});\n                this._row = [];\n                this.config = config || {};\n                if (supplements) {\n                    this.supplements = supplements;\n                }\n            }\n            createClass_default()(BarcodeReader, [\n                {\n                    key: \"_nextUnset\",\n                    value: function _nextUnset(line) {\n                        var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                        for(var i = start; i < line.length; i++){\n                            if (!line[i]) return i;\n                        }\n                        return line.length;\n                    }\n                },\n                {\n                    key: \"_matchPattern\",\n                    value: function _matchPattern(counter, code) {\n                        var maxSingleError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.SINGLE_CODE_ERROR || 1;\n                        var error = 0;\n                        var singleError = 0;\n                        var sum = 0;\n                        var modulo = 0;\n                        var barWidth = 0;\n                        var count = 0;\n                        var scaled = 0;\n                        for(var i = 0; i < counter.length; i++){\n                            sum += counter[i];\n                            modulo += code[i];\n                        }\n                        if (sum < modulo) {\n                            return Number.MAX_VALUE;\n                        }\n                        barWidth = sum / modulo;\n                        // eslint-disable-next-line no-param-reassign\n                        maxSingleError *= barWidth;\n                        for(var _i = 0; _i < counter.length; _i++){\n                            count = counter[_i];\n                            scaled = code[_i] * barWidth;\n                            singleError = Math.abs(count - scaled) / scaled;\n                            if (singleError > maxSingleError) {\n                                return Number.MAX_VALUE;\n                            }\n                            error += singleError;\n                        }\n                        return error / modulo;\n                    }\n                },\n                {\n                    key: \"_nextSet\",\n                    value: function _nextSet(line) {\n                        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                        for(var i = offset; i < line.length; i++){\n                            if (line[i]) return i;\n                        }\n                        return line.length;\n                    }\n                },\n                {\n                    key: \"_correctBars\",\n                    value: function _correctBars(counter, correction, indices) {\n                        var length = indices.length;\n                        var tmp = 0;\n                        while(length--){\n                            tmp = counter[indices[length]] * (1 - (1 - correction) / 2);\n                            if (tmp > 1) {\n                                // eslint-disable-next-line no-param-reassign\n                                counter[indices[length]] = tmp;\n                            }\n                        }\n                    }\n                },\n                {\n                    key: \"decodePattern\",\n                    value: function decodePattern(pattern) {\n                        // console.warn('* decodePattern', pattern);\n                        this._row = pattern;\n                        // console.warn('* decodePattern calling decode', typeof this, this.constructor, this.FORMAT, JSON.stringify(this));\n                        var result = this.decode();\n                        // console.warn('* first result=', result);\n                        if (result === null) {\n                            this._row.reverse();\n                            result = this.decode();\n                            // console.warn('* reversed result=', result);\n                            if (result) {\n                                result.direction = BarcodeDirection.Reverse;\n                                result.start = this._row.length - result.start;\n                                result.end = this._row.length - result.end;\n                            }\n                        } else {\n                            result.direction = BarcodeDirection.Forward;\n                        }\n                        if (result) {\n                            result.format = this.FORMAT;\n                        }\n                        // console.warn('* returning', result);\n                        return result;\n                    }\n                },\n                {\n                    key: \"_matchRange\",\n                    value: function _matchRange(start, end, value) {\n                        // eslint-disable-next-line no-param-reassign\n                        start = start < 0 ? 0 : start;\n                        var i;\n                        for(i = start; i < end; i++){\n                            if (this._row[i] !== value) {\n                                return false;\n                            }\n                        }\n                        return true;\n                    }\n                },\n                {\n                    key: \"_fillCounters\",\n                    value: function _fillCounters() {\n                        var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._nextUnset(this._row);\n                        var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._row.length;\n                        var isWhite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n                        var counters = [];\n                        var counterPos = 0;\n                        counters[counterPos] = 0;\n                        for(var i = offset; i < end; i++){\n                            // eslint-disable-next-line no-bitwise\n                            if (this._row[i] ^ (isWhite ? 1 : 0)) {\n                                counters[counterPos]++;\n                            } else {\n                                counterPos++;\n                                counters[counterPos] = 1;\n                                // eslint-disable-next-line no-param-reassign\n                                isWhite = !isWhite;\n                            }\n                        }\n                        return counters;\n                    }\n                },\n                {\n                    key: \"_toCounters\",\n                    value: function _toCounters(start, counters) {\n                        var numCounters = counters.length;\n                        var end = this._row.length;\n                        var isWhite = !this._row[start];\n                        var counterPos = 0;\n                        array_helper[\"a\" /* default */ ].init(counters, 0);\n                        for(var i = start; i < end; i++){\n                            // eslint-disable-next-line no-bitwise\n                            if (this._row[i] ^ (isWhite ? 1 : 0)) {\n                                // eslint-disable-next-line no-param-reassign\n                                counters[counterPos]++;\n                            } else {\n                                counterPos++;\n                                if (counterPos === numCounters) {\n                                    break;\n                                } else {\n                                    // eslint-disable-next-line no-param-reassign\n                                    counters[counterPos] = 1;\n                                    isWhite = !isWhite;\n                                }\n                            }\n                        }\n                        return counters;\n                    }\n                },\n                {\n                    key: \"decodeImage\",\n                    value: function decodeImage(imageWrapper) {\n                        // eslint-disable-next-line no-void\n                        void imageWrapper;\n                        return null;\n                    }\n                }\n            ], [\n                {\n                    key: \"Exception\",\n                    get: function get() {\n                        return {\n                            StartNotFoundException: \"Start-Info was not found!\",\n                            CodeNotFoundException: \"Code could not be found!\",\n                            PatternNotFoundException: \"Pattern could not be found!\"\n                        };\n                    }\n                }\n            ]);\n            return BarcodeReader;\n        }();\n        /* harmony default export */ var barcode_reader = barcode_reader_BarcodeReader;\n        // CONCATENATED MODULE: ./src/reader/2of5_reader.ts\n        function _createSuper(Derived) {\n            var hasNativeReflectConstruct = _isNativeReflectConstruct();\n            return function _createSuperInternal() {\n                var Super = getPrototypeOf_default()(Derived), result;\n                if (hasNativeReflectConstruct) {\n                    var NewTarget = getPrototypeOf_default()(this).constructor;\n                    result = Reflect.construct(Super, arguments, NewTarget);\n                } else {\n                    result = Super.apply(this, arguments);\n                }\n                return possibleConstructorReturn_default()(this, result);\n            };\n        }\n        function _isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n            try {\n                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n        var N = 1;\n        var W = 3;\n        var START_PATTERN = [\n            W,\n            N,\n            W,\n            N,\n            N,\n            N\n        ];\n        var STOP_PATTERN = [\n            W,\n            N,\n            N,\n            N,\n            W\n        ];\n        var CODE_PATTERN = [\n            [\n                N,\n                N,\n                W,\n                W,\n                N\n            ],\n            [\n                W,\n                N,\n                N,\n                N,\n                W\n            ],\n            [\n                N,\n                W,\n                N,\n                N,\n                W\n            ],\n            [\n                W,\n                W,\n                N,\n                N,\n                N\n            ],\n            [\n                N,\n                N,\n                W,\n                N,\n                W\n            ],\n            [\n                W,\n                N,\n                W,\n                N,\n                N\n            ],\n            [\n                N,\n                W,\n                W,\n                N,\n                N\n            ],\n            [\n                N,\n                N,\n                N,\n                W,\n                W\n            ],\n            [\n                W,\n                N,\n                N,\n                W,\n                N\n            ],\n            [\n                N,\n                W,\n                N,\n                W,\n                N\n            ]\n        ];\n        var START_PATTERN_LENGTH = START_PATTERN.reduce(function(sum, val) {\n            return sum + val;\n        }, 0);\n        var _2of5_reader_TwoOfFiveReader = /*#__PURE__*/ function(_BarcodeReader) {\n            inherits_default()(TwoOfFiveReader, _BarcodeReader);\n            var _super = _createSuper(TwoOfFiveReader);\n            function TwoOfFiveReader() {\n                var _this;\n                classCallCheck_default()(this, TwoOfFiveReader);\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                _this = _super.call.apply(_super, [\n                    this\n                ].concat(args));\n                defineProperty_default()(assertThisInitialized_default()(_this), \"barSpaceRatio\", [\n                    1,\n                    1\n                ]);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", \"2of5\");\n                defineProperty_default()(assertThisInitialized_default()(_this), \"SINGLE_CODE_ERROR\", 0.78);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"AVG_CODE_ERROR\", 0.30);\n                return _this;\n            }\n            createClass_default()(TwoOfFiveReader, [\n                {\n                    key: \"_findPattern\",\n                    value: function _findPattern(pattern, offset) {\n                        var isWhite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                        var tryHarder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n                        var counter = [];\n                        var counterPos = 0;\n                        var bestMatch = {\n                            error: Number.MAX_VALUE,\n                            code: -1,\n                            start: 0,\n                            end: 0\n                        };\n                        var sum = 0;\n                        var error = 0;\n                        var epsilon = this.AVG_CODE_ERROR;\n                        if (!offset) {\n                            offset = this._nextSet(this._row);\n                        }\n                        for(var i = 0; i < pattern.length; i++){\n                            counter[i] = 0;\n                        }\n                        for(var _i = offset; _i < this._row.length; _i++){\n                            if (this._row[_i] ^ (isWhite ? 1 : 0)) {\n                                counter[counterPos]++;\n                            } else {\n                                if (counterPos === counter.length - 1) {\n                                    sum = 0;\n                                    for(var j = 0; j < counter.length; j++){\n                                        sum += counter[j];\n                                    }\n                                    error = this._matchPattern(counter, pattern);\n                                    if (error < epsilon) {\n                                        bestMatch.error = error;\n                                        bestMatch.start = _i - sum;\n                                        bestMatch.end = _i;\n                                        return bestMatch;\n                                    }\n                                    if (tryHarder) {\n                                        for(var _j = 0; _j < counter.length - 2; _j++){\n                                            counter[_j] = counter[_j + 2];\n                                        }\n                                        counter[counter.length - 2] = 0;\n                                        counter[counter.length - 1] = 0;\n                                        counterPos--;\n                                    } else {\n                                        return null;\n                                    }\n                                } else {\n                                    counterPos++;\n                                }\n                                counter[counterPos] = 1;\n                                isWhite = !isWhite;\n                            }\n                        }\n                        return null;\n                    }\n                },\n                {\n                    key: \"_findStart\",\n                    value: function _findStart() {\n                        var startInfo = null;\n                        var offset = this._nextSet(this._row);\n                        var narrowBarWidth = 1;\n                        var leadingWhitespaceStart = 0;\n                        while(!startInfo){\n                            startInfo = this._findPattern(START_PATTERN, offset, false, true);\n                            if (!startInfo) {\n                                return null;\n                            }\n                            narrowBarWidth = Math.floor((startInfo.end - startInfo.start) / START_PATTERN_LENGTH);\n                            leadingWhitespaceStart = startInfo.start - narrowBarWidth * 5;\n                            if (leadingWhitespaceStart >= 0) {\n                                if (this._matchRange(leadingWhitespaceStart, startInfo.start, 0)) {\n                                    return startInfo;\n                                }\n                            }\n                            offset = startInfo.end;\n                            startInfo = null;\n                        }\n                        return startInfo;\n                    }\n                },\n                {\n                    key: \"_verifyTrailingWhitespace\",\n                    value: function _verifyTrailingWhitespace(endInfo) {\n                        var trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start) / 2;\n                        if (trailingWhitespaceEnd < this._row.length) {\n                            if (this._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\n                                return endInfo;\n                            }\n                        }\n                        return null;\n                    }\n                },\n                {\n                    key: \"_findEnd\",\n                    value: function _findEnd() {\n                        // TODO: reverse, followed by some calcs, followed by another reverse? really?\n                        this._row.reverse();\n                        var offset = this._nextSet(this._row);\n                        var endInfo = this._findPattern(STOP_PATTERN, offset, false, true);\n                        this._row.reverse();\n                        if (endInfo === null) {\n                            return null;\n                        }\n                        // reverse numbers\n                        var tmp = endInfo.start;\n                        endInfo.start = this._row.length - endInfo.end;\n                        endInfo.end = this._row.length - tmp;\n                        return endInfo !== null ? this._verifyTrailingWhitespace(endInfo) : null;\n                    }\n                },\n                {\n                    key: \"_verifyCounterLength\",\n                    value: function _verifyCounterLength(counters) {\n                        return counters.length % 10 === 0;\n                    }\n                },\n                {\n                    key: \"_decodeCode\",\n                    value: function _decodeCode(counter) {\n                        var epsilon = this.AVG_CODE_ERROR;\n                        var bestMatch = {\n                            error: Number.MAX_VALUE,\n                            code: -1,\n                            start: 0,\n                            end: 0\n                        };\n                        for(var code = 0; code < CODE_PATTERN.length; code++){\n                            var error = this._matchPattern(counter, CODE_PATTERN[code]);\n                            if (error < bestMatch.error) {\n                                bestMatch.code = code;\n                                bestMatch.error = error;\n                            }\n                        }\n                        if (bestMatch.error < epsilon) {\n                            return bestMatch;\n                        }\n                        return null;\n                    }\n                },\n                {\n                    key: \"_decodePayload\",\n                    value: function _decodePayload(counters, result, decodedCodes) {\n                        var pos = 0;\n                        var counterLength = counters.length;\n                        var counter = [\n                            0,\n                            0,\n                            0,\n                            0,\n                            0\n                        ];\n                        var code = null;\n                        while(pos < counterLength){\n                            for(var i = 0; i < 5; i++){\n                                counter[i] = counters[pos] * this.barSpaceRatio[0];\n                                pos += 2;\n                            }\n                            code = this._decodeCode(counter);\n                            if (!code) {\n                                return null;\n                            }\n                            result.push(\"\".concat(code.code));\n                            decodedCodes.push(code);\n                        }\n                        return code;\n                    }\n                },\n                {\n                    key: \"decode\",\n                    value: function decode(row, start) {\n                        var startInfo = this._findStart();\n                        if (!startInfo) {\n                            return null;\n                        }\n                        var endInfo = this._findEnd();\n                        if (!endInfo) {\n                            return null;\n                        }\n                        var counters = this._fillCounters(startInfo.end, endInfo.start, false);\n                        if (!this._verifyCounterLength(counters)) {\n                            return null;\n                        }\n                        var decodedCodes = [];\n                        decodedCodes.push(startInfo);\n                        var result = [];\n                        var code = this._decodePayload(counters, result, decodedCodes);\n                        if (!code) {\n                            return null;\n                        }\n                        if (result.length < 5) {\n                            return null;\n                        }\n                        decodedCodes.push(endInfo);\n                        return {\n                            code: result.join(\"\"),\n                            start: startInfo.start,\n                            end: endInfo.end,\n                            startInfo: startInfo,\n                            decodedCodes: decodedCodes,\n                            format: this.FORMAT\n                        };\n                    }\n                }\n            ]);\n            return TwoOfFiveReader;\n        }(barcode_reader);\n        /* harmony default export */ var _2of5_reader = _2of5_reader_TwoOfFiveReader;\n        // CONCATENATED MODULE: ./src/reader/codabar_reader.ts\n        function codabar_reader_createSuper(Derived) {\n            var hasNativeReflectConstruct = codabar_reader_isNativeReflectConstruct();\n            return function _createSuperInternal() {\n                var Super = getPrototypeOf_default()(Derived), result;\n                if (hasNativeReflectConstruct) {\n                    var NewTarget = getPrototypeOf_default()(this).constructor;\n                    result = Reflect.construct(Super, arguments, NewTarget);\n                } else {\n                    result = Super.apply(this, arguments);\n                }\n                return possibleConstructorReturn_default()(this, result);\n            };\n        }\n        function codabar_reader_isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n            try {\n                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n        // const ALPHABETH_STRING = '0123456789-$:/.+ABCD';\n        var ALPHABET = [\n            48,\n            49,\n            50,\n            51,\n            52,\n            53,\n            54,\n            55,\n            56,\n            57,\n            45,\n            36,\n            58,\n            47,\n            46,\n            43,\n            65,\n            66,\n            67,\n            68\n        ];\n        var CHARACTER_ENCODINGS = [\n            0x003,\n            0x006,\n            0x009,\n            0x060,\n            0x012,\n            0x042,\n            0x021,\n            0x024,\n            0x030,\n            0x048,\n            0x00c,\n            0x018,\n            0x045,\n            0x051,\n            0x054,\n            0x015,\n            0x01A,\n            0x029,\n            0x00B,\n            0x00E\n        ];\n        var START_END = [\n            0x01A,\n            0x029,\n            0x00B,\n            0x00E\n        ];\n        var MIN_ENCODED_CHARS = 4;\n        var MAX_ACCEPTABLE = 2.0;\n        var PADDING = 1.5;\n        ;\n        ;\n        var codabar_reader_NewCodabarReader = /*#__PURE__*/ function(_BarcodeReader) {\n            inherits_default()(NewCodabarReader, _BarcodeReader);\n            var _super = codabar_reader_createSuper(NewCodabarReader);\n            function NewCodabarReader() {\n                var _this;\n                classCallCheck_default()(this, NewCodabarReader);\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                _this = _super.call.apply(_super, [\n                    this\n                ].concat(args));\n                defineProperty_default()(assertThisInitialized_default()(_this), \"_counters\", []);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", \"codabar\");\n                return _this;\n            }\n            createClass_default()(NewCodabarReader, [\n                {\n                    key: \"_computeAlternatingThreshold\",\n                    value: function _computeAlternatingThreshold(offset, end) {\n                        var min = Number.MAX_VALUE;\n                        var max = 0;\n                        var counter = 0;\n                        for(var i = offset; i < end; i += 2){\n                            counter = this._counters[i];\n                            if (counter > max) {\n                                max = counter;\n                            }\n                            if (counter < min) {\n                                min = counter;\n                            }\n                        }\n                        return (min + max) / 2.0 | 0;\n                    }\n                },\n                {\n                    key: \"_toPattern\",\n                    value: function _toPattern(offset) {\n                        var numCounters = 7;\n                        var end = offset + numCounters;\n                        if (end > this._counters.length) {\n                            return -1;\n                        }\n                        var barThreshold = this._computeAlternatingThreshold(offset, end);\n                        var spaceThreshold = this._computeAlternatingThreshold(offset + 1, end);\n                        var bitmask = 1 << numCounters - 1;\n                        var threshold = 0;\n                        var pattern = 0;\n                        for(var i = 0; i < numCounters; i++){\n                            threshold = (i & 1) === 0 ? barThreshold : spaceThreshold;\n                            if (this._counters[offset + i] > threshold) {\n                                pattern |= bitmask;\n                            }\n                            bitmask >>= 1;\n                        }\n                        return pattern;\n                    }\n                },\n                {\n                    key: \"_isStartEnd\",\n                    value: function _isStartEnd(pattern) {\n                        for(var i = 0; i < START_END.length; i++){\n                            if (START_END[i] === pattern) {\n                                return true;\n                            }\n                        }\n                        return false;\n                    }\n                },\n                {\n                    key: \"_sumCounters\",\n                    value: function _sumCounters(start, end) {\n                        var sum = 0;\n                        for(var i = start; i < end; i++){\n                            sum += this._counters[i];\n                        }\n                        return sum;\n                    }\n                },\n                {\n                    key: \"_findStart\",\n                    value: function _findStart() {\n                        var start = this._nextUnset(this._row);\n                        var end = start;\n                        for(var i = 1; i < this._counters.length; i++){\n                            var pattern = this._toPattern(i);\n                            if (pattern !== -1 && this._isStartEnd(pattern)) {\n                                // TODO: Look for whitespace ahead\n                                start += this._sumCounters(0, i);\n                                end = start + this._sumCounters(i, i + 8);\n                                return {\n                                    start: start,\n                                    end: end,\n                                    startCounter: i,\n                                    endCounter: i + 8\n                                };\n                            }\n                        }\n                        return null;\n                    }\n                },\n                {\n                    key: \"_patternToChar\",\n                    value: function _patternToChar(pattern) {\n                        for(var i = 0; i < CHARACTER_ENCODINGS.length; i++){\n                            if (CHARACTER_ENCODINGS[i] === pattern) {\n                                return String.fromCharCode(ALPHABET[i]);\n                            }\n                        }\n                        return null;\n                    }\n                },\n                {\n                    key: \"_calculatePatternLength\",\n                    value: function _calculatePatternLength(offset) {\n                        var sum = 0;\n                        for(var i = offset; i < offset + 7; i++){\n                            sum += this._counters[i];\n                        }\n                        return sum;\n                    }\n                },\n                {\n                    key: \"_verifyWhitespace\",\n                    value: function _verifyWhitespace(startCounter, endCounter) {\n                        if (startCounter - 1 <= 0 || this._counters[startCounter - 1] >= this._calculatePatternLength(startCounter) / 2.0) {\n                            if (endCounter + 8 >= this._counters.length || this._counters[endCounter + 7] >= this._calculatePatternLength(endCounter) / 2.0) {\n                                return true;\n                            }\n                        }\n                        return false;\n                    }\n                },\n                {\n                    key: \"_charToPattern\",\n                    value: function _charToPattern(_char) {\n                        var charCode = _char.charCodeAt(0);\n                        for(var i = 0; i < ALPHABET.length; i++){\n                            if (ALPHABET[i] === charCode) {\n                                return CHARACTER_ENCODINGS[i];\n                            }\n                        }\n                        return 0x0;\n                    }\n                },\n                {\n                    key: \"_thresholdResultPattern\",\n                    value: function _thresholdResultPattern(result, startCounter) {\n                        var categorization = {\n                            space: {\n                                narrow: {\n                                    size: 0,\n                                    counts: 0,\n                                    min: 0,\n                                    max: Number.MAX_VALUE\n                                },\n                                wide: {\n                                    size: 0,\n                                    counts: 0,\n                                    min: 0,\n                                    max: Number.MAX_VALUE\n                                }\n                            },\n                            bar: {\n                                narrow: {\n                                    size: 0,\n                                    counts: 0,\n                                    min: 0,\n                                    max: Number.MAX_VALUE\n                                },\n                                wide: {\n                                    size: 0,\n                                    counts: 0,\n                                    min: 0,\n                                    max: Number.MAX_VALUE\n                                }\n                            }\n                        };\n                        var pos = startCounter;\n                        var pattern;\n                        for(var i = 0; i < result.length; i++){\n                            pattern = this._charToPattern(result[i]);\n                            for(var j = 6; j >= 0; j--){\n                                var kind = (j & 1) === 2 ? categorization.bar : categorization.space;\n                                var cat = (pattern & 1) === 1 ? kind.wide : kind.narrow;\n                                cat.size += this._counters[pos + j];\n                                cat.counts++;\n                                pattern >>= 1;\n                            }\n                            pos += 8;\n                        }\n                        [\n                            \"space\",\n                            \"bar\"\n                        ].forEach(function(key) {\n                            var newkind = categorization[key];\n                            newkind.wide.min = Math.floor((newkind.narrow.size / newkind.narrow.counts + newkind.wide.size / newkind.wide.counts) / 2);\n                            newkind.narrow.max = Math.ceil(newkind.wide.min);\n                            newkind.wide.max = Math.ceil((newkind.wide.size * MAX_ACCEPTABLE + PADDING) / newkind.wide.counts);\n                        });\n                        return categorization;\n                    }\n                },\n                {\n                    key: \"_validateResult\",\n                    value: function _validateResult(result, startCounter) {\n                        var thresholds = this._thresholdResultPattern(result, startCounter);\n                        var pos = startCounter;\n                        var pattern;\n                        for(var i = 0; i < result.length; i++){\n                            pattern = this._charToPattern(result[i]);\n                            for(var j = 6; j >= 0; j--){\n                                var kind = (j & 1) === 0 ? thresholds.bar : thresholds.space;\n                                var cat = (pattern & 1) === 1 ? kind.wide : kind.narrow;\n                                var size = this._counters[pos + j];\n                                if (size < cat.min || size > cat.max) {\n                                    return false;\n                                }\n                                pattern >>= 1;\n                            }\n                            pos += 8;\n                        }\n                        return true;\n                    }\n                },\n                {\n                    key: \"decode\",\n                    value: function decode(row, start) {\n                        this._counters = this._fillCounters();\n                        start = this._findStart();\n                        if (!start) {\n                            return null;\n                        }\n                        var nextStart = start.startCounter;\n                        var result = [];\n                        var pattern;\n                        do {\n                            pattern = this._toPattern(nextStart);\n                            if (pattern < 0) {\n                                return null;\n                            }\n                            var decodedChar = this._patternToChar(pattern);\n                            if (decodedChar === null) {\n                                return null;\n                            }\n                            result.push(decodedChar);\n                            nextStart += 8;\n                            if (result.length > 1 && this._isStartEnd(pattern)) {\n                                break;\n                            }\n                        }while (nextStart < this._counters.length);\n                        // verify end\n                        if (result.length - 2 < MIN_ENCODED_CHARS || !this._isStartEnd(pattern)) {\n                            return null;\n                        }\n                        // verify end white space\n                        if (!this._verifyWhitespace(start.startCounter, nextStart - 8)) {\n                            return null;\n                        }\n                        if (!this._validateResult(result, start.startCounter)) {\n                            return null;\n                        }\n                        nextStart = nextStart > this._counters.length ? this._counters.length : nextStart;\n                        var end = start.start + this._sumCounters(start.startCounter, nextStart - 8);\n                        return {\n                            code: result.join(\"\"),\n                            start: start.start,\n                            end: end,\n                            startInfo: start,\n                            decodedCodes: result,\n                            format: this.FORMAT // TODO: i think it should not be required to return format from this, as barcode_reader force sets the format anyway\n                        };\n                    }\n                }\n            ]);\n            return NewCodabarReader;\n        }(barcode_reader);\n        /* harmony default export */ var codabar_reader = codabar_reader_NewCodabarReader;\n        // CONCATENATED MODULE: ./src/reader/code_128_reader.ts\n        function code_128_reader_createSuper(Derived) {\n            var hasNativeReflectConstruct = code_128_reader_isNativeReflectConstruct();\n            return function _createSuperInternal() {\n                var Super = getPrototypeOf_default()(Derived), result;\n                if (hasNativeReflectConstruct) {\n                    var NewTarget = getPrototypeOf_default()(this).constructor;\n                    result = Reflect.construct(Super, arguments, NewTarget);\n                } else {\n                    result = Super.apply(this, arguments);\n                }\n                return possibleConstructorReturn_default()(this, result);\n            };\n        }\n        function code_128_reader_isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n            try {\n                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n        var code_128_reader_Code128Reader = /*#__PURE__*/ function(_BarcodeReader) {\n            inherits_default()(Code128Reader, _BarcodeReader);\n            var _super = code_128_reader_createSuper(Code128Reader);\n            function Code128Reader() {\n                var _this;\n                classCallCheck_default()(this, Code128Reader);\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                _this = _super.call.apply(_super, [\n                    this\n                ].concat(args));\n                defineProperty_default()(assertThisInitialized_default()(_this), \"CODE_SHIFT\", 98);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"CODE_C\", 99);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"CODE_B\", 100);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"CODE_A\", 101);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"START_CODE_A\", 103);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"START_CODE_B\", 104);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"START_CODE_C\", 105);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"STOP_CODE\", 106);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"CODE_PATTERN\", [\n                    [\n                        2,\n                        1,\n                        2,\n                        2,\n                        2,\n                        2\n                    ],\n                    [\n                        2,\n                        2,\n                        2,\n                        1,\n                        2,\n                        2\n                    ],\n                    [\n                        2,\n                        2,\n                        2,\n                        2,\n                        2,\n                        1\n                    ],\n                    [\n                        1,\n                        2,\n                        1,\n                        2,\n                        2,\n                        3\n                    ],\n                    [\n                        1,\n                        2,\n                        1,\n                        3,\n                        2,\n                        2\n                    ],\n                    [\n                        1,\n                        3,\n                        1,\n                        2,\n                        2,\n                        2\n                    ],\n                    [\n                        1,\n                        2,\n                        2,\n                        2,\n                        1,\n                        3\n                    ],\n                    [\n                        1,\n                        2,\n                        2,\n                        3,\n                        1,\n                        2\n                    ],\n                    [\n                        1,\n                        3,\n                        2,\n                        2,\n                        1,\n                        2\n                    ],\n                    [\n                        2,\n                        2,\n                        1,\n                        2,\n                        1,\n                        3\n                    ],\n                    [\n                        2,\n                        2,\n                        1,\n                        3,\n                        1,\n                        2\n                    ],\n                    [\n                        2,\n                        3,\n                        1,\n                        2,\n                        1,\n                        2\n                    ],\n                    [\n                        1,\n                        1,\n                        2,\n                        2,\n                        3,\n                        2\n                    ],\n                    [\n                        1,\n                        2,\n                        2,\n                        1,\n                        3,\n                        2\n                    ],\n                    [\n                        1,\n                        2,\n                        2,\n                        2,\n                        3,\n                        1\n                    ],\n                    [\n                        1,\n                        1,\n                        3,\n                        2,\n                        2,\n                        2\n                    ],\n                    [\n                        1,\n                        2,\n                        3,\n                        1,\n                        2,\n                        2\n                    ],\n                    [\n                        1,\n                        2,\n                        3,\n                        2,\n                        2,\n                        1\n                    ],\n                    [\n                        2,\n                        2,\n                        3,\n                        2,\n                        1,\n                        1\n                    ],\n                    [\n                        2,\n                        2,\n                        1,\n                        1,\n                        3,\n                        2\n                    ],\n                    [\n                        2,\n                        2,\n                        1,\n                        2,\n                        3,\n                        1\n                    ],\n                    [\n                        2,\n                        1,\n                        3,\n                        2,\n                        1,\n                        2\n                    ],\n                    [\n                        2,\n                        2,\n                        3,\n                        1,\n                        1,\n                        2\n                    ],\n                    [\n                        3,\n                        1,\n                        2,\n                        1,\n                        3,\n                        1\n                    ],\n                    [\n                        3,\n                        1,\n                        1,\n                        2,\n                        2,\n                        2\n                    ],\n                    [\n                        3,\n                        2,\n                        1,\n                        1,\n                        2,\n                        2\n                    ],\n                    [\n                        3,\n                        2,\n                        1,\n                        2,\n                        2,\n                        1\n                    ],\n                    [\n                        3,\n                        1,\n                        2,\n                        2,\n                        1,\n                        2\n                    ],\n                    [\n                        3,\n                        2,\n                        2,\n                        1,\n                        1,\n                        2\n                    ],\n                    [\n                        3,\n                        2,\n                        2,\n                        2,\n                        1,\n                        1\n                    ],\n                    [\n                        2,\n                        1,\n                        2,\n                        1,\n                        2,\n                        3\n                    ],\n                    [\n                        2,\n                        1,\n                        2,\n                        3,\n                        2,\n                        1\n                    ],\n                    [\n                        2,\n                        3,\n                        2,\n                        1,\n                        2,\n                        1\n                    ],\n                    [\n                        1,\n                        1,\n                        1,\n                        3,\n                        2,\n                        3\n                    ],\n                    [\n                        1,\n                        3,\n                        1,\n                        1,\n                        2,\n                        3\n                    ],\n                    [\n                        1,\n                        3,\n                        1,\n                        3,\n                        2,\n                        1\n                    ],\n                    [\n                        1,\n                        1,\n                        2,\n                        3,\n                        1,\n                        3\n                    ],\n                    [\n                        1,\n                        3,\n                        2,\n                        1,\n                        1,\n                        3\n                    ],\n                    [\n                        1,\n                        3,\n                        2,\n                        3,\n                        1,\n                        1\n                    ],\n                    [\n                        2,\n                        1,\n                        1,\n                        3,\n                        1,\n                        3\n                    ],\n                    [\n                        2,\n                        3,\n                        1,\n                        1,\n                        1,\n                        3\n                    ],\n                    [\n                        2,\n                        3,\n                        1,\n                        3,\n                        1,\n                        1\n                    ],\n                    [\n                        1,\n                        1,\n                        2,\n                        1,\n                        3,\n                        3\n                    ],\n                    [\n                        1,\n                        1,\n                        2,\n                        3,\n                        3,\n                        1\n                    ],\n                    [\n                        1,\n                        3,\n                        2,\n                        1,\n                        3,\n                        1\n                    ],\n                    [\n                        1,\n                        1,\n                        3,\n                        1,\n                        2,\n                        3\n                    ],\n                    [\n                        1,\n                        1,\n                        3,\n                        3,\n                        2,\n                        1\n                    ],\n                    [\n                        1,\n                        3,\n                        3,\n                        1,\n                        2,\n                        1\n                    ],\n                    [\n                        3,\n                        1,\n                        3,\n                        1,\n                        2,\n                        1\n                    ],\n                    [\n                        2,\n                        1,\n                        1,\n                        3,\n                        3,\n                        1\n                    ],\n                    [\n                        2,\n                        3,\n                        1,\n                        1,\n                        3,\n                        1\n                    ],\n                    [\n                        2,\n                        1,\n                        3,\n                        1,\n                        1,\n                        3\n                    ],\n                    [\n                        2,\n                        1,\n                        3,\n                        3,\n                        1,\n                        1\n                    ],\n                    [\n                        2,\n                        1,\n                        3,\n                        1,\n                        3,\n                        1\n                    ],\n                    [\n                        3,\n                        1,\n                        1,\n                        1,\n                        2,\n                        3\n                    ],\n                    [\n                        3,\n                        1,\n                        1,\n                        3,\n                        2,\n                        1\n                    ],\n                    [\n                        3,\n                        3,\n                        1,\n                        1,\n                        2,\n                        1\n                    ],\n                    [\n                        3,\n                        1,\n                        2,\n                        1,\n                        1,\n                        3\n                    ],\n                    [\n                        3,\n                        1,\n                        2,\n                        3,\n                        1,\n                        1\n                    ],\n                    [\n                        3,\n                        3,\n                        2,\n                        1,\n                        1,\n                        1\n                    ],\n                    [\n                        3,\n                        1,\n                        4,\n                        1,\n                        1,\n                        1\n                    ],\n                    [\n                        2,\n                        2,\n                        1,\n                        4,\n                        1,\n                        1\n                    ],\n                    [\n                        4,\n                        3,\n                        1,\n                        1,\n                        1,\n                        1\n                    ],\n                    [\n                        1,\n                        1,\n                        1,\n                        2,\n                        2,\n                        4\n                    ],\n                    [\n                        1,\n                        1,\n                        1,\n                        4,\n                        2,\n                        2\n                    ],\n                    [\n                        1,\n                        2,\n                        1,\n                        1,\n                        2,\n                        4\n                    ],\n                    [\n                        1,\n                        2,\n                        1,\n                        4,\n                        2,\n                        1\n                    ],\n                    [\n                        1,\n                        4,\n                        1,\n                        1,\n                        2,\n                        2\n                    ],\n                    [\n                        1,\n                        4,\n                        1,\n                        2,\n                        2,\n                        1\n                    ],\n                    [\n                        1,\n                        1,\n                        2,\n                        2,\n                        1,\n                        4\n                    ],\n                    [\n                        1,\n                        1,\n                        2,\n                        4,\n                        1,\n                        2\n                    ],\n                    [\n                        1,\n                        2,\n                        2,\n                        1,\n                        1,\n                        4\n                    ],\n                    [\n                        1,\n                        2,\n                        2,\n                        4,\n                        1,\n                        1\n                    ],\n                    [\n                        1,\n                        4,\n                        2,\n                        1,\n                        1,\n                        2\n                    ],\n                    [\n                        1,\n                        4,\n                        2,\n                        2,\n                        1,\n                        1\n                    ],\n                    [\n                        2,\n                        4,\n                        1,\n                        2,\n                        1,\n                        1\n                    ],\n                    [\n                        2,\n                        2,\n                        1,\n                        1,\n                        1,\n                        4\n                    ],\n                    [\n                        4,\n                        1,\n                        3,\n                        1,\n                        1,\n                        1\n                    ],\n                    [\n                        2,\n                        4,\n                        1,\n                        1,\n                        1,\n                        2\n                    ],\n                    [\n                        1,\n                        3,\n                        4,\n                        1,\n                        1,\n                        1\n                    ],\n                    [\n                        1,\n                        1,\n                        1,\n                        2,\n                        4,\n                        2\n                    ],\n                    [\n                        1,\n                        2,\n                        1,\n                        1,\n                        4,\n                        2\n                    ],\n                    [\n                        1,\n                        2,\n                        1,\n                        2,\n                        4,\n                        1\n                    ],\n                    [\n                        1,\n                        1,\n                        4,\n                        2,\n                        1,\n                        2\n                    ],\n                    [\n                        1,\n                        2,\n                        4,\n                        1,\n                        1,\n                        2\n                    ],\n                    [\n                        1,\n                        2,\n                        4,\n                        2,\n                        1,\n                        1\n                    ],\n                    [\n                        4,\n                        1,\n                        1,\n                        2,\n                        1,\n                        2\n                    ],\n                    [\n                        4,\n                        2,\n                        1,\n                        1,\n                        1,\n                        2\n                    ],\n                    [\n                        4,\n                        2,\n                        1,\n                        2,\n                        1,\n                        1\n                    ],\n                    [\n                        2,\n                        1,\n                        2,\n                        1,\n                        4,\n                        1\n                    ],\n                    [\n                        2,\n                        1,\n                        4,\n                        1,\n                        2,\n                        1\n                    ],\n                    [\n                        4,\n                        1,\n                        2,\n                        1,\n                        2,\n                        1\n                    ],\n                    [\n                        1,\n                        1,\n                        1,\n                        1,\n                        4,\n                        3\n                    ],\n                    [\n                        1,\n                        1,\n                        1,\n                        3,\n                        4,\n                        1\n                    ],\n                    [\n                        1,\n                        3,\n                        1,\n                        1,\n                        4,\n                        1\n                    ],\n                    [\n                        1,\n                        1,\n                        4,\n                        1,\n                        1,\n                        3\n                    ],\n                    [\n                        1,\n                        1,\n                        4,\n                        3,\n                        1,\n                        1\n                    ],\n                    [\n                        4,\n                        1,\n                        1,\n                        1,\n                        1,\n                        3\n                    ],\n                    [\n                        4,\n                        1,\n                        1,\n                        3,\n                        1,\n                        1\n                    ],\n                    [\n                        1,\n                        1,\n                        3,\n                        1,\n                        4,\n                        1\n                    ],\n                    [\n                        1,\n                        1,\n                        4,\n                        1,\n                        3,\n                        1\n                    ],\n                    [\n                        3,\n                        1,\n                        1,\n                        1,\n                        4,\n                        1\n                    ],\n                    [\n                        4,\n                        1,\n                        1,\n                        1,\n                        3,\n                        1\n                    ],\n                    [\n                        2,\n                        1,\n                        1,\n                        4,\n                        1,\n                        2\n                    ],\n                    [\n                        2,\n                        1,\n                        1,\n                        2,\n                        1,\n                        4\n                    ],\n                    [\n                        2,\n                        1,\n                        1,\n                        2,\n                        3,\n                        2\n                    ],\n                    [\n                        2,\n                        3,\n                        3,\n                        1,\n                        1,\n                        1,\n                        2\n                    ]\n                ]);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"SINGLE_CODE_ERROR\", 0.64);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"AVG_CODE_ERROR\", 0.30);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", \"code_128\");\n                defineProperty_default()(assertThisInitialized_default()(_this), \"MODULE_INDICES\", {\n                    bar: [\n                        0,\n                        2,\n                        4\n                    ],\n                    space: [\n                        1,\n                        3,\n                        5\n                    ]\n                });\n                return _this;\n            }\n            createClass_default()(Code128Reader, [\n                {\n                    key: \"_decodeCode\",\n                    value: function _decodeCode(start, correction) {\n                        var bestMatch = {\n                            error: Number.MAX_VALUE,\n                            code: -1,\n                            start: start,\n                            end: start,\n                            correction: {\n                                bar: 1,\n                                space: 1\n                            }\n                        };\n                        var counter = [\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0\n                        ];\n                        var offset = start;\n                        var isWhite = !this._row[offset];\n                        var counterPos = 0;\n                        for(var i = offset; i < this._row.length; i++){\n                            if (this._row[i] ^ (isWhite ? 1 : 0)) {\n                                counter[counterPos]++;\n                            } else {\n                                if (counterPos === counter.length - 1) {\n                                    if (correction) {\n                                        this._correct(counter, correction);\n                                    }\n                                    for(var code = 0; code < this.CODE_PATTERN.length; code++){\n                                        var error = this._matchPattern(counter, this.CODE_PATTERN[code]);\n                                        if (error < bestMatch.error) {\n                                            bestMatch.code = code;\n                                            bestMatch.error = error;\n                                        }\n                                    }\n                                    bestMatch.end = i;\n                                    if (bestMatch.code === -1 || bestMatch.error > this.AVG_CODE_ERROR) {\n                                        return null;\n                                    }\n                                    if (this.CODE_PATTERN[bestMatch.code]) {\n                                        bestMatch.correction.bar = this.calculateCorrection(this.CODE_PATTERN[bestMatch.code], counter, this.MODULE_INDICES.bar);\n                                        bestMatch.correction.space = this.calculateCorrection(this.CODE_PATTERN[bestMatch.code], counter, this.MODULE_INDICES.space);\n                                    }\n                                    return bestMatch;\n                                } else {\n                                    counterPos++;\n                                }\n                                counter[counterPos] = 1;\n                                isWhite = !isWhite;\n                            }\n                        }\n                        return null;\n                    }\n                },\n                {\n                    key: \"_correct\",\n                    value: function _correct(counter, correction) {\n                        this._correctBars(counter, correction.bar, this.MODULE_INDICES.bar);\n                        this._correctBars(counter, correction.space, this.MODULE_INDICES.space);\n                    }\n                },\n                {\n                    key: \"_findStart\",\n                    value: // TODO: _findStart and decodeCode share similar code, can we re-use some?\n                    function _findStart() {\n                        var counter = [\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0\n                        ];\n                        var offset = this._nextSet(this._row);\n                        var bestMatch = {\n                            error: Number.MAX_VALUE,\n                            code: -1,\n                            start: 0,\n                            end: 0,\n                            correction: {\n                                bar: 1,\n                                space: 1\n                            }\n                        };\n                        var isWhite = false;\n                        var counterPos = 0;\n                        for(var i = offset; i < this._row.length; i++){\n                            if (this._row[i] ^ (isWhite ? 1 : 0)) {\n                                counter[counterPos]++;\n                            } else {\n                                if (counterPos === counter.length - 1) {\n                                    var sum = counter.reduce(function(prev, next) {\n                                        return prev + next;\n                                    }, 0);\n                                    for(var code = this.START_CODE_A; code <= this.START_CODE_C; code++){\n                                        var error = this._matchPattern(counter, this.CODE_PATTERN[code]);\n                                        if (error < bestMatch.error) {\n                                            bestMatch.code = code;\n                                            bestMatch.error = error;\n                                        }\n                                    }\n                                    if (bestMatch.error < this.AVG_CODE_ERROR) {\n                                        bestMatch.start = i - sum;\n                                        bestMatch.end = i;\n                                        bestMatch.correction.bar = this.calculateCorrection(this.CODE_PATTERN[bestMatch.code], counter, this.MODULE_INDICES.bar);\n                                        bestMatch.correction.space = this.calculateCorrection(this.CODE_PATTERN[bestMatch.code], counter, this.MODULE_INDICES.space);\n                                        return bestMatch;\n                                    }\n                                    for(var j = 0; j < 4; j++){\n                                        counter[j] = counter[j + 2];\n                                    }\n                                    counter[4] = 0;\n                                    counter[5] = 0;\n                                    counterPos--;\n                                } else {\n                                    counterPos++;\n                                }\n                                counter[counterPos] = 1;\n                                isWhite = !isWhite;\n                            }\n                        }\n                        return null;\n                    }\n                },\n                {\n                    key: \"decode\",\n                    value: function decode(row, start) {\n                        var _this2 = this;\n                        var startInfo = this._findStart();\n                        if (startInfo === null) {\n                            return null;\n                        }\n                        // var self = this,\n                        //     done = false,\n                        //     result = [],\n                        //     multiplier = 0,\n                        //     checksum = 0,\n                        //     codeset,\n                        //     rawResult = [],\n                        //     decodedCodes = [],\n                        //     shiftNext = false,\n                        //     unshift,\n                        //     removeLastCharacter = true;\n                        var code = {\n                            code: startInfo.code,\n                            start: startInfo.start,\n                            end: startInfo.end,\n                            correction: {\n                                bar: startInfo.correction.bar,\n                                space: startInfo.correction.space\n                            }\n                        };\n                        var decodedCodes = [];\n                        decodedCodes.push(code);\n                        var checksum = code.code;\n                        var codeset = function(c) {\n                            switch(c){\n                                case _this2.START_CODE_A:\n                                    return _this2.CODE_A;\n                                case _this2.START_CODE_B:\n                                    return _this2.CODE_B;\n                                case _this2.START_CODE_C:\n                                    return _this2.CODE_C;\n                                default:\n                                    return null;\n                            }\n                        }(code.code);\n                        var done = false;\n                        var shiftNext = false;\n                        var unshift = shiftNext;\n                        var removeLastCharacter = true;\n                        var multiplier = 0;\n                        var rawResult = [];\n                        var result = []; // TODO: i think this should be string only, but it creates problems if it is\n                        while(!done){\n                            unshift = shiftNext;\n                            shiftNext = false;\n                            code = this._decodeCode(code.end, code.correction);\n                            if (code !== null) {\n                                if (code.code !== this.STOP_CODE) {\n                                    removeLastCharacter = true;\n                                }\n                                if (code.code !== this.STOP_CODE) {\n                                    rawResult.push(code.code);\n                                    multiplier++;\n                                    checksum += multiplier * code.code;\n                                }\n                                decodedCodes.push(code);\n                                switch(codeset){\n                                    case this.CODE_A:\n                                        if (code.code < 64) {\n                                            result.push(String.fromCharCode(32 + code.code));\n                                        } else if (code.code < 96) {\n                                            result.push(String.fromCharCode(code.code - 64));\n                                        } else {\n                                            if (code.code !== this.STOP_CODE) {\n                                                removeLastCharacter = false;\n                                            }\n                                            switch(code.code){\n                                                case this.CODE_SHIFT:\n                                                    shiftNext = true;\n                                                    codeset = this.CODE_B;\n                                                    break;\n                                                case this.CODE_B:\n                                                    codeset = this.CODE_B;\n                                                    break;\n                                                case this.CODE_C:\n                                                    codeset = this.CODE_C;\n                                                    break;\n                                                case this.STOP_CODE:\n                                                    done = true;\n                                                    break;\n                                            }\n                                        }\n                                        break;\n                                    case this.CODE_B:\n                                        if (code.code < 96) {\n                                            result.push(String.fromCharCode(32 + code.code));\n                                        } else {\n                                            if (code.code !== this.STOP_CODE) {\n                                                removeLastCharacter = false;\n                                            }\n                                            switch(code.code){\n                                                case this.CODE_SHIFT:\n                                                    shiftNext = true;\n                                                    codeset = this.CODE_A;\n                                                    break;\n                                                case this.CODE_A:\n                                                    codeset = this.CODE_A;\n                                                    break;\n                                                case this.CODE_C:\n                                                    codeset = this.CODE_C;\n                                                    break;\n                                                case this.STOP_CODE:\n                                                    done = true;\n                                                    break;\n                                            }\n                                        }\n                                        break;\n                                    case this.CODE_C:\n                                        if (code.code < 100) {\n                                            result.push(code.code < 10 ? \"0\" + code.code : code.code);\n                                        } else {\n                                            if (code.code !== this.STOP_CODE) {\n                                                removeLastCharacter = false;\n                                            }\n                                            switch(code.code){\n                                                case this.CODE_A:\n                                                    codeset = this.CODE_A;\n                                                    break;\n                                                case this.CODE_B:\n                                                    codeset = this.CODE_B;\n                                                    break;\n                                                case this.STOP_CODE:\n                                                    done = true;\n                                                    break;\n                                            }\n                                        }\n                                        break;\n                                }\n                            } else {\n                                done = true;\n                            }\n                            if (unshift) {\n                                codeset = codeset === this.CODE_A ? this.CODE_B : this.CODE_A;\n                            }\n                        }\n                        if (code === null) {\n                            return null;\n                        }\n                        code.end = this._nextUnset(this._row, code.end);\n                        if (!this._verifyTrailingWhitespace(code)) {\n                            return null;\n                        }\n                        checksum -= multiplier * rawResult[rawResult.length - 1];\n                        if (checksum % 103 !== rawResult[rawResult.length - 1]) {\n                            return null;\n                        }\n                        if (!result.length) {\n                            return null;\n                        }\n                        // remove last code from result (checksum)\n                        if (removeLastCharacter) {\n                            result.splice(result.length - 1, 1);\n                        }\n                        return {\n                            code: result.join(\"\"),\n                            start: startInfo.start,\n                            end: code.end,\n                            codeset: codeset,\n                            startInfo: startInfo,\n                            decodedCodes: decodedCodes,\n                            endInfo: code,\n                            format: this.FORMAT\n                        };\n                    }\n                },\n                {\n                    key: \"_verifyTrailingWhitespace\",\n                    value: function _verifyTrailingWhitespace(endInfo) {\n                        var self1 = this, trailingWhitespaceEnd;\n                        trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start) / 2;\n                        if (trailingWhitespaceEnd < self1._row.length) {\n                            if (self1._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\n                                return endInfo;\n                            }\n                        }\n                        return null;\n                    }\n                },\n                {\n                    key: \"calculateCorrection\",\n                    value: function calculateCorrection(expected, normalized, indices) {\n                        var length = indices.length, sumNormalized = 0, sumExpected = 0;\n                        while(length--){\n                            sumExpected += expected[indices[length]];\n                            sumNormalized += normalized[indices[length]];\n                        }\n                        return sumExpected / sumNormalized;\n                    }\n                }\n            ]);\n            return Code128Reader;\n        }(barcode_reader);\n        /* harmony default export */ var code_128_reader = code_128_reader_Code128Reader;\n        // EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js\n        var get = __nested_webpack_require_254197__(14);\n        var get_default = /*#__PURE__*/ __nested_webpack_require_254197__.n(get);\n        // EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toConsumableArray.js\n        var toConsumableArray = __nested_webpack_require_254197__(34);\n        var toConsumableArray_default = /*#__PURE__*/ __nested_webpack_require_254197__.n(toConsumableArray);\n        // CONCATENATED MODULE: ./src/reader/code_39_reader.ts\n        function code_39_reader_createSuper(Derived) {\n            var hasNativeReflectConstruct = code_39_reader_isNativeReflectConstruct();\n            return function _createSuperInternal() {\n                var Super = getPrototypeOf_default()(Derived), result;\n                if (hasNativeReflectConstruct) {\n                    var NewTarget = getPrototypeOf_default()(this).constructor;\n                    result = Reflect.construct(Super, arguments, NewTarget);\n                } else {\n                    result = Super.apply(this, arguments);\n                }\n                return possibleConstructorReturn_default()(this, result);\n            };\n        }\n        function code_39_reader_isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n            try {\n                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n        /* eslint-disable class-methods-use-this */ var ALPHABETH_STRING = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. *$/+%\";\n        var code_39_reader_ALPHABET = new Uint16Array(toConsumableArray_default()(ALPHABETH_STRING).map(function(_char) {\n            return _char.charCodeAt(0);\n        }));\n        var code_39_reader_CHARACTER_ENCODINGS = new Uint16Array([\n            0x034,\n            0x121,\n            0x061,\n            0x160,\n            0x031,\n            0x130,\n            0x070,\n            0x025,\n            0x124,\n            0x064,\n            0x109,\n            0x049,\n            0x148,\n            0x019,\n            0x118,\n            0x058,\n            0x00D,\n            0x10C,\n            0x04C,\n            0x01C,\n            0x103,\n            0x043,\n            0x142,\n            0x013,\n            0x112,\n            0x052,\n            0x007,\n            0x106,\n            0x046,\n            0x016,\n            0x181,\n            0x0C1,\n            0x1C0,\n            0x091,\n            0x190,\n            0x0D0,\n            0x085,\n            0x184,\n            0x0C4,\n            0x094,\n            0x0A8,\n            0x0A2,\n            0x08A,\n            0x02A\n        ]);\n        var ASTERISK = 0x094;\n        var code_39_reader_Code39Reader = /*#__PURE__*/ function(_BarcodeReader) {\n            inherits_default()(Code39Reader, _BarcodeReader);\n            var _super = code_39_reader_createSuper(Code39Reader);\n            function Code39Reader() {\n                var _this;\n                classCallCheck_default()(this, Code39Reader);\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                _this = _super.call.apply(_super, [\n                    this\n                ].concat(args));\n                defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", \"code_39\");\n                return _this;\n            }\n            createClass_default()(Code39Reader, [\n                {\n                    key: \"_findStart\",\n                    value: function _findStart() {\n                        var offset = this._nextSet(this._row);\n                        var patternStart = offset;\n                        var counter = new Uint16Array([\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0\n                        ]);\n                        var counterPos = 0;\n                        var isWhite = false;\n                        for(var i = offset; i < this._row.length; i++){\n                            // eslint-disable-next-line no-bitwise\n                            if (this._row[i] ^ (isWhite ? 1 : 0)) {\n                                counter[counterPos]++;\n                            } else {\n                                if (counterPos === counter.length - 1) {\n                                    // find start pattern\n                                    if (this._toPattern(counter) === ASTERISK) {\n                                        var whiteSpaceMustStart = Math.floor(Math.max(0, patternStart - (i - patternStart) / 4));\n                                        if (this._matchRange(whiteSpaceMustStart, patternStart, 0)) {\n                                            return {\n                                                start: patternStart,\n                                                end: i\n                                            };\n                                        }\n                                    }\n                                    patternStart += counter[0] + counter[1];\n                                    for(var j = 0; j < 7; j++){\n                                        counter[j] = counter[j + 2];\n                                    }\n                                    counter[7] = 0;\n                                    counter[8] = 0;\n                                    counterPos--;\n                                } else {\n                                    counterPos++;\n                                }\n                                counter[counterPos] = 1;\n                                isWhite = !isWhite;\n                            }\n                        }\n                        return null;\n                    }\n                },\n                {\n                    key: \"_toPattern\",\n                    value: function _toPattern(counters) {\n                        var numCounters = counters.length;\n                        var maxNarrowWidth = 0;\n                        var numWideBars = numCounters;\n                        var wideBarWidth = 0;\n                        while(numWideBars > 3){\n                            maxNarrowWidth = this._findNextWidth(counters, maxNarrowWidth);\n                            numWideBars = 0;\n                            var pattern = 0;\n                            for(var i = 0; i < numCounters; i++){\n                                if (counters[i] > maxNarrowWidth) {\n                                    // eslint-disable-next-line no-bitwise\n                                    pattern |= 1 << numCounters - 1 - i;\n                                    numWideBars++;\n                                    wideBarWidth += counters[i];\n                                }\n                            }\n                            if (numWideBars === 3) {\n                                for(var _i = 0; _i < numCounters && numWideBars > 0; _i++){\n                                    if (counters[_i] > maxNarrowWidth) {\n                                        numWideBars--;\n                                        if (counters[_i] * 2 >= wideBarWidth) {\n                                            return -1;\n                                        }\n                                    }\n                                }\n                                return pattern;\n                            }\n                        }\n                        return -1;\n                    }\n                },\n                {\n                    key: \"_findNextWidth\",\n                    value: function _findNextWidth(counters, current) {\n                        var minWidth = Number.MAX_VALUE;\n                        for(var i = 0; i < counters.length; i++){\n                            if (counters[i] < minWidth && counters[i] > current) {\n                                minWidth = counters[i];\n                            }\n                        }\n                        return minWidth;\n                    }\n                },\n                {\n                    key: \"_patternToChar\",\n                    value: function _patternToChar(pattern) {\n                        for(var i = 0; i < code_39_reader_CHARACTER_ENCODINGS.length; i++){\n                            if (code_39_reader_CHARACTER_ENCODINGS[i] === pattern) {\n                                return String.fromCharCode(code_39_reader_ALPHABET[i]);\n                            }\n                        }\n                        return null;\n                    }\n                },\n                {\n                    key: \"_verifyTrailingWhitespace\",\n                    value: function _verifyTrailingWhitespace(lastStart, nextStart, counters) {\n                        var patternSize = array_helper[\"a\" /* default */ ].sum(counters);\n                        var trailingWhitespaceEnd = nextStart - lastStart - patternSize;\n                        if (trailingWhitespaceEnd * 3 >= patternSize) {\n                            return true;\n                        }\n                        return false;\n                    }\n                },\n                {\n                    key: \"decode\",\n                    value: function decode() {\n                        var counters = new Uint16Array([\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0\n                        ]);\n                        var result = [];\n                        var start = this._findStart();\n                        if (!start) {\n                            return null;\n                        }\n                        var nextStart = this._nextSet(this._row, start.end);\n                        var decodedChar;\n                        var lastStart;\n                        do {\n                            counters = this._toCounters(nextStart, counters);\n                            var pattern = this._toPattern(counters);\n                            if (pattern < 0) {\n                                return null;\n                            }\n                            decodedChar = this._patternToChar(pattern);\n                            if (decodedChar === null) {\n                                return null;\n                            }\n                            result.push(decodedChar);\n                            lastStart = nextStart;\n                            nextStart += array_helper[\"a\" /* default */ ].sum(counters);\n                            nextStart = this._nextSet(this._row, nextStart);\n                        }while (decodedChar !== \"*\");\n                        result.pop();\n                        if (!result.length) {\n                            return null;\n                        }\n                        if (!this._verifyTrailingWhitespace(lastStart, nextStart, counters)) {\n                            return null;\n                        }\n                        return {\n                            code: result.join(\"\"),\n                            start: start.start,\n                            end: nextStart,\n                            startInfo: start,\n                            decodedCodes: result,\n                            format: this.FORMAT\n                        };\n                    }\n                }\n            ]);\n            return Code39Reader;\n        }(barcode_reader);\n        /* harmony default export */ var code_39_reader = code_39_reader_Code39Reader;\n        // CONCATENATED MODULE: ./src/reader/code_32_reader.ts\n        function code_32_reader_createSuper(Derived) {\n            var hasNativeReflectConstruct = code_32_reader_isNativeReflectConstruct();\n            return function _createSuperInternal() {\n                var Super = getPrototypeOf_default()(Derived), result;\n                if (hasNativeReflectConstruct) {\n                    var NewTarget = getPrototypeOf_default()(this).constructor;\n                    result = Reflect.construct(Super, arguments, NewTarget);\n                } else {\n                    result = Super.apply(this, arguments);\n                }\n                return possibleConstructorReturn_default()(this, result);\n            };\n        }\n        function code_32_reader_isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n            try {\n                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n        var patterns = {\n            AEIO: /[AEIO]/g,\n            AZ09: /[A-Z0-9]/\n        };\n        var code32set = \"0123456789BCDFGHJKLMNPQRSTUVWXYZ\";\n        var code_32_reader_Code32Reader = /*#__PURE__*/ function(_Code39Reader) {\n            inherits_default()(Code32Reader, _Code39Reader);\n            var _super = code_32_reader_createSuper(Code32Reader);\n            function Code32Reader() {\n                var _this;\n                classCallCheck_default()(this, Code32Reader);\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                _this = _super.call.apply(_super, [\n                    this\n                ].concat(args));\n                defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", \"code_32_reader\");\n                return _this;\n            }\n            createClass_default()(Code32Reader, [\n                {\n                    key: \"_decodeCode32\",\n                    value: function _decodeCode32(code) {\n                        if (/[^0-9BCDFGHJKLMNPQRSTUVWXYZ]/.test(code)) {\n                            return null;\n                        }\n                        var res = 0;\n                        for(var i = 0; i < code.length; i++){\n                            res = res * 32 + code32set.indexOf(code[i]);\n                        }\n                        var code32 = \"\".concat(res);\n                        if (code32.length < 9) {\n                            code32 = (\"000000000\" + code32).slice(-9);\n                        }\n                        return \"A\" + code32;\n                    }\n                },\n                {\n                    key: \"_checkChecksum\",\n                    value: function _checkChecksum(code) {\n                        return !!code;\n                    }\n                },\n                {\n                    key: \"decode\",\n                    value: function decode() {\n                        var result = get_default()(getPrototypeOf_default()(Code32Reader.prototype), \"decode\", this).call(this);\n                        if (!result) {\n                            return null;\n                        }\n                        var code = result.code;\n                        if (!code) {\n                            return null;\n                        }\n                        code = code.replace(patterns.AEIO, \"\");\n                        if (!this._checkChecksum(code)) {\n                            return null;\n                        }\n                        var code32 = this._decodeCode32(code);\n                        if (!code32) {\n                            return null;\n                        }\n                        result.code = code32;\n                        return result;\n                    }\n                }\n            ]);\n            return Code32Reader;\n        }(code_39_reader);\n        /* harmony default export */ var code_32_reader = code_32_reader_Code32Reader;\n        // CONCATENATED MODULE: ./src/reader/code_39_vin_reader.ts\n        function code_39_vin_reader_createSuper(Derived) {\n            var hasNativeReflectConstruct = code_39_vin_reader_isNativeReflectConstruct();\n            return function _createSuperInternal() {\n                var Super = getPrototypeOf_default()(Derived), result;\n                if (hasNativeReflectConstruct) {\n                    var NewTarget = getPrototypeOf_default()(this).constructor;\n                    result = Reflect.construct(Super, arguments, NewTarget);\n                } else {\n                    result = Super.apply(this, arguments);\n                }\n                return possibleConstructorReturn_default()(this, result);\n            };\n        }\n        function code_39_vin_reader_isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n            try {\n                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n        /* eslint-disable class-methods-use-this */ var code_39_vin_reader_patterns = {\n            IOQ: /[IOQ]/g,\n            AZ09: /[A-Z0-9]{17}/\n        };\n        var code_39_vin_reader_Code39VINReader = /*#__PURE__*/ function(_Code39Reader) {\n            inherits_default()(Code39VINReader, _Code39Reader);\n            var _super = code_39_vin_reader_createSuper(Code39VINReader);\n            function Code39VINReader() {\n                var _this;\n                classCallCheck_default()(this, Code39VINReader);\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                _this = _super.call.apply(_super, [\n                    this\n                ].concat(args));\n                defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", \"code_39_vin\");\n                return _this;\n            }\n            createClass_default()(Code39VINReader, [\n                {\n                    key: \"_checkChecksum\",\n                    value: // TODO (this was todo in original repo, no text was there. sorry.)\n                    function _checkChecksum(code) {\n                        return !!code;\n                    }\n                },\n                {\n                    key: \"decode\",\n                    value: function decode() {\n                        var result = get_default()(getPrototypeOf_default()(Code39VINReader.prototype), \"decode\", this).call(this);\n                        if (!result) {\n                            return null;\n                        }\n                        var code = result.code;\n                        if (!code) {\n                            return null;\n                        }\n                        code = code.replace(code_39_vin_reader_patterns.IOQ, \"\");\n                        if (!code.match(code_39_vin_reader_patterns.AZ09)) {\n                            if (false) {}\n                            return null;\n                        }\n                        if (!this._checkChecksum(code)) {\n                            return null;\n                        }\n                        result.code = code;\n                        return result;\n                    }\n                }\n            ]);\n            return Code39VINReader;\n        }(code_39_reader);\n        /* harmony default export */ var code_39_vin_reader = code_39_vin_reader_Code39VINReader;\n        // CONCATENATED MODULE: ./src/reader/code_93_reader.ts\n        function code_93_reader_createSuper(Derived) {\n            var hasNativeReflectConstruct = code_93_reader_isNativeReflectConstruct();\n            return function _createSuperInternal() {\n                var Super = getPrototypeOf_default()(Derived), result;\n                if (hasNativeReflectConstruct) {\n                    var NewTarget = getPrototypeOf_default()(this).constructor;\n                    result = Reflect.construct(Super, arguments, NewTarget);\n                } else {\n                    result = Super.apply(this, arguments);\n                }\n                return possibleConstructorReturn_default()(this, result);\n            };\n        }\n        function code_93_reader_isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n            try {\n                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n        var code_93_reader_ALPHABETH_STRING = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%abcd*\";\n        var code_93_reader_ALPHABET = new Uint16Array(toConsumableArray_default()(code_93_reader_ALPHABETH_STRING).map(function(_char) {\n            return _char.charCodeAt(0);\n        }));\n        var code_93_reader_CHARACTER_ENCODINGS = new Uint16Array([\n            0x114,\n            0x148,\n            0x144,\n            0x142,\n            0x128,\n            0x124,\n            0x122,\n            0x150,\n            0x112,\n            0x10A,\n            0x1A8,\n            0x1A4,\n            0x1A2,\n            0x194,\n            0x192,\n            0x18A,\n            0x168,\n            0x164,\n            0x162,\n            0x134,\n            0x11A,\n            0x158,\n            0x14C,\n            0x146,\n            0x12C,\n            0x116,\n            0x1B4,\n            0x1B2,\n            0x1AC,\n            0x1A6,\n            0x196,\n            0x19A,\n            0x16C,\n            0x166,\n            0x136,\n            0x13A,\n            0x12E,\n            0x1D4,\n            0x1D2,\n            0x1CA,\n            0x16E,\n            0x176,\n            0x1AE,\n            0x126,\n            0x1DA,\n            0x1D6,\n            0x132,\n            0x15E\n        ]);\n        var code_93_reader_ASTERISK = 0x15E;\n        var code_93_reader_Code93Reader = /*#__PURE__*/ function(_BarcodeReader) {\n            inherits_default()(Code93Reader, _BarcodeReader);\n            var _super = code_93_reader_createSuper(Code93Reader);\n            function Code93Reader() {\n                var _this;\n                classCallCheck_default()(this, Code93Reader);\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                _this = _super.call.apply(_super, [\n                    this\n                ].concat(args));\n                defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", \"code_93\");\n                return _this;\n            }\n            createClass_default()(Code93Reader, [\n                {\n                    key: \"_patternToChar\",\n                    value: function _patternToChar(pattern) {\n                        for(var i = 0; i < code_93_reader_CHARACTER_ENCODINGS.length; i++){\n                            if (code_93_reader_CHARACTER_ENCODINGS[i] === pattern) {\n                                return String.fromCharCode(code_93_reader_ALPHABET[i]);\n                            }\n                        }\n                        return null;\n                    }\n                },\n                {\n                    key: \"_toPattern\",\n                    value: function _toPattern(counters) {\n                        var numCounters = counters.length;\n                        var sum = counters.reduce(function(prev, next) {\n                            return prev + next;\n                        }, 0);\n                        var pattern = 0;\n                        for(var i = 0; i < numCounters; i++){\n                            var normalized = Math.round(counters[i] * 9 / sum);\n                            if (normalized < 1 || normalized > 4) {\n                                return -1;\n                            }\n                            if ((i & 1) === 0) {\n                                for(var j = 0; j < normalized; j++){\n                                    pattern = pattern << 1 | 1;\n                                }\n                            } else {\n                                pattern <<= normalized;\n                            }\n                        }\n                        return pattern;\n                    }\n                },\n                {\n                    key: \"_findStart\",\n                    value: function _findStart() {\n                        var offset = this._nextSet(this._row);\n                        var patternStart = offset;\n                        var counter = new Uint16Array([\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0\n                        ]);\n                        var counterPos = 0;\n                        var isWhite = false;\n                        for(var i = offset; i < this._row.length; i++){\n                            if (this._row[i] ^ (isWhite ? 1 : 0)) {\n                                counter[counterPos]++;\n                            } else {\n                                if (counterPos === counter.length - 1) {\n                                    // find start pattern\n                                    if (this._toPattern(counter) === code_93_reader_ASTERISK) {\n                                        var whiteSpaceMustStart = Math.floor(Math.max(0, patternStart - (i - patternStart) / 4));\n                                        if (this._matchRange(whiteSpaceMustStart, patternStart, 0)) {\n                                            return {\n                                                start: patternStart,\n                                                end: i\n                                            };\n                                        }\n                                    }\n                                    patternStart += counter[0] + counter[1];\n                                    for(var j = 0; j < 4; j++){\n                                        counter[j] = counter[j + 2];\n                                    }\n                                    counter[4] = 0;\n                                    counter[5] = 0;\n                                    counterPos--;\n                                } else {\n                                    counterPos++;\n                                }\n                                counter[counterPos] = 1;\n                                isWhite = !isWhite;\n                            }\n                        }\n                        return null;\n                    }\n                },\n                {\n                    key: \"_verifyEnd\",\n                    value: function _verifyEnd(lastStart, nextStart) {\n                        if (lastStart === nextStart || !this._row[nextStart]) {\n                            return false;\n                        }\n                        return true;\n                    }\n                },\n                {\n                    key: \"_decodeExtended\",\n                    value: function _decodeExtended(charArray) {\n                        var length = charArray.length;\n                        var result = [];\n                        for(var i = 0; i < length; i++){\n                            var _char2 = charArray[i];\n                            if (_char2 >= \"a\" && _char2 <= \"d\") {\n                                if (i > length - 2) {\n                                    return null;\n                                }\n                                var nextChar = charArray[++i];\n                                var nextCharCode = nextChar.charCodeAt(0);\n                                var decodedChar = void 0;\n                                switch(_char2){\n                                    case \"a\":\n                                        if (nextChar >= \"A\" && nextChar <= \"Z\") {\n                                            decodedChar = String.fromCharCode(nextCharCode - 64);\n                                        } else {\n                                            return null;\n                                        }\n                                        break;\n                                    case \"b\":\n                                        if (nextChar >= \"A\" && nextChar <= \"E\") {\n                                            decodedChar = String.fromCharCode(nextCharCode - 38);\n                                        } else if (nextChar >= \"F\" && nextChar <= \"J\") {\n                                            decodedChar = String.fromCharCode(nextCharCode - 11);\n                                        } else if (nextChar >= \"K\" && nextChar <= \"O\") {\n                                            decodedChar = String.fromCharCode(nextCharCode + 16);\n                                        } else if (nextChar >= \"P\" && nextChar <= \"S\") {\n                                            decodedChar = String.fromCharCode(nextCharCode + 43);\n                                        } else if (nextChar >= \"T\" && nextChar <= \"Z\") {\n                                            decodedChar = String.fromCharCode(127);\n                                        } else {\n                                            return null;\n                                        }\n                                        break;\n                                    case \"c\":\n                                        if (nextChar >= \"A\" && nextChar <= \"O\") {\n                                            decodedChar = String.fromCharCode(nextCharCode - 32);\n                                        } else if (nextChar === \"Z\") {\n                                            decodedChar = \":\";\n                                        } else {\n                                            return null;\n                                        }\n                                        break;\n                                    case \"d\":\n                                        if (nextChar >= \"A\" && nextChar <= \"Z\") {\n                                            decodedChar = String.fromCharCode(nextCharCode + 32);\n                                        } else {\n                                            return null;\n                                        }\n                                        break;\n                                    default:\n                                        console.warn(\"* code_93_reader _decodeExtended hit default case, this may be an error\", decodedChar);\n                                        return null;\n                                }\n                                result.push(decodedChar);\n                            } else {\n                                result.push(_char2);\n                            }\n                        }\n                        return result;\n                    }\n                },\n                {\n                    key: \"_matchCheckChar\",\n                    value: function _matchCheckChar(charArray, index, maxWeight) {\n                        var arrayToCheck = charArray.slice(0, index);\n                        var length = arrayToCheck.length;\n                        var weightedSums = arrayToCheck.reduce(function(sum, _char3, i) {\n                            var weight = (i * -1 + (length - 1)) % maxWeight + 1;\n                            var value = code_93_reader_ALPHABET.indexOf(_char3.charCodeAt(0));\n                            return sum + weight * value;\n                        }, 0);\n                        var checkChar = code_93_reader_ALPHABET[weightedSums % 47];\n                        return checkChar === charArray[index].charCodeAt(0);\n                    }\n                },\n                {\n                    key: \"_verifyChecksums\",\n                    value: function _verifyChecksums(charArray) {\n                        return this._matchCheckChar(charArray, charArray.length - 2, 20) && this._matchCheckChar(charArray, charArray.length - 1, 15);\n                    }\n                },\n                {\n                    key: \"decode\",\n                    value: function decode(row, start) {\n                        start = this._findStart();\n                        if (!start) {\n                            return null;\n                        }\n                        var counters = new Uint16Array([\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0\n                        ]);\n                        var result = [];\n                        var nextStart = this._nextSet(this._row, start.end);\n                        var lastStart;\n                        var decodedChar;\n                        do {\n                            counters = this._toCounters(nextStart, counters);\n                            var pattern = this._toPattern(counters);\n                            if (pattern < 0) {\n                                return null;\n                            }\n                            decodedChar = this._patternToChar(pattern);\n                            if (decodedChar === null) {\n                                return null;\n                            }\n                            result.push(decodedChar);\n                            lastStart = nextStart;\n                            nextStart += array_helper[\"a\" /* default */ ].sum(counters);\n                            nextStart = this._nextSet(this._row, nextStart);\n                        }while (decodedChar !== \"*\");\n                        result.pop();\n                        if (!result.length) {\n                            return null;\n                        }\n                        if (!this._verifyEnd(lastStart, nextStart)) {\n                            return null;\n                        }\n                        if (!this._verifyChecksums(result)) {\n                            return null;\n                        }\n                        result = result.slice(0, result.length - 2);\n                        // yes, this is an assign inside an if.\n                        if ((result = this._decodeExtended(result)) === null) {\n                            return null;\n                        }\n                        return {\n                            code: result.join(\"\"),\n                            start: start.start,\n                            end: nextStart,\n                            startInfo: start,\n                            decodedCodes: result,\n                            format: this.FORMAT\n                        };\n                    }\n                }\n            ]);\n            return Code93Reader;\n        }(barcode_reader);\n        /* harmony default export */ var code_93_reader = code_93_reader_Code93Reader;\n        // CONCATENATED MODULE: ./src/reader/ean_reader.ts\n        function ownKeys(e, r) {\n            var t = Object.keys(e);\n            if (Object.getOwnPropertySymbols) {\n                var o = Object.getOwnPropertySymbols(e);\n                r && (o = o.filter(function(r) {\n                    return Object.getOwnPropertyDescriptor(e, r).enumerable;\n                })), t.push.apply(t, o);\n            }\n            return t;\n        }\n        function _objectSpread(e) {\n            for(var r = 1; r < arguments.length; r++){\n                var t = null != arguments[r] ? arguments[r] : {};\n                r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n                    defineProperty_default()(e, r, t[r]);\n                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n                    Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n                });\n            }\n            return e;\n        }\n        function ean_reader_createSuper(Derived) {\n            var hasNativeReflectConstruct = ean_reader_isNativeReflectConstruct();\n            return function _createSuperInternal() {\n                var Super = getPrototypeOf_default()(Derived), result;\n                if (hasNativeReflectConstruct) {\n                    var NewTarget = getPrototypeOf_default()(this).constructor;\n                    result = Reflect.construct(Super, arguments, NewTarget);\n                } else {\n                    result = Super.apply(this, arguments);\n                }\n                return possibleConstructorReturn_default()(this, result);\n            };\n        }\n        function ean_reader_isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n            try {\n                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n        // const CODE_L_START = 0;\n        var CODE_G_START = 10;\n        var ean_reader_START_PATTERN = [\n            1,\n            1,\n            1\n        ];\n        var MIDDLE_PATTERN = [\n            1,\n            1,\n            1,\n            1,\n            1\n        ];\n        var EXTENSION_START_PATTERN = [\n            1,\n            1,\n            2\n        ];\n        var ean_reader_CODE_PATTERN = [\n            [\n                3,\n                2,\n                1,\n                1\n            ],\n            [\n                2,\n                2,\n                2,\n                1\n            ],\n            [\n                2,\n                1,\n                2,\n                2\n            ],\n            [\n                1,\n                4,\n                1,\n                1\n            ],\n            [\n                1,\n                1,\n                3,\n                2\n            ],\n            [\n                1,\n                2,\n                3,\n                1\n            ],\n            [\n                1,\n                1,\n                1,\n                4\n            ],\n            [\n                1,\n                3,\n                1,\n                2\n            ],\n            [\n                1,\n                2,\n                1,\n                3\n            ],\n            [\n                3,\n                1,\n                1,\n                2\n            ],\n            [\n                1,\n                1,\n                2,\n                3\n            ],\n            [\n                1,\n                2,\n                2,\n                2\n            ],\n            [\n                2,\n                2,\n                1,\n                2\n            ],\n            [\n                1,\n                1,\n                4,\n                1\n            ],\n            [\n                2,\n                3,\n                1,\n                1\n            ],\n            [\n                1,\n                3,\n                2,\n                1\n            ],\n            [\n                4,\n                1,\n                1,\n                1\n            ],\n            [\n                2,\n                1,\n                3,\n                1\n            ],\n            [\n                3,\n                1,\n                2,\n                1\n            ],\n            [\n                2,\n                1,\n                1,\n                3\n            ]\n        ];\n        var CODE_FREQUENCY = [\n            0,\n            11,\n            13,\n            14,\n            19,\n            25,\n            28,\n            21,\n            22,\n            26\n        ];\n        // const SINGLE_CODE_ERROR = 0.70;\n        var AVG_CODE_ERROR = 0.48;\n        var ean_reader_EANReader = /*#__PURE__*/ function(_BarcodeReader) {\n            inherits_default()(EANReader, _BarcodeReader);\n            var _super = ean_reader_createSuper(EANReader);\n            // TODO: does this need to be in the class?\n            function EANReader(config, supplements) {\n                var _this;\n                classCallCheck_default()(this, EANReader);\n                _this = _super.call(this, merge_default()({\n                    supplements: []\n                }, config), supplements);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", \"ean_13\");\n                defineProperty_default()(assertThisInitialized_default()(_this), \"SINGLE_CODE_ERROR\", 0.70);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"STOP_PATTERN\", [\n                    1,\n                    1,\n                    1\n                ]);\n                return _this;\n            }\n            createClass_default()(EANReader, [\n                {\n                    key: \"_findPattern\",\n                    value: function _findPattern(pattern, offset, isWhite, tryHarder) {\n                        var counter = new Array(pattern.length).fill(0);\n                        var bestMatch = {\n                            error: Number.MAX_VALUE,\n                            start: 0,\n                            end: 0\n                        };\n                        var epsilon = AVG_CODE_ERROR;\n                        // console.warn('* findPattern', pattern, offset, isWhite, tryHarder, epsilon);\n                        var counterPos = 0;\n                        if (!offset) {\n                            offset = this._nextSet(this._row);\n                        }\n                        var found = false;\n                        for(var i = offset; i < this._row.length; i++){\n                            // console.warn(`* loop i=${offset} len=${this._row.length} isWhite=${isWhite} counterPos=${counterPos}`);\n                            if (this._row[i] ^ (isWhite ? 1 : 0)) {\n                                counter[counterPos] += 1;\n                            } else {\n                                if (counterPos === counter.length - 1) {\n                                    var error = this._matchPattern(counter, pattern);\n                                    // console.warn('* matchPattern', error, counter, pattern);\n                                    if (error < epsilon && bestMatch.error && error < bestMatch.error) {\n                                        found = true;\n                                        bestMatch.error = error;\n                                        bestMatch.start = i - counter.reduce(function(sum, value) {\n                                            return sum + value;\n                                        }, 0);\n                                        bestMatch.end = i;\n                                        // console.warn('* return bestMatch', JSON.stringify(bestMatch));\n                                        return bestMatch;\n                                    }\n                                    if (tryHarder) {\n                                        for(var j = 0; j < counter.length - 2; j++){\n                                            counter[j] = counter[j + 2];\n                                        }\n                                        counter[counter.length - 2] = 0;\n                                        counter[counter.length - 1] = 0;\n                                        counterPos--;\n                                    }\n                                } else {\n                                    counterPos++;\n                                }\n                                counter[counterPos] = 1;\n                                isWhite = !isWhite;\n                            }\n                        }\n                        if (found) {\n                        // console.warn('* return bestMatch', JSON.stringify(bestMatch));\n                        } else {\n                        // console.warn('* return null');\n                        }\n                        return found ? bestMatch : null;\n                    }\n                },\n                {\n                    key: \"_decodeCode\",\n                    value: function _decodeCode(start, coderange) {\n                        // console.warn('* decodeCode', start, coderange);\n                        var counter = [\n                            0,\n                            0,\n                            0,\n                            0\n                        ];\n                        var offset = start;\n                        var bestMatch = {\n                            error: Number.MAX_VALUE,\n                            code: -1,\n                            start: start,\n                            end: start\n                        };\n                        var epsilon = AVG_CODE_ERROR;\n                        var isWhite = !this._row[offset];\n                        var counterPos = 0;\n                        if (!coderange) {\n                            // console.warn('* decodeCode before length');\n                            coderange = ean_reader_CODE_PATTERN.length;\n                        // console.warn('* decodeCode after length');\n                        }\n                        var found = false;\n                        for(var i = offset; i < this._row.length; i++){\n                            if (this._row[i] ^ (isWhite ? 1 : 0)) {\n                                counter[counterPos]++;\n                            } else {\n                                if (counterPos === counter.length - 1) {\n                                    for(var code = 0; code < coderange; code++){\n                                        var error = this._matchPattern(counter, ean_reader_CODE_PATTERN[code]);\n                                        bestMatch.end = i;\n                                        if (error < bestMatch.error) {\n                                            bestMatch.code = code;\n                                            bestMatch.error = error;\n                                        }\n                                    }\n                                    if (bestMatch.error > epsilon) {\n                                        // console.warn('* return null');\n                                        return null;\n                                    }\n                                    // console.warn('* return bestMatch', JSON.stringify(bestMatch));\n                                    return bestMatch;\n                                } else {\n                                    counterPos++;\n                                }\n                                counter[counterPos] = 1;\n                                isWhite = !isWhite;\n                            }\n                        }\n                        return found ? bestMatch : null;\n                    }\n                },\n                {\n                    key: \"_findStart\",\n                    value: function _findStart() {\n                        // console.warn('* findStart');\n                        var offset = this._nextSet(this._row);\n                        var startInfo = null;\n                        while(!startInfo){\n                            startInfo = this._findPattern(ean_reader_START_PATTERN, offset, false, true);\n                            // console.warn('* startInfo=', JSON.stringify(startInfo));\n                            if (!startInfo) {\n                                return null;\n                            }\n                            var leadingWhitespaceStart = startInfo.start - (startInfo.end - startInfo.start);\n                            if (leadingWhitespaceStart >= 0) {\n                                if (this._matchRange(leadingWhitespaceStart, startInfo.start, 0)) {\n                                    // console.warn('* returning startInfo');\n                                    return startInfo;\n                                }\n                            }\n                            offset = startInfo.end;\n                            startInfo = null;\n                        }\n                        // console.warn('* returning null');\n                        return null;\n                    }\n                },\n                {\n                    key: \"_calculateFirstDigit\",\n                    value: function _calculateFirstDigit(codeFrequency) {\n                        // console.warn('* calculateFirstDigit', codeFrequency);\n                        for(var i = 0; i < CODE_FREQUENCY.length; i++){\n                            if (codeFrequency === CODE_FREQUENCY[i]) {\n                                // console.warn('* returning', i);\n                                return i;\n                            }\n                        }\n                        // console.warn('* return null');\n                        return null;\n                    }\n                },\n                {\n                    key: \"_decodePayload\",\n                    value: function _decodePayload(inCode, result, decodedCodes) {\n                        // console.warn('* decodePayload', inCode, result, decodedCodes);\n                        var outCode = _objectSpread({}, inCode);\n                        var codeFrequency = 0x0;\n                        for(var i = 0; i < 6; i++){\n                            outCode = this._decodeCode(outCode.end);\n                            // console.warn('* decodeCode=', outCode);\n                            if (!outCode) {\n                                // console.warn('* return null');\n                                return null;\n                            }\n                            if (outCode.code >= CODE_G_START) {\n                                outCode.code -= CODE_G_START;\n                                codeFrequency |= 1 << 5 - i;\n                            } else {\n                                codeFrequency |= 0 << 5 - i;\n                            }\n                            result.push(outCode.code);\n                            decodedCodes.push(outCode);\n                        }\n                        var firstDigit = this._calculateFirstDigit(codeFrequency);\n                        // console.warn('* firstDigit=', firstDigit);\n                        if (firstDigit === null) {\n                            // console.warn('* return null');\n                            return null;\n                        }\n                        result.unshift(firstDigit);\n                        var middlePattern = this._findPattern(MIDDLE_PATTERN, outCode.end, true, false);\n                        // console.warn('* findPattern=', JSON.stringify(middlePattern));\n                        if (middlePattern === null || !middlePattern.end) {\n                            // console.warn('* return null');\n                            return null;\n                        }\n                        decodedCodes.push(middlePattern);\n                        for(var _i = 0; _i < 6; _i++){\n                            middlePattern = this._decodeCode(middlePattern.end, CODE_G_START);\n                            // console.warn('* decodeCode=', JSON.stringify(middlePattern));\n                            if (!middlePattern) {\n                                // console.warn('* return null');\n                                return null;\n                            }\n                            decodedCodes.push(middlePattern);\n                            result.push(middlePattern.code);\n                        }\n                        // console.warn('* end code=', JSON.stringify(middlePattern));\n                        // console.warn('* end result=', JSON.stringify(result));\n                        // console.warn('* end decodedCodes=', decodedCodes);\n                        return middlePattern;\n                    }\n                },\n                {\n                    key: \"_verifyTrailingWhitespace\",\n                    value: function _verifyTrailingWhitespace(endInfo) {\n                        // console.warn('* verifyTrailingWhitespace', JSON.stringify(endInfo));\n                        var trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start);\n                        if (trailingWhitespaceEnd < this._row.length) {\n                            if (this._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\n                                // console.warn('* returning', JSON.stringify(endInfo));\n                                return endInfo;\n                            }\n                        }\n                        // console.warn('* return null');\n                        return null;\n                    }\n                },\n                {\n                    key: \"_findEnd\",\n                    value: function _findEnd(offset, isWhite) {\n                        // console.warn('* findEnd', offset, isWhite);\n                        var endInfo = this._findPattern(this.STOP_PATTERN, offset, isWhite, false);\n                        return endInfo !== null ? this._verifyTrailingWhitespace(endInfo) : null;\n                    }\n                },\n                {\n                    key: \"_checksum\",\n                    value: function _checksum(result) {\n                        // console.warn('* _checksum', result);\n                        var sum = 0;\n                        for(var i = result.length - 2; i >= 0; i -= 2){\n                            sum += result[i];\n                        }\n                        sum *= 3;\n                        for(var _i2 = result.length - 1; _i2 >= 0; _i2 -= 2){\n                            sum += result[_i2];\n                        }\n                        // console.warn('* end checksum', sum % 10 === 0);\n                        return sum % 10 === 0;\n                    }\n                },\n                {\n                    key: \"_decodeExtensions\",\n                    value: function _decodeExtensions(offset) {\n                        var start = this._nextSet(this._row, offset);\n                        var startInfo = this._findPattern(EXTENSION_START_PATTERN, start, false, false);\n                        if (startInfo === null) {\n                            return null;\n                        }\n                        // console.warn('* decodeExtensions', this.supplements);\n                        // console.warn('* there are ', this.supplements.length, ' supplements');\n                        for(var i = 0; i < this.supplements.length; i++){\n                            // console.warn('* extensions loop', i, this.supplements[i], this.supplements[i]._decode);\n                            try {\n                                var result = this.supplements[i].decode(this._row, startInfo.end);\n                                // console.warn('* decode result=', result);\n                                if (result !== null) {\n                                    return {\n                                        code: result.code,\n                                        start: start,\n                                        startInfo: startInfo,\n                                        end: result.end,\n                                        decodedCodes: result.decodedCodes,\n                                        format: this.supplements[i].FORMAT\n                                    };\n                                }\n                            } catch (err) {\n                                console.error(\"* decodeExtensions error in \", this.supplements[i], \": \", err);\n                            }\n                        }\n                        // console.warn('* end decodeExtensions');\n                        return null;\n                    }\n                },\n                {\n                    key: \"decode\",\n                    value: function decode(row, start) {\n                        // console.warn('* decode', row);\n                        // console.warn('* decode', start);\n                        var result = new Array();\n                        var decodedCodes = new Array();\n                        var resultInfo = {};\n                        var startInfo = this._findStart();\n                        if (!startInfo) {\n                            return null;\n                        }\n                        var code = {\n                            start: startInfo.start,\n                            end: startInfo.end\n                        };\n                        decodedCodes.push(code);\n                        code = this._decodePayload(code, result, decodedCodes);\n                        if (!code) {\n                            return null;\n                        }\n                        code = this._findEnd(code.end, false);\n                        if (!code) {\n                            return null;\n                        }\n                        decodedCodes.push(code);\n                        // Checksum\n                        if (!this._checksum(result)) {\n                            return null;\n                        }\n                        // console.warn('* this.supplements=', this.supplements);\n                        if (this.supplements.length > 0) {\n                            var supplement = this._decodeExtensions(code.end);\n                            // console.warn('* decodeExtensions returns', supplement);\n                            if (!supplement) {\n                                return null;\n                            }\n                            if (!supplement.decodedCodes) {\n                                return null;\n                            }\n                            var lastCode = supplement.decodedCodes[supplement.decodedCodes.length - 1];\n                            var endInfo = {\n                                start: lastCode.start + ((lastCode.end - lastCode.start) / 2 | 0),\n                                end: lastCode.end\n                            };\n                            if (!this._verifyTrailingWhitespace(endInfo)) {\n                                return null;\n                            }\n                            resultInfo = {\n                                supplement: supplement,\n                                code: result.join(\"\") + supplement.code\n                            };\n                        }\n                        return _objectSpread(_objectSpread({\n                            code: result.join(\"\"),\n                            start: startInfo.start,\n                            end: code.end,\n                            startInfo: startInfo,\n                            decodedCodes: decodedCodes\n                        }, resultInfo), {}, {\n                            format: this.FORMAT\n                        });\n                    }\n                }\n            ]);\n            return EANReader;\n        }(barcode_reader);\n        /* harmony default export */ var ean_reader = ean_reader_EANReader;\n        // CONCATENATED MODULE: ./src/reader/ean_2_reader.ts\n        function ean_2_reader_createSuper(Derived) {\n            var hasNativeReflectConstruct = ean_2_reader_isNativeReflectConstruct();\n            return function _createSuperInternal() {\n                var Super = getPrototypeOf_default()(Derived), result;\n                if (hasNativeReflectConstruct) {\n                    var NewTarget = getPrototypeOf_default()(this).constructor;\n                    result = Reflect.construct(Super, arguments, NewTarget);\n                } else {\n                    result = Super.apply(this, arguments);\n                }\n                return possibleConstructorReturn_default()(this, result);\n            };\n        }\n        function ean_2_reader_isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n            try {\n                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n        var ean_2_reader_EAN2Reader = /*#__PURE__*/ function(_EANReader) {\n            inherits_default()(EAN2Reader, _EANReader);\n            var _super = ean_2_reader_createSuper(EAN2Reader);\n            function EAN2Reader() {\n                var _this;\n                classCallCheck_default()(this, EAN2Reader);\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                _this = _super.call.apply(_super, [\n                    this\n                ].concat(args));\n                defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", \"ean_2\");\n                return _this;\n            }\n            createClass_default()(EAN2Reader, [\n                {\n                    key: \"decode\",\n                    value: function decode(row, start) {\n                        if (row) {\n                            this._row = row;\n                        }\n                        var codeFrequency = 0;\n                        var offset = start;\n                        var end = this._row.length;\n                        var result = [];\n                        var decodedCodes = [];\n                        var code = null;\n                        if (offset === undefined) {\n                            return null;\n                        }\n                        for(var i = 0; i < 2 && offset < end; i++){\n                            code = this._decodeCode(offset);\n                            if (!code) {\n                                return null;\n                            }\n                            decodedCodes.push(code);\n                            result.push(code.code % 10);\n                            if (code.code >= CODE_G_START) {\n                                codeFrequency |= 1 << 1 - i;\n                            }\n                            if (i !== 1) {\n                                offset = this._nextSet(this._row, code.end);\n                                offset = this._nextUnset(this._row, offset);\n                            }\n                        }\n                        if (result.length !== 2 || parseInt(result.join(\"\")) % 4 !== codeFrequency) {\n                            return null;\n                        }\n                        var startInfo = this._findStart();\n                        return {\n                            code: result.join(\"\"),\n                            decodedCodes: decodedCodes,\n                            end: code.end,\n                            format: this.FORMAT,\n                            startInfo: startInfo,\n                            start: startInfo.start\n                        };\n                    }\n                }\n            ]);\n            return EAN2Reader;\n        }(ean_reader);\n        ;\n        /* harmony default export */ var ean_2_reader = ean_2_reader_EAN2Reader;\n        // CONCATENATED MODULE: ./src/reader/ean_5_reader.ts\n        function ean_5_reader_createSuper(Derived) {\n            var hasNativeReflectConstruct = ean_5_reader_isNativeReflectConstruct();\n            return function _createSuperInternal() {\n                var Super = getPrototypeOf_default()(Derived), result;\n                if (hasNativeReflectConstruct) {\n                    var NewTarget = getPrototypeOf_default()(this).constructor;\n                    result = Reflect.construct(Super, arguments, NewTarget);\n                } else {\n                    result = Super.apply(this, arguments);\n                }\n                return possibleConstructorReturn_default()(this, result);\n            };\n        }\n        function ean_5_reader_isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n            try {\n                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n        var CHECK_DIGIT_ENCODINGS = [\n            24,\n            20,\n            18,\n            17,\n            12,\n            6,\n            3,\n            10,\n            9,\n            5\n        ];\n        function determineCheckDigit(codeFrequency) {\n            for(var i = 0; i < 10; i++){\n                if (codeFrequency === CHECK_DIGIT_ENCODINGS[i]) {\n                    return i;\n                }\n            }\n            return null;\n        }\n        function extensionChecksum(result) {\n            var length = result.length;\n            var sum = 0;\n            for(var i = length - 2; i >= 0; i -= 2){\n                sum += result[i];\n            }\n            sum *= 3;\n            for(var _i = length - 1; _i >= 0; _i -= 2){\n                sum += result[_i];\n            }\n            sum *= 3;\n            return sum % 10;\n        }\n        var ean_5_reader_EAN5Reader = /*#__PURE__*/ function(_EANReader) {\n            inherits_default()(EAN5Reader, _EANReader);\n            var _super = ean_5_reader_createSuper(EAN5Reader);\n            function EAN5Reader() {\n                var _this;\n                classCallCheck_default()(this, EAN5Reader);\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                _this = _super.call.apply(_super, [\n                    this\n                ].concat(args));\n                defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", \"ean_5\");\n                return _this;\n            }\n            createClass_default()(EAN5Reader, [\n                {\n                    key: \"decode\",\n                    value: function decode(row, start) {\n                        if (start === undefined) {\n                            return null;\n                        }\n                        if (row) {\n                            this._row = row;\n                        }\n                        var codeFrequency = 0;\n                        var offset = start;\n                        var end = this._row.length;\n                        var code = null;\n                        var result = [];\n                        var decodedCodes = [];\n                        for(var i = 0; i < 5 && offset < end; i++){\n                            code = this._decodeCode(offset);\n                            if (!code) {\n                                return null;\n                            }\n                            decodedCodes.push(code);\n                            result.push(code.code % 10);\n                            if (code.code >= CODE_G_START) {\n                                codeFrequency |= 1 << 4 - i;\n                            }\n                            if (i !== 4) {\n                                offset = this._nextSet(this._row, code.end);\n                                offset = this._nextUnset(this._row, offset);\n                            }\n                        }\n                        if (result.length !== 5) {\n                            return null;\n                        }\n                        if (extensionChecksum(result) !== determineCheckDigit(codeFrequency)) {\n                            return null;\n                        }\n                        var startInfo = this._findStart();\n                        return {\n                            code: result.join(\"\"),\n                            decodedCodes: decodedCodes,\n                            end: code.end,\n                            format: this.FORMAT,\n                            startInfo: startInfo,\n                            start: startInfo.start\n                        };\n                    }\n                }\n            ]);\n            return EAN5Reader;\n        }(ean_reader);\n        ;\n        /* harmony default export */ var ean_5_reader = ean_5_reader_EAN5Reader;\n        // CONCATENATED MODULE: ./src/reader/ean_8_reader.ts\n        function ean_8_reader_createSuper(Derived) {\n            var hasNativeReflectConstruct = ean_8_reader_isNativeReflectConstruct();\n            return function _createSuperInternal() {\n                var Super = getPrototypeOf_default()(Derived), result;\n                if (hasNativeReflectConstruct) {\n                    var NewTarget = getPrototypeOf_default()(this).constructor;\n                    result = Reflect.construct(Super, arguments, NewTarget);\n                } else {\n                    result = Super.apply(this, arguments);\n                }\n                return possibleConstructorReturn_default()(this, result);\n            };\n        }\n        function ean_8_reader_isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n            try {\n                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n        var ean_8_reader_EAN8Reader = /*#__PURE__*/ function(_EANReader) {\n            inherits_default()(EAN8Reader, _EANReader);\n            var _super = ean_8_reader_createSuper(EAN8Reader);\n            function EAN8Reader() {\n                var _this;\n                classCallCheck_default()(this, EAN8Reader);\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                _this = _super.call.apply(_super, [\n                    this\n                ].concat(args));\n                defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", \"ean_8\");\n                return _this;\n            }\n            createClass_default()(EAN8Reader, [\n                {\n                    key: \"_decodePayload\",\n                    value: function _decodePayload(inCode, result, decodedCodes) {\n                        var code = inCode;\n                        for(var i = 0; i < 4; i++){\n                            code = this._decodeCode(code.end, CODE_G_START);\n                            if (!code) {\n                                return null;\n                            }\n                            result.push(code.code);\n                            decodedCodes.push(code);\n                        }\n                        code = this._findPattern(MIDDLE_PATTERN, code.end, true, false);\n                        if (code === null) {\n                            return null;\n                        }\n                        decodedCodes.push(code);\n                        for(var _i = 0; _i < 4; _i++){\n                            code = this._decodeCode(code.end, CODE_G_START);\n                            if (!code) {\n                                return null;\n                            }\n                            decodedCodes.push(code);\n                            result.push(code.code);\n                        }\n                        return code;\n                    }\n                }\n            ]);\n            return EAN8Reader;\n        }(ean_reader);\n        /* harmony default export */ var ean_8_reader = ean_8_reader_EAN8Reader;\n        // CONCATENATED MODULE: ./src/reader/i2of5_reader.ts\n        function i2of5_reader_createSuper(Derived) {\n            var hasNativeReflectConstruct = i2of5_reader_isNativeReflectConstruct();\n            return function _createSuperInternal() {\n                var Super = getPrototypeOf_default()(Derived), result;\n                if (hasNativeReflectConstruct) {\n                    var NewTarget = getPrototypeOf_default()(this).constructor;\n                    result = Reflect.construct(Super, arguments, NewTarget);\n                } else {\n                    result = Super.apply(this, arguments);\n                }\n                return possibleConstructorReturn_default()(this, result);\n            };\n        }\n        function i2of5_reader_isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n            try {\n                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n        // TODO: i2of5_reader and 2of5_reader share very similar code, make use of that\n        var i2of5_reader_N = 1;\n        var i2of5_reader_W = 3;\n        var i2of5_reader_I2of5Reader = /*#__PURE__*/ function(_BarcodeReader) {\n            inherits_default()(I2of5Reader, _BarcodeReader);\n            var _super = i2of5_reader_createSuper(I2of5Reader);\n            function I2of5Reader(opts) {\n                var _this;\n                classCallCheck_default()(this, I2of5Reader);\n                _this = _super.call(this, merge_default()({\n                    normalizeBarSpaceWidth: false\n                }, opts));\n                defineProperty_default()(assertThisInitialized_default()(_this), \"barSpaceRatio\", [\n                    1,\n                    1\n                ]);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"SINGLE_CODE_ERROR\", 0.78);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"AVG_CODE_ERROR\", 0.38);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"START_PATTERN\", [\n                    i2of5_reader_N,\n                    i2of5_reader_N,\n                    i2of5_reader_N,\n                    i2of5_reader_N\n                ]);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"STOP_PATTERN\", [\n                    i2of5_reader_N,\n                    i2of5_reader_N,\n                    i2of5_reader_W\n                ]);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"CODE_PATTERN\", [\n                    [\n                        i2of5_reader_N,\n                        i2of5_reader_N,\n                        i2of5_reader_W,\n                        i2of5_reader_W,\n                        i2of5_reader_N\n                    ],\n                    [\n                        i2of5_reader_W,\n                        i2of5_reader_N,\n                        i2of5_reader_N,\n                        i2of5_reader_N,\n                        i2of5_reader_W\n                    ],\n                    [\n                        i2of5_reader_N,\n                        i2of5_reader_W,\n                        i2of5_reader_N,\n                        i2of5_reader_N,\n                        i2of5_reader_W\n                    ],\n                    [\n                        i2of5_reader_W,\n                        i2of5_reader_W,\n                        i2of5_reader_N,\n                        i2of5_reader_N,\n                        i2of5_reader_N\n                    ],\n                    [\n                        i2of5_reader_N,\n                        i2of5_reader_N,\n                        i2of5_reader_W,\n                        i2of5_reader_N,\n                        i2of5_reader_W\n                    ],\n                    [\n                        i2of5_reader_W,\n                        i2of5_reader_N,\n                        i2of5_reader_W,\n                        i2of5_reader_N,\n                        i2of5_reader_N\n                    ],\n                    [\n                        i2of5_reader_N,\n                        i2of5_reader_W,\n                        i2of5_reader_W,\n                        i2of5_reader_N,\n                        i2of5_reader_N\n                    ],\n                    [\n                        i2of5_reader_N,\n                        i2of5_reader_N,\n                        i2of5_reader_N,\n                        i2of5_reader_W,\n                        i2of5_reader_W\n                    ],\n                    [\n                        i2of5_reader_W,\n                        i2of5_reader_N,\n                        i2of5_reader_N,\n                        i2of5_reader_W,\n                        i2of5_reader_N\n                    ],\n                    [\n                        i2of5_reader_N,\n                        i2of5_reader_W,\n                        i2of5_reader_N,\n                        i2of5_reader_W,\n                        i2of5_reader_N\n                    ]\n                ]);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"MAX_CORRECTION_FACTOR\", 5);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", \"i2of5\");\n                if (opts.normalizeBarSpaceWidth) {\n                    _this.SINGLE_CODE_ERROR = 0.38;\n                    _this.AVG_CODE_ERROR = 0.09;\n                }\n                _this.config = opts;\n                return possibleConstructorReturn_default()(_this, assertThisInitialized_default()(_this));\n            }\n            createClass_default()(I2of5Reader, [\n                {\n                    key: \"_matchPattern\",\n                    value: function _matchPattern(counter, code) {\n                        if (this.config.normalizeBarSpaceWidth) {\n                            var counterSum = [\n                                0,\n                                0\n                            ];\n                            var codeSum = [\n                                0,\n                                0\n                            ];\n                            var correction = [\n                                0,\n                                0\n                            ];\n                            var correctionRatio = this.MAX_CORRECTION_FACTOR;\n                            var correctionRatioInverse = 1 / correctionRatio;\n                            for(var i = 0; i < counter.length; i++){\n                                counterSum[i % 2] += counter[i];\n                                codeSum[i % 2] += code[i];\n                            }\n                            correction[0] = codeSum[0] / counterSum[0];\n                            correction[1] = codeSum[1] / counterSum[1];\n                            correction[0] = Math.max(Math.min(correction[0], correctionRatio), correctionRatioInverse);\n                            correction[1] = Math.max(Math.min(correction[1], correctionRatio), correctionRatioInverse);\n                            this.barSpaceRatio = correction;\n                            for(var _i = 0; _i < counter.length; _i++){\n                                counter[_i] *= this.barSpaceRatio[_i % 2];\n                            }\n                        }\n                        return get_default()(getPrototypeOf_default()(I2of5Reader.prototype), \"_matchPattern\", this).call(this, counter, code);\n                    }\n                },\n                {\n                    key: \"_findPattern\",\n                    value: function _findPattern(pattern, offset) {\n                        var isWhite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                        var tryHarder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n                        var counter = new Array(pattern.length).fill(0);\n                        var counterPos = 0;\n                        var bestMatch = {\n                            error: Number.MAX_VALUE,\n                            start: 0,\n                            end: 0\n                        };\n                        var epsilon = this.AVG_CODE_ERROR;\n                        isWhite = isWhite || false;\n                        tryHarder = tryHarder || false;\n                        if (!offset) {\n                            offset = this._nextSet(this._row);\n                        }\n                        for(var i = offset; i < this._row.length; i++){\n                            if (this._row[i] ^ (isWhite ? 1 : 0)) {\n                                counter[counterPos]++;\n                            } else {\n                                if (counterPos === counter.length - 1) {\n                                    var sum = counter.reduce(function(prev, next) {\n                                        return prev + next;\n                                    }, 0);\n                                    var error = this._matchPattern(counter, pattern);\n                                    if (error < epsilon) {\n                                        bestMatch.error = error;\n                                        bestMatch.start = i - sum;\n                                        bestMatch.end = i;\n                                        return bestMatch;\n                                    }\n                                    if (tryHarder) {\n                                        for(var j = 0; j < counter.length - 2; j++){\n                                            counter[j] = counter[j + 2];\n                                        }\n                                        counter[counter.length - 2] = 0;\n                                        counter[counter.length - 1] = 0;\n                                        counterPos--;\n                                    } else {\n                                        return null;\n                                    }\n                                } else {\n                                    counterPos++;\n                                }\n                                counter[counterPos] = 1;\n                                isWhite = !isWhite;\n                            }\n                        }\n                        return null;\n                    }\n                },\n                {\n                    key: \"_findStart\",\n                    value: function _findStart() {\n                        var leadingWhitespaceStart = 0;\n                        var offset = this._nextSet(this._row);\n                        var startInfo = null;\n                        var narrowBarWidth = 1;\n                        while(!startInfo){\n                            startInfo = this._findPattern(this.START_PATTERN, offset, false, true);\n                            if (!startInfo) {\n                                return null;\n                            }\n                            narrowBarWidth = Math.floor((startInfo.end - startInfo.start) / 4);\n                            leadingWhitespaceStart = startInfo.start - narrowBarWidth * 10;\n                            if (leadingWhitespaceStart >= 0) {\n                                if (this._matchRange(leadingWhitespaceStart, startInfo.start, 0)) {\n                                    return startInfo;\n                                }\n                            }\n                            offset = startInfo.end;\n                            startInfo = null;\n                        }\n                        return null;\n                    }\n                },\n                {\n                    key: \"_verifyTrailingWhitespace\",\n                    value: function _verifyTrailingWhitespace(endInfo) {\n                        var trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start) / 2;\n                        if (trailingWhitespaceEnd < this._row.length) {\n                            if (this._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\n                                return endInfo;\n                            }\n                        }\n                        return null;\n                    }\n                },\n                {\n                    key: \"_findEnd\",\n                    value: function _findEnd() {\n                        this._row.reverse();\n                        var endInfo = this._findPattern(this.STOP_PATTERN);\n                        this._row.reverse();\n                        if (endInfo === null) {\n                            return null;\n                        }\n                        // reverse numbers\n                        var tmp = endInfo.start;\n                        endInfo.start = this._row.length - endInfo.end;\n                        endInfo.end = this._row.length - tmp;\n                        return endInfo !== null ? this._verifyTrailingWhitespace(endInfo) : null;\n                    }\n                },\n                {\n                    key: \"_decodePair\",\n                    value: function _decodePair(counterPair) {\n                        var codes = [];\n                        for(var i = 0; i < counterPair.length; i++){\n                            var code = this._decodeCode(counterPair[i]);\n                            if (!code) {\n                                return null;\n                            }\n                            codes.push(code);\n                        }\n                        return codes;\n                    }\n                },\n                {\n                    key: \"_decodeCode\",\n                    value: function _decodeCode(counter) {\n                        var epsilon = this.AVG_CODE_ERROR;\n                        var bestMatch = {\n                            error: Number.MAX_VALUE,\n                            code: -1,\n                            start: 0,\n                            end: 0\n                        };\n                        for(var code = 0; code < this.CODE_PATTERN.length; code++){\n                            var error = this._matchPattern(counter, this.CODE_PATTERN[code]);\n                            if (error < bestMatch.error) {\n                                bestMatch.code = code;\n                                bestMatch.error = error;\n                            }\n                        }\n                        if (bestMatch.error < epsilon) {\n                            return bestMatch;\n                        }\n                        return null;\n                    }\n                },\n                {\n                    key: \"_decodePayload\",\n                    value: function _decodePayload(counters, result, decodedCodes) {\n                        var pos = 0;\n                        var counterLength = counters.length;\n                        var counterPair = [\n                            [\n                                0,\n                                0,\n                                0,\n                                0,\n                                0\n                            ],\n                            [\n                                0,\n                                0,\n                                0,\n                                0,\n                                0\n                            ]\n                        ];\n                        var codes = null;\n                        while(pos < counterLength){\n                            for(var i = 0; i < 5; i++){\n                                counterPair[0][i] = counters[pos] * this.barSpaceRatio[0];\n                                counterPair[1][i] = counters[pos + 1] * this.barSpaceRatio[1];\n                                pos += 2;\n                            }\n                            codes = this._decodePair(counterPair);\n                            if (!codes) {\n                                return null;\n                            }\n                            for(var _i2 = 0; _i2 < codes.length; _i2++){\n                                result.push(codes[_i2].code + \"\");\n                                decodedCodes.push(codes[_i2]);\n                            }\n                        }\n                        return codes;\n                    }\n                },\n                {\n                    key: \"_verifyCounterLength\",\n                    value: function _verifyCounterLength(counters) {\n                        return counters.length % 10 === 0;\n                    }\n                },\n                {\n                    key: \"decode\",\n                    value: function decode(row, start) {\n                        var result = new Array();\n                        var decodedCodes = new Array();\n                        var startInfo = this._findStart();\n                        if (!startInfo) {\n                            return null;\n                        }\n                        decodedCodes.push(startInfo);\n                        var endInfo = this._findEnd();\n                        if (!endInfo) {\n                            return null;\n                        }\n                        var counters = this._fillCounters(startInfo.end, endInfo.start, false);\n                        if (!this._verifyCounterLength(counters)) {\n                            return null;\n                        }\n                        var code = this._decodePayload(counters, result, decodedCodes);\n                        if (!code) {\n                            return null;\n                        }\n                        if (result.length % 2 !== 0 || result.length < 6) {\n                            return null;\n                        }\n                        decodedCodes.push(endInfo);\n                        return {\n                            code: result.join(\"\"),\n                            start: startInfo.start,\n                            end: endInfo.end,\n                            startInfo: startInfo,\n                            decodedCodes: decodedCodes,\n                            format: this.FORMAT\n                        };\n                    }\n                }\n            ]);\n            return I2of5Reader;\n        }(barcode_reader);\n        /* harmony default export */ var i2of5_reader = i2of5_reader_I2of5Reader;\n        // CONCATENATED MODULE: ./src/reader/upc_e_reader.ts\n        function upc_e_reader_ownKeys(e, r) {\n            var t = Object.keys(e);\n            if (Object.getOwnPropertySymbols) {\n                var o = Object.getOwnPropertySymbols(e);\n                r && (o = o.filter(function(r) {\n                    return Object.getOwnPropertyDescriptor(e, r).enumerable;\n                })), t.push.apply(t, o);\n            }\n            return t;\n        }\n        function upc_e_reader_objectSpread(e) {\n            for(var r = 1; r < arguments.length; r++){\n                var t = null != arguments[r] ? arguments[r] : {};\n                r % 2 ? upc_e_reader_ownKeys(Object(t), !0).forEach(function(r) {\n                    defineProperty_default()(e, r, t[r]);\n                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : upc_e_reader_ownKeys(Object(t)).forEach(function(r) {\n                    Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n                });\n            }\n            return e;\n        }\n        function upc_e_reader_createSuper(Derived) {\n            var hasNativeReflectConstruct = upc_e_reader_isNativeReflectConstruct();\n            return function _createSuperInternal() {\n                var Super = getPrototypeOf_default()(Derived), result;\n                if (hasNativeReflectConstruct) {\n                    var NewTarget = getPrototypeOf_default()(this).constructor;\n                    result = Reflect.construct(Super, arguments, NewTarget);\n                } else {\n                    result = Super.apply(this, arguments);\n                }\n                return possibleConstructorReturn_default()(this, result);\n            };\n        }\n        function upc_e_reader_isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n            try {\n                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n        var upc_e_reader_UPCEReader = /*#__PURE__*/ function(_EANReader) {\n            inherits_default()(UPCEReader, _EANReader);\n            var _super = upc_e_reader_createSuper(UPCEReader);\n            function UPCEReader() {\n                var _this;\n                classCallCheck_default()(this, UPCEReader);\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                _this = _super.call.apply(_super, [\n                    this\n                ].concat(args));\n                defineProperty_default()(assertThisInitialized_default()(_this), \"CODE_FREQUENCY\", [\n                    [\n                        56,\n                        52,\n                        50,\n                        49,\n                        44,\n                        38,\n                        35,\n                        42,\n                        41,\n                        37\n                    ],\n                    [\n                        7,\n                        11,\n                        13,\n                        14,\n                        19,\n                        25,\n                        28,\n                        21,\n                        22,\n                        26\n                    ]\n                ]);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"STOP_PATTERN\", [\n                    1 / 6 * 7,\n                    1 / 6 * 7,\n                    1 / 6 * 7,\n                    1 / 6 * 7,\n                    1 / 6 * 7,\n                    1 / 6 * 7\n                ]);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", \"upc_e\");\n                return _this;\n            }\n            createClass_default()(UPCEReader, [\n                {\n                    key: \"_decodePayload\",\n                    value: function _decodePayload(inCode, result, decodedCodes) {\n                        var outCode = upc_e_reader_objectSpread({}, inCode);\n                        var codeFrequency = 0x0;\n                        for(var i = 0; i < 6; i++){\n                            outCode = this._decodeCode(outCode.end);\n                            if (!outCode) {\n                                return null;\n                            }\n                            if (outCode.code >= CODE_G_START) {\n                                outCode.code = outCode.code - CODE_G_START;\n                                codeFrequency |= 1 << 5 - i;\n                            }\n                            result.push(outCode.code);\n                            decodedCodes.push(outCode);\n                        }\n                        if (!this._determineParity(codeFrequency, result)) {\n                            return null;\n                        }\n                        return outCode;\n                    }\n                },\n                {\n                    key: \"_determineParity\",\n                    value: function _determineParity(codeFrequency, result) {\n                        for(var nrSystem = 0; nrSystem < this.CODE_FREQUENCY.length; nrSystem++){\n                            for(var i = 0; i < this.CODE_FREQUENCY[nrSystem].length; i++){\n                                if (codeFrequency === this.CODE_FREQUENCY[nrSystem][i]) {\n                                    result.unshift(nrSystem);\n                                    result.push(i);\n                                    return true;\n                                }\n                            }\n                        }\n                        return false;\n                    }\n                },\n                {\n                    key: \"_convertToUPCA\",\n                    value: function _convertToUPCA(result) {\n                        var upca = [\n                            result[0]\n                        ];\n                        var lastDigit = result[result.length - 2];\n                        if (lastDigit <= 2) {\n                            upca = upca.concat(result.slice(1, 3)).concat([\n                                lastDigit,\n                                0,\n                                0,\n                                0,\n                                0\n                            ]).concat(result.slice(3, 6));\n                        } else if (lastDigit === 3) {\n                            upca = upca.concat(result.slice(1, 4)).concat([\n                                0,\n                                0,\n                                0,\n                                0,\n                                0\n                            ]).concat(result.slice(4, 6));\n                        } else if (lastDigit === 4) {\n                            upca = upca.concat(result.slice(1, 5)).concat([\n                                0,\n                                0,\n                                0,\n                                0,\n                                0,\n                                result[5]\n                            ]);\n                        } else {\n                            upca = upca.concat(result.slice(1, 6)).concat([\n                                0,\n                                0,\n                                0,\n                                0,\n                                lastDigit\n                            ]);\n                        }\n                        upca.push(result[result.length - 1]);\n                        return upca;\n                    }\n                },\n                {\n                    key: \"_checksum\",\n                    value: function _checksum(result) {\n                        return get_default()(getPrototypeOf_default()(UPCEReader.prototype), \"_checksum\", this).call(this, this._convertToUPCA(result));\n                    }\n                },\n                {\n                    key: \"_findEnd\",\n                    value: function _findEnd(offset, isWhite) {\n                        return get_default()(getPrototypeOf_default()(UPCEReader.prototype), \"_findEnd\", this).call(this, offset, true);\n                    }\n                },\n                {\n                    key: \"_verifyTrailingWhitespace\",\n                    value: function _verifyTrailingWhitespace(endInfo) {\n                        var trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start) / 2;\n                        if (trailingWhitespaceEnd < this._row.length) {\n                            if (this._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\n                                return endInfo;\n                            }\n                        }\n                        return null;\n                    }\n                }\n            ]);\n            return UPCEReader;\n        }(ean_reader);\n        /* harmony default export */ var upc_e_reader = upc_e_reader_UPCEReader;\n        // CONCATENATED MODULE: ./src/reader/upc_reader.ts\n        function upc_reader_createSuper(Derived) {\n            var hasNativeReflectConstruct = upc_reader_isNativeReflectConstruct();\n            return function _createSuperInternal() {\n                var Super = getPrototypeOf_default()(Derived), result;\n                if (hasNativeReflectConstruct) {\n                    var NewTarget = getPrototypeOf_default()(this).constructor;\n                    result = Reflect.construct(Super, arguments, NewTarget);\n                } else {\n                    result = Super.apply(this, arguments);\n                }\n                return possibleConstructorReturn_default()(this, result);\n            };\n        }\n        function upc_reader_isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n            try {\n                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n        var upc_reader_UPCReader = /*#__PURE__*/ function(_EANReader) {\n            inherits_default()(UPCReader, _EANReader);\n            var _super = upc_reader_createSuper(UPCReader);\n            function UPCReader() {\n                var _this;\n                classCallCheck_default()(this, UPCReader);\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                _this = _super.call.apply(_super, [\n                    this\n                ].concat(args));\n                defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", \"upc_a\");\n                return _this;\n            }\n            createClass_default()(UPCReader, [\n                {\n                    key: \"decode\",\n                    value: function decode(row, start) {\n                        var result = ean_reader.prototype.decode.call(this);\n                        if (result && result.code && result.code.length === 13 && result.code.charAt(0) === \"0\") {\n                            result.code = result.code.substring(1);\n                            return result;\n                        }\n                        return null;\n                    }\n                }\n            ]);\n            return UPCReader;\n        }(ean_reader);\n        /* harmony default export */ var upc_reader = upc_reader_UPCReader;\n        // CONCATENATED MODULE: ./src/decoder/bresenham.js\n        var Bresenham = {};\n        var Slope = {\n            DIR: {\n                UP: 1,\n                DOWN: -1\n            }\n        };\n        /**\n * Scans a line of the given image from point p1 to p2 and returns a result object containing\n * gray-scale values (0-255) of the underlying pixels in addition to the min\n * and max values.\n * @param {Object} imageWrapper\n * @param {Object} p1 The start point {x,y}\n * @param {Object} p2 The end point {x,y}\n * @returns {line, min, max}\n */ Bresenham.getBarcodeLine = function(imageWrapper, p1, p2) {\n            /* eslint-disable no-bitwise */ var x0 = p1.x | 0;\n            var y0 = p1.y | 0;\n            var x1 = p2.x | 0;\n            var y1 = p2.y | 0;\n            /* eslint-disable no-bitwise */ var steep = Math.abs(y1 - y0) > Math.abs(x1 - x0);\n            var error;\n            var y;\n            var tmp;\n            var x;\n            var line = [];\n            var imageData = imageWrapper.data;\n            var width = imageWrapper.size.x;\n            var val;\n            var min = 255;\n            var max = 0;\n            function read(a, b) {\n                val = imageData[b * width + a];\n                min = val < min ? val : min;\n                max = val > max ? val : max;\n                line.push(val);\n            }\n            if (steep) {\n                tmp = x0;\n                x0 = y0;\n                y0 = tmp;\n                tmp = x1;\n                x1 = y1;\n                y1 = tmp;\n            }\n            if (x0 > x1) {\n                tmp = x0;\n                x0 = x1;\n                x1 = tmp;\n                tmp = y0;\n                y0 = y1;\n                y1 = tmp;\n            }\n            var deltaX = x1 - x0;\n            var deltaY = Math.abs(y1 - y0);\n            error = deltaX / 2 | 0;\n            y = y0;\n            var yStep = y0 < y1 ? 1 : -1;\n            for(x = x0; x < x1; x++){\n                if (steep) {\n                    read(y, x);\n                } else {\n                    read(x, y);\n                }\n                error -= deltaY;\n                if (error < 0) {\n                    y += yStep;\n                    error += deltaX;\n                }\n            }\n            return {\n                line: line,\n                min: min,\n                max: max\n            };\n        };\n        /**\n * Converts the result from getBarcodeLine into a binary representation\n * also considering the frequency and slope of the signal for more robust results\n * @param {Object} result {line, min, max}\n */ Bresenham.toBinaryLine = function(result) {\n            var min = result.min;\n            var max = result.max;\n            var line = result.line;\n            var slope;\n            var slope2;\n            var center = min + (max - min) / 2;\n            var extrema = [];\n            var currentDir;\n            var dir;\n            var threshold = (max - min) / 12;\n            var rThreshold = -threshold;\n            var i;\n            var j;\n            // 1. find extrema\n            currentDir = line[0] > center ? Slope.DIR.UP : Slope.DIR.DOWN;\n            extrema.push({\n                pos: 0,\n                val: line[0]\n            });\n            for(i = 0; i < line.length - 2; i++){\n                slope = line[i + 1] - line[i];\n                slope2 = line[i + 2] - line[i + 1];\n                if (slope + slope2 < rThreshold && line[i + 1] < center * 1.5) {\n                    dir = Slope.DIR.DOWN;\n                } else if (slope + slope2 > threshold && line[i + 1] > center * 0.5) {\n                    dir = Slope.DIR.UP;\n                } else {\n                    dir = currentDir;\n                }\n                if (currentDir !== dir) {\n                    extrema.push({\n                        pos: i,\n                        val: line[i]\n                    });\n                    currentDir = dir;\n                }\n            }\n            extrema.push({\n                pos: line.length,\n                val: line[line.length - 1]\n            });\n            for(j = extrema[0].pos; j < extrema[1].pos; j++){\n                line[j] = line[j] > center ? 0 : 1;\n            }\n            // iterate over extrema and convert to binary based on avg between minmax\n            for(i = 1; i < extrema.length - 1; i++){\n                if (extrema[i + 1].val > extrema[i].val) {\n                    threshold = extrema[i].val + (extrema[i + 1].val - extrema[i].val) / 3 * 2 | 0;\n                } else {\n                    threshold = extrema[i + 1].val + (extrema[i].val - extrema[i + 1].val) / 3 | 0;\n                }\n                for(j = extrema[i].pos; j < extrema[i + 1].pos; j++){\n                    line[j] = line[j] > threshold ? 0 : 1;\n                }\n            }\n            return {\n                line: line,\n                threshold: threshold\n            };\n        };\n        /**\n * Used for development only\n */ Bresenham.debug = {\n            printFrequency: function printFrequency(line, canvas) {\n                var i;\n                var ctx = canvas.getContext(\"2d\");\n                // eslint-disable-next-line no-param-reassign\n                canvas.width = line.length;\n                // eslint-disable-next-line no-param-reassign\n                canvas.height = 256;\n                ctx.beginPath();\n                ctx.strokeStyle = \"blue\";\n                for(i = 0; i < line.length; i++){\n                    ctx.moveTo(i, 255);\n                    ctx.lineTo(i, 255 - line[i]);\n                }\n                ctx.stroke();\n                ctx.closePath();\n            },\n            printPattern: function printPattern(line, canvas) {\n                var ctx = canvas.getContext(\"2d\");\n                var i;\n                // eslint-disable-next-line no-param-reassign\n                canvas.width = line.length;\n                ctx.fillColor = \"black\";\n                for(i = 0; i < line.length; i++){\n                    if (line[i] === 1) {\n                        ctx.fillRect(i, 0, 1, 100);\n                    }\n                }\n            }\n        };\n        /* harmony default export */ var bresenham = Bresenham;\n        // CONCATENATED MODULE: ./src/decoder/barcode_decoder.js\n        function _createForOfIteratorHelper(o, allowArrayLike) {\n            var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n            if (!it) {\n                if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n                    if (it) o = it;\n                    var i = 0;\n                    var F = function F() {};\n                    return {\n                        s: F,\n                        n: function n() {\n                            if (i >= o.length) return {\n                                done: true\n                            };\n                            return {\n                                done: false,\n                                value: o[i++]\n                            };\n                        },\n                        e: function e(_e) {\n                            throw _e;\n                        },\n                        f: F\n                    };\n                }\n                throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n            }\n            var normalCompletion = true, didErr = false, err;\n            return {\n                s: function s() {\n                    it = it.call(o);\n                },\n                n: function n() {\n                    var step = it.next();\n                    normalCompletion = step.done;\n                    return step;\n                },\n                e: function e(_e2) {\n                    didErr = true;\n                    err = _e2;\n                },\n                f: function f() {\n                    try {\n                        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n                    } finally{\n                        if (didErr) throw err;\n                    }\n                }\n            };\n        }\n        function _unsupportedIterableToArray(o, minLen) {\n            if (!o) return;\n            if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n            var n = Object.prototype.toString.call(o).slice(8, -1);\n            if (n === \"Object\" && o.constructor) n = o.constructor.name;\n            if (n === \"Map\" || n === \"Set\") return Array.from(o);\n            if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n        }\n        function _arrayLikeToArray(arr, len) {\n            if (len == null || len > arr.length) len = arr.length;\n            for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n            return arr2;\n        }\n        /* eslint-disable import/no-cycle */ var READERS = {\n            code_128_reader: code_128_reader,\n            ean_reader: ean_reader,\n            ean_5_reader: ean_5_reader,\n            ean_2_reader: ean_2_reader,\n            ean_8_reader: ean_8_reader,\n            code_39_reader: code_39_reader,\n            code_39_vin_reader: code_39_vin_reader,\n            codabar_reader: codabar_reader,\n            upc_reader: upc_reader,\n            upc_e_reader: upc_e_reader,\n            i2of5_reader: i2of5_reader,\n            \"2of5_reader\": _2of5_reader,\n            code_93_reader: code_93_reader,\n            code_32_reader: code_32_reader\n        };\n        /* harmony default export */ var barcode_decoder = {\n            registerReader: function registerReader(name, reader) {\n                READERS[name] = reader;\n            },\n            create: function create(config, inputImageWrapper) {\n                var _canvas = {\n                    ctx: {\n                        frequency: null,\n                        pattern: null,\n                        overlay: null\n                    },\n                    dom: {\n                        frequency: null,\n                        pattern: null,\n                        overlay: null\n                    }\n                };\n                var _barcodeReaders = [];\n                initCanvas();\n                initReaders();\n                initConfig();\n                function initCanvas() {\n                    if (false) { var $debug; }\n                }\n                function initReaders() {\n                    config.readers.forEach(function(readerConfig) {\n                        var reader;\n                        var configuration = {};\n                        var supplements = [];\n                        if (typeof_default()(readerConfig) === \"object\") {\n                            reader = readerConfig.format;\n                            configuration = readerConfig.config;\n                        } else if (typeof readerConfig === \"string\") {\n                            reader = readerConfig;\n                        }\n                        if (false) {}\n                        if (configuration.supplements) {\n                            supplements = configuration.supplements.map(function(supplement) {\n                                return new READERS[supplement]();\n                            });\n                        }\n                        try {\n                            var readerObj = new READERS[reader](configuration, supplements);\n                            _barcodeReaders.push(readerObj);\n                        } catch (err) {\n                            console.error(\"* Error constructing reader \", reader, err);\n                            throw err;\n                        }\n                    });\n                    if (false) {}\n                }\n                function initConfig() {\n                    if (false) { var vis, i; }\n                }\n                /**\n     * extend the line on both ends\n     * @param {Array} line\n     * @param {Number} angle\n     */ function getExtendedLine(line, angle, ext) {\n                    function extendLine(amount) {\n                        var extension = {\n                            y: amount * Math.sin(angle),\n                            x: amount * Math.cos(angle)\n                        };\n                        /* eslint-disable no-param-reassign */ line[0].y -= extension.y;\n                        line[0].x -= extension.x;\n                        line[1].y += extension.y;\n                        line[1].x += extension.x;\n                    /* eslint-enable no-param-reassign */ }\n                    // check if inside image\n                    extendLine(ext);\n                    while(ext > 1 && (!inputImageWrapper.inImageWithBorder(line[0]) || !inputImageWrapper.inImageWithBorder(line[1]))){\n                        // eslint-disable-next-line no-param-reassign\n                        ext -= Math.ceil(ext / 2);\n                        extendLine(-ext);\n                    }\n                    return line;\n                }\n                function getLine(box) {\n                    return [\n                        {\n                            x: (box[1][0] - box[0][0]) / 2 + box[0][0],\n                            y: (box[1][1] - box[0][1]) / 2 + box[0][1]\n                        },\n                        {\n                            x: (box[3][0] - box[2][0]) / 2 + box[2][0],\n                            y: (box[3][1] - box[2][1]) / 2 + box[2][1]\n                        }\n                    ];\n                }\n                function tryDecode(line) {\n                    var result = null;\n                    var i;\n                    var barcodeLine = bresenham.getBarcodeLine(inputImageWrapper, line[0], line[1]);\n                    if (false) {}\n                    bresenham.toBinaryLine(barcodeLine);\n                    if (false) {}\n                    for(i = 0; i < _barcodeReaders.length && result === null; i++){\n                        result = _barcodeReaders[i].decodePattern(barcodeLine.line);\n                    }\n                    if (result === null) {\n                        return null;\n                    }\n                    return {\n                        codeResult: result,\n                        barcodeLine: barcodeLine\n                    };\n                }\n                /**\n     * This method slices the given area apart and tries to detect a barcode-pattern\n     * for each slice. It returns the decoded barcode, or null if nothing was found\n     * @param {Array} box\n     * @param {Array} line\n     * @param {Number} lineAngle\n     */ function tryDecodeBruteForce(box, line, lineAngle) {\n                    var sideLength = Math.sqrt(Math.pow(box[1][0] - box[0][0], 2) + Math.pow(box[1][1] - box[0][1], 2));\n                    var i;\n                    var slices = 16;\n                    var result = null;\n                    var dir;\n                    var extension;\n                    var xdir = Math.sin(lineAngle);\n                    var ydir = Math.cos(lineAngle);\n                    for(i = 1; i < slices && result === null; i++){\n                        // move line perpendicular to angle\n                        // eslint-disable-next-line no-mixed-operators\n                        dir = sideLength / slices * i * (i % 2 === 0 ? -1 : 1);\n                        extension = {\n                            y: dir * xdir,\n                            x: dir * ydir\n                        };\n                        /* eslint-disable no-param-reassign */ line[0].y += extension.x;\n                        line[0].x -= extension.y;\n                        line[1].y += extension.x;\n                        line[1].x -= extension.y;\n                        /* eslint-enable no-param-reassign */ result = tryDecode(line);\n                    }\n                    return result;\n                }\n                function getLineLength(line) {\n                    return Math.sqrt(Math.pow(Math.abs(line[1].y - line[0].y), 2) + Math.pow(Math.abs(line[1].x - line[0].x), 2));\n                }\n                function _decodeFromImage2(_x) {\n                    return _decodeFromImage.apply(this, arguments);\n                }\n                /**\n     * With the help of the configured readers (Code128 or EAN) this function tries to detect a\n     * valid barcode pattern within the given area.\n     * @param {Object} box The area to search in\n     * @returns {Object} the result {codeResult, line, angle, pattern, threshold}\n     */ function _decodeFromImage() {\n                    _decodeFromImage = asyncToGenerator_default()(/*#__PURE__*/ regenerator_default.a.mark(function _callee2(imageWrapper) {\n                        var result, _iterator, _step, reader;\n                        return regenerator_default.a.wrap(function _callee2$(_context2) {\n                            while(1)switch(_context2.prev = _context2.next){\n                                case 0:\n                                    result = null;\n                                    _iterator = _createForOfIteratorHelper(_barcodeReaders);\n                                    _context2.prev = 2;\n                                    _iterator.s();\n                                case 4:\n                                    if ((_step = _iterator.n()).done) {\n                                        _context2.next = 14;\n                                        break;\n                                    }\n                                    reader = _step.value;\n                                    if (!reader.decodeImage) {\n                                        _context2.next = 12;\n                                        break;\n                                    }\n                                    _context2.next = 9;\n                                    return reader.decodeImage(imageWrapper);\n                                case 9:\n                                    result = _context2.sent;\n                                    if (!result) {\n                                        _context2.next = 12;\n                                        break;\n                                    }\n                                    return _context2.abrupt(\"break\", 14);\n                                case 12:\n                                    _context2.next = 4;\n                                    break;\n                                case 14:\n                                    _context2.next = 19;\n                                    break;\n                                case 16:\n                                    _context2.prev = 16;\n                                    _context2.t0 = _context2[\"catch\"](2);\n                                    _iterator.e(_context2.t0);\n                                case 19:\n                                    _context2.prev = 19;\n                                    _iterator.f();\n                                    return _context2.finish(19);\n                                case 22:\n                                    return _context2.abrupt(\"return\", result);\n                                case 23:\n                                case \"end\":\n                                    return _context2.stop();\n                            }\n                        }, _callee2, null, [\n                            [\n                                2,\n                                16,\n                                19,\n                                22\n                            ]\n                        ]);\n                    }));\n                    return _decodeFromImage.apply(this, arguments);\n                }\n                function _decodeFromBoundingBox(box) {\n                    var line;\n                    var ctx = _canvas.ctx.overlay;\n                    var result;\n                    if (false) {}\n                    line = getLine(box);\n                    var lineLength = getLineLength(line);\n                    var lineAngle = Math.atan2(line[1].y - line[0].y, line[1].x - line[0].x);\n                    line = getExtendedLine(line, lineAngle, Math.floor(lineLength * 0.1));\n                    if (line === null) {\n                        return null;\n                    }\n                    result = tryDecode(line);\n                    if (result === null) {\n                        result = tryDecodeBruteForce(box, line, lineAngle);\n                    }\n                    if (result === null) {\n                        return null;\n                    }\n                    if (false) {}\n                    return {\n                        codeResult: result.codeResult,\n                        line: line,\n                        angle: lineAngle,\n                        pattern: result.barcodeLine.line,\n                        threshold: result.barcodeLine.threshold\n                    };\n                }\n                return {\n                    decodeFromBoundingBox: function decodeFromBoundingBox(box) {\n                        return _decodeFromBoundingBox(box);\n                    },\n                    decodeFromBoundingBoxes: function decodeFromBoundingBoxes(boxes) {\n                        var i;\n                        var result;\n                        var barcodes = [];\n                        var multiple = config.multiple;\n                        for(i = 0; i < boxes.length; i++){\n                            var box = boxes[i];\n                            result = _decodeFromBoundingBox(box) || {};\n                            result.box = box;\n                            if (multiple) {\n                                barcodes.push(result);\n                            } else if (result.codeResult) {\n                                return result;\n                            }\n                        }\n                        return {\n                            barcodes: barcodes\n                        };\n                    },\n                    decodeFromImage: function decodeFromImage(imageWrapperIn) {\n                        return asyncToGenerator_default()(/*#__PURE__*/ regenerator_default.a.mark(function _callee() {\n                            var result;\n                            return regenerator_default.a.wrap(function _callee$(_context) {\n                                while(1)switch(_context.prev = _context.next){\n                                    case 0:\n                                        _context.next = 2;\n                                        return _decodeFromImage2(imageWrapperIn);\n                                    case 2:\n                                        result = _context.sent;\n                                        return _context.abrupt(\"return\", result);\n                                    case 4:\n                                    case \"end\":\n                                        return _context.stop();\n                                }\n                            }, _callee);\n                        }))();\n                    },\n                    registerReader: function registerReader(name, reader) {\n                        if (READERS[name]) {\n                            throw new Error(\"cannot register existing reader\", name);\n                        }\n                        READERS[name] = reader;\n                    },\n                    setReaders: function setReaders(readers) {\n                        // eslint-disable-next-line no-param-reassign\n                        config.readers = readers;\n                        _barcodeReaders.length = 0;\n                        initReaders();\n                    }\n                };\n            }\n        };\n        // CONCATENATED MODULE: ./src/reader/index.ts\n        // CONCATENATED MODULE: ./src/common/events.ts\n        /* harmony default export */ var events = function EventInterface() {\n            var events = {};\n            function getEvent(eventName) {\n                if (!events[eventName]) {\n                    events[eventName] = {\n                        subscribers: []\n                    };\n                }\n                return events[eventName];\n            }\n            function clearEvents() {\n                events = {};\n            }\n            function publishSubscription(subscription, data) {\n                if (subscription.async) {\n                    setTimeout(function() {\n                        subscription.callback(data);\n                    }, 4);\n                } else {\n                    subscription.callback(data);\n                }\n            }\n            function _subscribe(event, callback, async) {\n                var subscription;\n                if (typeof callback === \"function\") {\n                    subscription = {\n                        callback: callback,\n                        async: async\n                    };\n                } else {\n                    subscription = callback;\n                    if (!subscription.callback) {\n                        throw new Error(\"Callback was not specified on options\");\n                    }\n                }\n                getEvent(event).subscribers.push(subscription);\n            }\n            return {\n                subscribe: function subscribe(event, callback, async) {\n                    return _subscribe(event, callback, async);\n                },\n                publish: function publish(eventName, data) {\n                    var event = getEvent(eventName);\n                    var subscribers = event.subscribers;\n                    // Publish one-time subscriptions\n                    subscribers.filter(function(subscriber) {\n                        return !!subscriber.once;\n                    }).forEach(function(subscriber) {\n                        publishSubscription(subscriber, data);\n                    });\n                    // remove them from the subscriber\n                    event.subscribers = subscribers.filter(function(subscriber) {\n                        return !subscriber.once;\n                    });\n                    // publish the rest\n                    event.subscribers.forEach(function(subscriber) {\n                        publishSubscription(subscriber, data);\n                    });\n                },\n                once: function once(event, callback) {\n                    var async = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                    _subscribe(event, {\n                        callback: callback,\n                        async: async,\n                        once: true\n                    });\n                },\n                unsubscribe: function unsubscribe(eventName, callback) {\n                    if (eventName) {\n                        var _event = getEvent(eventName);\n                        if (_event && callback) {\n                            _event.subscribers = _event.subscribers.filter(function(subscriber) {\n                                return subscriber.callback !== callback;\n                            });\n                        } else {\n                            _event.subscribers = [];\n                        }\n                    } else {\n                        clearEvents();\n                    }\n                }\n            };\n        }();\n        // EXTERNAL MODULE: ./node_modules/lodash/pick.js\n        var pick = __nested_webpack_require_254197__(63);\n        var pick_default = /*#__PURE__*/ __nested_webpack_require_254197__.n(pick);\n        // EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/wrapNativeSuper.js\n        var wrapNativeSuper = __nested_webpack_require_254197__(64);\n        var wrapNativeSuper_default = /*#__PURE__*/ __nested_webpack_require_254197__.n(wrapNativeSuper);\n        // CONCATENATED MODULE: ./src/quagga/Exception.ts\n        function Exception_createSuper(Derived) {\n            var hasNativeReflectConstruct = Exception_isNativeReflectConstruct();\n            return function _createSuperInternal() {\n                var Super = getPrototypeOf_default()(Derived), result;\n                if (hasNativeReflectConstruct) {\n                    var NewTarget = getPrototypeOf_default()(this).constructor;\n                    result = Reflect.construct(Super, arguments, NewTarget);\n                } else {\n                    result = Super.apply(this, arguments);\n                }\n                return possibleConstructorReturn_default()(this, result);\n            };\n        }\n        function Exception_isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n            try {\n                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n        var Exception_Exception = /*#__PURE__*/ function(_Error) {\n            inherits_default()(Exception, _Error);\n            var _super = Exception_createSuper(Exception);\n            function Exception(m, code) {\n                var _this;\n                classCallCheck_default()(this, Exception);\n                _this = _super.call(this, m);\n                defineProperty_default()(assertThisInitialized_default()(_this), \"code\", void 0);\n                _this.code = code;\n                Object.setPrototypeOf(assertThisInitialized_default()(_this), Exception.prototype);\n                return _this;\n            }\n            return createClass_default()(Exception);\n        }(/*#__PURE__*/ wrapNativeSuper_default()(Error));\n        // CONCATENATED MODULE: ./src/common/mediaDevices.ts\n        var ERROR_DESC = \"This may mean that the user has declined camera access, or the browser does not support media APIs. If you are running in iOS, you must use Safari.\";\n        function enumerateDevices() {\n            try {\n                return navigator.mediaDevices.enumerateDevices();\n            } catch (err) {\n                var error = new Exception_Exception(\"enumerateDevices is not defined. \".concat(ERROR_DESC), -1);\n                return Promise.reject(error);\n            }\n        }\n        function getUserMedia(constraints) {\n            try {\n                return navigator.mediaDevices.getUserMedia(constraints);\n            } catch (err) {\n                var error = new Exception_Exception(\"getUserMedia is not defined. \".concat(ERROR_DESC), -1);\n                return Promise.reject(error);\n            }\n        }\n        // CONCATENATED MODULE: ./src/input/camera_access.ts\n        // TODO: when this file was written years ago, HTMLMediaElement.play() did not return a useful value\n        // to let us know when the video started playing.  Now, it does.  So, we shouldn't need to run this\n        // odd waitForVideo() function that polls to see if the video has started.\n        var streamRef;\n        function waitForVideo(video) {\n            return new Promise(function(resolve, reject) {\n                var attempts = 10;\n                function checkVideo() {\n                    if (attempts > 0) {\n                        if (video.videoWidth > 10 && video.videoHeight > 10) {\n                            if (false) {}\n                            resolve();\n                        } else {\n                            window.setTimeout(checkVideo, 500);\n                        }\n                    } else {\n                        reject(new Exception_Exception(\"Unable to play video stream. Is webcam working?\", -1)); // TODO: add error code\n                    }\n                    attempts--;\n                }\n                checkVideo();\n            });\n        }\n        /**\n * Tries to attach the camera-stream to a given video-element\n * and calls the callback function when the content is ready\n * @param {Object} constraints\n * @param {Object} video\n */ function initCamera(_x, _x2) {\n            return _initCamera.apply(this, arguments);\n        }\n        function _initCamera() {\n            _initCamera = asyncToGenerator_default()(/*#__PURE__*/ regenerator_default.a.mark(function _callee4(video, constraints) {\n                var stream;\n                return regenerator_default.a.wrap(function _callee4$(_context4) {\n                    while(1)switch(_context4.prev = _context4.next){\n                        case 0:\n                            _context4.next = 2;\n                            return getUserMedia(constraints);\n                        case 2:\n                            stream = _context4.sent;\n                            streamRef = stream;\n                            if (!video) {\n                                _context4.next = 11;\n                                break;\n                            }\n                            video.setAttribute(\"autoplay\", \"true\");\n                            video.setAttribute(\"muted\", \"true\");\n                            video.setAttribute(\"playsinline\", \"true\"); // not listed on MDN...\n                            // eslint-disable-next-line no-param-reassign\n                            video.srcObject = stream;\n                            video.addEventListener(\"loadedmetadata\", function() {\n                                video.play()[\"catch\"](function(err) {\n                                    console.warn(\"* Error while trying to play video stream:\", err);\n                                });\n                            });\n                            return _context4.abrupt(\"return\", waitForVideo(video));\n                        case 11:\n                            return _context4.abrupt(\"return\", Promise.resolve());\n                        case 12:\n                        case \"end\":\n                            return _context4.stop();\n                    }\n                }, _callee4);\n            }));\n            return _initCamera.apply(this, arguments);\n        }\n        function deprecatedConstraints(videoConstraints) {\n            var normalized = pick_default()(videoConstraints, [\n                \"width\",\n                \"height\",\n                \"facingMode\",\n                \"aspectRatio\",\n                \"deviceId\"\n            ]);\n            if (typeof videoConstraints.minAspectRatio !== \"undefined\" && videoConstraints.minAspectRatio > 0) {\n                normalized.aspectRatio = videoConstraints.minAspectRatio;\n                console.log(\"WARNING: Constraint 'minAspectRatio' is deprecated; Use 'aspectRatio' instead\");\n            }\n            if (typeof videoConstraints.facing !== \"undefined\") {\n                normalized.facingMode = videoConstraints.facing;\n                console.log(\"WARNING: Constraint 'facing' is deprecated. Use 'facingMode' instead'\");\n            }\n            return normalized;\n        }\n        // TODO: #192 I don't think there's any good reason pickConstraints should return a Promise,\n        // I think it was just that way so it could be chained to other functions that did return a Promise.\n        // That's not necessary with async functions being a thing, so that should be fixed.\n        function pickConstraints() {\n            var videoConstraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            var video = deprecatedConstraints(videoConstraints);\n            if (video && video.deviceId && video.facingMode) {\n                delete video.facingMode;\n            }\n            return Promise.resolve({\n                audio: false,\n                video: video\n            });\n        }\n        function enumerateVideoDevices() {\n            return _enumerateVideoDevices.apply(this, arguments);\n        }\n        function _enumerateVideoDevices() {\n            _enumerateVideoDevices = asyncToGenerator_default()(/*#__PURE__*/ regenerator_default.a.mark(function _callee5() {\n                var devices;\n                return regenerator_default.a.wrap(function _callee5$(_context5) {\n                    while(1)switch(_context5.prev = _context5.next){\n                        case 0:\n                            _context5.next = 2;\n                            return enumerateDevices();\n                        case 2:\n                            devices = _context5.sent;\n                            return _context5.abrupt(\"return\", devices.filter(function(device) {\n                                return device.kind === \"videoinput\";\n                            }));\n                        case 4:\n                        case \"end\":\n                            return _context5.stop();\n                    }\n                }, _callee5);\n            }));\n            return _enumerateVideoDevices.apply(this, arguments);\n        }\n        function getActiveTrack() {\n            if (!streamRef) {\n                return null;\n            }\n            var tracks = streamRef.getVideoTracks();\n            return tracks && tracks !== null && tracks !== void 0 && tracks.length ? tracks[0] : null;\n        }\n        /**\n * Used for accessing information about the active stream track and available video devices.\n */ var QuaggaJSCameraAccess = {\n            requestedVideoElement: null,\n            request: function request(video, videoConstraints) {\n                return asyncToGenerator_default()(/*#__PURE__*/ regenerator_default.a.mark(function _callee() {\n                    var newConstraints;\n                    return regenerator_default.a.wrap(function _callee$(_context) {\n                        while(1)switch(_context.prev = _context.next){\n                            case 0:\n                                QuaggaJSCameraAccess.requestedVideoElement = video;\n                                _context.next = 3;\n                                return pickConstraints(videoConstraints);\n                            case 3:\n                                newConstraints = _context.sent;\n                                return _context.abrupt(\"return\", initCamera(video, newConstraints));\n                            case 5:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }, _callee);\n                }))();\n            },\n            release: function release() {\n                var tracks = streamRef && streamRef.getVideoTracks();\n                if (QuaggaJSCameraAccess.requestedVideoElement !== null) {\n                    QuaggaJSCameraAccess.requestedVideoElement.pause();\n                }\n                return new Promise(function(resolve) {\n                    setTimeout(function() {\n                        if (tracks && tracks.length) {\n                            tracks.forEach(function(track) {\n                                return track.stop();\n                            });\n                        }\n                        streamRef = null;\n                        QuaggaJSCameraAccess.requestedVideoElement = null;\n                        resolve();\n                    }, 0);\n                });\n            },\n            enumerateVideoDevices: enumerateVideoDevices,\n            getActiveStreamLabel: function getActiveStreamLabel() {\n                var track = getActiveTrack();\n                return track ? track.label : \"\";\n            },\n            getActiveTrack: getActiveTrack,\n            disableTorch: function disableTorch() {\n                return asyncToGenerator_default()(/*#__PURE__*/ regenerator_default.a.mark(function _callee2() {\n                    var track;\n                    return regenerator_default.a.wrap(function _callee2$(_context2) {\n                        while(1)switch(_context2.prev = _context2.next){\n                            case 0:\n                                track = getActiveTrack(); // TODO: should we acquire camera access even if there's no current camera open?\n                                // TODO: what happens on iOS or another device where torch isn't supported at all? Should we throw an error?\n                                if (!track) {\n                                    _context2.next = 11;\n                                    break;\n                                }\n                                _context2.prev = 2;\n                                _context2.next = 5;\n                                return track.applyConstraints({\n                                    advanced: [\n                                        {\n                                            torch: false\n                                        }\n                                    ]\n                                });\n                            case 5:\n                                _context2.next = 11;\n                                break;\n                            case 7:\n                                _context2.prev = 7;\n                                _context2.t0 = _context2[\"catch\"](2);\n                                if (_context2.t0 instanceof OverconstrainedError) {\n                                    console.warn(\"quagga2/CameraAccess: Torch not supported on this device\");\n                                }\n                                throw _context2.t0;\n                            case 11:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }, _callee2, null, [\n                        [\n                            2,\n                            7\n                        ]\n                    ]);\n                }))();\n            },\n            enableTorch: function enableTorch() {\n                return asyncToGenerator_default()(/*#__PURE__*/ regenerator_default.a.mark(function _callee3() {\n                    var track;\n                    return regenerator_default.a.wrap(function _callee3$(_context3) {\n                        while(1)switch(_context3.prev = _context3.next){\n                            case 0:\n                                track = getActiveTrack(); // TODO: should we acquire camera access even if there's no current camera open?\n                                // TODO: what happens on iOS or another device where torch isn't supported at all? Should we throw an error?\n                                if (!track) {\n                                    _context3.next = 11;\n                                    break;\n                                }\n                                _context3.prev = 2;\n                                _context3.next = 5;\n                                return track.applyConstraints({\n                                    advanced: [\n                                        {\n                                            torch: true\n                                        }\n                                    ]\n                                });\n                            case 5:\n                                _context3.next = 11;\n                                break;\n                            case 7:\n                                _context3.prev = 7;\n                                _context3.t0 = _context3[\"catch\"](2);\n                                if (_context3.t0 instanceof OverconstrainedError) {\n                                    console.warn(\"quagga2/CameraAccess: Torch not supported on this device\");\n                                }\n                                throw _context3.t0;\n                            case 11:\n                            case \"end\":\n                                return _context3.stop();\n                        }\n                    }, _callee3, null, [\n                        [\n                            2,\n                            7\n                        ]\n                    ]);\n                }))();\n            }\n        };\n        /* harmony default export */ var camera_access = QuaggaJSCameraAccess;\n        // CONCATENATED MODULE: ./src/analytics/result_collector.ts\n        function contains(codeResult, list) {\n            return list && list.some(function(item) {\n                var keys = Object.keys(item);\n                return keys.every(function(key) {\n                    return item[key] === codeResult[key];\n                });\n            });\n        }\n        function passesFilter(codeResult, filter) {\n            return typeof filter === \"function\" ? filter(codeResult) : true;\n        }\n        /* harmony default export */ var result_collector = {\n            create: function create(config) {\n                var _config$capacity;\n                var canvas = document.createElement(\"canvas\");\n                var ctx = canvas.getContext(\"2d\", {\n                    willReadFrequently: !!config.willReadFrequently\n                });\n                var results = [];\n                var capacity = (_config$capacity = config.capacity) !== null && _config$capacity !== void 0 ? _config$capacity : 20;\n                var capture = config.capture === true;\n                function matchesConstraints(codeResult) {\n                    return !!capacity && codeResult && !contains(codeResult, config.blacklist) && passesFilter(codeResult, config.filter);\n                }\n                return {\n                    addResult: function addResult(data, imageSize, codeResult) {\n                        var result = {}; // this is 'any' to avoid having to construct a whole QuaggaJSCodeResult :|\n                        if (matchesConstraints(codeResult)) {\n                            capacity--;\n                            result.codeResult = codeResult;\n                            if (capture) {\n                                canvas.width = imageSize.x;\n                                canvas.height = imageSize.y;\n                                image_debug[\"a\" /* default */ ].drawImage(data, imageSize, ctx);\n                                result.frame = canvas.toDataURL();\n                            }\n                            results.push(result);\n                        }\n                    },\n                    getResults: function getResults() {\n                        return results;\n                    }\n                };\n            }\n        };\n        // CONCATENATED MODULE: ./src/config/config.dev.ts\n        var DevConfig = {\n            inputStream: {\n                name: \"Live\",\n                type: \"LiveStream\",\n                constraints: {\n                    width: 640,\n                    height: 480,\n                    // aspectRatio: 640/480, // optional\n                    facingMode: \"environment\" // or user\n                },\n                area: {\n                    top: \"0%\",\n                    right: \"0%\",\n                    left: \"0%\",\n                    bottom: \"0%\"\n                },\n                singleChannel: false // true: only the red color-channel is read\n            },\n            locate: true,\n            numOfWorkers: 0,\n            decoder: {\n                readers: [\n                    \"code_128_reader\"\n                ],\n                debug: {\n                    drawBoundingBox: false,\n                    showFrequency: false,\n                    drawScanline: false,\n                    showPattern: false\n                }\n            },\n            locator: {\n                halfSample: true,\n                patchSize: \"medium\",\n                // x-small, small, medium, large, x-large\n                debug: {\n                    showCanvas: false,\n                    showPatches: false,\n                    showFoundPatches: false,\n                    showSkeleton: false,\n                    showLabels: false,\n                    showPatchLabels: false,\n                    showRemainingPatchLabels: false,\n                    boxFromPatches: {\n                        showTransformed: false,\n                        showTransformedBox: false,\n                        showBB: false\n                    }\n                }\n            }\n        };\n        /* harmony default export */ var config_dev = DevConfig;\n        // CONCATENATED MODULE: ./src/config/config.node.ts\n        var NodeConfig = {\n            inputStream: {\n                type: \"ImageStream\",\n                sequence: false,\n                size: 800,\n                area: {\n                    top: \"0%\",\n                    right: \"0%\",\n                    left: \"0%\",\n                    bottom: \"0%\"\n                },\n                singleChannel: false // true: only the red color-channel is read\n            },\n            locate: true,\n            numOfWorkers: 0,\n            decoder: {\n                readers: [\n                    \"code_128_reader\"\n                ]\n            },\n            locator: {\n                halfSample: true,\n                patchSize: \"medium\" // x-small, small, medium, large, x-large\n            }\n        };\n        /* harmony default export */ var config_node = NodeConfig;\n        // CONCATENATED MODULE: ./src/config/config.prod.ts\n        var ProdConfig = {\n            inputStream: {\n                name: \"Live\",\n                type: \"LiveStream\",\n                constraints: {\n                    width: 640,\n                    height: 480,\n                    // aspectRatio: 640/480, // optional\n                    facingMode: \"environment\" // or user\n                },\n                area: {\n                    top: \"0%\",\n                    right: \"0%\",\n                    left: \"0%\",\n                    bottom: \"0%\"\n                },\n                singleChannel: false // true: only the red color-channel is read\n            },\n            locate: true,\n            numOfWorkers: 4,\n            decoder: {\n                readers: [\n                    \"code_128_reader\"\n                ]\n            },\n            locator: {\n                halfSample: true,\n                patchSize: \"medium\" // x-small, small, medium, large, x-large\n            }\n        };\n        /* harmony default export */ var config_prod = ProdConfig;\n        // CONCATENATED MODULE: ./src/config/config.ts\n        var ExportConfig = function() {\n            var QuaggaConfig;\n            if (false) {} else if (true) {\n                QuaggaConfig = config_node;\n            } else {}\n            return QuaggaConfig;\n        }();\n        /* harmony default export */ var config_config = ExportConfig;\n        // EXTERNAL MODULE: external \"gl-matrix\"\n        var external_gl_matrix_ = __nested_webpack_require_254197__(5);\n        // EXTERNAL MODULE: ./src/input/frame_grabber.js\n        var frame_grabber = __nested_webpack_require_254197__(65);\n        var frame_grabber_default = /*#__PURE__*/ __nested_webpack_require_254197__.n(frame_grabber);\n        // EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js\n        var slicedToArray = __nested_webpack_require_254197__(33);\n        var slicedToArray_default = /*#__PURE__*/ __nested_webpack_require_254197__.n(slicedToArray);\n        // EXTERNAL MODULE: external \"get-pixels\"\n        var external_get_pixels_ = __nested_webpack_require_254197__(66);\n        var external_get_pixels_default = /*#__PURE__*/ __nested_webpack_require_254197__.n(external_get_pixels_);\n        // CONCATENATED MODULE: ./src/input/input_stream/input_stream.ts\n        // TODO: It's pretty likely that this shares code with the browser version, investigate that\n        // FOR ANYONE IN HERE IN THE FUTURE: This is the default input_stream module used for the Node bundle.\n        // webpack.config.js *replaces* this with input_stream_browser.ts when the bundle is being built for browser.\n        var inputStreamFactory = {\n            createVideoStream: function createVideoStream() {\n                throw new Error(\"createVideoStream not available\");\n            },\n            createLiveStream: function createLiveStream() {\n                throw new Error(\"createLiveStream not available\");\n            },\n            createImageStream: function createImageStream() {\n                // console.warn('* InputStreamNode createImageStream');\n                var _config = null;\n                var width = 0;\n                var height = 0;\n                var loaded = false;\n                // TODO: frame should be a type NdArray, but NdArray doesn't have ts definitions\n                // TODO: there is a ts-ndarray that might work, though\n                var frame = null;\n                var baseUrl;\n                var _ended = false;\n                var calculatedWidth;\n                var calculatedHeight;\n                var _eventNames = [\n                    \"canrecord\",\n                    \"ended\"\n                ];\n                var _eventHandlers = {};\n                var _topRight = {\n                    x: 0,\n                    y: 0,\n                    type: \"Point\"\n                };\n                var _canvasSize = {\n                    x: 0,\n                    y: 0,\n                    type: \"XYSize\"\n                };\n                /* eslint-disable no-unused-vars */ // false eslint errors? weird.\n                // @ts-ignore\n                var size = 0;\n                // @ts-ignore\n                var frameIdx = 0;\n                // @ts-ignore\n                var paused = false;\n                /* eslint-enable no-unused-vars */ function loadImages() {\n                    var _config2;\n                    loaded = false;\n                    /* eslint-disable new-cap */ external_get_pixels_default()(baseUrl, (_config2 = _config) === null || _config2 === void 0 ? void 0 : _config2.mime, function(err, pixels) {\n                        var _config3, _config4;\n                        if (err) {\n                            console.error(\"**** quagga loadImages error:\", err);\n                            throw new Error(\"error decoding pixels in loadImages\");\n                        }\n                        loaded = true;\n                        if (false) {}\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        frame = pixels;\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n                        // eslint-disable-next-line no-nested-ternary\n                        var _pixels$shape = slicedToArray_default()(pixels.shape, 2);\n                        width = _pixels$shape[0];\n                        height = _pixels$shape[1];\n                        calculatedWidth = (_config3 = _config) !== null && _config3 !== void 0 && _config3.size ? width / height > 1 ? _config.size : Math.floor(width / height * _config.size) : width;\n                        // eslint-disable-next-line no-nested-ternary\n                        calculatedHeight = (_config4 = _config) !== null && _config4 !== void 0 && _config4.size ? width / height > 1 ? Math.floor(height / width * _config.size) : _config.size : height;\n                        _canvasSize.x = calculatedWidth;\n                        _canvasSize.y = calculatedHeight;\n                        setTimeout(function() {\n                            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                            publishEvent(\"canrecord\", []);\n                        }, 0);\n                    });\n                }\n                function publishEvent(eventName, args) {\n                    var handlers = _eventHandlers[eventName];\n                    if (handlers && handlers.length > 0) {\n                        for(var j = 0; j < handlers.length; j++){\n                            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                            handlers[j].apply(inputStream, args);\n                        }\n                    }\n                }\n                // eslint-disable-next-line no-var,vars-on-top\n                var inputStream = {\n                    trigger: publishEvent,\n                    getWidth: function getWidth() {\n                        return calculatedWidth;\n                    },\n                    getHeight: function getHeight() {\n                        return calculatedHeight;\n                    },\n                    setWidth: function setWidth(w) {\n                        calculatedWidth = w;\n                    },\n                    setHeight: function setHeight(h) {\n                        calculatedHeight = h;\n                    },\n                    getRealWidth: function getRealWidth() {\n                        return width;\n                    },\n                    getRealHeight: function getRealHeight() {\n                        return height;\n                    },\n                    setInputStream: function setInputStream(stream) {\n                        var _config5;\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        _config = stream;\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\n                        baseUrl = (_config5 = _config) === null || _config5 === void 0 ? void 0 : _config5.src;\n                        size = 1;\n                        loadImages();\n                    },\n                    ended: function ended() {\n                        return _ended;\n                    },\n                    setAttribute: function setAttribute() {},\n                    getConfig: function getConfig() {\n                        return _config;\n                    },\n                    pause: function pause() {\n                        paused = true;\n                    },\n                    play: function play() {\n                        paused = false;\n                    },\n                    setCurrentTime: function setCurrentTime(time) {\n                        frameIdx = time;\n                    },\n                    addEventListener: function addEventListener(event, f) {\n                        if (_eventNames.indexOf(event) !== -1) {\n                            if (!_eventHandlers[event]) {\n                                _eventHandlers[event] = [];\n                            }\n                            _eventHandlers[event].push(f);\n                        }\n                    },\n                    clearEventHandlers: function clearEventHandlers() {\n                        Object.keys(_eventHandlers).forEach(function(ind) {\n                            return delete _eventHandlers[ind];\n                        });\n                    },\n                    setTopRight: function setTopRight(topRight) {\n                        _topRight.x = topRight.x;\n                        _topRight.y = topRight.y;\n                    },\n                    getTopRight: function getTopRight() {\n                        return _topRight;\n                    },\n                    setCanvasSize: function setCanvasSize(sz) {\n                        _canvasSize.x = sz.x;\n                        _canvasSize.y = sz.y;\n                    },\n                    getCanvasSize: function getCanvasSize() {\n                        return _canvasSize;\n                    },\n                    getFrame: function getFrame() {\n                        if (!loaded) {\n                            return null;\n                        }\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                        return frame;\n                    }\n                };\n                return inputStream;\n            }\n        };\n        /* harmony default export */ var input_stream = inputStreamFactory;\n        // EXTERNAL MODULE: ./src/locator/barcode_locator.js\n        var barcode_locator = __nested_webpack_require_254197__(23);\n        // CONCATENATED MODULE: ./src/QuaggaContext.ts\n        var QuaggaContext_QuaggaContext = /*#__PURE__*/ createClass_default()(function QuaggaContext() {\n            classCallCheck_default()(this, QuaggaContext);\n            defineProperty_default()(this, \"config\", void 0);\n            defineProperty_default()(this, \"inputStream\", void 0);\n            defineProperty_default()(this, \"framegrabber\", void 0);\n            defineProperty_default()(this, \"inputImageWrapper\", void 0);\n            defineProperty_default()(this, \"stopped\", false);\n            defineProperty_default()(this, \"boxSize\", void 0);\n            defineProperty_default()(this, \"resultCollector\", void 0);\n            defineProperty_default()(this, \"decoder\", void 0);\n            defineProperty_default()(this, \"workerPool\", []);\n            defineProperty_default()(this, \"onUIThread\", true);\n            defineProperty_default()(this, \"canvasContainer\", new QuaggaContext_CanvasContainer());\n        });\n        var QuaggaContext_CanvasInfo = /*#__PURE__*/ createClass_default()(function CanvasInfo() {\n            classCallCheck_default()(this, CanvasInfo);\n            defineProperty_default()(this, \"image\", void 0);\n            defineProperty_default()(this, \"overlay\", void 0);\n        });\n        var QuaggaContext_CanvasContainer = /*#__PURE__*/ createClass_default()(function CanvasContainer() {\n            classCallCheck_default()(this, CanvasContainer);\n            defineProperty_default()(this, \"ctx\", void 0);\n            defineProperty_default()(this, \"dom\", void 0);\n            this.ctx = new QuaggaContext_CanvasInfo();\n            this.dom = new QuaggaContext_CanvasInfo();\n        });\n        // CONCATENATED MODULE: ./src/quagga/getViewPort.ts\n        function getViewPort_getViewPort(target) {\n            if (typeof document === \"undefined\") {\n                return null;\n            }\n            // Check if target is already a DOM element\n            if (target instanceof HTMLElement && target.nodeName && target.nodeType === 1) {\n                return target;\n            }\n            // Use '#interactive.viewport' as a fallback selector (backwards compatibility)\n            var selector = typeof target === \"string\" ? target : \"#interactive.viewport\";\n            return document.querySelector(selector);\n        }\n        // CONCATENATED MODULE: ./src/quagga/initBuffers.ts\n        external_gl_matrix_[\"glMatrix\"].setMatrixArrayType(Array);\n        // TODO: need typescript def for BarcodeLocator\n        function initBuffers_initBuffers(inputStream, imageWrapper, locator) {\n            var inputImageWrapper = imageWrapper || new image_wrapper[\"a\" /* default */ ]({\n                x: inputStream.getWidth(),\n                y: inputStream.getHeight(),\n                type: \"XYSize\"\n            });\n            if (false) {}\n            var boxSize = [\n                external_gl_matrix_[\"vec2\"].clone([\n                    0,\n                    0\n                ]),\n                external_gl_matrix_[\"vec2\"].clone([\n                    0,\n                    inputImageWrapper.size.y\n                ]),\n                external_gl_matrix_[\"vec2\"].clone([\n                    inputImageWrapper.size.x,\n                    inputImageWrapper.size.y\n                ]),\n                external_gl_matrix_[\"vec2\"].clone([\n                    inputImageWrapper.size.x,\n                    0\n                ])\n            ];\n            barcode_locator[\"a\" /* default */ ].init(inputImageWrapper, locator);\n            return {\n                inputImageWrapper: inputImageWrapper,\n                boxSize: boxSize\n            };\n        }\n        // CONCATENATED MODULE: ./src/quagga/initCanvas.ts\n        function findOrCreateCanvas(selector, className) {\n            var canvas = document.querySelector(selector);\n            if (!canvas) {\n                canvas = document.createElement(\"canvas\");\n                canvas.className = className;\n            }\n            return canvas;\n        }\n        function getCanvasAndContext(selector, className, options) {\n            var canvas = findOrCreateCanvas(selector, className);\n            console.warn(\"* initCanvas getCanvasAndContext\");\n            var context = canvas.getContext(\"2d\", {\n                willReadFrequently: options.willReadFrequently\n            });\n            return {\n                canvas: canvas,\n                context: context\n            };\n        }\n        function initCanvases(canvasSize, _ref) {\n            var willReadFrequently = _ref.willReadFrequently;\n            if (typeof document !== \"undefined\") {\n                var image = getCanvasAndContext(\"canvas.imgBuffer\", \"imgBuffer\", {\n                    willReadFrequently: willReadFrequently\n                });\n                var overlay = getCanvasAndContext(\"canvas.drawingBuffer\", \"drawingBuffer\", {\n                    willReadFrequently: willReadFrequently\n                });\n                // eslint-disable-next-line no-multi-assign\n                image.canvas.width = overlay.canvas.width = canvasSize.x;\n                // eslint-disable-next-line no-multi-assign\n                image.canvas.height = overlay.canvas.height = canvasSize.y;\n                return {\n                    dom: {\n                        image: image.canvas,\n                        overlay: overlay.canvas\n                    },\n                    ctx: {\n                        image: image.context,\n                        overlay: overlay.context\n                    }\n                };\n            }\n            return null;\n        }\n        function initCanvas_initCanvas(context) {\n            var _context$config, _context$config$input, _context$config2, _context$config2$inpu, _context$config3, _context$config3$inpu;\n            var viewport = getViewPort_getViewPort(context === null || context === void 0 ? void 0 : (_context$config = context.config) === null || _context$config === void 0 ? void 0 : (_context$config$input = _context$config.inputStream) === null || _context$config$input === void 0 ? void 0 : _context$config$input.target);\n            var type = context === null || context === void 0 ? void 0 : (_context$config2 = context.config) === null || _context$config2 === void 0 ? void 0 : (_context$config2$inpu = _context$config2.inputStream) === null || _context$config2$inpu === void 0 ? void 0 : _context$config2$inpu.type;\n            if (!type) return null;\n            var container = initCanvases(context.inputStream.getCanvasSize(), {\n                willReadFrequently: !!(context !== null && context !== void 0 && (_context$config3 = context.config) !== null && _context$config3 !== void 0 && (_context$config3$inpu = _context$config3.inputStream) !== null && _context$config3$inpu !== void 0 && _context$config3$inpu.willReadFrequently)\n            });\n            if (!container) return {\n                dom: {\n                    image: null,\n                    overlay: null\n                },\n                ctx: {\n                    image: null,\n                    overlay: null\n                }\n            };\n            var dom = container.dom;\n            if (typeof document !== \"undefined\") {\n                if (viewport) {\n                    if (type === \"ImageStream\" && !viewport.contains(dom.image)) {\n                        viewport.appendChild(dom.image);\n                    }\n                    if (!viewport.contains(dom.overlay)) {\n                        viewport.appendChild(dom.overlay);\n                    }\n                }\n            }\n            return container;\n        }\n        // CONCATENATED MODULE: ./src/quagga/qworker.ts\n        function qworker_ownKeys(e, r) {\n            var t = Object.keys(e);\n            if (Object.getOwnPropertySymbols) {\n                var o = Object.getOwnPropertySymbols(e);\n                r && (o = o.filter(function(r) {\n                    return Object.getOwnPropertyDescriptor(e, r).enumerable;\n                })), t.push.apply(t, o);\n            }\n            return t;\n        }\n        function qworker_objectSpread(e) {\n            for(var r = 1; r < arguments.length; r++){\n                var t = null != arguments[r] ? arguments[r] : {};\n                r % 2 ? qworker_ownKeys(Object(t), !0).forEach(function(r) {\n                    defineProperty_default()(e, r, t[r]);\n                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : qworker_ownKeys(Object(t)).forEach(function(r) {\n                    Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n                });\n            }\n            return e;\n        }\n        /* Worker functions. These are straight from the original quagga.js file.\n * Not presently used, as worker support is non-functional.  Keeping them around temporarily\n * to refer to until it is re-implemented. We may be able to fix/use some of this.\n */ // TODO: need a typescript interface for FrameGrabber\n        var workerPool = [];\n        function updateWorkers(frameGrabber) {\n            var availableWorker;\n            if (workerPool.length) {\n                availableWorker = workerPool.filter(function(workerThread) {\n                    return !workerThread.busy;\n                })[0];\n                if (availableWorker) {\n                    frameGrabber.attachData(availableWorker.imageData);\n                    if (frameGrabber.grab()) {\n                        availableWorker.busy = true;\n                        availableWorker.worker.postMessage({\n                            cmd: \"process\",\n                            imageData: availableWorker.imageData\n                        }, [\n                            availableWorker.imageData.buffer\n                        ]);\n                    }\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n            return null;\n        }\n        function configForWorker(config) {\n            return qworker_objectSpread(qworker_objectSpread({}, config), {}, {\n                inputStream: qworker_objectSpread(qworker_objectSpread({}, config.inputStream), {}, {\n                    target: null\n                })\n            });\n        }\n        // @ts-ignore\n        function workerInterface(factory) {\n            if (factory) {\n                var Quagga = factory()[\"default\"];\n                if (!Quagga) {\n                    // @ts-ignore\n                    self.postMessage({\n                        \"event\": \"error\",\n                        message: \"Quagga could not be created\"\n                    });\n                    return;\n                }\n            }\n            // @ts-ignore\n            var imageWrapper;\n            // @ts-ignore\n            function onProcessed(result) {\n                self.postMessage({\n                    \"event\": \"processed\",\n                    // @ts-ignore\n                    imageData: imageWrapper.data,\n                    result: result\n                }, [\n                    imageWrapper.data.buffer\n                ]);\n            }\n            function workerInterfaceReady() {\n                self.postMessage({\n                    \"event\": \"initialized\",\n                    // @ts-ignore\n                    imageData: imageWrapper.data\n                }, [\n                    imageWrapper.data.buffer\n                ]);\n            }\n            // @ts-ignore\n            self.onmessage = function(e) {\n                if (e.data.cmd === \"init\") {\n                    var config = e.data.config;\n                    config.numOfWorkers = 0;\n                    imageWrapper = new Quagga.ImageWrapper({\n                        x: e.data.size.x,\n                        y: e.data.size.y\n                    }, new Uint8Array(e.data.imageData));\n                    Quagga.init(config, workerInterfaceReady, imageWrapper);\n                    Quagga.onProcessed(onProcessed);\n                } else if (e.data.cmd === \"process\") {\n                    // @ts-ignore\n                    imageWrapper.data = new Uint8Array(e.data.imageData);\n                    Quagga.start();\n                } else if (e.data.cmd === \"setReaders\") {\n                    Quagga.setReaders(e.data.readers);\n                } else if (e.data.cmd === \"registerReader\") {\n                    Quagga.registerReader(e.data.name, e.data.reader);\n                }\n            };\n        }\n        function generateWorkerBlob() {\n            var blob, factorySource;\n            /* jshint ignore:start */ // @ts-ignore\n            if (typeof __factorySource__ !== \"undefined\") {\n                // @ts-ignore\n                factorySource = __factorySource__; // eslint-disable-line no-undef\n            }\n            /* jshint ignore:end */ blob = new Blob([\n                \"(\" + workerInterface.toString() + \")(\" + factorySource + \");\"\n            ], {\n                type: \"text/javascript\"\n            });\n            return window.URL.createObjectURL(blob);\n        }\n        function initWorker(config, inputStream, cb) {\n            var blobURL = generateWorkerBlob();\n            var worker = new Worker(blobURL);\n            var workerThread = {\n                worker: worker,\n                imageData: new Uint8Array(inputStream.getWidth() * inputStream.getHeight()),\n                busy: true\n            };\n            workerThread.worker.onmessage = function(e) {\n                if (e.data.event === \"initialized\") {\n                    URL.revokeObjectURL(blobURL);\n                    workerThread.busy = false;\n                    workerThread.imageData = new Uint8Array(e.data.imageData);\n                    if (false) {}\n                    cb(workerThread);\n                } else if (e.data.event === \"processed\") {\n                    workerThread.imageData = new Uint8Array(e.data.imageData);\n                    workerThread.busy = false;\n                    // TODO: how to thread publishResult into here? TypeScript says it's not here. https://github.com/ericblade/quagga2/issues/466#issuecomment-1724248080 says it's necessary?\n                    // @ts-ignore\n                    if (typeof publishResult !== \"undefined\") {\n                        // @ts-ignore\n                        publishResult(e.data.result, workerThread.imageData);\n                    }\n                } else if (e.data.event === \"error\") {\n                    if (false) {}\n                }\n            };\n            workerThread.worker.postMessage({\n                cmd: \"init\",\n                size: {\n                    x: inputStream.getWidth(),\n                    y: inputStream.getHeight()\n                },\n                imageData: workerThread.imageData,\n                config: configForWorker(config)\n            }, [\n                workerThread.imageData.buffer\n            ]);\n        }\n        function adjustWorkerPool(capacity, config, inputStream, cb) {\n            var increaseBy = capacity - workerPool.length;\n            if (increaseBy === 0 && cb) {\n                cb();\n            } else if (increaseBy < 0) {\n                var workersToTerminate = workerPool.slice(increaseBy);\n                workersToTerminate.forEach(function(workerThread) {\n                    workerThread.worker.terminate();\n                    if (false) {}\n                });\n                workerPool = workerPool.slice(0, increaseBy);\n                if (cb) {\n                    cb();\n                }\n            } else {\n                var workerInitialized = function workerInitialized(workerThread) {\n                    workerPool.push(workerThread);\n                    if (workerPool.length >= capacity && cb) {\n                        cb();\n                    }\n                };\n                if (config) {\n                    for(var i = 0; i < increaseBy; i++){\n                        initWorker(config, inputStream, workerInitialized);\n                    }\n                }\n            }\n        }\n        function qworker_setReaders(readers) {\n            workerPool.forEach(function(workerThread) {\n                return workerThread.worker.postMessage({\n                    cmd: \"setReaders\",\n                    readers: readers\n                });\n            });\n        }\n        function qworker_registerReader(name, reader) {\n            workerPool.forEach(function(workerThread) {\n                return workerThread.worker.postMessage({\n                    cmd: \"registerReader\",\n                    name: name,\n                    reader: reader\n                });\n            });\n        }\n        // CONCATENATED MODULE: ./src/quagga/setupInputStream.ts\n        // TODO: need to create an InputStream typescript interface, so we don't have an \"any\" in the next line\n        function setupInputStream() {\n            var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"LiveStream\";\n            var viewport = arguments.length > 1 ? arguments[1] : undefined;\n            var inputStreamFactory = arguments.length > 2 ? arguments[2] : undefined;\n            switch(type){\n                case \"VideoStream\":\n                    {\n                        var video = document.createElement(\"video\");\n                        return {\n                            video: video,\n                            inputStream: inputStreamFactory.createVideoStream(video)\n                        };\n                    }\n                case \"ImageStream\":\n                    return {\n                        inputStream: inputStreamFactory.createImageStream()\n                    };\n                case \"LiveStream\":\n                    {\n                        var _video = null;\n                        if (viewport) {\n                            _video = viewport.querySelector(\"video\");\n                            if (!_video) {\n                                _video = document.createElement(\"video\");\n                                viewport.appendChild(_video);\n                            }\n                        }\n                        return {\n                            video: _video,\n                            inputStream: inputStreamFactory.createLiveStream(_video)\n                        };\n                    }\n                default:\n                    console.error(\"* setupInputStream invalid type \".concat(type));\n                    return {\n                        video: null,\n                        inputStream: null\n                    };\n            }\n        }\n        // CONCATENATED MODULE: ./src/quagga/transform.ts\n        /* eslint-disable no-param-reassign */ function moveBox(box, xOffset, yOffset) {\n            var corner = box.length;\n            while(corner--){\n                box[corner][0] += xOffset;\n                box[corner][1] += yOffset;\n            }\n        }\n        function moveLine(line, xOffset, yOffset) {\n            line[0].x += xOffset;\n            line[0].y += yOffset;\n            line[1].x += xOffset;\n            line[1].y += yOffset;\n        }\n        // CONCATENATED MODULE: ./src/quagga/quagga.ts\n        external_gl_matrix_[\"glMatrix\"].setMatrixArrayType(Array);\n        var quagga_Quagga = /*#__PURE__*/ function() {\n            function Quagga() {\n                var _this = this;\n                classCallCheck_default()(this, Quagga);\n                defineProperty_default()(this, \"context\", new QuaggaContext_QuaggaContext());\n                defineProperty_default()(this, \"canRecord\", function(callback) {\n                    var _this$context$config;\n                    if (!_this.context.config) {\n                        return;\n                    }\n                    barcode_locator[\"a\" /* default */ ].checkImageConstraints(_this.context.inputStream, (_this$context$config = _this.context.config) === null || _this$context$config === void 0 ? void 0 : _this$context$config.locator);\n                    _this.initCanvas();\n                    _this.context.framegrabber = frame_grabber_default.a.create(_this.context.inputStream, _this.context.canvasContainer.dom.image);\n                    if (_this.context.config.numOfWorkers === undefined) {\n                        _this.context.config.numOfWorkers = 0;\n                    }\n                    adjustWorkerPool(_this.context.config.numOfWorkers, _this.context.config, _this.context.inputStream, function() {\n                        var _this$context$config2;\n                        if (((_this$context$config2 = _this.context.config) === null || _this$context$config2 === void 0 ? void 0 : _this$context$config2.numOfWorkers) === 0) {\n                            _this.initializeData();\n                        }\n                        _this.ready(callback);\n                    });\n                });\n                defineProperty_default()(this, \"update\", function() {\n                    if (_this.context.onUIThread) {\n                        var workersUpdated = updateWorkers(_this.context.framegrabber);\n                        if (!workersUpdated) {\n                            var _this$context$inputIm;\n                            _this.context.framegrabber.attachData((_this$context$inputIm = _this.context.inputImageWrapper) === null || _this$context$inputIm === void 0 ? void 0 : _this$context$inputIm.data);\n                            if (_this.context.framegrabber.grab()) {\n                                if (!workersUpdated) {\n                                    _this.locateAndDecode();\n                                }\n                            }\n                        }\n                    } else {\n                        var _this$context$inputIm2;\n                        _this.context.framegrabber.attachData((_this$context$inputIm2 = _this.context.inputImageWrapper) === null || _this$context$inputIm2 === void 0 ? void 0 : _this$context$inputIm2.data);\n                        _this.context.framegrabber.grab();\n                        _this.locateAndDecode();\n                    }\n                });\n            }\n            createClass_default()(Quagga, [\n                {\n                    key: \"initBuffers\",\n                    value: function initBuffers(imageWrapper) {\n                        if (!this.context.config) {\n                            return;\n                        }\n                        var _initBuffers2 = initBuffers_initBuffers(this.context.inputStream, imageWrapper, this.context.config.locator), inputImageWrapper = _initBuffers2.inputImageWrapper, boxSize = _initBuffers2.boxSize;\n                        this.context.inputImageWrapper = inputImageWrapper;\n                        this.context.boxSize = boxSize;\n                    }\n                },\n                {\n                    key: \"initializeData\",\n                    value: function initializeData(imageWrapper) {\n                        if (!this.context.config) {\n                            return;\n                        }\n                        this.initBuffers(imageWrapper);\n                        this.context.decoder = barcode_decoder.create(this.context.config.decoder, this.context.inputImageWrapper);\n                    }\n                },\n                {\n                    key: \"getViewPort\",\n                    value: function getViewPort() {\n                        if (!this.context.config || !this.context.config.inputStream) {\n                            return null;\n                        }\n                        var target = this.context.config.inputStream.target;\n                        return getViewPort_getViewPort(target);\n                    }\n                },\n                {\n                    key: \"ready\",\n                    value: function ready(callback) {\n                        this.context.inputStream.play();\n                        callback();\n                    }\n                },\n                {\n                    key: \"initCanvas\",\n                    value: function initCanvas() {\n                        var container = initCanvas_initCanvas(this.context);\n                        if (!container) {\n                            return;\n                        }\n                        var ctx = container.ctx, dom = container.dom;\n                        this.context.canvasContainer.dom.image = dom.image;\n                        this.context.canvasContainer.dom.overlay = dom.overlay;\n                        this.context.canvasContainer.ctx.image = ctx.image;\n                        this.context.canvasContainer.ctx.overlay = ctx.overlay;\n                    }\n                },\n                {\n                    key: \"initInputStream\",\n                    value: function initInputStream(callback) {\n                        if (!this.context.config || !this.context.config.inputStream) {\n                            return;\n                        }\n                        var _this$context$config$ = this.context.config.inputStream, inputType = _this$context$config$.type, constraints = _this$context$config$.constraints;\n                        var _setupInputStream = setupInputStream(inputType, this.getViewPort(), input_stream), video = _setupInputStream.video, inputStream = _setupInputStream.inputStream;\n                        if (inputType === \"LiveStream\" && video) {\n                            camera_access.request(video, constraints).then(function() {\n                                return inputStream.trigger(\"canrecord\");\n                            })[\"catch\"](function(err) {\n                                return callback(err);\n                            });\n                        }\n                        if (inputStream) {\n                            inputStream.setAttribute(\"preload\", \"auto\");\n                            inputStream.setInputStream(this.context.config.inputStream);\n                            inputStream.addEventListener(\"canrecord\", this.canRecord.bind(undefined, callback));\n                        }\n                        this.context.inputStream = inputStream;\n                    }\n                },\n                {\n                    key: \"getBoundingBoxes\",\n                    value: function getBoundingBoxes() {\n                        var _this$context$config3;\n                        return (_this$context$config3 = this.context.config) !== null && _this$context$config3 !== void 0 && _this$context$config3.locate ? barcode_locator[\"a\" /* default */ ].locate() : [\n                            [\n                                external_gl_matrix_[\"vec2\"].clone(this.context.boxSize[0]),\n                                external_gl_matrix_[\"vec2\"].clone(this.context.boxSize[1]),\n                                external_gl_matrix_[\"vec2\"].clone(this.context.boxSize[2]),\n                                external_gl_matrix_[\"vec2\"].clone(this.context.boxSize[3])\n                            ]\n                        ];\n                    }\n                },\n                {\n                    key: \"transformResult\",\n                    value: function transformResult(result) {\n                        var _this2 = this;\n                        var topRight = this.context.inputStream.getTopRight();\n                        var xOffset = topRight.x;\n                        var yOffset = topRight.y;\n                        if (xOffset === 0 && yOffset === 0) {\n                            return;\n                        }\n                        if (result.barcodes) {\n                            // TODO: BarcodeInfo may not be the right type here.\n                            result.barcodes.forEach(function(barcode) {\n                                return _this2.transformResult(barcode);\n                            });\n                        }\n                        if (result.line && result.line.length === 2) {\n                            moveLine(result.line, xOffset, yOffset);\n                        }\n                        if (result.box) {\n                            moveBox(result.box, xOffset, yOffset);\n                        }\n                        if (result.boxes && result.boxes.length > 0) {\n                            for(var i = 0; i < result.boxes.length; i++){\n                                moveBox(result.boxes[i], xOffset, yOffset);\n                            }\n                        }\n                    }\n                },\n                {\n                    key: \"addResult\",\n                    value: function addResult(result, imageData) {\n                        var _this3 = this;\n                        if (!imageData || !this.context.resultCollector) {\n                            return;\n                        }\n                        // TODO: Figure out what data structure holds a \"barcodes\" result, if any...\n                        if (result.barcodes) {\n                            result.barcodes.filter(function(barcode) {\n                                return barcode.codeResult;\n                            }).forEach(function(barcode) {\n                                return _this3.addResult(barcode, imageData);\n                            });\n                        } else if (result.codeResult) {\n                            this.context.resultCollector.addResult(imageData, this.context.inputStream.getCanvasSize(), result.codeResult);\n                        }\n                    }\n                },\n                {\n                    key: \"hasCodeResult\",\n                    value: function hasCodeResult(result) {\n                        return !!(result && (result.barcodes ? result.barcodes.some(function(barcode) {\n                            return barcode.codeResult;\n                        }) : result.codeResult));\n                    }\n                },\n                {\n                    key: \"publishResult\",\n                    value: function publishResult1() {\n                        var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n                        var imageData = arguments.length > 1 ? arguments[1] : undefined;\n                        var resultToPublish = result;\n                        if (result && this.context.onUIThread) {\n                            var _result$barcodes;\n                            this.transformResult(result);\n                            this.addResult(result, imageData);\n                            // @ts-ignore\n                            resultToPublish = (result === null || result === void 0 ? void 0 : (_result$barcodes = result.barcodes) === null || _result$barcodes === void 0 ? void 0 : _result$barcodes.length) > 0 ? result.barcodes : result;\n                        }\n                        events.publish(\"processed\", resultToPublish);\n                        if (this.hasCodeResult(result)) {\n                            events.publish(\"detected\", resultToPublish);\n                        }\n                    }\n                },\n                {\n                    key: \"locateAndDecode\",\n                    value: function() {\n                        var _locateAndDecode = asyncToGenerator_default()(/*#__PURE__*/ regenerator_default.a.mark(function _callee() {\n                            var boxes, _this$context$inputIm3, decodeResult, imageResult, _this$context$inputIm4;\n                            return regenerator_default.a.wrap(function _callee$(_context) {\n                                while(1)switch(_context.prev = _context.next){\n                                    case 0:\n                                        boxes = this.getBoundingBoxes();\n                                        if (!boxes) {\n                                            _context.next = 12;\n                                            break;\n                                        }\n                                        _context.next = 4;\n                                        return this.context.decoder.decodeFromBoundingBoxes(boxes);\n                                    case 4:\n                                        _context.t0 = _context.sent;\n                                        if (_context.t0) {\n                                            _context.next = 7;\n                                            break;\n                                        }\n                                        _context.t0 = {};\n                                    case 7:\n                                        decodeResult = _context.t0;\n                                        decodeResult.boxes = boxes;\n                                        this.publishResult(decodeResult, (_this$context$inputIm3 = this.context.inputImageWrapper) === null || _this$context$inputIm3 === void 0 ? void 0 : _this$context$inputIm3.data);\n                                        _context.next = 16;\n                                        break;\n                                    case 12:\n                                        _context.next = 14;\n                                        return this.context.decoder.decodeFromImage(this.context.inputImageWrapper);\n                                    case 14:\n                                        imageResult = _context.sent;\n                                        if (imageResult) {\n                                            this.publishResult(imageResult, (_this$context$inputIm4 = this.context.inputImageWrapper) === null || _this$context$inputIm4 === void 0 ? void 0 : _this$context$inputIm4.data);\n                                        } else {\n                                            this.publishResult();\n                                        }\n                                    case 16:\n                                    case \"end\":\n                                        return _context.stop();\n                                }\n                            }, _callee, this);\n                        }));\n                        function locateAndDecode() {\n                            return _locateAndDecode.apply(this, arguments);\n                        }\n                        return locateAndDecode;\n                    }()\n                },\n                {\n                    key: \"startContinuousUpdate\",\n                    value: function startContinuousUpdate() {\n                        var _this$context$config4, _this4 = this;\n                        var next = null;\n                        var delay = 1000 / (((_this$context$config4 = this.context.config) === null || _this$context$config4 === void 0 ? void 0 : _this$context$config4.frequency) || 60);\n                        this.context.stopped = false;\n                        var context = this.context;\n                        var newFrame = function newFrame(timestamp) {\n                            next = next || timestamp;\n                            if (!context.stopped) {\n                                if (timestamp >= next) {\n                                    next += delay;\n                                    _this4.update();\n                                }\n                                window.requestAnimationFrame(newFrame);\n                            }\n                        };\n                        newFrame(performance.now());\n                    }\n                },\n                {\n                    key: \"start\",\n                    value: function start() {\n                        var _this$context$config5, _this$context$config6;\n                        if (this.context.onUIThread && ((_this$context$config5 = this.context.config) === null || _this$context$config5 === void 0 ? void 0 : (_this$context$config6 = _this$context$config5.inputStream) === null || _this$context$config6 === void 0 ? void 0 : _this$context$config6.type) === \"LiveStream\") {\n                            this.startContinuousUpdate();\n                        } else {\n                            this.update();\n                        }\n                    }\n                },\n                {\n                    key: \"stop\",\n                    value: function() {\n                        var _stop = asyncToGenerator_default()(/*#__PURE__*/ regenerator_default.a.mark(function _callee2() {\n                            var _this$context$config7;\n                            return regenerator_default.a.wrap(function _callee2$(_context2) {\n                                while(1)switch(_context2.prev = _context2.next){\n                                    case 0:\n                                        this.context.stopped = true;\n                                        adjustWorkerPool(0);\n                                        if (!((_this$context$config7 = this.context.config) !== null && _this$context$config7 !== void 0 && _this$context$config7.inputStream && this.context.config.inputStream.type === \"LiveStream\")) {\n                                            _context2.next = 6;\n                                            break;\n                                        }\n                                        _context2.next = 5;\n                                        return camera_access.release();\n                                    case 5:\n                                        this.context.inputStream.clearEventHandlers();\n                                    case 6:\n                                    case \"end\":\n                                        return _context2.stop();\n                                }\n                            }, _callee2, this);\n                        }));\n                        function stop() {\n                            return _stop.apply(this, arguments);\n                        }\n                        return stop;\n                    }()\n                },\n                {\n                    key: \"setReaders\",\n                    value: function setReaders(readers) {\n                        if (this.context.decoder) {\n                            this.context.decoder.setReaders(readers);\n                        }\n                        qworker_setReaders(readers);\n                    }\n                },\n                {\n                    key: \"registerReader\",\n                    value: function registerReader(name, reader) {\n                        barcode_decoder.registerReader(name, reader);\n                        if (this.context.decoder) {\n                            this.context.decoder.registerReader(name, reader);\n                        }\n                        qworker_registerReader(name, reader);\n                    }\n                }\n            ]);\n            return Quagga;\n        }();\n        // CONCATENATED MODULE: ./src/quagga.js\n        // eslint-disable-line no-unused-vars\n        var instance = new quagga_Quagga();\n        var _context = instance.context;\n        var QuaggaJSStaticInterface = {\n            init: function init(config, cb, imageWrapper) {\n                var quaggaInstance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : instance;\n                var promise;\n                if (!cb) {\n                    promise = new Promise(function(resolve, reject) {\n                        cb = function cb(err) {\n                            err ? reject(err) : resolve();\n                        };\n                    });\n                }\n                quaggaInstance.context.config = merge_default()({}, config_config, config);\n                // TODO #179: pending restructure in Issue #179, we are temp disabling workers\n                if (quaggaInstance.context.config.numOfWorkers > 0) {\n                    quaggaInstance.context.config.numOfWorkers = 0;\n                }\n                if (imageWrapper) {\n                    quaggaInstance.context.onUIThread = false;\n                    quaggaInstance.initializeData(imageWrapper);\n                    if (cb) {\n                        cb();\n                    }\n                } else {\n                    quaggaInstance.initInputStream(cb);\n                }\n                return promise;\n            },\n            start: function start() {\n                return instance.start();\n            },\n            stop: function stop() {\n                return instance.stop();\n            },\n            pause: function pause() {\n                _context.stopped = true;\n            },\n            onDetected: function onDetected(callback) {\n                if (!callback || typeof callback !== \"function\" && (typeof_default()(callback) !== \"object\" || !callback.callback)) {\n                    console.trace(\"* warning: Quagga.onDetected called with invalid callback, ignoring\");\n                    return;\n                }\n                events.subscribe(\"detected\", callback);\n            },\n            offDetected: function offDetected(callback) {\n                events.unsubscribe(\"detected\", callback);\n            },\n            onProcessed: function onProcessed(callback) {\n                if (!callback || typeof callback !== \"function\" && (typeof_default()(callback) !== \"object\" || !callback.callback)) {\n                    console.trace(\"* warning: Quagga.onProcessed called with invalid callback, ignoring\");\n                    return;\n                }\n                events.subscribe(\"processed\", callback);\n            },\n            offProcessed: function offProcessed(callback) {\n                events.unsubscribe(\"processed\", callback);\n            },\n            setReaders: function setReaders(readers) {\n                if (!readers) {\n                    console.trace(\"* warning: Quagga.setReaders called with no readers, ignoring\");\n                    return;\n                }\n                instance.setReaders(readers);\n            },\n            registerReader: function registerReader(name, reader) {\n                if (!name) {\n                    console.trace(\"* warning: Quagga.registerReader called with no name, ignoring\");\n                    return;\n                }\n                if (!reader) {\n                    console.trace(\"* warning: Quagga.registerReader called with no reader, ignoring\");\n                    return;\n                }\n                instance.registerReader(name, reader);\n            },\n            registerResultCollector: function registerResultCollector(resultCollector) {\n                if (resultCollector && typeof resultCollector.addResult === \"function\") {\n                    _context.resultCollector = resultCollector;\n                }\n            },\n            get canvas () {\n                return _context.canvasContainer;\n            },\n            decodeSingle: function decodeSingle(config, resultCallback) {\n                var _this = this;\n                var quaggaInstance = new quagga_Quagga();\n                config = merge_default()({\n                    inputStream: {\n                        type: \"ImageStream\",\n                        sequence: false,\n                        size: 800,\n                        src: config.src\n                    },\n                    numOfWorkers:  false ? 0 : 1,\n                    locator: {\n                        halfSample: false\n                    }\n                }, config);\n                // TODO #175: restructure worker support so that it will work with typescript using worker-loader\n                // https://webpack.js.org/loaders/worker-loader/\n                if (config.numOfWorkers > 0) {\n                    config.numOfWorkers = 0;\n                }\n                // workers require Worker and Blob support presently, so if no Blob or Worker then set\n                // workers to 0.\n                if (config.numOfWorkers > 0 && (typeof Blob === \"undefined\" || typeof Worker === \"undefined\")) {\n                    console.warn(\"* no Worker and/or Blob support - forcing numOfWorkers to 0\");\n                    config.numOfWorkers = 0;\n                }\n                return new Promise(function(resolve, reject) {\n                    try {\n                        _this.init(config, function() {\n                            events.once(\"processed\", function(result) {\n                                quaggaInstance.stop();\n                                if (resultCallback) {\n                                    resultCallback.call(null, result);\n                                }\n                                resolve(result);\n                            }, true);\n                            quaggaInstance.start();\n                        }, null, quaggaInstance);\n                    } catch (err) {\n                        reject(err);\n                    }\n                });\n            },\n            // add the usually expected \"default\" for use with require, build step won't allow us to\n            // write to module.exports so do it here.\n            get default () {\n                return QuaggaJSStaticInterface;\n            },\n            Readers: reader_namespaceObject,\n            CameraAccess: camera_access,\n            ImageDebug: image_debug[\"a\" /* default */ ],\n            ImageWrapper: image_wrapper[\"a\" /* default */ ],\n            ResultCollector: result_collector\n        };\n        /* harmony default export */ var quagga = __nested_webpack_exports__[\"default\"] = QuaggaJSStaticInterface;\n    // export BarcodeReader and other utilities for external plugins\n    /***/ }\n])[\"default\"]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ericblade/quagga2/lib/quagga.js\n");

/***/ })

};
;