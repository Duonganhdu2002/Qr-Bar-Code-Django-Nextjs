"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pngjs";
exports.ids = ["vendor-chunks/pngjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/pngjs/lib/bitmapper.js":
/*!*********************************************!*\
  !*** ./node_modules/pngjs/lib/bitmapper.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar interlaceUtils = __webpack_require__(/*! ./interlace */ \"(ssr)/./node_modules/pngjs/lib/interlace.js\");\nvar pixelBppMapper = [\n    // 0 - dummy entry\n    function() {},\n    // 1 - L\n    // 0: 0, 1: 0, 2: 0, 3: 0xff\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos === data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        var pixel = data[rawPos];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = 0xff;\n    },\n    // 2 - LA\n    // 0: 0, 1: 0, 2: 0, 3: 1\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos + 1 >= data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        var pixel = data[rawPos];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = data[rawPos + 1];\n    },\n    // 3 - RGB\n    // 0: 0, 1: 1, 2: 2, 3: 0xff\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos + 2 >= data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        pxData[pxPos] = data[rawPos];\n        pxData[pxPos + 1] = data[rawPos + 1];\n        pxData[pxPos + 2] = data[rawPos + 2];\n        pxData[pxPos + 3] = 0xff;\n    },\n    // 4 - RGBA\n    // 0: 0, 1: 1, 2: 2, 3: 3\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos + 3 >= data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        pxData[pxPos] = data[rawPos];\n        pxData[pxPos + 1] = data[rawPos + 1];\n        pxData[pxPos + 2] = data[rawPos + 2];\n        pxData[pxPos + 3] = data[rawPos + 3];\n    }\n];\nvar pixelBppCustomMapper = [\n    // 0 - dummy entry\n    function() {},\n    // 1 - L\n    // 0: 0, 1: 0, 2: 0, 3: 0xff\n    function(pxData, pixelData, pxPos, maxBit) {\n        var pixel = pixelData[0];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = maxBit;\n    },\n    // 2 - LA\n    // 0: 0, 1: 0, 2: 0, 3: 1\n    function(pxData, pixelData, pxPos) {\n        var pixel = pixelData[0];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = pixelData[1];\n    },\n    // 3 - RGB\n    // 0: 0, 1: 1, 2: 2, 3: 0xff\n    function(pxData, pixelData, pxPos, maxBit) {\n        pxData[pxPos] = pixelData[0];\n        pxData[pxPos + 1] = pixelData[1];\n        pxData[pxPos + 2] = pixelData[2];\n        pxData[pxPos + 3] = maxBit;\n    },\n    // 4 - RGBA\n    // 0: 0, 1: 1, 2: 2, 3: 3\n    function(pxData, pixelData, pxPos) {\n        pxData[pxPos] = pixelData[0];\n        pxData[pxPos + 1] = pixelData[1];\n        pxData[pxPos + 2] = pixelData[2];\n        pxData[pxPos + 3] = pixelData[3];\n    }\n];\nfunction bitRetriever(data, depth) {\n    var leftOver = [];\n    var i = 0;\n    function split() {\n        if (i === data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        var byte = data[i];\n        i++;\n        var byte8, byte7, byte6, byte5, byte4, byte3, byte2, byte1;\n        switch(depth){\n            default:\n                throw new Error(\"unrecognised depth\");\n            case 16:\n                byte2 = data[i];\n                i++;\n                leftOver.push((byte << 8) + byte2);\n                break;\n            case 4:\n                byte2 = byte & 0x0f;\n                byte1 = byte >> 4;\n                leftOver.push(byte1, byte2);\n                break;\n            case 2:\n                byte4 = byte & 3;\n                byte3 = byte >> 2 & 3;\n                byte2 = byte >> 4 & 3;\n                byte1 = byte >> 6 & 3;\n                leftOver.push(byte1, byte2, byte3, byte4);\n                break;\n            case 1:\n                byte8 = byte & 1;\n                byte7 = byte >> 1 & 1;\n                byte6 = byte >> 2 & 1;\n                byte5 = byte >> 3 & 1;\n                byte4 = byte >> 4 & 1;\n                byte3 = byte >> 5 & 1;\n                byte2 = byte >> 6 & 1;\n                byte1 = byte >> 7 & 1;\n                leftOver.push(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8);\n                break;\n        }\n    }\n    return {\n        get: function(count) {\n            while(leftOver.length < count){\n                split();\n            }\n            var returner = leftOver.slice(0, count);\n            leftOver = leftOver.slice(count);\n            return returner;\n        },\n        resetAfterLine: function() {\n            leftOver.length = 0;\n        },\n        end: function() {\n            if (i !== data.length) {\n                throw new Error(\"extra data found\");\n            }\n        }\n    };\n}\nfunction mapImage8Bit(image, pxData, getPxPos, bpp, data, rawPos) {\n    var imageWidth = image.width;\n    var imageHeight = image.height;\n    var imagePass = image.index;\n    for(var y = 0; y < imageHeight; y++){\n        for(var x = 0; x < imageWidth; x++){\n            var pxPos = getPxPos(x, y, imagePass);\n            pixelBppMapper[bpp](pxData, data, pxPos, rawPos);\n            rawPos += bpp; //eslint-disable-line no-param-reassign\n        }\n    }\n    return rawPos;\n}\nfunction mapImageCustomBit(image, pxData, getPxPos, bpp, bits, maxBit) {\n    var imageWidth = image.width;\n    var imageHeight = image.height;\n    var imagePass = image.index;\n    for(var y = 0; y < imageHeight; y++){\n        for(var x = 0; x < imageWidth; x++){\n            var pixelData = bits.get(bpp);\n            var pxPos = getPxPos(x, y, imagePass);\n            pixelBppCustomMapper[bpp](pxData, pixelData, pxPos, maxBit);\n        }\n        bits.resetAfterLine();\n    }\n}\nexports.dataToBitMap = function(data, bitmapInfo) {\n    var width = bitmapInfo.width;\n    var height = bitmapInfo.height;\n    var depth = bitmapInfo.depth;\n    var bpp = bitmapInfo.bpp;\n    var interlace = bitmapInfo.interlace;\n    if (depth !== 8) {\n        var bits = bitRetriever(data, depth);\n    }\n    var pxData;\n    if (depth <= 8) {\n        pxData = new Buffer(width * height * 4);\n    } else {\n        pxData = new Uint16Array(width * height * 4);\n    }\n    var maxBit = Math.pow(2, depth) - 1;\n    var rawPos = 0;\n    var images;\n    var getPxPos;\n    if (interlace) {\n        images = interlaceUtils.getImagePasses(width, height);\n        getPxPos = interlaceUtils.getInterlaceIterator(width, height);\n    } else {\n        var nonInterlacedPxPos = 0;\n        getPxPos = function() {\n            var returner = nonInterlacedPxPos;\n            nonInterlacedPxPos += 4;\n            return returner;\n        };\n        images = [\n            {\n                width: width,\n                height: height\n            }\n        ];\n    }\n    for(var imageIndex = 0; imageIndex < images.length; imageIndex++){\n        if (depth === 8) {\n            rawPos = mapImage8Bit(images[imageIndex], pxData, getPxPos, bpp, data, rawPos);\n        } else {\n            mapImageCustomBit(images[imageIndex], pxData, getPxPos, bpp, bits, maxBit);\n        }\n    }\n    if (depth === 8) {\n        if (rawPos !== data.length) {\n            throw new Error(\"extra data found\");\n        }\n    } else {\n        bits.end();\n    }\n    return pxData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/bitmapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/bitpacker.js":
/*!*********************************************!*\
  !*** ./node_modules/pngjs/lib/bitpacker.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/pngjs/lib/constants.js\");\nmodule.exports = function(dataIn, width, height, options) {\n    var outHasAlpha = [\n        constants.COLORTYPE_COLOR_ALPHA,\n        constants.COLORTYPE_ALPHA\n    ].indexOf(options.colorType) !== -1;\n    if (options.colorType === options.inputColorType) {\n        var bigEndian = function() {\n            var buffer = new ArrayBuffer(2);\n            new DataView(buffer).setInt16(0, 256, true);\n            // Int16Array uses the platform's endianness.\n            return new Int16Array(buffer)[0] !== 256;\n        }();\n        // If no need to convert to grayscale and alpha is present/absent in both, take a fast route\n        if (options.bitDepth === 8 || options.bitDepth === 16 && bigEndian) {\n            return dataIn;\n        }\n    }\n    // map to a UInt16 array if data is 16bit, fix endianness below\n    var data = options.bitDepth !== 16 ? dataIn : new Uint16Array(dataIn.buffer);\n    var maxValue = 255;\n    var inBpp = constants.COLORTYPE_TO_BPP_MAP[options.inputColorType];\n    if (inBpp === 4 && !options.inputHasAlpha) {\n        inBpp = 3;\n    }\n    var outBpp = constants.COLORTYPE_TO_BPP_MAP[options.colorType];\n    if (options.bitDepth === 16) {\n        maxValue = 65535;\n        outBpp *= 2;\n    }\n    var outData = new Buffer(width * height * outBpp);\n    var inIndex = 0;\n    var outIndex = 0;\n    var bgColor = options.bgColor || {};\n    if (bgColor.red === undefined) {\n        bgColor.red = maxValue;\n    }\n    if (bgColor.green === undefined) {\n        bgColor.green = maxValue;\n    }\n    if (bgColor.blue === undefined) {\n        bgColor.blue = maxValue;\n    }\n    function getRGBA() {\n        var red;\n        var green;\n        var blue;\n        var alpha = maxValue;\n        switch(options.inputColorType){\n            case constants.COLORTYPE_COLOR_ALPHA:\n                alpha = data[inIndex + 3];\n                red = data[inIndex];\n                green = data[inIndex + 1];\n                blue = data[inIndex + 2];\n                break;\n            case constants.COLORTYPE_COLOR:\n                red = data[inIndex];\n                green = data[inIndex + 1];\n                blue = data[inIndex + 2];\n                break;\n            case constants.COLORTYPE_ALPHA:\n                alpha = data[inIndex + 1];\n                red = data[inIndex];\n                green = red;\n                blue = red;\n                break;\n            case constants.COLORTYPE_GRAYSCALE:\n                red = data[inIndex];\n                green = red;\n                blue = red;\n                break;\n            default:\n                throw new Error(\"input color type:\" + options.inputColorType + \" is not supported at present\");\n        }\n        if (options.inputHasAlpha) {\n            if (!outHasAlpha) {\n                alpha /= maxValue;\n                red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), maxValue);\n                green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), maxValue);\n                blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), maxValue);\n            }\n        }\n        return {\n            red: red,\n            green: green,\n            blue: blue,\n            alpha: alpha\n        };\n    }\n    for(var y = 0; y < height; y++){\n        for(var x = 0; x < width; x++){\n            var rgba = getRGBA(data, inIndex);\n            switch(options.colorType){\n                case constants.COLORTYPE_COLOR_ALPHA:\n                case constants.COLORTYPE_COLOR:\n                    if (options.bitDepth === 8) {\n                        outData[outIndex] = rgba.red;\n                        outData[outIndex + 1] = rgba.green;\n                        outData[outIndex + 2] = rgba.blue;\n                        if (outHasAlpha) {\n                            outData[outIndex + 3] = rgba.alpha;\n                        }\n                    } else {\n                        outData.writeUInt16BE(rgba.red, outIndex);\n                        outData.writeUInt16BE(rgba.green, outIndex + 2);\n                        outData.writeUInt16BE(rgba.blue, outIndex + 4);\n                        if (outHasAlpha) {\n                            outData.writeUInt16BE(rgba.alpha, outIndex + 6);\n                        }\n                    }\n                    break;\n                case constants.COLORTYPE_ALPHA:\n                case constants.COLORTYPE_GRAYSCALE:\n                    // Convert to grayscale and alpha\n                    var grayscale = (rgba.red + rgba.green + rgba.blue) / 3;\n                    if (options.bitDepth === 8) {\n                        outData[outIndex] = grayscale;\n                        if (outHasAlpha) {\n                            outData[outIndex + 1] = rgba.alpha;\n                        }\n                    } else {\n                        outData.writeUInt16BE(grayscale, outIndex);\n                        if (outHasAlpha) {\n                            outData.writeUInt16BE(rgba.alpha, outIndex + 2);\n                        }\n                    }\n                    break;\n                default:\n                    throw new Error(\"unrecognised color Type \" + options.colorType);\n            }\n            inIndex += inBpp;\n            outIndex += outBpp;\n        }\n    }\n    return outData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/bitpacker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/chunkstream.js":
/*!***********************************************!*\
  !*** ./node_modules/pngjs/lib/chunkstream.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar util = __webpack_require__(/*! util */ \"util\");\nvar Stream = __webpack_require__(/*! stream */ \"stream\");\nvar ChunkStream = module.exports = function() {\n    Stream.call(this);\n    this._buffers = [];\n    this._buffered = 0;\n    this._reads = [];\n    this._paused = false;\n    this._encoding = \"utf8\";\n    this.writable = true;\n};\nutil.inherits(ChunkStream, Stream);\nChunkStream.prototype.read = function(length, callback) {\n    this._reads.push({\n        length: Math.abs(length),\n        allowLess: length < 0,\n        func: callback\n    });\n    process.nextTick((function() {\n        this._process();\n        // its paused and there is not enought data then ask for more\n        if (this._paused && this._reads.length > 0) {\n            this._paused = false;\n            this.emit(\"drain\");\n        }\n    }).bind(this));\n};\nChunkStream.prototype.write = function(data, encoding) {\n    if (!this.writable) {\n        this.emit(\"error\", new Error(\"Stream not writable\"));\n        return false;\n    }\n    var dataBuffer;\n    if (Buffer.isBuffer(data)) {\n        dataBuffer = data;\n    } else {\n        dataBuffer = new Buffer(data, encoding || this._encoding);\n    }\n    this._buffers.push(dataBuffer);\n    this._buffered += dataBuffer.length;\n    this._process();\n    // ok if there are no more read requests\n    if (this._reads && this._reads.length === 0) {\n        this._paused = true;\n    }\n    return this.writable && !this._paused;\n};\nChunkStream.prototype.end = function(data, encoding) {\n    if (data) {\n        this.write(data, encoding);\n    }\n    this.writable = false;\n    // already destroyed\n    if (!this._buffers) {\n        return;\n    }\n    // enqueue or handle end\n    if (this._buffers.length === 0) {\n        this._end();\n    } else {\n        this._buffers.push(null);\n        this._process();\n    }\n};\nChunkStream.prototype.destroySoon = ChunkStream.prototype.end;\nChunkStream.prototype._end = function() {\n    if (this._reads.length > 0) {\n        this.emit(\"error\", new Error(\"Unexpected end of input\"));\n    }\n    this.destroy();\n};\nChunkStream.prototype.destroy = function() {\n    if (!this._buffers) {\n        return;\n    }\n    this.writable = false;\n    this._reads = null;\n    this._buffers = null;\n    this.emit(\"close\");\n};\nChunkStream.prototype._processReadAllowingLess = function(read) {\n    // ok there is any data so that we can satisfy this request\n    this._reads.shift(); // == read\n    // first we need to peek into first buffer\n    var smallerBuf = this._buffers[0];\n    // ok there is more data than we need\n    if (smallerBuf.length > read.length) {\n        this._buffered -= read.length;\n        this._buffers[0] = smallerBuf.slice(read.length);\n        read.func.call(this, smallerBuf.slice(0, read.length));\n    } else {\n        // ok this is less than maximum length so use it all\n        this._buffered -= smallerBuf.length;\n        this._buffers.shift(); // == smallerBuf\n        read.func.call(this, smallerBuf);\n    }\n};\nChunkStream.prototype._processRead = function(read) {\n    this._reads.shift(); // == read\n    var pos = 0;\n    var count = 0;\n    var data = new Buffer(read.length);\n    // create buffer for all data\n    while(pos < read.length){\n        var buf = this._buffers[count++];\n        var len = Math.min(buf.length, read.length - pos);\n        buf.copy(data, pos, 0, len);\n        pos += len;\n        // last buffer wasn't used all so just slice it and leave\n        if (len !== buf.length) {\n            this._buffers[--count] = buf.slice(len);\n        }\n    }\n    // remove all used buffers\n    if (count > 0) {\n        this._buffers.splice(0, count);\n    }\n    this._buffered -= read.length;\n    read.func.call(this, data);\n};\nChunkStream.prototype._process = function() {\n    try {\n        // as long as there is any data and read requests\n        while(this._buffered > 0 && this._reads && this._reads.length > 0){\n            var read = this._reads[0];\n            // read any data (but no more than length)\n            if (read.allowLess) {\n                this._processReadAllowingLess(read);\n            } else if (this._buffered >= read.length) {\n                // ok we can meet some expectations\n                this._processRead(read);\n            } else {\n                break;\n            }\n        }\n        if (this._buffers && !this.writable) {\n            this._end();\n        }\n    } catch (ex) {\n        this.emit(\"error\", ex);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/chunkstream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/constants.js":
/*!*********************************************!*\
  !*** ./node_modules/pngjs/lib/constants.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    PNG_SIGNATURE: [\n        0x89,\n        0x50,\n        0x4e,\n        0x47,\n        0x0d,\n        0x0a,\n        0x1a,\n        0x0a\n    ],\n    TYPE_IHDR: 0x49484452,\n    TYPE_IEND: 0x49454e44,\n    TYPE_IDAT: 0x49444154,\n    TYPE_PLTE: 0x504c5445,\n    TYPE_tRNS: 0x74524e53,\n    TYPE_gAMA: 0x67414d41,\n    // color-type bits\n    COLORTYPE_GRAYSCALE: 0,\n    COLORTYPE_PALETTE: 1,\n    COLORTYPE_COLOR: 2,\n    COLORTYPE_ALPHA: 4,\n    // color-type combinations\n    COLORTYPE_PALETTE_COLOR: 3,\n    COLORTYPE_COLOR_ALPHA: 6,\n    COLORTYPE_TO_BPP_MAP: {\n        0: 1,\n        2: 3,\n        3: 1,\n        4: 2,\n        6: 4\n    },\n    GAMMA_DIVISION: 100000\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUdBQSxPQUFPQyxPQUFPLEdBQUc7SUFFZkMsZUFBZTtRQUFDO1FBQU07UUFBTTtRQUFNO1FBQU07UUFBTTtRQUFNO1FBQU07S0FBSztJQUUvREMsV0FBVztJQUNYQyxXQUFXO0lBQ1hDLFdBQVc7SUFDWEMsV0FBVztJQUNYQyxXQUFXO0lBQ1hDLFdBQVc7SUFFWCxrQkFBa0I7SUFDbEJDLHFCQUFxQjtJQUNyQkMsbUJBQW1CO0lBQ25CQyxpQkFBaUI7SUFDakJDLGlCQUFpQjtJQUVqQiwwQkFBMEI7SUFDMUJDLHlCQUF5QjtJQUN6QkMsdUJBQXVCO0lBRXZCQyxzQkFBc0I7UUFDcEIsR0FBRztRQUNILEdBQUc7UUFDSCxHQUFHO1FBQ0gsR0FBRztRQUNILEdBQUc7SUFDTDtJQUVBQyxnQkFBZ0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xci1jb2RlLy4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9jb25zdGFudHMuanM/NThmNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgUE5HX1NJR05BVFVSRTogWzB4ODksIDB4NTAsIDB4NGUsIDB4NDcsIDB4MGQsIDB4MGEsIDB4MWEsIDB4MGFdLFxuXG4gIFRZUEVfSUhEUjogMHg0OTQ4NDQ1MixcbiAgVFlQRV9JRU5EOiAweDQ5NDU0ZTQ0LFxuICBUWVBFX0lEQVQ6IDB4NDk0NDQxNTQsXG4gIFRZUEVfUExURTogMHg1MDRjNTQ0NSxcbiAgVFlQRV90Uk5TOiAweDc0NTI0ZTUzLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuICBUWVBFX2dBTUE6IDB4Njc0MTRkNDEsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cbiAgLy8gY29sb3ItdHlwZSBiaXRzXG4gIENPTE9SVFlQRV9HUkFZU0NBTEU6IDAsXG4gIENPTE9SVFlQRV9QQUxFVFRFOiAxLFxuICBDT0xPUlRZUEVfQ09MT1I6IDIsXG4gIENPTE9SVFlQRV9BTFBIQTogNCwgLy8gZS5nLiBncmF5c2NhbGUgYW5kIGFscGhhXG5cbiAgLy8gY29sb3ItdHlwZSBjb21iaW5hdGlvbnNcbiAgQ09MT1JUWVBFX1BBTEVUVEVfQ09MT1I6IDMsXG4gIENPTE9SVFlQRV9DT0xPUl9BTFBIQTogNixcblxuICBDT0xPUlRZUEVfVE9fQlBQX01BUDoge1xuICAgIDA6IDEsXG4gICAgMjogMyxcbiAgICAzOiAxLFxuICAgIDQ6IDIsXG4gICAgNjogNFxuICB9LFxuXG4gIEdBTU1BX0RJVklTSU9OOiAxMDAwMDBcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIlBOR19TSUdOQVRVUkUiLCJUWVBFX0lIRFIiLCJUWVBFX0lFTkQiLCJUWVBFX0lEQVQiLCJUWVBFX1BMVEUiLCJUWVBFX3RSTlMiLCJUWVBFX2dBTUEiLCJDT0xPUlRZUEVfR1JBWVNDQUxFIiwiQ09MT1JUWVBFX1BBTEVUVEUiLCJDT0xPUlRZUEVfQ09MT1IiLCJDT0xPUlRZUEVfQUxQSEEiLCJDT0xPUlRZUEVfUEFMRVRURV9DT0xPUiIsIkNPTE9SVFlQRV9DT0xPUl9BTFBIQSIsIkNPTE9SVFlQRV9UT19CUFBfTUFQIiwiR0FNTUFfRElWSVNJT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/crc.js":
/*!***************************************!*\
  !*** ./node_modules/pngjs/lib/crc.js ***!
  \***************************************/
/***/ ((module) => {

eval("\nvar crcTable = [];\n(function() {\n    for(var i = 0; i < 256; i++){\n        var currentCrc = i;\n        for(var j = 0; j < 8; j++){\n            if (currentCrc & 1) {\n                currentCrc = 0xedb88320 ^ currentCrc >>> 1;\n            } else {\n                currentCrc = currentCrc >>> 1;\n            }\n        }\n        crcTable[i] = currentCrc;\n    }\n})();\nvar CrcCalculator = module.exports = function() {\n    this._crc = -1;\n};\nCrcCalculator.prototype.write = function(data) {\n    for(var i = 0; i < data.length; i++){\n        this._crc = crcTable[(this._crc ^ data[i]) & 0xff] ^ this._crc >>> 8;\n    }\n    return true;\n};\nCrcCalculator.prototype.crc32 = function() {\n    return this._crc ^ -1;\n};\nCrcCalculator.crc32 = function(buf) {\n    var crc = -1;\n    for(var i = 0; i < buf.length; i++){\n        crc = crcTable[(crc ^ buf[i]) & 0xff] ^ crc >>> 8;\n    }\n    return crc ^ -1;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2NyYy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFdBQVcsRUFBRTtBQUVoQjtJQUNDLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJLEtBQUtBLElBQUs7UUFDNUIsSUFBSUMsYUFBYUQ7UUFDakIsSUFBSyxJQUFJRSxJQUFJLEdBQUdBLElBQUksR0FBR0EsSUFBSztZQUMxQixJQUFJRCxhQUFhLEdBQUc7Z0JBQ2xCQSxhQUFhLGFBQWNBLGVBQWU7WUFDNUMsT0FDSztnQkFDSEEsYUFBYUEsZUFBZTtZQUM5QjtRQUNGO1FBQ0FGLFFBQVEsQ0FBQ0MsRUFBRSxHQUFHQztJQUNoQjtBQUNGO0FBRUEsSUFBSUUsZ0JBQWdCQyxPQUFPQyxPQUFPLEdBQUc7SUFDbkMsSUFBSSxDQUFDQyxJQUFJLEdBQUcsQ0FBQztBQUNmO0FBRUFILGNBQWNJLFNBQVMsQ0FBQ0MsS0FBSyxHQUFHLFNBQVNDLElBQUk7SUFFM0MsSUFBSyxJQUFJVCxJQUFJLEdBQUdBLElBQUlTLEtBQUtDLE1BQU0sRUFBRVYsSUFBSztRQUNwQyxJQUFJLENBQUNNLElBQUksR0FBR1AsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDTyxJQUFJLEdBQUdHLElBQUksQ0FBQ1QsRUFBRSxJQUFJLEtBQUssR0FBSSxJQUFJLENBQUNNLElBQUksS0FBSztJQUN0RTtJQUNBLE9BQU87QUFDVDtBQUVBSCxjQUFjSSxTQUFTLENBQUNJLEtBQUssR0FBRztJQUM5QixPQUFPLElBQUksQ0FBQ0wsSUFBSSxHQUFHLENBQUM7QUFDdEI7QUFHQUgsY0FBY1EsS0FBSyxHQUFHLFNBQVNDLEdBQUc7SUFFaEMsSUFBSUMsTUFBTSxDQUFDO0lBQ1gsSUFBSyxJQUFJYixJQUFJLEdBQUdBLElBQUlZLElBQUlGLE1BQU0sRUFBRVYsSUFBSztRQUNuQ2EsTUFBTWQsUUFBUSxDQUFDLENBQUNjLE1BQU1ELEdBQUcsQ0FBQ1osRUFBRSxJQUFJLEtBQUssR0FBSWEsUUFBUTtJQUNuRDtJQUNBLE9BQU9BLE1BQU0sQ0FBQztBQUNoQiIsInNvdXJjZXMiOlsid2VicGFjazovL3FyLWNvZGUvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2NyYy5qcz83MGZjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGNyY1RhYmxlID0gW107XG5cbihmdW5jdGlvbigpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgIHZhciBjdXJyZW50Q3JjID0gaTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IDg7IGorKykge1xuICAgICAgaWYgKGN1cnJlbnRDcmMgJiAxKSB7XG4gICAgICAgIGN1cnJlbnRDcmMgPSAweGVkYjg4MzIwIF4gKGN1cnJlbnRDcmMgPj4+IDEpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGN1cnJlbnRDcmMgPSBjdXJyZW50Q3JjID4+PiAxO1xuICAgICAgfVxuICAgIH1cbiAgICBjcmNUYWJsZVtpXSA9IGN1cnJlbnRDcmM7XG4gIH1cbn0oKSk7XG5cbnZhciBDcmNDYWxjdWxhdG9yID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY3JjID0gLTE7XG59O1xuXG5DcmNDYWxjdWxhdG9yLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGRhdGEpIHtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLl9jcmMgPSBjcmNUYWJsZVsodGhpcy5fY3JjIF4gZGF0YVtpXSkgJiAweGZmXSBeICh0aGlzLl9jcmMgPj4+IDgpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuQ3JjQ2FsY3VsYXRvci5wcm90b3R5cGUuY3JjMzIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2NyYyBeIC0xO1xufTtcblxuXG5DcmNDYWxjdWxhdG9yLmNyYzMyID0gZnVuY3Rpb24oYnVmKSB7XG5cbiAgdmFyIGNyYyA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1Zi5sZW5ndGg7IGkrKykge1xuICAgIGNyYyA9IGNyY1RhYmxlWyhjcmMgXiBidWZbaV0pICYgMHhmZl0gXiAoY3JjID4+PiA4KTtcbiAgfVxuICByZXR1cm4gY3JjIF4gLTE7XG59O1xuIl0sIm5hbWVzIjpbImNyY1RhYmxlIiwiaSIsImN1cnJlbnRDcmMiLCJqIiwiQ3JjQ2FsY3VsYXRvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJfY3JjIiwicHJvdG90eXBlIiwid3JpdGUiLCJkYXRhIiwibGVuZ3RoIiwiY3JjMzIiLCJidWYiLCJjcmMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/crc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/filter-pack.js":
/*!***********************************************!*\
  !*** ./node_modules/pngjs/lib/filter-pack.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar paethPredictor = __webpack_require__(/*! ./paeth-predictor */ \"(ssr)/./node_modules/pngjs/lib/paeth-predictor.js\");\nfunction filterNone(pxData, pxPos, byteWidth, rawData, rawPos) {\n    for(var x = 0; x < byteWidth; x++){\n        rawData[rawPos + x] = pxData[pxPos + x];\n    }\n}\nfunction filterSumNone(pxData, pxPos, byteWidth) {\n    var sum = 0;\n    var length = pxPos + byteWidth;\n    for(var i = pxPos; i < length; i++){\n        sum += Math.abs(pxData[i]);\n    }\n    return sum;\n}\nfunction filterSub(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {\n    for(var x = 0; x < byteWidth; x++){\n        var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        var val = pxData[pxPos + x] - left;\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumSub(pxData, pxPos, byteWidth, bpp) {\n    var sum = 0;\n    for(var x = 0; x < byteWidth; x++){\n        var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        var val = pxData[pxPos + x] - left;\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nfunction filterUp(pxData, pxPos, byteWidth, rawData, rawPos) {\n    for(var x = 0; x < byteWidth; x++){\n        var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        var val = pxData[pxPos + x] - up;\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumUp(pxData, pxPos, byteWidth) {\n    var sum = 0;\n    var length = pxPos + byteWidth;\n    for(var x = pxPos; x < length; x++){\n        var up = pxPos > 0 ? pxData[x - byteWidth] : 0;\n        var val = pxData[x] - up;\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nfunction filterAvg(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {\n    for(var x = 0; x < byteWidth; x++){\n        var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        var val = pxData[pxPos + x] - (left + up >> 1);\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumAvg(pxData, pxPos, byteWidth, bpp) {\n    var sum = 0;\n    for(var x = 0; x < byteWidth; x++){\n        var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        var val = pxData[pxPos + x] - (left + up >> 1);\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nfunction filterPaeth(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {\n    for(var x = 0; x < byteWidth; x++){\n        var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        var upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;\n        var val = pxData[pxPos + x] - paethPredictor(left, up, upleft);\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumPaeth(pxData, pxPos, byteWidth, bpp) {\n    var sum = 0;\n    for(var x = 0; x < byteWidth; x++){\n        var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        var upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;\n        var val = pxData[pxPos + x] - paethPredictor(left, up, upleft);\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nvar filters = {\n    0: filterNone,\n    1: filterSub,\n    2: filterUp,\n    3: filterAvg,\n    4: filterPaeth\n};\nvar filterSums = {\n    0: filterSumNone,\n    1: filterSumSub,\n    2: filterSumUp,\n    3: filterSumAvg,\n    4: filterSumPaeth\n};\nmodule.exports = function(pxData, width, height, options, bpp) {\n    var filterTypes;\n    if (!(\"filterType\" in options) || options.filterType === -1) {\n        filterTypes = [\n            0,\n            1,\n            2,\n            3,\n            4\n        ];\n    } else if (typeof options.filterType === \"number\") {\n        filterTypes = [\n            options.filterType\n        ];\n    } else {\n        throw new Error(\"unrecognised filter types\");\n    }\n    if (options.bitDepth === 16) {\n        bpp *= 2;\n    }\n    var byteWidth = width * bpp;\n    var rawPos = 0;\n    var pxPos = 0;\n    var rawData = new Buffer((byteWidth + 1) * height);\n    var sel = filterTypes[0];\n    for(var y = 0; y < height; y++){\n        if (filterTypes.length > 1) {\n            // find best filter for this line (with lowest sum of values)\n            var min = Infinity;\n            for(var i = 0; i < filterTypes.length; i++){\n                var sum = filterSums[filterTypes[i]](pxData, pxPos, byteWidth, bpp);\n                if (sum < min) {\n                    sel = filterTypes[i];\n                    min = sum;\n                }\n            }\n        }\n        rawData[rawPos] = sel;\n        rawPos++;\n        filters[sel](pxData, pxPos, byteWidth, rawData, rawPos, bpp);\n        rawPos += byteWidth;\n        pxPos += byteWidth;\n    }\n    return rawData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/filter-pack.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/filter-parse-async.js":
/*!******************************************************!*\
  !*** ./node_modules/pngjs/lib/filter-parse-async.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar util = __webpack_require__(/*! util */ \"util\");\nvar ChunkStream = __webpack_require__(/*! ./chunkstream */ \"(ssr)/./node_modules/pngjs/lib/chunkstream.js\");\nvar Filter = __webpack_require__(/*! ./filter-parse */ \"(ssr)/./node_modules/pngjs/lib/filter-parse.js\");\nvar FilterAsync = module.exports = function(bitmapInfo) {\n    ChunkStream.call(this);\n    var buffers = [];\n    var that = this;\n    this._filter = new Filter(bitmapInfo, {\n        read: this.read.bind(this),\n        write: function(buffer) {\n            buffers.push(buffer);\n        },\n        complete: function() {\n            that.emit(\"complete\", Buffer.concat(buffers));\n        }\n    });\n    this._filter.start();\n};\nutil.inherits(FilterAsync, ChunkStream);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2ZpbHRlci1wYXJzZS1hc3luYy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlDLGNBQWNELG1CQUFPQSxDQUFDO0FBQzFCLElBQUlFLFNBQVNGLG1CQUFPQSxDQUFDO0FBR3JCLElBQUlHLGNBQWNDLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxVQUFVO0lBQ3BETCxZQUFZTSxJQUFJLENBQUMsSUFBSTtJQUVyQixJQUFJQyxVQUFVLEVBQUU7SUFDaEIsSUFBSUMsT0FBTyxJQUFJO0lBQ2YsSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSVIsT0FBT0ksWUFBWTtRQUNwQ0ssTUFBTSxJQUFJLENBQUNBLElBQUksQ0FBQ0MsSUFBSSxDQUFDLElBQUk7UUFDekJDLE9BQU8sU0FBU0MsTUFBTTtZQUNwQk4sUUFBUU8sSUFBSSxDQUFDRDtRQUNmO1FBQ0FFLFVBQVU7WUFDUlAsS0FBS1EsSUFBSSxDQUFDLFlBQVlDLE9BQU9DLE1BQU0sQ0FBQ1g7UUFDdEM7SUFDRjtJQUVBLElBQUksQ0FBQ0UsT0FBTyxDQUFDVSxLQUFLO0FBQ3BCO0FBQ0FyQixLQUFLc0IsUUFBUSxDQUFDbEIsYUFBYUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xci1jb2RlLy4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9maWx0ZXItcGFyc2UtYXN5bmMuanM/MWM1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIENodW5rU3RyZWFtID0gcmVxdWlyZSgnLi9jaHVua3N0cmVhbScpO1xudmFyIEZpbHRlciA9IHJlcXVpcmUoJy4vZmlsdGVyLXBhcnNlJyk7XG5cblxudmFyIEZpbHRlckFzeW5jID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihiaXRtYXBJbmZvKSB7XG4gIENodW5rU3RyZWFtLmNhbGwodGhpcyk7XG5cbiAgdmFyIGJ1ZmZlcnMgPSBbXTtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB0aGlzLl9maWx0ZXIgPSBuZXcgRmlsdGVyKGJpdG1hcEluZm8sIHtcbiAgICByZWFkOiB0aGlzLnJlYWQuYmluZCh0aGlzKSxcbiAgICB3cml0ZTogZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgICBidWZmZXJzLnB1c2goYnVmZmVyKTtcbiAgICB9LFxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoYXQuZW1pdCgnY29tcGxldGUnLCBCdWZmZXIuY29uY2F0KGJ1ZmZlcnMpKTtcbiAgICB9XG4gIH0pO1xuXG4gIHRoaXMuX2ZpbHRlci5zdGFydCgpO1xufTtcbnV0aWwuaW5oZXJpdHMoRmlsdGVyQXN5bmMsIENodW5rU3RyZWFtKTtcbiJdLCJuYW1lcyI6WyJ1dGlsIiwicmVxdWlyZSIsIkNodW5rU3RyZWFtIiwiRmlsdGVyIiwiRmlsdGVyQXN5bmMiLCJtb2R1bGUiLCJleHBvcnRzIiwiYml0bWFwSW5mbyIsImNhbGwiLCJidWZmZXJzIiwidGhhdCIsIl9maWx0ZXIiLCJyZWFkIiwiYmluZCIsIndyaXRlIiwiYnVmZmVyIiwicHVzaCIsImNvbXBsZXRlIiwiZW1pdCIsIkJ1ZmZlciIsImNvbmNhdCIsInN0YXJ0IiwiaW5oZXJpdHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/filter-parse-async.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/filter-parse-sync.js":
/*!*****************************************************!*\
  !*** ./node_modules/pngjs/lib/filter-parse-sync.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar SyncReader = __webpack_require__(/*! ./sync-reader */ \"(ssr)/./node_modules/pngjs/lib/sync-reader.js\");\nvar Filter = __webpack_require__(/*! ./filter-parse */ \"(ssr)/./node_modules/pngjs/lib/filter-parse.js\");\nexports.process = function(inBuffer, bitmapInfo) {\n    var outBuffers = [];\n    var reader = new SyncReader(inBuffer);\n    var filter = new Filter(bitmapInfo, {\n        read: reader.read.bind(reader),\n        write: function(bufferPart) {\n            outBuffers.push(bufferPart);\n        },\n        complete: function() {}\n    });\n    filter.start();\n    reader.process();\n    return Buffer.concat(outBuffers);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2ZpbHRlci1wYXJzZS1zeW5jLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsYUFBYUMsbUJBQU9BLENBQUM7QUFDekIsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUM7QUFHckJFLGVBQWUsR0FBRyxTQUFTRSxRQUFRLEVBQUVDLFVBQVU7SUFFN0MsSUFBSUMsYUFBYSxFQUFFO0lBQ25CLElBQUlDLFNBQVMsSUFBSVIsV0FBV0s7SUFDNUIsSUFBSUksU0FBUyxJQUFJUCxPQUFPSSxZQUFZO1FBQ2xDSSxNQUFNRixPQUFPRSxJQUFJLENBQUNDLElBQUksQ0FBQ0g7UUFDdkJJLE9BQU8sU0FBU0MsVUFBVTtZQUN4Qk4sV0FBV08sSUFBSSxDQUFDRDtRQUNsQjtRQUNBRSxVQUFVLFlBQ1Y7SUFDRjtJQUVBTixPQUFPTyxLQUFLO0lBQ1pSLE9BQU9KLE9BQU87SUFFZCxPQUFPYSxPQUFPQyxNQUFNLENBQUNYO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXItY29kZS8uL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvZmlsdGVyLXBhcnNlLXN5bmMuanM/NDFkYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBTeW5jUmVhZGVyID0gcmVxdWlyZSgnLi9zeW5jLXJlYWRlcicpO1xudmFyIEZpbHRlciA9IHJlcXVpcmUoJy4vZmlsdGVyLXBhcnNlJyk7XG5cblxuZXhwb3J0cy5wcm9jZXNzID0gZnVuY3Rpb24oaW5CdWZmZXIsIGJpdG1hcEluZm8pIHtcblxuICB2YXIgb3V0QnVmZmVycyA9IFtdO1xuICB2YXIgcmVhZGVyID0gbmV3IFN5bmNSZWFkZXIoaW5CdWZmZXIpO1xuICB2YXIgZmlsdGVyID0gbmV3IEZpbHRlcihiaXRtYXBJbmZvLCB7XG4gICAgcmVhZDogcmVhZGVyLnJlYWQuYmluZChyZWFkZXIpLFxuICAgIHdyaXRlOiBmdW5jdGlvbihidWZmZXJQYXJ0KSB7XG4gICAgICBvdXRCdWZmZXJzLnB1c2goYnVmZmVyUGFydCk7XG4gICAgfSxcbiAgICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgfVxuICB9KTtcblxuICBmaWx0ZXIuc3RhcnQoKTtcbiAgcmVhZGVyLnByb2Nlc3MoKTtcblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXRCdWZmZXJzKTtcbn07Il0sIm5hbWVzIjpbIlN5bmNSZWFkZXIiLCJyZXF1aXJlIiwiRmlsdGVyIiwiZXhwb3J0cyIsInByb2Nlc3MiLCJpbkJ1ZmZlciIsImJpdG1hcEluZm8iLCJvdXRCdWZmZXJzIiwicmVhZGVyIiwiZmlsdGVyIiwicmVhZCIsImJpbmQiLCJ3cml0ZSIsImJ1ZmZlclBhcnQiLCJwdXNoIiwiY29tcGxldGUiLCJzdGFydCIsIkJ1ZmZlciIsImNvbmNhdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/filter-parse-sync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/filter-parse.js":
/*!************************************************!*\
  !*** ./node_modules/pngjs/lib/filter-parse.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar interlaceUtils = __webpack_require__(/*! ./interlace */ \"(ssr)/./node_modules/pngjs/lib/interlace.js\");\nvar paethPredictor = __webpack_require__(/*! ./paeth-predictor */ \"(ssr)/./node_modules/pngjs/lib/paeth-predictor.js\");\nfunction getByteWidth(width, bpp, depth) {\n    var byteWidth = width * bpp;\n    if (depth !== 8) {\n        byteWidth = Math.ceil(byteWidth / (8 / depth));\n    }\n    return byteWidth;\n}\nvar Filter = module.exports = function(bitmapInfo, dependencies) {\n    var width = bitmapInfo.width;\n    var height = bitmapInfo.height;\n    var interlace = bitmapInfo.interlace;\n    var bpp = bitmapInfo.bpp;\n    var depth = bitmapInfo.depth;\n    this.read = dependencies.read;\n    this.write = dependencies.write;\n    this.complete = dependencies.complete;\n    this._imageIndex = 0;\n    this._images = [];\n    if (interlace) {\n        var passes = interlaceUtils.getImagePasses(width, height);\n        for(var i = 0; i < passes.length; i++){\n            this._images.push({\n                byteWidth: getByteWidth(passes[i].width, bpp, depth),\n                height: passes[i].height,\n                lineIndex: 0\n            });\n        }\n    } else {\n        this._images.push({\n            byteWidth: getByteWidth(width, bpp, depth),\n            height: height,\n            lineIndex: 0\n        });\n    }\n    // when filtering the line we look at the pixel to the left\n    // the spec also says it is done on a byte level regardless of the number of pixels\n    // so if the depth is byte compatible (8 or 16) we subtract the bpp in order to compare back\n    // a pixel rather than just a different byte part. However if we are sub byte, we ignore.\n    if (depth === 8) {\n        this._xComparison = bpp;\n    } else if (depth === 16) {\n        this._xComparison = bpp * 2;\n    } else {\n        this._xComparison = 1;\n    }\n};\nFilter.prototype.start = function() {\n    this.read(this._images[this._imageIndex].byteWidth + 1, this._reverseFilterLine.bind(this));\n};\nFilter.prototype._unFilterType1 = function(rawData, unfilteredLine, byteWidth) {\n    var xComparison = this._xComparison;\n    var xBiggerThan = xComparison - 1;\n    for(var x = 0; x < byteWidth; x++){\n        var rawByte = rawData[1 + x];\n        var f1Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;\n        unfilteredLine[x] = rawByte + f1Left;\n    }\n};\nFilter.prototype._unFilterType2 = function(rawData, unfilteredLine, byteWidth) {\n    var lastLine = this._lastLine;\n    for(var x = 0; x < byteWidth; x++){\n        var rawByte = rawData[1 + x];\n        var f2Up = lastLine ? lastLine[x] : 0;\n        unfilteredLine[x] = rawByte + f2Up;\n    }\n};\nFilter.prototype._unFilterType3 = function(rawData, unfilteredLine, byteWidth) {\n    var xComparison = this._xComparison;\n    var xBiggerThan = xComparison - 1;\n    var lastLine = this._lastLine;\n    for(var x = 0; x < byteWidth; x++){\n        var rawByte = rawData[1 + x];\n        var f3Up = lastLine ? lastLine[x] : 0;\n        var f3Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;\n        var f3Add = Math.floor((f3Left + f3Up) / 2);\n        unfilteredLine[x] = rawByte + f3Add;\n    }\n};\nFilter.prototype._unFilterType4 = function(rawData, unfilteredLine, byteWidth) {\n    var xComparison = this._xComparison;\n    var xBiggerThan = xComparison - 1;\n    var lastLine = this._lastLine;\n    for(var x = 0; x < byteWidth; x++){\n        var rawByte = rawData[1 + x];\n        var f4Up = lastLine ? lastLine[x] : 0;\n        var f4Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;\n        var f4UpLeft = x > xBiggerThan && lastLine ? lastLine[x - xComparison] : 0;\n        var f4Add = paethPredictor(f4Left, f4Up, f4UpLeft);\n        unfilteredLine[x] = rawByte + f4Add;\n    }\n};\nFilter.prototype._reverseFilterLine = function(rawData) {\n    var filter = rawData[0];\n    var unfilteredLine;\n    var currentImage = this._images[this._imageIndex];\n    var byteWidth = currentImage.byteWidth;\n    if (filter === 0) {\n        unfilteredLine = rawData.slice(1, byteWidth + 1);\n    } else {\n        unfilteredLine = new Buffer(byteWidth);\n        switch(filter){\n            case 1:\n                this._unFilterType1(rawData, unfilteredLine, byteWidth);\n                break;\n            case 2:\n                this._unFilterType2(rawData, unfilteredLine, byteWidth);\n                break;\n            case 3:\n                this._unFilterType3(rawData, unfilteredLine, byteWidth);\n                break;\n            case 4:\n                this._unFilterType4(rawData, unfilteredLine, byteWidth);\n                break;\n            default:\n                throw new Error(\"Unrecognised filter type - \" + filter);\n        }\n    }\n    this.write(unfilteredLine);\n    currentImage.lineIndex++;\n    if (currentImage.lineIndex >= currentImage.height) {\n        this._lastLine = null;\n        this._imageIndex++;\n        currentImage = this._images[this._imageIndex];\n    } else {\n        this._lastLine = unfilteredLine;\n    }\n    if (currentImage) {\n        // read, using the byte width that may be from the new current image\n        this.read(currentImage.byteWidth + 1, this._reverseFilterLine.bind(this));\n    } else {\n        this._lastLine = null;\n        this.complete();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/filter-parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/format-normaliser.js":
/*!*****************************************************!*\
  !*** ./node_modules/pngjs/lib/format-normaliser.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\nfunction dePalette(indata, outdata, width, height, palette) {\n    var pxPos = 0;\n    // use values from palette\n    for(var y = 0; y < height; y++){\n        for(var x = 0; x < width; x++){\n            var color = palette[indata[pxPos]];\n            if (!color) {\n                throw new Error(\"index \" + indata[pxPos] + \" not in palette\");\n            }\n            for(var i = 0; i < 4; i++){\n                outdata[pxPos + i] = color[i];\n            }\n            pxPos += 4;\n        }\n    }\n}\nfunction replaceTransparentColor(indata, outdata, width, height, transColor) {\n    var pxPos = 0;\n    for(var y = 0; y < height; y++){\n        for(var x = 0; x < width; x++){\n            var makeTrans = false;\n            if (transColor.length === 1) {\n                if (transColor[0] === indata[pxPos]) {\n                    makeTrans = true;\n                }\n            } else if (transColor[0] === indata[pxPos] && transColor[1] === indata[pxPos + 1] && transColor[2] === indata[pxPos + 2]) {\n                makeTrans = true;\n            }\n            if (makeTrans) {\n                for(var i = 0; i < 4; i++){\n                    outdata[pxPos + i] = 0;\n                }\n            }\n            pxPos += 4;\n        }\n    }\n}\nfunction scaleDepth(indata, outdata, width, height, depth) {\n    var maxOutSample = 255;\n    var maxInSample = Math.pow(2, depth) - 1;\n    var pxPos = 0;\n    for(var y = 0; y < height; y++){\n        for(var x = 0; x < width; x++){\n            for(var i = 0; i < 4; i++){\n                outdata[pxPos + i] = Math.floor(indata[pxPos + i] * maxOutSample / maxInSample + 0.5);\n            }\n            pxPos += 4;\n        }\n    }\n}\nmodule.exports = function(indata, imageData) {\n    var depth = imageData.depth;\n    var width = imageData.width;\n    var height = imageData.height;\n    var colorType = imageData.colorType;\n    var transColor = imageData.transColor;\n    var palette = imageData.palette;\n    var outdata = indata; // only different for 16 bits\n    if (colorType === 3) {\n        dePalette(indata, outdata, width, height, palette);\n    } else {\n        if (transColor) {\n            replaceTransparentColor(indata, outdata, width, height, transColor);\n        }\n        // if it needs scaling\n        if (depth !== 8) {\n            // if we need to change the buffer size\n            if (depth === 16) {\n                outdata = new Buffer(width * height * 4);\n            }\n            scaleDepth(indata, outdata, width, height, depth);\n        }\n    }\n    return outdata;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2Zvcm1hdC1ub3JtYWxpc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsU0FBU0EsVUFBVUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxPQUFPO0lBQ3hELElBQUlDLFFBQVE7SUFDWiwwQkFBMEI7SUFDMUIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILFFBQVFHLElBQUs7UUFDL0IsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlMLE9BQU9LLElBQUs7WUFDOUIsSUFBSUMsUUFBUUosT0FBTyxDQUFDSixNQUFNLENBQUNLLE1BQU0sQ0FBQztZQUVsQyxJQUFJLENBQUNHLE9BQU87Z0JBQ1YsTUFBTSxJQUFJQyxNQUFNLFdBQVdULE1BQU0sQ0FBQ0ssTUFBTSxHQUFHO1lBQzdDO1lBRUEsSUFBSyxJQUFJSyxJQUFJLEdBQUdBLElBQUksR0FBR0EsSUFBSztnQkFDMUJULE9BQU8sQ0FBQ0ksUUFBUUssRUFBRSxHQUFHRixLQUFLLENBQUNFLEVBQUU7WUFDL0I7WUFDQUwsU0FBUztRQUNYO0lBQ0Y7QUFDRjtBQUVBLFNBQVNNLHdCQUF3QlgsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFUyxVQUFVO0lBQ3pFLElBQUlQLFFBQVE7SUFDWixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUgsUUFBUUcsSUFBSztRQUMvQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUwsT0FBT0ssSUFBSztZQUM5QixJQUFJTSxZQUFZO1lBRWhCLElBQUlELFdBQVdFLE1BQU0sS0FBSyxHQUFHO2dCQUMzQixJQUFJRixVQUFVLENBQUMsRUFBRSxLQUFLWixNQUFNLENBQUNLLE1BQU0sRUFBRTtvQkFDbkNRLFlBQVk7Z0JBQ2Q7WUFDRixPQUNLLElBQUlELFVBQVUsQ0FBQyxFQUFFLEtBQUtaLE1BQU0sQ0FBQ0ssTUFBTSxJQUFJTyxVQUFVLENBQUMsRUFBRSxLQUFLWixNQUFNLENBQUNLLFFBQVEsRUFBRSxJQUFJTyxVQUFVLENBQUMsRUFBRSxLQUFLWixNQUFNLENBQUNLLFFBQVEsRUFBRSxFQUFFO2dCQUN0SFEsWUFBWTtZQUNkO1lBQ0EsSUFBSUEsV0FBVztnQkFDYixJQUFLLElBQUlILElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFLO29CQUMxQlQsT0FBTyxDQUFDSSxRQUFRSyxFQUFFLEdBQUc7Z0JBQ3ZCO1lBQ0Y7WUFDQUwsU0FBUztRQUNYO0lBQ0Y7QUFDRjtBQUVBLFNBQVNVLFdBQVdmLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRWEsS0FBSztJQUN2RCxJQUFJQyxlQUFlO0lBQ25CLElBQUlDLGNBQWNDLEtBQUtDLEdBQUcsQ0FBQyxHQUFHSixTQUFTO0lBQ3ZDLElBQUlYLFFBQVE7SUFFWixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUgsUUFBUUcsSUFBSztRQUMvQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUwsT0FBT0ssSUFBSztZQUM5QixJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFLO2dCQUMxQlQsT0FBTyxDQUFDSSxRQUFRSyxFQUFFLEdBQUdTLEtBQUtFLEtBQUssQ0FBQyxNQUFPLENBQUNoQixRQUFRSyxFQUFFLEdBQUdPLGVBQWdCQyxjQUFjO1lBQ3JGO1lBQ0FiLFNBQVM7UUFDWDtJQUNGO0FBQ0Y7QUFFQWlCLE9BQU9DLE9BQU8sR0FBRyxTQUFTdkIsTUFBTSxFQUFFd0IsU0FBUztJQUV6QyxJQUFJUixRQUFRUSxVQUFVUixLQUFLO0lBQzNCLElBQUlkLFFBQVFzQixVQUFVdEIsS0FBSztJQUMzQixJQUFJQyxTQUFTcUIsVUFBVXJCLE1BQU07SUFDN0IsSUFBSXNCLFlBQVlELFVBQVVDLFNBQVM7SUFDbkMsSUFBSWIsYUFBYVksVUFBVVosVUFBVTtJQUNyQyxJQUFJUixVQUFVb0IsVUFBVXBCLE9BQU87SUFFL0IsSUFBSUgsVUFBVUQsUUFBUSw2QkFBNkI7SUFFbkQsSUFBSXlCLGNBQWMsR0FBRztRQUNuQjFCLFVBQVVDLFFBQVFDLFNBQVNDLE9BQU9DLFFBQVFDO0lBQzVDLE9BQ0s7UUFDSCxJQUFJUSxZQUFZO1lBQ2RELHdCQUF3QlgsUUFBUUMsU0FBU0MsT0FBT0MsUUFBUVM7UUFDMUQ7UUFDQSxzQkFBc0I7UUFDdEIsSUFBSUksVUFBVSxHQUFHO1lBQ2YsdUNBQXVDO1lBQ3ZDLElBQUlBLFVBQVUsSUFBSTtnQkFDaEJmLFVBQVUsSUFBSXlCLE9BQU94QixRQUFRQyxTQUFTO1lBQ3hDO1lBQ0FZLFdBQVdmLFFBQVFDLFNBQVNDLE9BQU9DLFFBQVFhO1FBQzdDO0lBQ0Y7SUFDQSxPQUFPZjtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXItY29kZS8uL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvZm9ybWF0LW5vcm1hbGlzZXIuanM/ZGZmYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGRlUGFsZXR0ZShpbmRhdGEsIG91dGRhdGEsIHdpZHRoLCBoZWlnaHQsIHBhbGV0dGUpIHtcbiAgdmFyIHB4UG9zID0gMDtcbiAgLy8gdXNlIHZhbHVlcyBmcm9tIHBhbGV0dGVcbiAgZm9yICh2YXIgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgIGZvciAodmFyIHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgdmFyIGNvbG9yID0gcGFsZXR0ZVtpbmRhdGFbcHhQb3NdXTtcblxuICAgICAgaWYgKCFjb2xvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2luZGV4ICcgKyBpbmRhdGFbcHhQb3NdICsgJyBub3QgaW4gcGFsZXR0ZScpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICBvdXRkYXRhW3B4UG9zICsgaV0gPSBjb2xvcltpXTtcbiAgICAgIH1cbiAgICAgIHB4UG9zICs9IDQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VUcmFuc3BhcmVudENvbG9yKGluZGF0YSwgb3V0ZGF0YSwgd2lkdGgsIGhlaWdodCwgdHJhbnNDb2xvcikge1xuICB2YXIgcHhQb3MgPSAwO1xuICBmb3IgKHZhciB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgZm9yICh2YXIgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICB2YXIgbWFrZVRyYW5zID0gZmFsc2U7XG5cbiAgICAgIGlmICh0cmFuc0NvbG9yLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBpZiAodHJhbnNDb2xvclswXSA9PT0gaW5kYXRhW3B4UG9zXSkge1xuICAgICAgICAgIG1ha2VUcmFucyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRyYW5zQ29sb3JbMF0gPT09IGluZGF0YVtweFBvc10gJiYgdHJhbnNDb2xvclsxXSA9PT0gaW5kYXRhW3B4UG9zICsgMV0gJiYgdHJhbnNDb2xvclsyXSA9PT0gaW5kYXRhW3B4UG9zICsgMl0pIHtcbiAgICAgICAgbWFrZVRyYW5zID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChtYWtlVHJhbnMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICBvdXRkYXRhW3B4UG9zICsgaV0gPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBweFBvcyArPSA0O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzY2FsZURlcHRoKGluZGF0YSwgb3V0ZGF0YSwgd2lkdGgsIGhlaWdodCwgZGVwdGgpIHtcbiAgdmFyIG1heE91dFNhbXBsZSA9IDI1NTtcbiAgdmFyIG1heEluU2FtcGxlID0gTWF0aC5wb3coMiwgZGVwdGgpIC0gMTtcbiAgdmFyIHB4UG9zID0gMDtcblxuICBmb3IgKHZhciB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgZm9yICh2YXIgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICBvdXRkYXRhW3B4UG9zICsgaV0gPSBNYXRoLmZsb29yKChpbmRhdGFbcHhQb3MgKyBpXSAqIG1heE91dFNhbXBsZSkgLyBtYXhJblNhbXBsZSArIDAuNSk7XG4gICAgICB9XG4gICAgICBweFBvcyArPSA0O1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGluZGF0YSwgaW1hZ2VEYXRhKSB7XG5cbiAgdmFyIGRlcHRoID0gaW1hZ2VEYXRhLmRlcHRoO1xuICB2YXIgd2lkdGggPSBpbWFnZURhdGEud2lkdGg7XG4gIHZhciBoZWlnaHQgPSBpbWFnZURhdGEuaGVpZ2h0O1xuICB2YXIgY29sb3JUeXBlID0gaW1hZ2VEYXRhLmNvbG9yVHlwZTtcbiAgdmFyIHRyYW5zQ29sb3IgPSBpbWFnZURhdGEudHJhbnNDb2xvcjtcbiAgdmFyIHBhbGV0dGUgPSBpbWFnZURhdGEucGFsZXR0ZTtcblxuICB2YXIgb3V0ZGF0YSA9IGluZGF0YTsgLy8gb25seSBkaWZmZXJlbnQgZm9yIDE2IGJpdHNcblxuICBpZiAoY29sb3JUeXBlID09PSAzKSB7IC8vIHBhbGV0dGVkXG4gICAgZGVQYWxldHRlKGluZGF0YSwgb3V0ZGF0YSwgd2lkdGgsIGhlaWdodCwgcGFsZXR0ZSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgaWYgKHRyYW5zQ29sb3IpIHtcbiAgICAgIHJlcGxhY2VUcmFuc3BhcmVudENvbG9yKGluZGF0YSwgb3V0ZGF0YSwgd2lkdGgsIGhlaWdodCwgdHJhbnNDb2xvcik7XG4gICAgfVxuICAgIC8vIGlmIGl0IG5lZWRzIHNjYWxpbmdcbiAgICBpZiAoZGVwdGggIT09IDgpIHtcbiAgICAgIC8vIGlmIHdlIG5lZWQgdG8gY2hhbmdlIHRoZSBidWZmZXIgc2l6ZVxuICAgICAgaWYgKGRlcHRoID09PSAxNikge1xuICAgICAgICBvdXRkYXRhID0gbmV3IEJ1ZmZlcih3aWR0aCAqIGhlaWdodCAqIDQpO1xuICAgICAgfVxuICAgICAgc2NhbGVEZXB0aChpbmRhdGEsIG91dGRhdGEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dGRhdGE7XG59O1xuIl0sIm5hbWVzIjpbImRlUGFsZXR0ZSIsImluZGF0YSIsIm91dGRhdGEiLCJ3aWR0aCIsImhlaWdodCIsInBhbGV0dGUiLCJweFBvcyIsInkiLCJ4IiwiY29sb3IiLCJFcnJvciIsImkiLCJyZXBsYWNlVHJhbnNwYXJlbnRDb2xvciIsInRyYW5zQ29sb3IiLCJtYWtlVHJhbnMiLCJsZW5ndGgiLCJzY2FsZURlcHRoIiwiZGVwdGgiLCJtYXhPdXRTYW1wbGUiLCJtYXhJblNhbXBsZSIsIk1hdGgiLCJwb3ciLCJmbG9vciIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbWFnZURhdGEiLCJjb2xvclR5cGUiLCJCdWZmZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/format-normaliser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/interlace.js":
/*!*********************************************!*\
  !*** ./node_modules/pngjs/lib/interlace.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Adam 7\n//   0 1 2 3 4 5 6 7\n// 0 x 6 4 6 x 6 4 6\n// 1 7 7 7 7 7 7 7 7\n// 2 5 6 5 6 5 6 5 6\n// 3 7 7 7 7 7 7 7 7\n// 4 3 6 4 6 3 6 4 6\n// 5 7 7 7 7 7 7 7 7\n// 6 5 6 5 6 5 6 5 6\n// 7 7 7 7 7 7 7 7 7\nvar imagePasses = [\n    {\n        x: [\n            0\n        ],\n        y: [\n            0\n        ]\n    },\n    {\n        x: [\n            4\n        ],\n        y: [\n            0\n        ]\n    },\n    {\n        x: [\n            0,\n            4\n        ],\n        y: [\n            4\n        ]\n    },\n    {\n        x: [\n            2,\n            6\n        ],\n        y: [\n            0,\n            4\n        ]\n    },\n    {\n        x: [\n            0,\n            2,\n            4,\n            6\n        ],\n        y: [\n            2,\n            6\n        ]\n    },\n    {\n        x: [\n            1,\n            3,\n            5,\n            7\n        ],\n        y: [\n            0,\n            2,\n            4,\n            6\n        ]\n    },\n    {\n        x: [\n            0,\n            1,\n            2,\n            3,\n            4,\n            5,\n            6,\n            7\n        ],\n        y: [\n            1,\n            3,\n            5,\n            7\n        ]\n    }\n];\nexports.getImagePasses = function(width, height) {\n    var images = [];\n    var xLeftOver = width % 8;\n    var yLeftOver = height % 8;\n    var xRepeats = (width - xLeftOver) / 8;\n    var yRepeats = (height - yLeftOver) / 8;\n    for(var i = 0; i < imagePasses.length; i++){\n        var pass = imagePasses[i];\n        var passWidth = xRepeats * pass.x.length;\n        var passHeight = yRepeats * pass.y.length;\n        for(var j = 0; j < pass.x.length; j++){\n            if (pass.x[j] < xLeftOver) {\n                passWidth++;\n            } else {\n                break;\n            }\n        }\n        for(j = 0; j < pass.y.length; j++){\n            if (pass.y[j] < yLeftOver) {\n                passHeight++;\n            } else {\n                break;\n            }\n        }\n        if (passWidth > 0 && passHeight > 0) {\n            images.push({\n                width: passWidth,\n                height: passHeight,\n                index: i\n            });\n        }\n    }\n    return images;\n};\nexports.getInterlaceIterator = function(width) {\n    return function(x, y, pass) {\n        var outerXLeftOver = x % imagePasses[pass].x.length;\n        var outerX = (x - outerXLeftOver) / imagePasses[pass].x.length * 8 + imagePasses[pass].x[outerXLeftOver];\n        var outerYLeftOver = y % imagePasses[pass].y.length;\n        var outerY = (y - outerYLeftOver) / imagePasses[pass].y.length * 8 + imagePasses[pass].y[outerYLeftOver];\n        return outerX * 4 + outerY * width * 4;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2ludGVybGFjZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLFNBQVM7QUFDVCxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUdwQixJQUFJQSxjQUFjO0lBQ2hCO1FBQ0VDLEdBQUc7WUFBQztTQUFFO1FBQ05DLEdBQUc7WUFBQztTQUFFO0lBQ1I7SUFDQTtRQUNFRCxHQUFHO1lBQUM7U0FBRTtRQUNOQyxHQUFHO1lBQUM7U0FBRTtJQUNSO0lBQ0E7UUFDRUQsR0FBRztZQUFDO1lBQUc7U0FBRTtRQUNUQyxHQUFHO1lBQUM7U0FBRTtJQUNSO0lBQ0E7UUFDRUQsR0FBRztZQUFDO1lBQUc7U0FBRTtRQUNUQyxHQUFHO1lBQUM7WUFBRztTQUFFO0lBQ1g7SUFDQTtRQUNFRCxHQUFHO1lBQUM7WUFBRztZQUFHO1lBQUc7U0FBRTtRQUNmQyxHQUFHO1lBQUM7WUFBRztTQUFFO0lBQ1g7SUFDQTtRQUNFRCxHQUFHO1lBQUM7WUFBRztZQUFHO1lBQUc7U0FBRTtRQUNmQyxHQUFHO1lBQUM7WUFBRztZQUFHO1lBQUc7U0FBRTtJQUNqQjtJQUNBO1FBQ0VELEdBQUc7WUFBQztZQUFHO1lBQUc7WUFBRztZQUFHO1lBQUc7WUFBRztZQUFHO1NBQUU7UUFDM0JDLEdBQUc7WUFBQztZQUFHO1lBQUc7WUFBRztTQUFFO0lBQ2pCO0NBQ0Q7QUFFREMsc0JBQXNCLEdBQUcsU0FBU0UsS0FBSyxFQUFFQyxNQUFNO0lBQzdDLElBQUlDLFNBQVMsRUFBRTtJQUNmLElBQUlDLFlBQVlILFFBQVE7SUFDeEIsSUFBSUksWUFBWUgsU0FBUztJQUN6QixJQUFJSSxXQUFXLENBQUNMLFFBQVFHLFNBQVEsSUFBSztJQUNyQyxJQUFJRyxXQUFXLENBQUNMLFNBQVNHLFNBQVEsSUFBSztJQUN0QyxJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSVosWUFBWWEsTUFBTSxFQUFFRCxJQUFLO1FBQzNDLElBQUlFLE9BQU9kLFdBQVcsQ0FBQ1ksRUFBRTtRQUN6QixJQUFJRyxZQUFZTCxXQUFXSSxLQUFLYixDQUFDLENBQUNZLE1BQU07UUFDeEMsSUFBSUcsYUFBYUwsV0FBV0csS0FBS1osQ0FBQyxDQUFDVyxNQUFNO1FBQ3pDLElBQUssSUFBSUksSUFBSSxHQUFHQSxJQUFJSCxLQUFLYixDQUFDLENBQUNZLE1BQU0sRUFBRUksSUFBSztZQUN0QyxJQUFJSCxLQUFLYixDQUFDLENBQUNnQixFQUFFLEdBQUdULFdBQVc7Z0JBQ3pCTztZQUNGLE9BQ0s7Z0JBQ0g7WUFDRjtRQUNGO1FBQ0EsSUFBS0UsSUFBSSxHQUFHQSxJQUFJSCxLQUFLWixDQUFDLENBQUNXLE1BQU0sRUFBRUksSUFBSztZQUNsQyxJQUFJSCxLQUFLWixDQUFDLENBQUNlLEVBQUUsR0FBR1IsV0FBVztnQkFDekJPO1lBQ0YsT0FDSztnQkFDSDtZQUNGO1FBQ0Y7UUFDQSxJQUFJRCxZQUFZLEtBQUtDLGFBQWEsR0FBRztZQUNuQ1QsT0FBT1csSUFBSSxDQUFDO2dCQUFFYixPQUFPVTtnQkFBV1QsUUFBUVU7Z0JBQVlHLE9BQU9QO1lBQUU7UUFDL0Q7SUFDRjtJQUNBLE9BQU9MO0FBQ1Q7QUFFQUosNEJBQTRCLEdBQUcsU0FBU0UsS0FBSztJQUMzQyxPQUFPLFNBQVNKLENBQUMsRUFBRUMsQ0FBQyxFQUFFWSxJQUFJO1FBQ3hCLElBQUlPLGlCQUFpQnBCLElBQUlELFdBQVcsQ0FBQ2MsS0FBSyxDQUFDYixDQUFDLENBQUNZLE1BQU07UUFDbkQsSUFBSVMsU0FBUyxDQUFHckIsSUFBSW9CLGNBQWEsSUFBS3JCLFdBQVcsQ0FBQ2MsS0FBSyxDQUFDYixDQUFDLENBQUNZLE1BQU0sR0FBSSxJQUFLYixXQUFXLENBQUNjLEtBQUssQ0FBQ2IsQ0FBQyxDQUFDb0IsZUFBZTtRQUM1RyxJQUFJRSxpQkFBaUJyQixJQUFJRixXQUFXLENBQUNjLEtBQUssQ0FBQ1osQ0FBQyxDQUFDVyxNQUFNO1FBQ25ELElBQUlXLFNBQVMsQ0FBR3RCLElBQUlxQixjQUFhLElBQUt2QixXQUFXLENBQUNjLEtBQUssQ0FBQ1osQ0FBQyxDQUFDVyxNQUFNLEdBQUksSUFBS2IsV0FBVyxDQUFDYyxLQUFLLENBQUNaLENBQUMsQ0FBQ3FCLGVBQWU7UUFDNUcsT0FBTyxTQUFVLElBQU1DLFNBQVNuQixRQUFRO0lBQzFDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xci1jb2RlLy4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9pbnRlcmxhY2UuanM/YWRhYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIEFkYW0gN1xuLy8gICAwIDEgMiAzIDQgNSA2IDdcbi8vIDAgeCA2IDQgNiB4IDYgNCA2XG4vLyAxIDcgNyA3IDcgNyA3IDcgN1xuLy8gMiA1IDYgNSA2IDUgNiA1IDZcbi8vIDMgNyA3IDcgNyA3IDcgNyA3XG4vLyA0IDMgNiA0IDYgMyA2IDQgNlxuLy8gNSA3IDcgNyA3IDcgNyA3IDdcbi8vIDYgNSA2IDUgNiA1IDYgNSA2XG4vLyA3IDcgNyA3IDcgNyA3IDcgN1xuXG5cbnZhciBpbWFnZVBhc3NlcyA9IFtcbiAgeyAvLyBwYXNzIDEgLSAxcHhcbiAgICB4OiBbMF0sXG4gICAgeTogWzBdXG4gIH0sXG4gIHsgLy8gcGFzcyAyIC0gMXB4XG4gICAgeDogWzRdLFxuICAgIHk6IFswXVxuICB9LFxuICB7IC8vIHBhc3MgMyAtIDJweFxuICAgIHg6IFswLCA0XSxcbiAgICB5OiBbNF1cbiAgfSxcbiAgeyAvLyBwYXNzIDQgLSA0cHhcbiAgICB4OiBbMiwgNl0sXG4gICAgeTogWzAsIDRdXG4gIH0sXG4gIHsgLy8gcGFzcyA1IC0gOHB4XG4gICAgeDogWzAsIDIsIDQsIDZdLFxuICAgIHk6IFsyLCA2XVxuICB9LFxuICB7IC8vIHBhc3MgNiAtIDE2cHhcbiAgICB4OiBbMSwgMywgNSwgN10sXG4gICAgeTogWzAsIDIsIDQsIDZdXG4gIH0sXG4gIHsgLy8gcGFzcyA3IC0gMzJweFxuICAgIHg6IFswLCAxLCAyLCAzLCA0LCA1LCA2LCA3XSxcbiAgICB5OiBbMSwgMywgNSwgN11cbiAgfVxuXTtcblxuZXhwb3J0cy5nZXRJbWFnZVBhc3NlcyA9IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgdmFyIGltYWdlcyA9IFtdO1xuICB2YXIgeExlZnRPdmVyID0gd2lkdGggJSA4O1xuICB2YXIgeUxlZnRPdmVyID0gaGVpZ2h0ICUgODtcbiAgdmFyIHhSZXBlYXRzID0gKHdpZHRoIC0geExlZnRPdmVyKSAvIDg7XG4gIHZhciB5UmVwZWF0cyA9IChoZWlnaHQgLSB5TGVmdE92ZXIpIC8gODtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbWFnZVBhc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwYXNzID0gaW1hZ2VQYXNzZXNbaV07XG4gICAgdmFyIHBhc3NXaWR0aCA9IHhSZXBlYXRzICogcGFzcy54Lmxlbmd0aDtcbiAgICB2YXIgcGFzc0hlaWdodCA9IHlSZXBlYXRzICogcGFzcy55Lmxlbmd0aDtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBhc3MueC5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKHBhc3MueFtqXSA8IHhMZWZ0T3Zlcikge1xuICAgICAgICBwYXNzV2lkdGgrKztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChqID0gMDsgaiA8IHBhc3MueS5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKHBhc3MueVtqXSA8IHlMZWZ0T3Zlcikge1xuICAgICAgICBwYXNzSGVpZ2h0Kys7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXNzV2lkdGggPiAwICYmIHBhc3NIZWlnaHQgPiAwKSB7XG4gICAgICBpbWFnZXMucHVzaCh7IHdpZHRoOiBwYXNzV2lkdGgsIGhlaWdodDogcGFzc0hlaWdodCwgaW5kZXg6IGkgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpbWFnZXM7XG59O1xuXG5leHBvcnRzLmdldEludGVybGFjZUl0ZXJhdG9yID0gZnVuY3Rpb24od2lkdGgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgsIHksIHBhc3MpIHtcbiAgICB2YXIgb3V0ZXJYTGVmdE92ZXIgPSB4ICUgaW1hZ2VQYXNzZXNbcGFzc10ueC5sZW5ndGg7XG4gICAgdmFyIG91dGVyWCA9ICgoKHggLSBvdXRlclhMZWZ0T3ZlcikgLyBpbWFnZVBhc3Nlc1twYXNzXS54Lmxlbmd0aCkgKiA4KSArIGltYWdlUGFzc2VzW3Bhc3NdLnhbb3V0ZXJYTGVmdE92ZXJdO1xuICAgIHZhciBvdXRlcllMZWZ0T3ZlciA9IHkgJSBpbWFnZVBhc3Nlc1twYXNzXS55Lmxlbmd0aDtcbiAgICB2YXIgb3V0ZXJZID0gKCgoeSAtIG91dGVyWUxlZnRPdmVyKSAvIGltYWdlUGFzc2VzW3Bhc3NdLnkubGVuZ3RoKSAqIDgpICsgaW1hZ2VQYXNzZXNbcGFzc10ueVtvdXRlcllMZWZ0T3Zlcl07XG4gICAgcmV0dXJuIChvdXRlclggKiA0KSArIChvdXRlclkgKiB3aWR0aCAqIDQpO1xuICB9O1xufTsiXSwibmFtZXMiOlsiaW1hZ2VQYXNzZXMiLCJ4IiwieSIsImV4cG9ydHMiLCJnZXRJbWFnZVBhc3NlcyIsIndpZHRoIiwiaGVpZ2h0IiwiaW1hZ2VzIiwieExlZnRPdmVyIiwieUxlZnRPdmVyIiwieFJlcGVhdHMiLCJ5UmVwZWF0cyIsImkiLCJsZW5ndGgiLCJwYXNzIiwicGFzc1dpZHRoIiwicGFzc0hlaWdodCIsImoiLCJwdXNoIiwiaW5kZXgiLCJnZXRJbnRlcmxhY2VJdGVyYXRvciIsIm91dGVyWExlZnRPdmVyIiwib3V0ZXJYIiwib3V0ZXJZTGVmdE92ZXIiLCJvdXRlclkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/interlace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/packer-async.js":
/*!************************************************!*\
  !*** ./node_modules/pngjs/lib/packer-async.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar util = __webpack_require__(/*! util */ \"util\");\nvar Stream = __webpack_require__(/*! stream */ \"stream\");\nvar constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/pngjs/lib/constants.js\");\nvar Packer = __webpack_require__(/*! ./packer */ \"(ssr)/./node_modules/pngjs/lib/packer.js\");\nvar PackerAsync = module.exports = function(opt) {\n    Stream.call(this);\n    var options = opt || {};\n    this._packer = new Packer(options);\n    this._deflate = this._packer.createDeflate();\n    this.readable = true;\n};\nutil.inherits(PackerAsync, Stream);\nPackerAsync.prototype.pack = function(data, width, height, gamma) {\n    // Signature\n    this.emit(\"data\", new Buffer(constants.PNG_SIGNATURE));\n    this.emit(\"data\", this._packer.packIHDR(width, height));\n    if (gamma) {\n        this.emit(\"data\", this._packer.packGAMA(gamma));\n    }\n    var filteredData = this._packer.filterData(data, width, height);\n    // compress it\n    this._deflate.on(\"error\", this.emit.bind(this, \"error\"));\n    this._deflate.on(\"data\", (function(compressedData) {\n        this.emit(\"data\", this._packer.packIDAT(compressedData));\n    }).bind(this));\n    this._deflate.on(\"end\", (function() {\n        this.emit(\"data\", this._packer.packIEND());\n        this.emit(\"end\");\n    }).bind(this));\n    this._deflate.end(filteredData);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL3BhY2tlci1hc3luYy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlDLFNBQVNELG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlFLFlBQVlGLG1CQUFPQSxDQUFDO0FBQ3hCLElBQUlHLFNBQVNILG1CQUFPQSxDQUFDO0FBRXJCLElBQUlJLGNBQWNDLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxHQUFHO0lBQzdDTixPQUFPTyxJQUFJLENBQUMsSUFBSTtJQUVoQixJQUFJQyxVQUFVRixPQUFPLENBQUM7SUFFdEIsSUFBSSxDQUFDRyxPQUFPLEdBQUcsSUFBSVAsT0FBT007SUFDMUIsSUFBSSxDQUFDRSxRQUFRLEdBQUcsSUFBSSxDQUFDRCxPQUFPLENBQUNFLGFBQWE7SUFFMUMsSUFBSSxDQUFDQyxRQUFRLEdBQUc7QUFDbEI7QUFDQWQsS0FBS2UsUUFBUSxDQUFDVixhQUFhSDtBQUczQkcsWUFBWVcsU0FBUyxDQUFDQyxJQUFJLEdBQUcsU0FBU0MsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsS0FBSztJQUM5RCxZQUFZO0lBQ1osSUFBSSxDQUFDQyxJQUFJLENBQUMsUUFBUSxJQUFJQyxPQUFPcEIsVUFBVXFCLGFBQWE7SUFDcEQsSUFBSSxDQUFDRixJQUFJLENBQUMsUUFBUSxJQUFJLENBQUNYLE9BQU8sQ0FBQ2MsUUFBUSxDQUFDTixPQUFPQztJQUUvQyxJQUFJQyxPQUFPO1FBQ1QsSUFBSSxDQUFDQyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUNYLE9BQU8sQ0FBQ2UsUUFBUSxDQUFDTDtJQUMxQztJQUVBLElBQUlNLGVBQWUsSUFBSSxDQUFDaEIsT0FBTyxDQUFDaUIsVUFBVSxDQUFDVixNQUFNQyxPQUFPQztJQUV4RCxjQUFjO0lBQ2QsSUFBSSxDQUFDUixRQUFRLENBQUNpQixFQUFFLENBQUMsU0FBUyxJQUFJLENBQUNQLElBQUksQ0FBQ1EsSUFBSSxDQUFDLElBQUksRUFBRTtJQUUvQyxJQUFJLENBQUNsQixRQUFRLENBQUNpQixFQUFFLENBQUMsUUFBUSxVQUFTRSxjQUFjO1FBQzlDLElBQUksQ0FBQ1QsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDWCxPQUFPLENBQUNxQixRQUFRLENBQUNEO0lBQzFDLEdBQUVELElBQUksQ0FBQyxJQUFJO0lBRVgsSUFBSSxDQUFDbEIsUUFBUSxDQUFDaUIsRUFBRSxDQUFDLE9BQU87UUFDdEIsSUFBSSxDQUFDUCxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUNYLE9BQU8sQ0FBQ3NCLFFBQVE7UUFDdkMsSUFBSSxDQUFDWCxJQUFJLENBQUM7SUFDWixHQUFFUSxJQUFJLENBQUMsSUFBSTtJQUVYLElBQUksQ0FBQ2xCLFFBQVEsQ0FBQ3NCLEdBQUcsQ0FBQ1A7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xci1jb2RlLy4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYWNrZXItYXN5bmMuanM/MTM0YiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xudmFyIGNvbnN0YW50cyA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJyk7XG52YXIgUGFja2VyID0gcmVxdWlyZSgnLi9wYWNrZXInKTtcblxudmFyIFBhY2tlckFzeW5jID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcHQpIHtcbiAgU3RyZWFtLmNhbGwodGhpcyk7XG5cbiAgdmFyIG9wdGlvbnMgPSBvcHQgfHwge307XG5cbiAgdGhpcy5fcGFja2VyID0gbmV3IFBhY2tlcihvcHRpb25zKTtcbiAgdGhpcy5fZGVmbGF0ZSA9IHRoaXMuX3BhY2tlci5jcmVhdGVEZWZsYXRlKCk7XG5cbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG59O1xudXRpbC5pbmhlcml0cyhQYWNrZXJBc3luYywgU3RyZWFtKTtcblxuXG5QYWNrZXJBc3luYy5wcm90b3R5cGUucGFjayA9IGZ1bmN0aW9uKGRhdGEsIHdpZHRoLCBoZWlnaHQsIGdhbW1hKSB7XG4gIC8vIFNpZ25hdHVyZVxuICB0aGlzLmVtaXQoJ2RhdGEnLCBuZXcgQnVmZmVyKGNvbnN0YW50cy5QTkdfU0lHTkFUVVJFKSk7XG4gIHRoaXMuZW1pdCgnZGF0YScsIHRoaXMuX3BhY2tlci5wYWNrSUhEUih3aWR0aCwgaGVpZ2h0KSk7XG5cbiAgaWYgKGdhbW1hKSB7XG4gICAgdGhpcy5lbWl0KCdkYXRhJywgdGhpcy5fcGFja2VyLnBhY2tHQU1BKGdhbW1hKSk7XG4gIH1cblxuICB2YXIgZmlsdGVyZWREYXRhID0gdGhpcy5fcGFja2VyLmZpbHRlckRhdGEoZGF0YSwgd2lkdGgsIGhlaWdodCk7XG5cbiAgLy8gY29tcHJlc3MgaXRcbiAgdGhpcy5fZGVmbGF0ZS5vbignZXJyb3InLCB0aGlzLmVtaXQuYmluZCh0aGlzLCAnZXJyb3InKSk7XG5cbiAgdGhpcy5fZGVmbGF0ZS5vbignZGF0YScsIGZ1bmN0aW9uKGNvbXByZXNzZWREYXRhKSB7XG4gICAgdGhpcy5lbWl0KCdkYXRhJywgdGhpcy5fcGFja2VyLnBhY2tJREFUKGNvbXByZXNzZWREYXRhKSk7XG4gIH0uYmluZCh0aGlzKSk7XG5cbiAgdGhpcy5fZGVmbGF0ZS5vbignZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5lbWl0KCdkYXRhJywgdGhpcy5fcGFja2VyLnBhY2tJRU5EKCkpO1xuICAgIHRoaXMuZW1pdCgnZW5kJyk7XG4gIH0uYmluZCh0aGlzKSk7XG5cbiAgdGhpcy5fZGVmbGF0ZS5lbmQoZmlsdGVyZWREYXRhKTtcbn07XG4iXSwibmFtZXMiOlsidXRpbCIsInJlcXVpcmUiLCJTdHJlYW0iLCJjb25zdGFudHMiLCJQYWNrZXIiLCJQYWNrZXJBc3luYyIsIm1vZHVsZSIsImV4cG9ydHMiLCJvcHQiLCJjYWxsIiwib3B0aW9ucyIsIl9wYWNrZXIiLCJfZGVmbGF0ZSIsImNyZWF0ZURlZmxhdGUiLCJyZWFkYWJsZSIsImluaGVyaXRzIiwicHJvdG90eXBlIiwicGFjayIsImRhdGEiLCJ3aWR0aCIsImhlaWdodCIsImdhbW1hIiwiZW1pdCIsIkJ1ZmZlciIsIlBOR19TSUdOQVRVUkUiLCJwYWNrSUhEUiIsInBhY2tHQU1BIiwiZmlsdGVyZWREYXRhIiwiZmlsdGVyRGF0YSIsIm9uIiwiYmluZCIsImNvbXByZXNzZWREYXRhIiwicGFja0lEQVQiLCJwYWNrSUVORCIsImVuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/packer-async.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/packer-sync.js":
/*!***********************************************!*\
  !*** ./node_modules/pngjs/lib/packer-sync.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar hasSyncZlib = true;\nvar zlib = __webpack_require__(/*! zlib */ \"zlib\");\nif (!zlib.deflateSync) {\n    hasSyncZlib = false;\n}\nvar constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/pngjs/lib/constants.js\");\nvar Packer = __webpack_require__(/*! ./packer */ \"(ssr)/./node_modules/pngjs/lib/packer.js\");\nmodule.exports = function(metaData, opt) {\n    if (!hasSyncZlib) {\n        throw new Error(\"To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0\");\n    }\n    var options = opt || {};\n    var packer = new Packer(options);\n    var chunks = [];\n    // Signature\n    chunks.push(new Buffer(constants.PNG_SIGNATURE));\n    // Header\n    chunks.push(packer.packIHDR(metaData.width, metaData.height));\n    if (metaData.gamma) {\n        chunks.push(packer.packGAMA(metaData.gamma));\n    }\n    var filteredData = packer.filterData(metaData.data, metaData.width, metaData.height);\n    // compress it\n    var compressedData = zlib.deflateSync(filteredData, packer.getDeflateOptions());\n    filteredData = null;\n    if (!compressedData || !compressedData.length) {\n        throw new Error(\"bad png - invalid compressed data response\");\n    }\n    chunks.push(packer.packIDAT(compressedData));\n    // End\n    chunks.push(packer.packIEND());\n    return Buffer.concat(chunks);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL3BhY2tlci1zeW5jLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsY0FBYztBQUNsQixJQUFJQyxPQUFPQyxtQkFBT0EsQ0FBQztBQUNuQixJQUFJLENBQUNELEtBQUtFLFdBQVcsRUFBRTtJQUNyQkgsY0FBYztBQUNoQjtBQUNBLElBQUlJLFlBQVlGLG1CQUFPQSxDQUFDO0FBQ3hCLElBQUlHLFNBQVNILG1CQUFPQSxDQUFDO0FBRXJCSSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsUUFBUSxFQUFFQyxHQUFHO0lBRXJDLElBQUksQ0FBQ1QsYUFBYTtRQUNoQixNQUFNLElBQUlVLE1BQU07SUFDbEI7SUFFQSxJQUFJQyxVQUFVRixPQUFPLENBQUM7SUFFdEIsSUFBSUcsU0FBUyxJQUFJUCxPQUFPTTtJQUV4QixJQUFJRSxTQUFTLEVBQUU7SUFFZixZQUFZO0lBQ1pBLE9BQU9DLElBQUksQ0FBQyxJQUFJQyxPQUFPWCxVQUFVWSxhQUFhO0lBRTlDLFNBQVM7SUFDVEgsT0FBT0MsSUFBSSxDQUFDRixPQUFPSyxRQUFRLENBQUNULFNBQVNVLEtBQUssRUFBRVYsU0FBU1csTUFBTTtJQUUzRCxJQUFJWCxTQUFTWSxLQUFLLEVBQUU7UUFDbEJQLE9BQU9DLElBQUksQ0FBQ0YsT0FBT1MsUUFBUSxDQUFDYixTQUFTWSxLQUFLO0lBQzVDO0lBRUEsSUFBSUUsZUFBZVYsT0FBT1csVUFBVSxDQUFDZixTQUFTZ0IsSUFBSSxFQUFFaEIsU0FBU1UsS0FBSyxFQUFFVixTQUFTVyxNQUFNO0lBRW5GLGNBQWM7SUFDZCxJQUFJTSxpQkFBaUJ4QixLQUFLRSxXQUFXLENBQUNtQixjQUFjVixPQUFPYyxpQkFBaUI7SUFDNUVKLGVBQWU7SUFFZixJQUFJLENBQUNHLGtCQUFrQixDQUFDQSxlQUFlRSxNQUFNLEVBQUU7UUFDN0MsTUFBTSxJQUFJakIsTUFBTTtJQUNsQjtJQUNBRyxPQUFPQyxJQUFJLENBQUNGLE9BQU9nQixRQUFRLENBQUNIO0lBRTVCLE1BQU07SUFDTlosT0FBT0MsSUFBSSxDQUFDRixPQUFPaUIsUUFBUTtJQUUzQixPQUFPZCxPQUFPZSxNQUFNLENBQUNqQjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL3FyLWNvZGUvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL3BhY2tlci1zeW5jLmpzP2Y0ZmUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzU3luY1psaWIgPSB0cnVlO1xudmFyIHpsaWIgPSByZXF1aXJlKCd6bGliJyk7XG5pZiAoIXpsaWIuZGVmbGF0ZVN5bmMpIHtcbiAgaGFzU3luY1psaWIgPSBmYWxzZTtcbn1cbnZhciBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xudmFyIFBhY2tlciA9IHJlcXVpcmUoJy4vcGFja2VyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obWV0YURhdGEsIG9wdCkge1xuXG4gIGlmICghaGFzU3luY1psaWIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvIHVzZSB0aGUgc3luYyBjYXBhYmlsaXR5IG9mIHRoaXMgbGlicmFyeSBpbiBvbGQgbm9kZSB2ZXJzaW9ucywgcGxlYXNlIHBpbiBwbmdqcyB0byB2Mi4zLjAnKTtcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gb3B0IHx8IHt9O1xuXG4gIHZhciBwYWNrZXIgPSBuZXcgUGFja2VyKG9wdGlvbnMpO1xuXG4gIHZhciBjaHVua3MgPSBbXTtcblxuICAvLyBTaWduYXR1cmVcbiAgY2h1bmtzLnB1c2gobmV3IEJ1ZmZlcihjb25zdGFudHMuUE5HX1NJR05BVFVSRSkpO1xuXG4gIC8vIEhlYWRlclxuICBjaHVua3MucHVzaChwYWNrZXIucGFja0lIRFIobWV0YURhdGEud2lkdGgsIG1ldGFEYXRhLmhlaWdodCkpO1xuXG4gIGlmIChtZXRhRGF0YS5nYW1tYSkge1xuICAgIGNodW5rcy5wdXNoKHBhY2tlci5wYWNrR0FNQShtZXRhRGF0YS5nYW1tYSkpO1xuICB9XG5cbiAgdmFyIGZpbHRlcmVkRGF0YSA9IHBhY2tlci5maWx0ZXJEYXRhKG1ldGFEYXRhLmRhdGEsIG1ldGFEYXRhLndpZHRoLCBtZXRhRGF0YS5oZWlnaHQpO1xuXG4gIC8vIGNvbXByZXNzIGl0XG4gIHZhciBjb21wcmVzc2VkRGF0YSA9IHpsaWIuZGVmbGF0ZVN5bmMoZmlsdGVyZWREYXRhLCBwYWNrZXIuZ2V0RGVmbGF0ZU9wdGlvbnMoKSk7XG4gIGZpbHRlcmVkRGF0YSA9IG51bGw7XG5cbiAgaWYgKCFjb21wcmVzc2VkRGF0YSB8fCAhY29tcHJlc3NlZERhdGEubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgcG5nIC0gaW52YWxpZCBjb21wcmVzc2VkIGRhdGEgcmVzcG9uc2UnKTtcbiAgfVxuICBjaHVua3MucHVzaChwYWNrZXIucGFja0lEQVQoY29tcHJlc3NlZERhdGEpKTtcblxuICAvLyBFbmRcbiAgY2h1bmtzLnB1c2gocGFja2VyLnBhY2tJRU5EKCkpO1xuXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KGNodW5rcyk7XG59O1xuIl0sIm5hbWVzIjpbImhhc1N5bmNabGliIiwiemxpYiIsInJlcXVpcmUiLCJkZWZsYXRlU3luYyIsImNvbnN0YW50cyIsIlBhY2tlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJtZXRhRGF0YSIsIm9wdCIsIkVycm9yIiwib3B0aW9ucyIsInBhY2tlciIsImNodW5rcyIsInB1c2giLCJCdWZmZXIiLCJQTkdfU0lHTkFUVVJFIiwicGFja0lIRFIiLCJ3aWR0aCIsImhlaWdodCIsImdhbW1hIiwicGFja0dBTUEiLCJmaWx0ZXJlZERhdGEiLCJmaWx0ZXJEYXRhIiwiZGF0YSIsImNvbXByZXNzZWREYXRhIiwiZ2V0RGVmbGF0ZU9wdGlvbnMiLCJsZW5ndGgiLCJwYWNrSURBVCIsInBhY2tJRU5EIiwiY29uY2F0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/packer-sync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/packer.js":
/*!******************************************!*\
  !*** ./node_modules/pngjs/lib/packer.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/pngjs/lib/constants.js\");\nvar CrcStream = __webpack_require__(/*! ./crc */ \"(ssr)/./node_modules/pngjs/lib/crc.js\");\nvar bitPacker = __webpack_require__(/*! ./bitpacker */ \"(ssr)/./node_modules/pngjs/lib/bitpacker.js\");\nvar filter = __webpack_require__(/*! ./filter-pack */ \"(ssr)/./node_modules/pngjs/lib/filter-pack.js\");\nvar zlib = __webpack_require__(/*! zlib */ \"zlib\");\nvar Packer = module.exports = function(options) {\n    this._options = options;\n    options.deflateChunkSize = options.deflateChunkSize || 32 * 1024;\n    options.deflateLevel = options.deflateLevel != null ? options.deflateLevel : 9;\n    options.deflateStrategy = options.deflateStrategy != null ? options.deflateStrategy : 3;\n    options.inputHasAlpha = options.inputHasAlpha != null ? options.inputHasAlpha : true;\n    options.deflateFactory = options.deflateFactory || zlib.createDeflate;\n    options.bitDepth = options.bitDepth || 8;\n    // This is outputColorType\n    options.colorType = typeof options.colorType === \"number\" ? options.colorType : constants.COLORTYPE_COLOR_ALPHA;\n    options.inputColorType = typeof options.inputColorType === \"number\" ? options.inputColorType : constants.COLORTYPE_COLOR_ALPHA;\n    if ([\n        constants.COLORTYPE_GRAYSCALE,\n        constants.COLORTYPE_COLOR,\n        constants.COLORTYPE_COLOR_ALPHA,\n        constants.COLORTYPE_ALPHA\n    ].indexOf(options.colorType) === -1) {\n        throw new Error(\"option color type:\" + options.colorType + \" is not supported at present\");\n    }\n    if ([\n        constants.COLORTYPE_GRAYSCALE,\n        constants.COLORTYPE_COLOR,\n        constants.COLORTYPE_COLOR_ALPHA,\n        constants.COLORTYPE_ALPHA\n    ].indexOf(options.inputColorType) === -1) {\n        throw new Error(\"option input color type:\" + options.inputColorType + \" is not supported at present\");\n    }\n    if (options.bitDepth !== 8 && options.bitDepth !== 16) {\n        throw new Error(\"option bit depth:\" + options.bitDepth + \" is not supported at present\");\n    }\n};\nPacker.prototype.getDeflateOptions = function() {\n    return {\n        chunkSize: this._options.deflateChunkSize,\n        level: this._options.deflateLevel,\n        strategy: this._options.deflateStrategy\n    };\n};\nPacker.prototype.createDeflate = function() {\n    return this._options.deflateFactory(this.getDeflateOptions());\n};\nPacker.prototype.filterData = function(data, width, height) {\n    // convert to correct format for filtering (e.g. right bpp and bit depth)\n    var packedData = bitPacker(data, width, height, this._options);\n    // filter pixel data\n    var bpp = constants.COLORTYPE_TO_BPP_MAP[this._options.colorType];\n    var filteredData = filter(packedData, width, height, this._options, bpp);\n    return filteredData;\n};\nPacker.prototype._packChunk = function(type, data) {\n    var len = data ? data.length : 0;\n    var buf = new Buffer(len + 12);\n    buf.writeUInt32BE(len, 0);\n    buf.writeUInt32BE(type, 4);\n    if (data) {\n        data.copy(buf, 8);\n    }\n    buf.writeInt32BE(CrcStream.crc32(buf.slice(4, buf.length - 4)), buf.length - 4);\n    return buf;\n};\nPacker.prototype.packGAMA = function(gamma) {\n    var buf = new Buffer(4);\n    buf.writeUInt32BE(Math.floor(gamma * constants.GAMMA_DIVISION), 0);\n    return this._packChunk(constants.TYPE_gAMA, buf);\n};\nPacker.prototype.packIHDR = function(width, height) {\n    var buf = new Buffer(13);\n    buf.writeUInt32BE(width, 0);\n    buf.writeUInt32BE(height, 4);\n    buf[8] = this._options.bitDepth; // Bit depth\n    buf[9] = this._options.colorType; // colorType\n    buf[10] = 0; // compression\n    buf[11] = 0; // filter\n    buf[12] = 0; // interlace\n    return this._packChunk(constants.TYPE_IHDR, buf);\n};\nPacker.prototype.packIDAT = function(data) {\n    return this._packChunk(constants.TYPE_IDAT, data);\n};\nPacker.prototype.packIEND = function() {\n    return this._packChunk(constants.TYPE_IEND, null);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/packer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/paeth-predictor.js":
/*!***************************************************!*\
  !*** ./node_modules/pngjs/lib/paeth-predictor.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function paethPredictor(left, above, upLeft) {\n    var paeth = left + above - upLeft;\n    var pLeft = Math.abs(paeth - left);\n    var pAbove = Math.abs(paeth - above);\n    var pUpLeft = Math.abs(paeth - upLeft);\n    if (pLeft <= pAbove && pLeft <= pUpLeft) {\n        return left;\n    }\n    if (pAbove <= pUpLeft) {\n        return above;\n    }\n    return upLeft;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL3BhZXRoLXByZWRpY3Rvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsZUFBZUMsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLE1BQU07SUFFMUQsSUFBSUMsUUFBUUgsT0FBT0MsUUFBUUM7SUFDM0IsSUFBSUUsUUFBUUMsS0FBS0MsR0FBRyxDQUFDSCxRQUFRSDtJQUM3QixJQUFJTyxTQUFTRixLQUFLQyxHQUFHLENBQUNILFFBQVFGO0lBQzlCLElBQUlPLFVBQVVILEtBQUtDLEdBQUcsQ0FBQ0gsUUFBUUQ7SUFFL0IsSUFBSUUsU0FBU0csVUFBVUgsU0FBU0ksU0FBUztRQUN2QyxPQUFPUjtJQUNUO0lBQ0EsSUFBSU8sVUFBVUMsU0FBUztRQUNyQixPQUFPUDtJQUNUO0lBQ0EsT0FBT0M7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL3FyLWNvZGUvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL3BhZXRoLXByZWRpY3Rvci5qcz9mNGMxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFldGhQcmVkaWN0b3IobGVmdCwgYWJvdmUsIHVwTGVmdCkge1xyXG5cclxuICB2YXIgcGFldGggPSBsZWZ0ICsgYWJvdmUgLSB1cExlZnQ7XHJcbiAgdmFyIHBMZWZ0ID0gTWF0aC5hYnMocGFldGggLSBsZWZ0KTtcclxuICB2YXIgcEFib3ZlID0gTWF0aC5hYnMocGFldGggLSBhYm92ZSk7XHJcbiAgdmFyIHBVcExlZnQgPSBNYXRoLmFicyhwYWV0aCAtIHVwTGVmdCk7XHJcblxyXG4gIGlmIChwTGVmdCA8PSBwQWJvdmUgJiYgcExlZnQgPD0gcFVwTGVmdCkge1xyXG4gICAgcmV0dXJuIGxlZnQ7XHJcbiAgfVxyXG4gIGlmIChwQWJvdmUgPD0gcFVwTGVmdCkge1xyXG4gICAgcmV0dXJuIGFib3ZlO1xyXG4gIH1cclxuICByZXR1cm4gdXBMZWZ0O1xyXG59OyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicGFldGhQcmVkaWN0b3IiLCJsZWZ0IiwiYWJvdmUiLCJ1cExlZnQiLCJwYWV0aCIsInBMZWZ0IiwiTWF0aCIsImFicyIsInBBYm92ZSIsInBVcExlZnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/paeth-predictor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/parser-async.js":
/*!************************************************!*\
  !*** ./node_modules/pngjs/lib/parser-async.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar util = __webpack_require__(/*! util */ \"util\");\nvar zlib = __webpack_require__(/*! zlib */ \"zlib\");\nvar ChunkStream = __webpack_require__(/*! ./chunkstream */ \"(ssr)/./node_modules/pngjs/lib/chunkstream.js\");\nvar FilterAsync = __webpack_require__(/*! ./filter-parse-async */ \"(ssr)/./node_modules/pngjs/lib/filter-parse-async.js\");\nvar Parser = __webpack_require__(/*! ./parser */ \"(ssr)/./node_modules/pngjs/lib/parser.js\");\nvar bitmapper = __webpack_require__(/*! ./bitmapper */ \"(ssr)/./node_modules/pngjs/lib/bitmapper.js\");\nvar formatNormaliser = __webpack_require__(/*! ./format-normaliser */ \"(ssr)/./node_modules/pngjs/lib/format-normaliser.js\");\nvar ParserAsync = module.exports = function(options) {\n    ChunkStream.call(this);\n    this._parser = new Parser(options, {\n        read: this.read.bind(this),\n        error: this._handleError.bind(this),\n        metadata: this._handleMetaData.bind(this),\n        gamma: this.emit.bind(this, \"gamma\"),\n        palette: this._handlePalette.bind(this),\n        transColor: this._handleTransColor.bind(this),\n        finished: this._finished.bind(this),\n        inflateData: this._inflateData.bind(this),\n        simpleTransparency: this._simpleTransparency.bind(this),\n        headersFinished: this._headersFinished.bind(this)\n    });\n    this._options = options;\n    this.writable = true;\n    this._parser.start();\n};\nutil.inherits(ParserAsync, ChunkStream);\nParserAsync.prototype._handleError = function(err) {\n    this.emit(\"error\", err);\n    this.writable = false;\n    this.destroy();\n    if (this._inflate && this._inflate.destroy) {\n        this._inflate.destroy();\n    }\n    if (this._filter) {\n        this._filter.destroy();\n        // For backward compatibility with Node 7 and below.\n        // Suppress errors due to _inflate calling write() even after\n        // it's destroy()'ed.\n        this._filter.on(\"error\", function() {});\n    }\n    this.errord = true;\n};\nParserAsync.prototype._inflateData = function(data) {\n    if (!this._inflate) {\n        if (this._bitmapInfo.interlace) {\n            this._inflate = zlib.createInflate();\n            this._inflate.on(\"error\", this.emit.bind(this, \"error\"));\n            this._filter.on(\"complete\", this._complete.bind(this));\n            this._inflate.pipe(this._filter);\n        } else {\n            var rowSize = (this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7 >> 3) + 1;\n            var imageSize = rowSize * this._bitmapInfo.height;\n            var chunkSize = Math.max(imageSize, zlib.Z_MIN_CHUNK);\n            this._inflate = zlib.createInflate({\n                chunkSize: chunkSize\n            });\n            var leftToInflate = imageSize;\n            var emitError = this.emit.bind(this, \"error\");\n            this._inflate.on(\"error\", function(err) {\n                if (!leftToInflate) {\n                    return;\n                }\n                emitError(err);\n            });\n            this._filter.on(\"complete\", this._complete.bind(this));\n            var filterWrite = this._filter.write.bind(this._filter);\n            this._inflate.on(\"data\", function(chunk) {\n                if (!leftToInflate) {\n                    return;\n                }\n                if (chunk.length > leftToInflate) {\n                    chunk = chunk.slice(0, leftToInflate);\n                }\n                leftToInflate -= chunk.length;\n                filterWrite(chunk);\n            });\n            this._inflate.on(\"end\", this._filter.end.bind(this._filter));\n        }\n    }\n    this._inflate.write(data);\n};\nParserAsync.prototype._handleMetaData = function(metaData) {\n    this._metaData = metaData;\n    this._bitmapInfo = Object.create(metaData);\n    this._filter = new FilterAsync(this._bitmapInfo);\n};\nParserAsync.prototype._handleTransColor = function(transColor) {\n    this._bitmapInfo.transColor = transColor;\n};\nParserAsync.prototype._handlePalette = function(palette) {\n    this._bitmapInfo.palette = palette;\n};\nParserAsync.prototype._simpleTransparency = function() {\n    this._metaData.alpha = true;\n};\nParserAsync.prototype._headersFinished = function() {\n    // Up until this point, we don't know if we have a tRNS chunk (alpha)\n    // so we can't emit metadata any earlier\n    this.emit(\"metadata\", this._metaData);\n};\nParserAsync.prototype._finished = function() {\n    if (this.errord) {\n        return;\n    }\n    if (!this._inflate) {\n        this.emit(\"error\", \"No Inflate block\");\n    } else {\n        // no more data to inflate\n        this._inflate.end();\n    }\n    this.destroySoon();\n};\nParserAsync.prototype._complete = function(filteredData) {\n    if (this.errord) {\n        return;\n    }\n    try {\n        var bitmapData = bitmapper.dataToBitMap(filteredData, this._bitmapInfo);\n        var normalisedBitmapData = formatNormaliser(bitmapData, this._bitmapInfo);\n        bitmapData = null;\n    } catch (ex) {\n        this._handleError(ex);\n        return;\n    }\n    this.emit(\"parsed\", normalisedBitmapData);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/parser-async.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/parser-sync.js":
/*!***********************************************!*\
  !*** ./node_modules/pngjs/lib/parser-sync.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar hasSyncZlib = true;\nvar zlib = __webpack_require__(/*! zlib */ \"zlib\");\nvar inflateSync = __webpack_require__(/*! ./sync-inflate */ \"(ssr)/./node_modules/pngjs/lib/sync-inflate.js\");\nif (!zlib.deflateSync) {\n    hasSyncZlib = false;\n}\nvar SyncReader = __webpack_require__(/*! ./sync-reader */ \"(ssr)/./node_modules/pngjs/lib/sync-reader.js\");\nvar FilterSync = __webpack_require__(/*! ./filter-parse-sync */ \"(ssr)/./node_modules/pngjs/lib/filter-parse-sync.js\");\nvar Parser = __webpack_require__(/*! ./parser */ \"(ssr)/./node_modules/pngjs/lib/parser.js\");\nvar bitmapper = __webpack_require__(/*! ./bitmapper */ \"(ssr)/./node_modules/pngjs/lib/bitmapper.js\");\nvar formatNormaliser = __webpack_require__(/*! ./format-normaliser */ \"(ssr)/./node_modules/pngjs/lib/format-normaliser.js\");\nmodule.exports = function(buffer, options) {\n    if (!hasSyncZlib) {\n        throw new Error(\"To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0\");\n    }\n    var err;\n    function handleError(_err_) {\n        err = _err_;\n    }\n    var metaData;\n    function handleMetaData(_metaData_) {\n        metaData = _metaData_;\n    }\n    function handleTransColor(transColor) {\n        metaData.transColor = transColor;\n    }\n    function handlePalette(palette) {\n        metaData.palette = palette;\n    }\n    function handleSimpleTransparency() {\n        metaData.alpha = true;\n    }\n    var gamma;\n    function handleGamma(_gamma_) {\n        gamma = _gamma_;\n    }\n    var inflateDataList = [];\n    function handleInflateData(inflatedData) {\n        inflateDataList.push(inflatedData);\n    }\n    var reader = new SyncReader(buffer);\n    var parser = new Parser(options, {\n        read: reader.read.bind(reader),\n        error: handleError,\n        metadata: handleMetaData,\n        gamma: handleGamma,\n        palette: handlePalette,\n        transColor: handleTransColor,\n        inflateData: handleInflateData,\n        simpleTransparency: handleSimpleTransparency\n    });\n    parser.start();\n    reader.process();\n    if (err) {\n        throw err;\n    }\n    //join together the inflate datas\n    var inflateData = Buffer.concat(inflateDataList);\n    inflateDataList.length = 0;\n    var inflatedData;\n    if (metaData.interlace) {\n        inflatedData = zlib.inflateSync(inflateData);\n    } else {\n        var rowSize = (metaData.width * metaData.bpp * metaData.depth + 7 >> 3) + 1;\n        var imageSize = rowSize * metaData.height;\n        inflatedData = inflateSync(inflateData, {\n            chunkSize: imageSize,\n            maxLength: imageSize\n        });\n    }\n    inflateData = null;\n    if (!inflatedData || !inflatedData.length) {\n        throw new Error(\"bad png - invalid inflate data response\");\n    }\n    var unfilteredData = FilterSync.process(inflatedData, metaData);\n    inflateData = null;\n    var bitmapData = bitmapper.dataToBitMap(unfilteredData, metaData);\n    unfilteredData = null;\n    var normalisedBitmapData = formatNormaliser(bitmapData, metaData);\n    metaData.data = normalisedBitmapData;\n    metaData.gamma = gamma || 0;\n    return metaData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL3BhcnNlci1zeW5jLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsY0FBYztBQUNsQixJQUFJQyxPQUFPQyxtQkFBT0EsQ0FBQztBQUNuQixJQUFJQyxjQUFjRCxtQkFBT0EsQ0FBQztBQUMxQixJQUFJLENBQUNELEtBQUtHLFdBQVcsRUFBRTtJQUNyQkosY0FBYztBQUNoQjtBQUNBLElBQUlLLGFBQWFILG1CQUFPQSxDQUFDO0FBQ3pCLElBQUlJLGFBQWFKLG1CQUFPQSxDQUFDO0FBQ3pCLElBQUlLLFNBQVNMLG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlNLFlBQVlOLG1CQUFPQSxDQUFDO0FBQ3hCLElBQUlPLG1CQUFtQlAsbUJBQU9BLENBQUM7QUFHL0JRLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxNQUFNLEVBQUVDLE9BQU87SUFFdkMsSUFBSSxDQUFDYixhQUFhO1FBQ2hCLE1BQU0sSUFBSWMsTUFBTTtJQUNsQjtJQUVBLElBQUlDO0lBQ0osU0FBU0MsWUFBWUMsS0FBSztRQUN4QkYsTUFBTUU7SUFDUjtJQUVBLElBQUlDO0lBQ0osU0FBU0MsZUFBZUMsVUFBVTtRQUNoQ0YsV0FBV0U7SUFDYjtJQUVBLFNBQVNDLGlCQUFpQkMsVUFBVTtRQUNsQ0osU0FBU0ksVUFBVSxHQUFHQTtJQUN4QjtJQUVBLFNBQVNDLGNBQWNDLE9BQU87UUFDNUJOLFNBQVNNLE9BQU8sR0FBR0E7SUFDckI7SUFFQSxTQUFTQztRQUNQUCxTQUFTUSxLQUFLLEdBQUc7SUFDbkI7SUFFQSxJQUFJQztJQUNKLFNBQVNDLFlBQVlDLE9BQU87UUFDMUJGLFFBQVFFO0lBQ1Y7SUFFQSxJQUFJQyxrQkFBa0IsRUFBRTtJQUN4QixTQUFTQyxrQkFBa0JDLFlBQVk7UUFDckNGLGdCQUFnQkcsSUFBSSxDQUFDRDtJQUN2QjtJQUVBLElBQUlFLFNBQVMsSUFBSTdCLFdBQVdPO0lBRTVCLElBQUl1QixTQUFTLElBQUk1QixPQUFPTSxTQUFTO1FBQy9CdUIsTUFBTUYsT0FBT0UsSUFBSSxDQUFDQyxJQUFJLENBQUNIO1FBQ3ZCSSxPQUFPdEI7UUFDUHVCLFVBQVVwQjtRQUNWUSxPQUFPQztRQUNQSixTQUFTRDtRQUNURCxZQUFZRDtRQUNabUIsYUFBYVQ7UUFDYlUsb0JBQW9CaEI7SUFDdEI7SUFFQVUsT0FBT08sS0FBSztJQUNaUixPQUFPUyxPQUFPO0lBRWQsSUFBSTVCLEtBQUs7UUFDUCxNQUFNQTtJQUNSO0lBRUEsaUNBQWlDO0lBQ2pDLElBQUl5QixjQUFjSSxPQUFPQyxNQUFNLENBQUNmO0lBQ2hDQSxnQkFBZ0JnQixNQUFNLEdBQUc7SUFFekIsSUFBSWQ7SUFDSixJQUFJZCxTQUFTNkIsU0FBUyxFQUFFO1FBQ3RCZixlQUFlL0IsS0FBS0UsV0FBVyxDQUFDcUM7SUFDbEMsT0FDSztRQUNILElBQUlRLFVBQVUsQ0FBQyxTQUFVQyxLQUFLLEdBQUcvQixTQUFTZ0MsR0FBRyxHQUFHaEMsU0FBU2lDLEtBQUssR0FBRyxLQUFNLEtBQUs7UUFDNUUsSUFBSUMsWUFBWUosVUFBVTlCLFNBQVNtQyxNQUFNO1FBQ3pDckIsZUFBZTdCLFlBQVlxQyxhQUFhO1lBQUVjLFdBQVdGO1lBQVdHLFdBQVdIO1FBQVU7SUFDdkY7SUFDQVosY0FBYztJQUVkLElBQUksQ0FBQ1IsZ0JBQWdCLENBQUNBLGFBQWFjLE1BQU0sRUFBRTtRQUN6QyxNQUFNLElBQUloQyxNQUFNO0lBQ2xCO0lBRUEsSUFBSTBDLGlCQUFpQmxELFdBQVdxQyxPQUFPLENBQUNYLGNBQWNkO0lBQ3REc0IsY0FBYztJQUVkLElBQUlpQixhQUFhakQsVUFBVWtELFlBQVksQ0FBQ0YsZ0JBQWdCdEM7SUFDeERzQyxpQkFBaUI7SUFFakIsSUFBSUcsdUJBQXVCbEQsaUJBQWlCZ0QsWUFBWXZDO0lBRXhEQSxTQUFTMEMsSUFBSSxHQUFHRDtJQUNoQnpDLFNBQVNTLEtBQUssR0FBR0EsU0FBUztJQUUxQixPQUFPVDtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXItY29kZS8uL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvcGFyc2VyLXN5bmMuanM/ODM4YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNTeW5jWmxpYiA9IHRydWU7XG52YXIgemxpYiA9IHJlcXVpcmUoJ3psaWInKTtcbnZhciBpbmZsYXRlU3luYyA9IHJlcXVpcmUoJy4vc3luYy1pbmZsYXRlJyk7XG5pZiAoIXpsaWIuZGVmbGF0ZVN5bmMpIHtcbiAgaGFzU3luY1psaWIgPSBmYWxzZTtcbn1cbnZhciBTeW5jUmVhZGVyID0gcmVxdWlyZSgnLi9zeW5jLXJlYWRlcicpO1xudmFyIEZpbHRlclN5bmMgPSByZXF1aXJlKCcuL2ZpbHRlci1wYXJzZS1zeW5jJyk7XG52YXIgUGFyc2VyID0gcmVxdWlyZSgnLi9wYXJzZXInKTtcbnZhciBiaXRtYXBwZXIgPSByZXF1aXJlKCcuL2JpdG1hcHBlcicpO1xudmFyIGZvcm1hdE5vcm1hbGlzZXIgPSByZXF1aXJlKCcuL2Zvcm1hdC1ub3JtYWxpc2VyJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihidWZmZXIsIG9wdGlvbnMpIHtcblxuICBpZiAoIWhhc1N5bmNabGliKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUbyB1c2UgdGhlIHN5bmMgY2FwYWJpbGl0eSBvZiB0aGlzIGxpYnJhcnkgaW4gb2xkIG5vZGUgdmVyc2lvbnMsIHBsZWFzZSBwaW4gcG5nanMgdG8gdjIuMy4wJyk7XG4gIH1cblxuICB2YXIgZXJyO1xuICBmdW5jdGlvbiBoYW5kbGVFcnJvcihfZXJyXykge1xuICAgIGVyciA9IF9lcnJfO1xuICB9XG5cbiAgdmFyIG1ldGFEYXRhO1xuICBmdW5jdGlvbiBoYW5kbGVNZXRhRGF0YShfbWV0YURhdGFfKSB7XG4gICAgbWV0YURhdGEgPSBfbWV0YURhdGFfO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlVHJhbnNDb2xvcih0cmFuc0NvbG9yKSB7XG4gICAgbWV0YURhdGEudHJhbnNDb2xvciA9IHRyYW5zQ29sb3I7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQYWxldHRlKHBhbGV0dGUpIHtcbiAgICBtZXRhRGF0YS5wYWxldHRlID0gcGFsZXR0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVNpbXBsZVRyYW5zcGFyZW5jeSgpIHtcbiAgICBtZXRhRGF0YS5hbHBoYSA9IHRydWU7XG4gIH1cblxuICB2YXIgZ2FtbWE7XG4gIGZ1bmN0aW9uIGhhbmRsZUdhbW1hKF9nYW1tYV8pIHtcbiAgICBnYW1tYSA9IF9nYW1tYV87XG4gIH1cblxuICB2YXIgaW5mbGF0ZURhdGFMaXN0ID0gW107XG4gIGZ1bmN0aW9uIGhhbmRsZUluZmxhdGVEYXRhKGluZmxhdGVkRGF0YSkge1xuICAgIGluZmxhdGVEYXRhTGlzdC5wdXNoKGluZmxhdGVkRGF0YSk7XG4gIH1cblxuICB2YXIgcmVhZGVyID0gbmV3IFN5bmNSZWFkZXIoYnVmZmVyKTtcblxuICB2YXIgcGFyc2VyID0gbmV3IFBhcnNlcihvcHRpb25zLCB7XG4gICAgcmVhZDogcmVhZGVyLnJlYWQuYmluZChyZWFkZXIpLFxuICAgIGVycm9yOiBoYW5kbGVFcnJvcixcbiAgICBtZXRhZGF0YTogaGFuZGxlTWV0YURhdGEsXG4gICAgZ2FtbWE6IGhhbmRsZUdhbW1hLFxuICAgIHBhbGV0dGU6IGhhbmRsZVBhbGV0dGUsXG4gICAgdHJhbnNDb2xvcjogaGFuZGxlVHJhbnNDb2xvcixcbiAgICBpbmZsYXRlRGF0YTogaGFuZGxlSW5mbGF0ZURhdGEsXG4gICAgc2ltcGxlVHJhbnNwYXJlbmN5OiBoYW5kbGVTaW1wbGVUcmFuc3BhcmVuY3lcbiAgfSk7XG5cbiAgcGFyc2VyLnN0YXJ0KCk7XG4gIHJlYWRlci5wcm9jZXNzKCk7XG5cbiAgaWYgKGVycikge1xuICAgIHRocm93IGVycjtcbiAgfVxuXG4gIC8vam9pbiB0b2dldGhlciB0aGUgaW5mbGF0ZSBkYXRhc1xuICB2YXIgaW5mbGF0ZURhdGEgPSBCdWZmZXIuY29uY2F0KGluZmxhdGVEYXRhTGlzdCk7XG4gIGluZmxhdGVEYXRhTGlzdC5sZW5ndGggPSAwO1xuXG4gIHZhciBpbmZsYXRlZERhdGE7XG4gIGlmIChtZXRhRGF0YS5pbnRlcmxhY2UpIHtcbiAgICBpbmZsYXRlZERhdGEgPSB6bGliLmluZmxhdGVTeW5jKGluZmxhdGVEYXRhKTtcbiAgfVxuICBlbHNlIHtcbiAgICB2YXIgcm93U2l6ZSA9ICgobWV0YURhdGEud2lkdGggKiBtZXRhRGF0YS5icHAgKiBtZXRhRGF0YS5kZXB0aCArIDcpID4+IDMpICsgMTtcbiAgICB2YXIgaW1hZ2VTaXplID0gcm93U2l6ZSAqIG1ldGFEYXRhLmhlaWdodDtcbiAgICBpbmZsYXRlZERhdGEgPSBpbmZsYXRlU3luYyhpbmZsYXRlRGF0YSwgeyBjaHVua1NpemU6IGltYWdlU2l6ZSwgbWF4TGVuZ3RoOiBpbWFnZVNpemUgfSk7XG4gIH1cbiAgaW5mbGF0ZURhdGEgPSBudWxsO1xuXG4gIGlmICghaW5mbGF0ZWREYXRhIHx8ICFpbmZsYXRlZERhdGEubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgcG5nIC0gaW52YWxpZCBpbmZsYXRlIGRhdGEgcmVzcG9uc2UnKTtcbiAgfVxuXG4gIHZhciB1bmZpbHRlcmVkRGF0YSA9IEZpbHRlclN5bmMucHJvY2VzcyhpbmZsYXRlZERhdGEsIG1ldGFEYXRhKTtcbiAgaW5mbGF0ZURhdGEgPSBudWxsO1xuXG4gIHZhciBiaXRtYXBEYXRhID0gYml0bWFwcGVyLmRhdGFUb0JpdE1hcCh1bmZpbHRlcmVkRGF0YSwgbWV0YURhdGEpO1xuICB1bmZpbHRlcmVkRGF0YSA9IG51bGw7XG5cbiAgdmFyIG5vcm1hbGlzZWRCaXRtYXBEYXRhID0gZm9ybWF0Tm9ybWFsaXNlcihiaXRtYXBEYXRhLCBtZXRhRGF0YSk7XG5cbiAgbWV0YURhdGEuZGF0YSA9IG5vcm1hbGlzZWRCaXRtYXBEYXRhO1xuICBtZXRhRGF0YS5nYW1tYSA9IGdhbW1hIHx8IDA7XG5cbiAgcmV0dXJuIG1ldGFEYXRhO1xufTtcbiJdLCJuYW1lcyI6WyJoYXNTeW5jWmxpYiIsInpsaWIiLCJyZXF1aXJlIiwiaW5mbGF0ZVN5bmMiLCJkZWZsYXRlU3luYyIsIlN5bmNSZWFkZXIiLCJGaWx0ZXJTeW5jIiwiUGFyc2VyIiwiYml0bWFwcGVyIiwiZm9ybWF0Tm9ybWFsaXNlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJidWZmZXIiLCJvcHRpb25zIiwiRXJyb3IiLCJlcnIiLCJoYW5kbGVFcnJvciIsIl9lcnJfIiwibWV0YURhdGEiLCJoYW5kbGVNZXRhRGF0YSIsIl9tZXRhRGF0YV8iLCJoYW5kbGVUcmFuc0NvbG9yIiwidHJhbnNDb2xvciIsImhhbmRsZVBhbGV0dGUiLCJwYWxldHRlIiwiaGFuZGxlU2ltcGxlVHJhbnNwYXJlbmN5IiwiYWxwaGEiLCJnYW1tYSIsImhhbmRsZUdhbW1hIiwiX2dhbW1hXyIsImluZmxhdGVEYXRhTGlzdCIsImhhbmRsZUluZmxhdGVEYXRhIiwiaW5mbGF0ZWREYXRhIiwicHVzaCIsInJlYWRlciIsInBhcnNlciIsInJlYWQiLCJiaW5kIiwiZXJyb3IiLCJtZXRhZGF0YSIsImluZmxhdGVEYXRhIiwic2ltcGxlVHJhbnNwYXJlbmN5Iiwic3RhcnQiLCJwcm9jZXNzIiwiQnVmZmVyIiwiY29uY2F0IiwibGVuZ3RoIiwiaW50ZXJsYWNlIiwicm93U2l6ZSIsIndpZHRoIiwiYnBwIiwiZGVwdGgiLCJpbWFnZVNpemUiLCJoZWlnaHQiLCJjaHVua1NpemUiLCJtYXhMZW5ndGgiLCJ1bmZpbHRlcmVkRGF0YSIsImJpdG1hcERhdGEiLCJkYXRhVG9CaXRNYXAiLCJub3JtYWxpc2VkQml0bWFwRGF0YSIsImRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/parser-sync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/parser.js":
/*!******************************************!*\
  !*** ./node_modules/pngjs/lib/parser.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/pngjs/lib/constants.js\");\nvar CrcCalculator = __webpack_require__(/*! ./crc */ \"(ssr)/./node_modules/pngjs/lib/crc.js\");\nvar Parser = module.exports = function(options, dependencies) {\n    this._options = options;\n    options.checkCRC = options.checkCRC !== false;\n    this._hasIHDR = false;\n    this._hasIEND = false;\n    this._emittedHeadersFinished = false;\n    // input flags/metadata\n    this._palette = [];\n    this._colorType = 0;\n    this._chunks = {};\n    this._chunks[constants.TYPE_IHDR] = this._handleIHDR.bind(this);\n    this._chunks[constants.TYPE_IEND] = this._handleIEND.bind(this);\n    this._chunks[constants.TYPE_IDAT] = this._handleIDAT.bind(this);\n    this._chunks[constants.TYPE_PLTE] = this._handlePLTE.bind(this);\n    this._chunks[constants.TYPE_tRNS] = this._handleTRNS.bind(this);\n    this._chunks[constants.TYPE_gAMA] = this._handleGAMA.bind(this);\n    this.read = dependencies.read;\n    this.error = dependencies.error;\n    this.metadata = dependencies.metadata;\n    this.gamma = dependencies.gamma;\n    this.transColor = dependencies.transColor;\n    this.palette = dependencies.palette;\n    this.parsed = dependencies.parsed;\n    this.inflateData = dependencies.inflateData;\n    this.finished = dependencies.finished;\n    this.simpleTransparency = dependencies.simpleTransparency;\n    this.headersFinished = dependencies.headersFinished || function() {};\n};\nParser.prototype.start = function() {\n    this.read(constants.PNG_SIGNATURE.length, this._parseSignature.bind(this));\n};\nParser.prototype._parseSignature = function(data) {\n    var signature = constants.PNG_SIGNATURE;\n    for(var i = 0; i < signature.length; i++){\n        if (data[i] !== signature[i]) {\n            this.error(new Error(\"Invalid file signature\"));\n            return;\n        }\n    }\n    this.read(8, this._parseChunkBegin.bind(this));\n};\nParser.prototype._parseChunkBegin = function(data) {\n    // chunk content length\n    var length = data.readUInt32BE(0);\n    // chunk type\n    var type = data.readUInt32BE(4);\n    var name = \"\";\n    for(var i = 4; i < 8; i++){\n        name += String.fromCharCode(data[i]);\n    }\n    //console.log('chunk ', name, length);\n    // chunk flags\n    var ancillary = Boolean(data[4] & 0x20); // or critical\n    //    priv = Boolean(data[5] & 0x20), // or public\n    //    safeToCopy = Boolean(data[7] & 0x20); // or unsafe\n    if (!this._hasIHDR && type !== constants.TYPE_IHDR) {\n        this.error(new Error(\"Expected IHDR on beggining\"));\n        return;\n    }\n    this._crc = new CrcCalculator();\n    this._crc.write(new Buffer(name));\n    if (this._chunks[type]) {\n        return this._chunks[type](length);\n    }\n    if (!ancillary) {\n        this.error(new Error(\"Unsupported critical chunk type \" + name));\n        return;\n    }\n    this.read(length + 4, this._skipChunk.bind(this));\n};\nParser.prototype._skipChunk = function() {\n    this.read(8, this._parseChunkBegin.bind(this));\n};\nParser.prototype._handleChunkEnd = function() {\n    this.read(4, this._parseChunkEnd.bind(this));\n};\nParser.prototype._parseChunkEnd = function(data) {\n    var fileCrc = data.readInt32BE(0);\n    var calcCrc = this._crc.crc32();\n    // check CRC\n    if (this._options.checkCRC && calcCrc !== fileCrc) {\n        this.error(new Error(\"Crc error - \" + fileCrc + \" - \" + calcCrc));\n        return;\n    }\n    if (!this._hasIEND) {\n        this.read(8, this._parseChunkBegin.bind(this));\n    }\n};\nParser.prototype._handleIHDR = function(length) {\n    this.read(length, this._parseIHDR.bind(this));\n};\nParser.prototype._parseIHDR = function(data) {\n    this._crc.write(data);\n    var width = data.readUInt32BE(0);\n    var height = data.readUInt32BE(4);\n    var depth = data[8];\n    var colorType = data[9]; // bits: 1 palette, 2 color, 4 alpha\n    var compr = data[10];\n    var filter = data[11];\n    var interlace = data[12];\n    // console.log('    width', width, 'height', height,\n    //     'depth', depth, 'colorType', colorType,\n    //     'compr', compr, 'filter', filter, 'interlace', interlace\n    // );\n    if (depth !== 8 && depth !== 4 && depth !== 2 && depth !== 1 && depth !== 16) {\n        this.error(new Error(\"Unsupported bit depth \" + depth));\n        return;\n    }\n    if (!(colorType in constants.COLORTYPE_TO_BPP_MAP)) {\n        this.error(new Error(\"Unsupported color type\"));\n        return;\n    }\n    if (compr !== 0) {\n        this.error(new Error(\"Unsupported compression method\"));\n        return;\n    }\n    if (filter !== 0) {\n        this.error(new Error(\"Unsupported filter method\"));\n        return;\n    }\n    if (interlace !== 0 && interlace !== 1) {\n        this.error(new Error(\"Unsupported interlace method\"));\n        return;\n    }\n    this._colorType = colorType;\n    var bpp = constants.COLORTYPE_TO_BPP_MAP[this._colorType];\n    this._hasIHDR = true;\n    this.metadata({\n        width: width,\n        height: height,\n        depth: depth,\n        interlace: Boolean(interlace),\n        palette: Boolean(colorType & constants.COLORTYPE_PALETTE),\n        color: Boolean(colorType & constants.COLORTYPE_COLOR),\n        alpha: Boolean(colorType & constants.COLORTYPE_ALPHA),\n        bpp: bpp,\n        colorType: colorType\n    });\n    this._handleChunkEnd();\n};\nParser.prototype._handlePLTE = function(length) {\n    this.read(length, this._parsePLTE.bind(this));\n};\nParser.prototype._parsePLTE = function(data) {\n    this._crc.write(data);\n    var entries = Math.floor(data.length / 3);\n    // console.log('Palette:', entries);\n    for(var i = 0; i < entries; i++){\n        this._palette.push([\n            data[i * 3],\n            data[i * 3 + 1],\n            data[i * 3 + 2],\n            0xff\n        ]);\n    }\n    this.palette(this._palette);\n    this._handleChunkEnd();\n};\nParser.prototype._handleTRNS = function(length) {\n    this.simpleTransparency();\n    this.read(length, this._parseTRNS.bind(this));\n};\nParser.prototype._parseTRNS = function(data) {\n    this._crc.write(data);\n    // palette\n    if (this._colorType === constants.COLORTYPE_PALETTE_COLOR) {\n        if (this._palette.length === 0) {\n            this.error(new Error(\"Transparency chunk must be after palette\"));\n            return;\n        }\n        if (data.length > this._palette.length) {\n            this.error(new Error(\"More transparent colors than palette size\"));\n            return;\n        }\n        for(var i = 0; i < data.length; i++){\n            this._palette[i][3] = data[i];\n        }\n        this.palette(this._palette);\n    }\n    // for colorType 0 (grayscale) and 2 (rgb)\n    // there might be one gray/color defined as transparent\n    if (this._colorType === constants.COLORTYPE_GRAYSCALE) {\n        // grey, 2 bytes\n        this.transColor([\n            data.readUInt16BE(0)\n        ]);\n    }\n    if (this._colorType === constants.COLORTYPE_COLOR) {\n        this.transColor([\n            data.readUInt16BE(0),\n            data.readUInt16BE(2),\n            data.readUInt16BE(4)\n        ]);\n    }\n    this._handleChunkEnd();\n};\nParser.prototype._handleGAMA = function(length) {\n    this.read(length, this._parseGAMA.bind(this));\n};\nParser.prototype._parseGAMA = function(data) {\n    this._crc.write(data);\n    this.gamma(data.readUInt32BE(0) / constants.GAMMA_DIVISION);\n    this._handleChunkEnd();\n};\nParser.prototype._handleIDAT = function(length) {\n    if (!this._emittedHeadersFinished) {\n        this._emittedHeadersFinished = true;\n        this.headersFinished();\n    }\n    this.read(-length, this._parseIDAT.bind(this, length));\n};\nParser.prototype._parseIDAT = function(length, data) {\n    this._crc.write(data);\n    if (this._colorType === constants.COLORTYPE_PALETTE_COLOR && this._palette.length === 0) {\n        throw new Error(\"Expected palette not found\");\n    }\n    this.inflateData(data);\n    var leftOverLength = length - data.length;\n    if (leftOverLength > 0) {\n        this._handleIDAT(leftOverLength);\n    } else {\n        this._handleChunkEnd();\n    }\n};\nParser.prototype._handleIEND = function(length) {\n    this.read(length, this._parseIEND.bind(this));\n};\nParser.prototype._parseIEND = function(data) {\n    this._crc.write(data);\n    this._hasIEND = true;\n    this._handleChunkEnd();\n    if (this.finished) {\n        this.finished();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/png-sync.js":
/*!********************************************!*\
  !*** ./node_modules/pngjs/lib/png-sync.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar parse = __webpack_require__(/*! ./parser-sync */ \"(ssr)/./node_modules/pngjs/lib/parser-sync.js\");\nvar pack = __webpack_require__(/*! ./packer-sync */ \"(ssr)/./node_modules/pngjs/lib/packer-sync.js\");\nexports.read = function(buffer, options) {\n    return parse(buffer, options || {});\n};\nexports.write = function(png, options) {\n    return pack(png, options);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL3BuZy1zeW5jLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBR0EsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUMsT0FBT0QsbUJBQU9BLENBQUM7QUFHbkJFLFlBQVksR0FBRyxTQUFTRSxNQUFNLEVBQUVDLE9BQU87SUFFckMsT0FBT04sTUFBTUssUUFBUUMsV0FBVyxDQUFDO0FBQ25DO0FBRUFILGFBQWEsR0FBRyxTQUFTSyxHQUFHLEVBQUVGLE9BQU87SUFFbkMsT0FBT0osS0FBS00sS0FBS0Y7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xci1jb2RlLy4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wbmctc3luYy5qcz84YWVkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuXG52YXIgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlci1zeW5jJyk7XG52YXIgcGFjayA9IHJlcXVpcmUoJy4vcGFja2VyLXN5bmMnKTtcblxuXG5leHBvcnRzLnJlYWQgPSBmdW5jdGlvbihidWZmZXIsIG9wdGlvbnMpIHtcblxuICByZXR1cm4gcGFyc2UoYnVmZmVyLCBvcHRpb25zIHx8IHt9KTtcbn07XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbihwbmcsIG9wdGlvbnMpIHtcblxuICByZXR1cm4gcGFjayhwbmcsIG9wdGlvbnMpO1xufTtcbiJdLCJuYW1lcyI6WyJwYXJzZSIsInJlcXVpcmUiLCJwYWNrIiwiZXhwb3J0cyIsInJlYWQiLCJidWZmZXIiLCJvcHRpb25zIiwid3JpdGUiLCJwbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/png-sync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/png.js":
/*!***************************************!*\
  !*** ./node_modules/pngjs/lib/png.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar util = __webpack_require__(/*! util */ \"util\");\nvar Stream = __webpack_require__(/*! stream */ \"stream\");\nvar Parser = __webpack_require__(/*! ./parser-async */ \"(ssr)/./node_modules/pngjs/lib/parser-async.js\");\nvar Packer = __webpack_require__(/*! ./packer-async */ \"(ssr)/./node_modules/pngjs/lib/packer-async.js\");\nvar PNGSync = __webpack_require__(/*! ./png-sync */ \"(ssr)/./node_modules/pngjs/lib/png-sync.js\");\nvar PNG = exports.PNG = function(options) {\n    Stream.call(this);\n    options = options || {}; // eslint-disable-line no-param-reassign\n    // coerce pixel dimensions to integers (also coerces undefined -> 0):\n    this.width = options.width | 0;\n    this.height = options.height | 0;\n    this.data = this.width > 0 && this.height > 0 ? new Buffer(4 * this.width * this.height) : null;\n    if (options.fill && this.data) {\n        this.data.fill(0);\n    }\n    this.gamma = 0;\n    this.readable = this.writable = true;\n    this._parser = new Parser(options);\n    this._parser.on(\"error\", this.emit.bind(this, \"error\"));\n    this._parser.on(\"close\", this._handleClose.bind(this));\n    this._parser.on(\"metadata\", this._metadata.bind(this));\n    this._parser.on(\"gamma\", this._gamma.bind(this));\n    this._parser.on(\"parsed\", (function(data) {\n        this.data = data;\n        this.emit(\"parsed\", data);\n    }).bind(this));\n    this._packer = new Packer(options);\n    this._packer.on(\"data\", this.emit.bind(this, \"data\"));\n    this._packer.on(\"end\", this.emit.bind(this, \"end\"));\n    this._parser.on(\"close\", this._handleClose.bind(this));\n    this._packer.on(\"error\", this.emit.bind(this, \"error\"));\n};\nutil.inherits(PNG, Stream);\nPNG.sync = PNGSync;\nPNG.prototype.pack = function() {\n    if (!this.data || !this.data.length) {\n        this.emit(\"error\", \"No data provided\");\n        return this;\n    }\n    process.nextTick((function() {\n        this._packer.pack(this.data, this.width, this.height, this.gamma);\n    }).bind(this));\n    return this;\n};\nPNG.prototype.parse = function(data, callback) {\n    if (callback) {\n        var onParsed, onError;\n        onParsed = (function(parsedData) {\n            this.removeListener(\"error\", onError);\n            this.data = parsedData;\n            callback(null, this);\n        }).bind(this);\n        onError = (function(err) {\n            this.removeListener(\"parsed\", onParsed);\n            callback(err, null);\n        }).bind(this);\n        this.once(\"parsed\", onParsed);\n        this.once(\"error\", onError);\n    }\n    this.end(data);\n    return this;\n};\nPNG.prototype.write = function(data) {\n    this._parser.write(data);\n    return true;\n};\nPNG.prototype.end = function(data) {\n    this._parser.end(data);\n};\nPNG.prototype._metadata = function(metadata) {\n    this.width = metadata.width;\n    this.height = metadata.height;\n    this.emit(\"metadata\", metadata);\n};\nPNG.prototype._gamma = function(gamma) {\n    this.gamma = gamma;\n};\nPNG.prototype._handleClose = function() {\n    if (!this._parser.writable && !this._packer.readable) {\n        this.emit(\"close\");\n    }\n};\nPNG.bitblt = function(src, dst, srcX, srcY, width, height, deltaX, deltaY) {\n    // coerce pixel dimensions to integers (also coerces undefined -> 0):\n    /* eslint-disable no-param-reassign */ srcX |= 0;\n    srcY |= 0;\n    width |= 0;\n    height |= 0;\n    deltaX |= 0;\n    deltaY |= 0;\n    /* eslint-enable no-param-reassign */ if (srcX > src.width || srcY > src.height || srcX + width > src.width || srcY + height > src.height) {\n        throw new Error(\"bitblt reading outside image\");\n    }\n    if (deltaX > dst.width || deltaY > dst.height || deltaX + width > dst.width || deltaY + height > dst.height) {\n        throw new Error(\"bitblt writing outside image\");\n    }\n    for(var y = 0; y < height; y++){\n        src.data.copy(dst.data, (deltaY + y) * dst.width + deltaX << 2, (srcY + y) * src.width + srcX << 2, (srcY + y) * src.width + srcX + width << 2);\n    }\n};\nPNG.prototype.bitblt = function(dst, srcX, srcY, width, height, deltaX, deltaY) {\n    PNG.bitblt(this, dst, srcX, srcY, width, height, deltaX, deltaY);\n    return this;\n};\nPNG.adjustGamma = function(src) {\n    if (src.gamma) {\n        for(var y = 0; y < src.height; y++){\n            for(var x = 0; x < src.width; x++){\n                var idx = src.width * y + x << 2;\n                for(var i = 0; i < 3; i++){\n                    var sample = src.data[idx + i] / 255;\n                    sample = Math.pow(sample, 1 / 2.2 / src.gamma);\n                    src.data[idx + i] = Math.round(sample * 255);\n                }\n            }\n        }\n        src.gamma = 0;\n    }\n};\nPNG.prototype.adjustGamma = function() {\n    PNG.adjustGamma(this);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/png.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/sync-inflate.js":
/*!************************************************!*\
  !*** ./node_modules/pngjs/lib/sync-inflate.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar assert = (__webpack_require__(/*! assert */ \"assert\").ok);\nvar zlib = __webpack_require__(/*! zlib */ \"zlib\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar kMaxLength = (__webpack_require__(/*! buffer */ \"buffer\").kMaxLength);\nfunction Inflate(opts) {\n    if (!(this instanceof Inflate)) {\n        return new Inflate(opts);\n    }\n    if (opts && opts.chunkSize < zlib.Z_MIN_CHUNK) {\n        opts.chunkSize = zlib.Z_MIN_CHUNK;\n    }\n    zlib.Inflate.call(this, opts);\n    // Node 8 --> 9 compatibility check\n    this._offset = this._offset === undefined ? this._outOffset : this._offset;\n    this._buffer = this._buffer || this._outBuffer;\n    if (opts && opts.maxLength != null) {\n        this._maxLength = opts.maxLength;\n    }\n}\nfunction createInflate(opts) {\n    return new Inflate(opts);\n}\nfunction _close(engine, callback) {\n    if (callback) {\n        process.nextTick(callback);\n    }\n    // Caller may invoke .close after a zlib error (which will null _handle).\n    if (!engine._handle) {\n        return;\n    }\n    engine._handle.close();\n    engine._handle = null;\n}\nInflate.prototype._processChunk = function(chunk, flushFlag, asyncCb) {\n    if (typeof asyncCb === \"function\") {\n        return zlib.Inflate._processChunk.call(this, chunk, flushFlag, asyncCb);\n    }\n    var self = this;\n    var availInBefore = chunk && chunk.length;\n    var availOutBefore = this._chunkSize - this._offset;\n    var leftToInflate = this._maxLength;\n    var inOff = 0;\n    var buffers = [];\n    var nread = 0;\n    var error;\n    this.on(\"error\", function(err) {\n        error = err;\n    });\n    function handleChunk(availInAfter, availOutAfter) {\n        if (self._hadError) {\n            return;\n        }\n        var have = availOutBefore - availOutAfter;\n        assert(have >= 0, \"have should not go down\");\n        if (have > 0) {\n            var out = self._buffer.slice(self._offset, self._offset + have);\n            self._offset += have;\n            if (out.length > leftToInflate) {\n                out = out.slice(0, leftToInflate);\n            }\n            buffers.push(out);\n            nread += out.length;\n            leftToInflate -= out.length;\n            if (leftToInflate === 0) {\n                return false;\n            }\n        }\n        if (availOutAfter === 0 || self._offset >= self._chunkSize) {\n            availOutBefore = self._chunkSize;\n            self._offset = 0;\n            self._buffer = Buffer.allocUnsafe(self._chunkSize);\n        }\n        if (availOutAfter === 0) {\n            inOff += availInBefore - availInAfter;\n            availInBefore = availInAfter;\n            return true;\n        }\n        return false;\n    }\n    assert(this._handle, \"zlib binding closed\");\n    do {\n        var res = this._handle.writeSync(flushFlag, chunk, inOff, availInBefore, this._buffer, this._offset, availOutBefore); // out_len\n        // Node 8 --> 9 compatibility check\n        res = res || this._writeState;\n    }while (!this._hadError && handleChunk(res[0], res[1]));\n    if (this._hadError) {\n        throw error;\n    }\n    if (nread >= kMaxLength) {\n        _close(this);\n        throw new RangeError(\"Cannot create final Buffer. It would be larger than 0x\" + kMaxLength.toString(16) + \" bytes\");\n    }\n    var buf = Buffer.concat(buffers, nread);\n    _close(this);\n    return buf;\n};\nutil.inherits(Inflate, zlib.Inflate);\nfunction zlibBufferSync(engine, buffer) {\n    if (typeof buffer === \"string\") {\n        buffer = Buffer.from(buffer);\n    }\n    if (!(buffer instanceof Buffer)) {\n        throw new TypeError(\"Not a string or buffer\");\n    }\n    var flushFlag = engine._finishFlushFlag;\n    if (flushFlag == null) {\n        flushFlag = zlib.Z_FINISH;\n    }\n    return engine._processChunk(buffer, flushFlag);\n}\nfunction inflateSync(buffer, opts) {\n    return zlibBufferSync(new Inflate(opts), buffer);\n}\nmodule.exports = exports = inflateSync;\nexports.Inflate = Inflate;\nexports.createInflate = createInflate;\nexports.inflateSync = inflateSync;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/sync-inflate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/sync-reader.js":
/*!***********************************************!*\
  !*** ./node_modules/pngjs/lib/sync-reader.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\nvar SyncReader = module.exports = function(buffer) {\n    this._buffer = buffer;\n    this._reads = [];\n};\nSyncReader.prototype.read = function(length, callback) {\n    this._reads.push({\n        length: Math.abs(length),\n        allowLess: length < 0,\n        func: callback\n    });\n};\nSyncReader.prototype.process = function() {\n    // as long as there is any data and read requests\n    while(this._reads.length > 0 && this._buffer.length){\n        var read = this._reads[0];\n        if (this._buffer.length && (this._buffer.length >= read.length || read.allowLess)) {\n            // ok there is any data so that we can satisfy this request\n            this._reads.shift(); // == read\n            var buf = this._buffer;\n            this._buffer = buf.slice(read.length);\n            read.func.call(this, buf.slice(0, read.length));\n        } else {\n            break;\n        }\n    }\n    if (this._reads.length > 0) {\n        return new Error(\"There are some read requests waitng on finished stream\");\n    }\n    if (this._buffer.length > 0) {\n        return new Error(\"unrecognised content at end of stream\");\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL3N5bmMtcmVhZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsYUFBYUMsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLE1BQU07SUFFL0MsSUFBSSxDQUFDQyxPQUFPLEdBQUdEO0lBQ2YsSUFBSSxDQUFDRSxNQUFNLEdBQUcsRUFBRTtBQUNsQjtBQUVBTCxXQUFXTSxTQUFTLENBQUNDLElBQUksR0FBRyxTQUFTQyxNQUFNLEVBQUVDLFFBQVE7SUFFbkQsSUFBSSxDQUFDSixNQUFNLENBQUNLLElBQUksQ0FBQztRQUNmRixRQUFRRyxLQUFLQyxHQUFHLENBQUNKO1FBQ2pCSyxXQUFXTCxTQUFTO1FBQ3BCTSxNQUFNTDtJQUNSO0FBQ0Y7QUFFQVQsV0FBV00sU0FBUyxDQUFDUyxPQUFPLEdBQUc7SUFFN0IsaURBQWlEO0lBQ2pELE1BQU8sSUFBSSxDQUFDVixNQUFNLENBQUNHLE1BQU0sR0FBRyxLQUFLLElBQUksQ0FBQ0osT0FBTyxDQUFDSSxNQUFNLENBQUU7UUFFcEQsSUFBSUQsT0FBTyxJQUFJLENBQUNGLE1BQU0sQ0FBQyxFQUFFO1FBRXpCLElBQUksSUFBSSxDQUFDRCxPQUFPLENBQUNJLE1BQU0sSUFBSyxLQUFJLENBQUNKLE9BQU8sQ0FBQ0ksTUFBTSxJQUFJRCxLQUFLQyxNQUFNLElBQUlELEtBQUtNLFNBQVMsR0FBRztZQUVqRiwyREFBMkQ7WUFDM0QsSUFBSSxDQUFDUixNQUFNLENBQUNXLEtBQUssSUFBSSxVQUFVO1lBRS9CLElBQUlDLE1BQU0sSUFBSSxDQUFDYixPQUFPO1lBRXRCLElBQUksQ0FBQ0EsT0FBTyxHQUFHYSxJQUFJQyxLQUFLLENBQUNYLEtBQUtDLE1BQU07WUFFcENELEtBQUtPLElBQUksQ0FBQ0ssSUFBSSxDQUFDLElBQUksRUFBRUYsSUFBSUMsS0FBSyxDQUFDLEdBQUdYLEtBQUtDLE1BQU07UUFFL0MsT0FDSztZQUNIO1FBQ0Y7SUFFRjtJQUVBLElBQUksSUFBSSxDQUFDSCxNQUFNLENBQUNHLE1BQU0sR0FBRyxHQUFHO1FBQzFCLE9BQU8sSUFBSVksTUFBTTtJQUNuQjtJQUVBLElBQUksSUFBSSxDQUFDaEIsT0FBTyxDQUFDSSxNQUFNLEdBQUcsR0FBRztRQUMzQixPQUFPLElBQUlZLE1BQU07SUFDbkI7QUFFRiIsInNvdXJjZXMiOlsid2VicGFjazovL3FyLWNvZGUvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL3N5bmMtcmVhZGVyLmpzPzJmMWEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3luY1JlYWRlciA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYnVmZmVyKSB7XG5cbiAgdGhpcy5fYnVmZmVyID0gYnVmZmVyO1xuICB0aGlzLl9yZWFkcyA9IFtdO1xufTtcblxuU3luY1JlYWRlci5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uKGxlbmd0aCwgY2FsbGJhY2spIHtcblxuICB0aGlzLl9yZWFkcy5wdXNoKHtcbiAgICBsZW5ndGg6IE1hdGguYWJzKGxlbmd0aCksIC8vIGlmIGxlbmd0aCA8IDAgdGhlbiBhdCBtb3N0IHRoaXMgbGVuZ3RoXG4gICAgYWxsb3dMZXNzOiBsZW5ndGggPCAwLFxuICAgIGZ1bmM6IGNhbGxiYWNrXG4gIH0pO1xufTtcblxuU3luY1JlYWRlci5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uKCkge1xuXG4gIC8vIGFzIGxvbmcgYXMgdGhlcmUgaXMgYW55IGRhdGEgYW5kIHJlYWQgcmVxdWVzdHNcbiAgd2hpbGUgKHRoaXMuX3JlYWRzLmxlbmd0aCA+IDAgJiYgdGhpcy5fYnVmZmVyLmxlbmd0aCkge1xuXG4gICAgdmFyIHJlYWQgPSB0aGlzLl9yZWFkc1swXTtcblxuICAgIGlmICh0aGlzLl9idWZmZXIubGVuZ3RoICYmICh0aGlzLl9idWZmZXIubGVuZ3RoID49IHJlYWQubGVuZ3RoIHx8IHJlYWQuYWxsb3dMZXNzKSkge1xuXG4gICAgICAvLyBvayB0aGVyZSBpcyBhbnkgZGF0YSBzbyB0aGF0IHdlIGNhbiBzYXRpc2Z5IHRoaXMgcmVxdWVzdFxuICAgICAgdGhpcy5fcmVhZHMuc2hpZnQoKTsgLy8gPT0gcmVhZFxuXG4gICAgICB2YXIgYnVmID0gdGhpcy5fYnVmZmVyO1xuXG4gICAgICB0aGlzLl9idWZmZXIgPSBidWYuc2xpY2UocmVhZC5sZW5ndGgpO1xuXG4gICAgICByZWFkLmZ1bmMuY2FsbCh0aGlzLCBidWYuc2xpY2UoMCwgcmVhZC5sZW5ndGgpKTtcblxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICB9XG5cbiAgaWYgKHRoaXMuX3JlYWRzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdUaGVyZSBhcmUgc29tZSByZWFkIHJlcXVlc3RzIHdhaXRuZyBvbiBmaW5pc2hlZCBzdHJlYW0nKTtcbiAgfVxuXG4gIGlmICh0aGlzLl9idWZmZXIubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ3VucmVjb2duaXNlZCBjb250ZW50IGF0IGVuZCBvZiBzdHJlYW0nKTtcbiAgfVxuXG59O1xuIl0sIm5hbWVzIjpbIlN5bmNSZWFkZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiYnVmZmVyIiwiX2J1ZmZlciIsIl9yZWFkcyIsInByb3RvdHlwZSIsInJlYWQiLCJsZW5ndGgiLCJjYWxsYmFjayIsInB1c2giLCJNYXRoIiwiYWJzIiwiYWxsb3dMZXNzIiwiZnVuYyIsInByb2Nlc3MiLCJzaGlmdCIsImJ1ZiIsInNsaWNlIiwiY2FsbCIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/sync-reader.js\n");

/***/ })

};
;