"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@jimp";
exports.ids = ["vendor-chunks/@jimp"];
exports.modules = {

/***/ "(ssr)/./node_modules/@jimp/bmp/dist/index.js":
/*!**********************************************!*\
  !*** ./node_modules/@jimp/bmp/dist/index.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _bmpJs = _interopRequireDefault(__webpack_require__(/*! bmp-js */ \"(ssr)/./node_modules/bmp-js/index.js\"));\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\nvar MIME_TYPE = \"image/bmp\";\nvar MIME_TYPE_SECOND = \"image/x-ms-bmp\";\nfunction toAGBR(image) {\n    return (0, _utils.scan)(image, 0, 0, image.bitmap.width, image.bitmap.height, function(x, y, index) {\n        var red = this.bitmap.data[index + 0];\n        var green = this.bitmap.data[index + 1];\n        var blue = this.bitmap.data[index + 2];\n        var alpha = this.bitmap.data[index + 3];\n        this.bitmap.data[index + 0] = alpha;\n        this.bitmap.data[index + 1] = blue;\n        this.bitmap.data[index + 2] = green;\n        this.bitmap.data[index + 3] = red;\n    }).bitmap;\n}\nfunction fromAGBR(bitmap) {\n    return (0, _utils.scan)({\n        bitmap: bitmap\n    }, 0, 0, bitmap.width, bitmap.height, function(x, y, index) {\n        var alpha = this.bitmap.data[index + 0];\n        var blue = this.bitmap.data[index + 1];\n        var green = this.bitmap.data[index + 2];\n        var red = this.bitmap.data[index + 3];\n        this.bitmap.data[index + 0] = red;\n        this.bitmap.data[index + 1] = green;\n        this.bitmap.data[index + 2] = blue;\n        this.bitmap.data[index + 3] = bitmap.is_with_alpha ? alpha : 0xff;\n    }).bitmap;\n}\nvar decode = function decode(data) {\n    return fromAGBR(_bmpJs[\"default\"].decode(data));\n};\nvar encode = function encode(image) {\n    return _bmpJs[\"default\"].encode(toAGBR(image)).data;\n};\nvar _default = function _default() {\n    var _decoders, _encoders;\n    return {\n        mime: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, [\n            \"bmp\"\n        ]),\n        constants: {\n            MIME_BMP: MIME_TYPE,\n            MIME_X_MS_BMP: MIME_TYPE_SECOND\n        },\n        decoders: (_decoders = {}, (0, _defineProperty2[\"default\"])(_decoders, MIME_TYPE, decode), (0, _defineProperty2[\"default\"])(_decoders, MIME_TYPE_SECOND, decode), _decoders),\n        encoders: (_encoders = {}, (0, _defineProperty2[\"default\"])(_encoders, MIME_TYPE, encode), (0, _defineProperty2[\"default\"])(_encoders, MIME_TYPE_SECOND, encode), _encoders)\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvYm1wL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSx5QkFBeUJDLG1CQUFPQSxDQUFDLDBIQUE4QztBQUVuRkMsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFrQixHQUFHLEtBQUs7QUFFMUIsSUFBSUUsbUJBQW1CTix1QkFBdUJDLG1CQUFPQSxDQUFDLDRHQUF1QztBQUU3RixJQUFJTSxTQUFTUCx1QkFBdUJDLG1CQUFPQSxDQUFDLG9EQUFRO0FBRXBELElBQUlPLFNBQVNQLG1CQUFPQSxDQUFDLG1FQUFhO0FBRWxDLElBQUlRLFlBQVk7QUFDaEIsSUFBSUMsbUJBQW1CO0FBRXZCLFNBQVNDLE9BQU9DLEtBQUs7SUFDbkIsT0FBTyxDQUFDLEdBQUdKLE9BQU9LLElBQUksRUFBRUQsT0FBTyxHQUFHLEdBQUdBLE1BQU1FLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFSCxNQUFNRSxNQUFNLENBQUNFLE1BQU0sRUFBRSxTQUFVQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsS0FBSztRQUNqRyxJQUFJQyxNQUFNLElBQUksQ0FBQ04sTUFBTSxDQUFDTyxJQUFJLENBQUNGLFFBQVEsRUFBRTtRQUNyQyxJQUFJRyxRQUFRLElBQUksQ0FBQ1IsTUFBTSxDQUFDTyxJQUFJLENBQUNGLFFBQVEsRUFBRTtRQUN2QyxJQUFJSSxPQUFPLElBQUksQ0FBQ1QsTUFBTSxDQUFDTyxJQUFJLENBQUNGLFFBQVEsRUFBRTtRQUN0QyxJQUFJSyxRQUFRLElBQUksQ0FBQ1YsTUFBTSxDQUFDTyxJQUFJLENBQUNGLFFBQVEsRUFBRTtRQUN2QyxJQUFJLENBQUNMLE1BQU0sQ0FBQ08sSUFBSSxDQUFDRixRQUFRLEVBQUUsR0FBR0s7UUFDOUIsSUFBSSxDQUFDVixNQUFNLENBQUNPLElBQUksQ0FBQ0YsUUFBUSxFQUFFLEdBQUdJO1FBQzlCLElBQUksQ0FBQ1QsTUFBTSxDQUFDTyxJQUFJLENBQUNGLFFBQVEsRUFBRSxHQUFHRztRQUM5QixJQUFJLENBQUNSLE1BQU0sQ0FBQ08sSUFBSSxDQUFDRixRQUFRLEVBQUUsR0FBR0M7SUFDaEMsR0FBR04sTUFBTTtBQUNYO0FBRUEsU0FBU1csU0FBU1gsTUFBTTtJQUN0QixPQUFPLENBQUMsR0FBR04sT0FBT0ssSUFBSSxFQUFFO1FBQ3RCQyxRQUFRQTtJQUNWLEdBQUcsR0FBRyxHQUFHQSxPQUFPQyxLQUFLLEVBQUVELE9BQU9FLE1BQU0sRUFBRSxTQUFVQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsS0FBSztRQUN6RCxJQUFJSyxRQUFRLElBQUksQ0FBQ1YsTUFBTSxDQUFDTyxJQUFJLENBQUNGLFFBQVEsRUFBRTtRQUN2QyxJQUFJSSxPQUFPLElBQUksQ0FBQ1QsTUFBTSxDQUFDTyxJQUFJLENBQUNGLFFBQVEsRUFBRTtRQUN0QyxJQUFJRyxRQUFRLElBQUksQ0FBQ1IsTUFBTSxDQUFDTyxJQUFJLENBQUNGLFFBQVEsRUFBRTtRQUN2QyxJQUFJQyxNQUFNLElBQUksQ0FBQ04sTUFBTSxDQUFDTyxJQUFJLENBQUNGLFFBQVEsRUFBRTtRQUNyQyxJQUFJLENBQUNMLE1BQU0sQ0FBQ08sSUFBSSxDQUFDRixRQUFRLEVBQUUsR0FBR0M7UUFDOUIsSUFBSSxDQUFDTixNQUFNLENBQUNPLElBQUksQ0FBQ0YsUUFBUSxFQUFFLEdBQUdHO1FBQzlCLElBQUksQ0FBQ1IsTUFBTSxDQUFDTyxJQUFJLENBQUNGLFFBQVEsRUFBRSxHQUFHSTtRQUM5QixJQUFJLENBQUNULE1BQU0sQ0FBQ08sSUFBSSxDQUFDRixRQUFRLEVBQUUsR0FBR0wsT0FBT1ksYUFBYSxHQUFHRixRQUFRO0lBQy9ELEdBQUdWLE1BQU07QUFDWDtBQUVBLElBQUlhLFNBQVMsU0FBU0EsT0FBT04sSUFBSTtJQUMvQixPQUFPSSxTQUFTbEIsTUFBTSxDQUFDLFVBQVUsQ0FBQ29CLE1BQU0sQ0FBQ047QUFDM0M7QUFFQSxJQUFJTyxTQUFTLFNBQVNBLE9BQU9oQixLQUFLO0lBQ2hDLE9BQU9MLE1BQU0sQ0FBQyxVQUFVLENBQUNxQixNQUFNLENBQUNqQixPQUFPQyxRQUFRUyxJQUFJO0FBQ3JEO0FBRUEsSUFBSVEsV0FBVyxTQUFTQTtJQUN0QixJQUFJQyxXQUFXQztJQUVmLE9BQU87UUFDTEMsTUFBTSxDQUFDLEdBQUcxQixnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHRyxXQUFXO1lBQUM7U0FBTTtRQUM3RHdCLFdBQVc7WUFDVEMsVUFBVXpCO1lBQ1YwQixlQUFlekI7UUFDakI7UUFDQTBCLFVBQVdOLENBQUFBLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBR3hCLGdCQUFnQixDQUFDLFVBQVUsRUFBRXdCLFdBQVdyQixXQUFXa0IsU0FBUyxDQUFDLEdBQUdyQixnQkFBZ0IsQ0FBQyxVQUFVLEVBQUV3QixXQUFXcEIsa0JBQWtCaUIsU0FBU0csU0FBUTtRQUMxS08sVUFBV04sQ0FBQUEsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHekIsZ0JBQWdCLENBQUMsVUFBVSxFQUFFeUIsV0FBV3RCLFdBQVdtQixTQUFTLENBQUMsR0FBR3RCLGdCQUFnQixDQUFDLFVBQVUsRUFBRXlCLFdBQVdyQixrQkFBa0JrQixTQUFTRyxTQUFRO0lBQzVLO0FBQ0Y7QUFFQTNCLGtCQUFrQixHQUFHeUI7QUFDckJTLE9BQU9sQyxPQUFPLEdBQUdBLFFBQVFtQyxPQUFPLEVBQ2hDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3FyLWNvZGUvLi9ub2RlX21vZHVsZXMvQGppbXAvYm1wL2Rpc3QvaW5kZXguanM/MDQ1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9ibXBKcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImJtcC1qc1wiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQGppbXAvdXRpbHNcIik7XG5cbnZhciBNSU1FX1RZUEUgPSBcImltYWdlL2JtcFwiO1xudmFyIE1JTUVfVFlQRV9TRUNPTkQgPSBcImltYWdlL3gtbXMtYm1wXCI7XG5cbmZ1bmN0aW9uIHRvQUdCUihpbWFnZSkge1xuICByZXR1cm4gKDAsIF91dGlscy5zY2FuKShpbWFnZSwgMCwgMCwgaW1hZ2UuYml0bWFwLndpZHRoLCBpbWFnZS5iaXRtYXAuaGVpZ2h0LCBmdW5jdGlvbiAoeCwgeSwgaW5kZXgpIHtcbiAgICB2YXIgcmVkID0gdGhpcy5iaXRtYXAuZGF0YVtpbmRleCArIDBdO1xuICAgIHZhciBncmVlbiA9IHRoaXMuYml0bWFwLmRhdGFbaW5kZXggKyAxXTtcbiAgICB2YXIgYmx1ZSA9IHRoaXMuYml0bWFwLmRhdGFbaW5kZXggKyAyXTtcbiAgICB2YXIgYWxwaGEgPSB0aGlzLmJpdG1hcC5kYXRhW2luZGV4ICsgM107XG4gICAgdGhpcy5iaXRtYXAuZGF0YVtpbmRleCArIDBdID0gYWxwaGE7XG4gICAgdGhpcy5iaXRtYXAuZGF0YVtpbmRleCArIDFdID0gYmx1ZTtcbiAgICB0aGlzLmJpdG1hcC5kYXRhW2luZGV4ICsgMl0gPSBncmVlbjtcbiAgICB0aGlzLmJpdG1hcC5kYXRhW2luZGV4ICsgM10gPSByZWQ7XG4gIH0pLmJpdG1hcDtcbn1cblxuZnVuY3Rpb24gZnJvbUFHQlIoYml0bWFwKSB7XG4gIHJldHVybiAoMCwgX3V0aWxzLnNjYW4pKHtcbiAgICBiaXRtYXA6IGJpdG1hcFxuICB9LCAwLCAwLCBiaXRtYXAud2lkdGgsIGJpdG1hcC5oZWlnaHQsIGZ1bmN0aW9uICh4LCB5LCBpbmRleCkge1xuICAgIHZhciBhbHBoYSA9IHRoaXMuYml0bWFwLmRhdGFbaW5kZXggKyAwXTtcbiAgICB2YXIgYmx1ZSA9IHRoaXMuYml0bWFwLmRhdGFbaW5kZXggKyAxXTtcbiAgICB2YXIgZ3JlZW4gPSB0aGlzLmJpdG1hcC5kYXRhW2luZGV4ICsgMl07XG4gICAgdmFyIHJlZCA9IHRoaXMuYml0bWFwLmRhdGFbaW5kZXggKyAzXTtcbiAgICB0aGlzLmJpdG1hcC5kYXRhW2luZGV4ICsgMF0gPSByZWQ7XG4gICAgdGhpcy5iaXRtYXAuZGF0YVtpbmRleCArIDFdID0gZ3JlZW47XG4gICAgdGhpcy5iaXRtYXAuZGF0YVtpbmRleCArIDJdID0gYmx1ZTtcbiAgICB0aGlzLmJpdG1hcC5kYXRhW2luZGV4ICsgM10gPSBiaXRtYXAuaXNfd2l0aF9hbHBoYSA/IGFscGhhIDogMHhmZjtcbiAgfSkuYml0bWFwO1xufVxuXG52YXIgZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGRhdGEpIHtcbiAgcmV0dXJuIGZyb21BR0JSKF9ibXBKc1tcImRlZmF1bHRcIl0uZGVjb2RlKGRhdGEpKTtcbn07XG5cbnZhciBlbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoaW1hZ2UpIHtcbiAgcmV0dXJuIF9ibXBKc1tcImRlZmF1bHRcIl0uZW5jb2RlKHRvQUdCUihpbWFnZSkpLmRhdGE7XG59O1xuXG52YXIgX2RlZmF1bHQgPSBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgdmFyIF9kZWNvZGVycywgX2VuY29kZXJzO1xuXG4gIHJldHVybiB7XG4gICAgbWltZTogKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh7fSwgTUlNRV9UWVBFLCBbXCJibXBcIl0pLFxuICAgIGNvbnN0YW50czoge1xuICAgICAgTUlNRV9CTVA6IE1JTUVfVFlQRSxcbiAgICAgIE1JTUVfWF9NU19CTVA6IE1JTUVfVFlQRV9TRUNPTkRcbiAgICB9LFxuICAgIGRlY29kZXJzOiAoX2RlY29kZXJzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2RlY29kZXJzLCBNSU1FX1RZUEUsIGRlY29kZSksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2RlY29kZXJzLCBNSU1FX1RZUEVfU0VDT05ELCBkZWNvZGUpLCBfZGVjb2RlcnMpLFxuICAgIGVuY29kZXJzOiAoX2VuY29kZXJzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2VuY29kZXJzLCBNSU1FX1RZUEUsIGVuY29kZSksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2VuY29kZXJzLCBNSU1FX1RZUEVfU0VDT05ELCBlbmNvZGUpLCBfZW5jb2RlcnMpXG4gIH07XG59O1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfYm1wSnMiLCJfdXRpbHMiLCJNSU1FX1RZUEUiLCJNSU1FX1RZUEVfU0VDT05EIiwidG9BR0JSIiwiaW1hZ2UiLCJzY2FuIiwiYml0bWFwIiwid2lkdGgiLCJoZWlnaHQiLCJ4IiwieSIsImluZGV4IiwicmVkIiwiZGF0YSIsImdyZWVuIiwiYmx1ZSIsImFscGhhIiwiZnJvbUFHQlIiLCJpc193aXRoX2FscGhhIiwiZGVjb2RlIiwiZW5jb2RlIiwiX2RlZmF1bHQiLCJfZGVjb2RlcnMiLCJfZW5jb2RlcnMiLCJtaW1lIiwiY29uc3RhbnRzIiwiTUlNRV9CTVAiLCJNSU1FX1hfTVNfQk1QIiwiZGVjb2RlcnMiLCJlbmNvZGVycyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/bmp/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/core/dist/composite/composite-modes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@jimp/core/dist/composite/composite-modes.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.srcOver = srcOver;\nexports.dstOver = dstOver;\nexports.multiply = multiply;\nexports.add = add;\nexports.screen = screen;\nexports.overlay = overlay;\nexports.darken = darken;\nexports.lighten = lighten;\nexports.hardLight = hardLight;\nexports.difference = difference;\nexports.exclusion = exclusion;\nfunction srcOver(src, dst) {\n    var ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    src.a *= ops;\n    var a = dst.a + src.a - dst.a * src.a;\n    var r = (src.r * src.a + dst.r * dst.a * (1 - src.a)) / a;\n    var g = (src.g * src.a + dst.g * dst.a * (1 - src.a)) / a;\n    var b = (src.b * src.a + dst.b * dst.a * (1 - src.a)) / a;\n    return {\n        r: r,\n        g: g,\n        b: b,\n        a: a\n    };\n}\nfunction dstOver(src, dst) {\n    var ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    src.a *= ops;\n    var a = dst.a + src.a - dst.a * src.a;\n    var r = (dst.r * dst.a + src.r * src.a * (1 - dst.a)) / a;\n    var g = (dst.g * dst.a + src.g * src.a * (1 - dst.a)) / a;\n    var b = (dst.b * dst.a + src.b * src.a * (1 - dst.a)) / a;\n    return {\n        r: r,\n        g: g,\n        b: b,\n        a: a\n    };\n}\nfunction multiply(src, dst) {\n    var ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    src.a *= ops;\n    var a = dst.a + src.a - dst.a * src.a;\n    var sra = src.r * src.a;\n    var sga = src.g * src.a;\n    var sba = src.b * src.a;\n    var dra = dst.r * dst.a;\n    var dga = dst.g * dst.a;\n    var dba = dst.b * dst.a;\n    var r = (sra * dra + sra * (1 - dst.a) + dra * (1 - src.a)) / a;\n    var g = (sga * dga + sga * (1 - dst.a) + dga * (1 - src.a)) / a;\n    var b = (sba * dba + sba * (1 - dst.a) + dba * (1 - src.a)) / a;\n    return {\n        r: r,\n        g: g,\n        b: b,\n        a: a\n    };\n}\nfunction add(src, dst) {\n    var ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    src.a *= ops;\n    var a = dst.a + src.a - dst.a * src.a;\n    var sra = src.r * src.a;\n    var sga = src.g * src.a;\n    var sba = src.b * src.a;\n    var dra = dst.r * dst.a;\n    var dga = dst.g * dst.a;\n    var dba = dst.b * dst.a;\n    var r = (sra + dra) / a;\n    var g = (sga + dga) / a;\n    var b = (sba + dba) / a;\n    return {\n        r: r,\n        g: g,\n        b: b,\n        a: a\n    };\n}\nfunction screen(src, dst) {\n    var ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    src.a *= ops;\n    var a = dst.a + src.a - dst.a * src.a;\n    var sra = src.r * src.a;\n    var sga = src.g * src.a;\n    var sba = src.b * src.a;\n    var dra = dst.r * dst.a;\n    var dga = dst.g * dst.a;\n    var dba = dst.b * dst.a;\n    var r = (sra * dst.a + dra * src.a - sra * dra + sra * (1 - dst.a) + dra * (1 - src.a)) / a;\n    var g = (sga * dst.a + dga * src.a - sga * dga + sga * (1 - dst.a) + dga * (1 - src.a)) / a;\n    var b = (sba * dst.a + dba * src.a - sba * dba + sba * (1 - dst.a) + dba * (1 - src.a)) / a;\n    return {\n        r: r,\n        g: g,\n        b: b,\n        a: a\n    };\n}\nfunction overlay(src, dst) {\n    var ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    src.a *= ops;\n    var a = dst.a + src.a - dst.a * src.a;\n    var sra = src.r * src.a;\n    var sga = src.g * src.a;\n    var sba = src.b * src.a;\n    var dra = dst.r * dst.a;\n    var dga = dst.g * dst.a;\n    var dba = dst.b * dst.a;\n    var r = (2 * dra <= dst.a ? 2 * sra * dra + sra * (1 - dst.a) + dra * (1 - src.a) : sra * (1 + dst.a) + dra * (1 + src.a) - 2 * dra * sra - dst.a * src.a) / a;\n    var g = (2 * dga <= dst.a ? 2 * sga * dga + sga * (1 - dst.a) + dga * (1 - src.a) : sga * (1 + dst.a) + dga * (1 + src.a) - 2 * dga * sga - dst.a * src.a) / a;\n    var b = (2 * dba <= dst.a ? 2 * sba * dba + sba * (1 - dst.a) + dba * (1 - src.a) : sba * (1 + dst.a) + dba * (1 + src.a) - 2 * dba * sba - dst.a * src.a) / a;\n    return {\n        r: r,\n        g: g,\n        b: b,\n        a: a\n    };\n}\nfunction darken(src, dst) {\n    var ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    src.a *= ops;\n    var a = dst.a + src.a - dst.a * src.a;\n    var sra = src.r * src.a;\n    var sga = src.g * src.a;\n    var sba = src.b * src.a;\n    var dra = dst.r * dst.a;\n    var dga = dst.g * dst.a;\n    var dba = dst.b * dst.a;\n    var r = (Math.min(sra * dst.a, dra * src.a) + sra * (1 - dst.a) + dra * (1 - src.a)) / a;\n    var g = (Math.min(sga * dst.a, dga * src.a) + sga * (1 - dst.a) + dga * (1 - src.a)) / a;\n    var b = (Math.min(sba * dst.a, dba * src.a) + sba * (1 - dst.a) + dba * (1 - src.a)) / a;\n    return {\n        r: r,\n        g: g,\n        b: b,\n        a: a\n    };\n}\nfunction lighten(src, dst) {\n    var ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    src.a *= ops;\n    var a = dst.a + src.a - dst.a * src.a;\n    var sra = src.r * src.a;\n    var sga = src.g * src.a;\n    var sba = src.b * src.a;\n    var dra = dst.r * dst.a;\n    var dga = dst.g * dst.a;\n    var dba = dst.b * dst.a;\n    var r = (Math.max(sra * dst.a, dra * src.a) + sra * (1 - dst.a) + dra * (1 - src.a)) / a;\n    var g = (Math.max(sga * dst.a, dga * src.a) + sga * (1 - dst.a) + dga * (1 - src.a)) / a;\n    var b = (Math.max(sba * dst.a, dba * src.a) + sba * (1 - dst.a) + dba * (1 - src.a)) / a;\n    return {\n        r: r,\n        g: g,\n        b: b,\n        a: a\n    };\n}\nfunction hardLight(src, dst) {\n    var ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    src.a *= ops;\n    var a = dst.a + src.a - dst.a * src.a;\n    var sra = src.r * src.a;\n    var sga = src.g * src.a;\n    var sba = src.b * src.a;\n    var dra = dst.r * dst.a;\n    var dga = dst.g * dst.a;\n    var dba = dst.b * dst.a;\n    var r = (2 * sra <= src.a ? 2 * sra * dra + sra * (1 - dst.a) + dra * (1 - src.a) : sra * (1 + dst.a) + dra * (1 + src.a) - 2 * dra * sra - dst.a * src.a) / a;\n    var g = (2 * sga <= src.a ? 2 * sga * dga + sga * (1 - dst.a) + dga * (1 - src.a) : sga * (1 + dst.a) + dga * (1 + src.a) - 2 * dga * sga - dst.a * src.a) / a;\n    var b = (2 * sba <= src.a ? 2 * sba * dba + sba * (1 - dst.a) + dba * (1 - src.a) : sba * (1 + dst.a) + dba * (1 + src.a) - 2 * dba * sba - dst.a * src.a) / a;\n    return {\n        r: r,\n        g: g,\n        b: b,\n        a: a\n    };\n}\nfunction difference(src, dst) {\n    var ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    src.a *= ops;\n    var a = dst.a + src.a - dst.a * src.a;\n    var sra = src.r * src.a;\n    var sga = src.g * src.a;\n    var sba = src.b * src.a;\n    var dra = dst.r * dst.a;\n    var dga = dst.g * dst.a;\n    var dba = dst.b * dst.a;\n    var r = (sra + dra - 2 * Math.min(sra * dst.a, dra * src.a)) / a;\n    var g = (sga + dga - 2 * Math.min(sga * dst.a, dga * src.a)) / a;\n    var b = (sba + dba - 2 * Math.min(sba * dst.a, dba * src.a)) / a;\n    return {\n        r: r,\n        g: g,\n        b: b,\n        a: a\n    };\n}\nfunction exclusion(src, dst) {\n    var ops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    src.a *= ops;\n    var a = dst.a + src.a - dst.a * src.a;\n    var sra = src.r * src.a;\n    var sga = src.g * src.a;\n    var sba = src.b * src.a;\n    var dra = dst.r * dst.a;\n    var dga = dst.g * dst.a;\n    var dba = dst.b * dst.a;\n    var r = (sra * dst.a + dra * src.a - 2 * sra * dra + sra * (1 - dst.a) + dra * (1 - src.a)) / a;\n    var g = (sga * dst.a + dga * src.a - 2 * sga * dga + sga * (1 - dst.a) + dga * (1 - src.a)) / a;\n    var b = (sba * dst.a + dba * src.a - 2 * sba * dba + sba * (1 - dst.a) + dba * (1 - src.a)) / a;\n    return {\n        r: r,\n        g: g,\n        b: b,\n        a: a\n    };\n} //# sourceMappingURL=composite-modes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/core/dist/composite/composite-modes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/core/dist/composite/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@jimp/core/dist/composite/index.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireWildcard.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = composite;\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\nvar constants = _interopRequireWildcard(__webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/@jimp/core/dist/constants.js\"));\nvar compositeModes = _interopRequireWildcard(__webpack_require__(/*! ./composite-modes */ \"(ssr)/./node_modules/@jimp/core/dist/composite/composite-modes.js\"));\n/**\n * Composites a source image over to this image respecting alpha channels\n * @param {Jimp} src the source Jimp instance\n * @param {number} x the x position to blit the image\n * @param {number} y the y position to blit the image\n * @param {object} options determine what mode to use\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */ function composite(src, x, y) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var cb = arguments.length > 4 ? arguments[4] : undefined;\n    if (typeof options === \"function\") {\n        cb = options;\n        options = {};\n    }\n    if (!(src instanceof this.constructor)) {\n        return _utils.throwError.call(this, \"The source must be a Jimp image\", cb);\n    }\n    if (typeof x !== \"number\" || typeof y !== \"number\") {\n        return _utils.throwError.call(this, \"x and y must be numbers\", cb);\n    }\n    var _options = options, mode = _options.mode, opacitySource = _options.opacitySource, opacityDest = _options.opacityDest;\n    if (!mode) {\n        mode = constants.BLEND_SOURCE_OVER;\n    }\n    if (typeof opacitySource !== \"number\" || opacitySource < 0 || opacitySource > 1) {\n        opacitySource = 1.0;\n    }\n    if (typeof opacityDest !== \"number\" || opacityDest < 0 || opacityDest > 1) {\n        opacityDest = 1.0;\n    } // eslint-disable-next-line import/namespace\n    var blendmode = compositeModes[mode]; // round input\n    x = Math.round(x);\n    y = Math.round(y);\n    var baseImage = this;\n    if (opacityDest !== 1.0) {\n        baseImage.opacity(opacityDest);\n    }\n    src.scanQuiet(0, 0, src.bitmap.width, src.bitmap.height, function(sx, sy, idx) {\n        var dstIdx = baseImage.getPixelIndex(x + sx, y + sy, constants.EDGE_CROP);\n        var blended = blendmode({\n            r: this.bitmap.data[idx + 0] / 255,\n            g: this.bitmap.data[idx + 1] / 255,\n            b: this.bitmap.data[idx + 2] / 255,\n            a: this.bitmap.data[idx + 3] / 255\n        }, {\n            r: baseImage.bitmap.data[dstIdx + 0] / 255,\n            g: baseImage.bitmap.data[dstIdx + 1] / 255,\n            b: baseImage.bitmap.data[dstIdx + 2] / 255,\n            a: baseImage.bitmap.data[dstIdx + 3] / 255\n        }, opacitySource);\n        baseImage.bitmap.data[dstIdx + 0] = this.constructor.limit255(blended.r * 255);\n        baseImage.bitmap.data[dstIdx + 1] = this.constructor.limit255(blended.g * 255);\n        baseImage.bitmap.data[dstIdx + 2] = this.constructor.limit255(blended.b * 255);\n        baseImage.bitmap.data[dstIdx + 3] = this.constructor.limit255(blended.a * 255);\n    });\n    if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n    }\n    return this;\n}\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/core/dist/composite/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/core/dist/constants.js":
/*!***************************************************!*\
  !*** ./node_modules/@jimp/core/dist/constants.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.EDGE_CROP = exports.EDGE_WRAP = exports.EDGE_EXTEND = exports.BLEND_EXCLUSION = exports.BLEND_DIFFERENCE = exports.BLEND_HARDLIGHT = exports.BLEND_LIGHTEN = exports.BLEND_DARKEN = exports.BLEND_OVERLAY = exports.BLEND_SCREEN = exports.BLEND_ADD = exports.BLEND_MULTIPLY = exports.BLEND_DESTINATION_OVER = exports.BLEND_SOURCE_OVER = exports.VERTICAL_ALIGN_BOTTOM = exports.VERTICAL_ALIGN_MIDDLE = exports.VERTICAL_ALIGN_TOP = exports.HORIZONTAL_ALIGN_RIGHT = exports.HORIZONTAL_ALIGN_CENTER = exports.HORIZONTAL_ALIGN_LEFT = exports.AUTO = void 0;\n// used to auto resizing etc.\nvar AUTO = -1; // Align modes for cover, contain, bit masks\nexports.AUTO = AUTO;\nvar HORIZONTAL_ALIGN_LEFT = 1;\nexports.HORIZONTAL_ALIGN_LEFT = HORIZONTAL_ALIGN_LEFT;\nvar HORIZONTAL_ALIGN_CENTER = 2;\nexports.HORIZONTAL_ALIGN_CENTER = HORIZONTAL_ALIGN_CENTER;\nvar HORIZONTAL_ALIGN_RIGHT = 4;\nexports.HORIZONTAL_ALIGN_RIGHT = HORIZONTAL_ALIGN_RIGHT;\nvar VERTICAL_ALIGN_TOP = 8;\nexports.VERTICAL_ALIGN_TOP = VERTICAL_ALIGN_TOP;\nvar VERTICAL_ALIGN_MIDDLE = 16;\nexports.VERTICAL_ALIGN_MIDDLE = VERTICAL_ALIGN_MIDDLE;\nvar VERTICAL_ALIGN_BOTTOM = 32; // blend modes\nexports.VERTICAL_ALIGN_BOTTOM = VERTICAL_ALIGN_BOTTOM;\nvar BLEND_SOURCE_OVER = \"srcOver\";\nexports.BLEND_SOURCE_OVER = BLEND_SOURCE_OVER;\nvar BLEND_DESTINATION_OVER = \"dstOver\";\nexports.BLEND_DESTINATION_OVER = BLEND_DESTINATION_OVER;\nvar BLEND_MULTIPLY = \"multiply\";\nexports.BLEND_MULTIPLY = BLEND_MULTIPLY;\nvar BLEND_ADD = \"add\";\nexports.BLEND_ADD = BLEND_ADD;\nvar BLEND_SCREEN = \"screen\";\nexports.BLEND_SCREEN = BLEND_SCREEN;\nvar BLEND_OVERLAY = \"overlay\";\nexports.BLEND_OVERLAY = BLEND_OVERLAY;\nvar BLEND_DARKEN = \"darken\";\nexports.BLEND_DARKEN = BLEND_DARKEN;\nvar BLEND_LIGHTEN = \"lighten\";\nexports.BLEND_LIGHTEN = BLEND_LIGHTEN;\nvar BLEND_HARDLIGHT = \"hardLight\";\nexports.BLEND_HARDLIGHT = BLEND_HARDLIGHT;\nvar BLEND_DIFFERENCE = \"difference\";\nexports.BLEND_DIFFERENCE = BLEND_DIFFERENCE;\nvar BLEND_EXCLUSION = \"exclusion\"; // Edge Handling\nexports.BLEND_EXCLUSION = BLEND_EXCLUSION;\nvar EDGE_EXTEND = 1;\nexports.EDGE_EXTEND = EDGE_EXTEND;\nvar EDGE_WRAP = 2;\nexports.EDGE_WRAP = EDGE_WRAP;\nvar EDGE_CROP = 3;\nexports.EDGE_CROP = EDGE_CROP; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvY29yZS9kaXN0L2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsaUJBQWlCLEdBQUdBLGlCQUFpQixHQUFHQSxtQkFBbUIsR0FBR0EsdUJBQXVCLEdBQUdBLHdCQUF3QixHQUFHQSx1QkFBdUIsR0FBR0EscUJBQXFCLEdBQUdBLG9CQUFvQixHQUFHQSxxQkFBcUIsR0FBR0Esb0JBQW9CLEdBQUdBLGlCQUFpQixHQUFHQSxzQkFBc0IsR0FBR0EsOEJBQThCLEdBQUdBLHlCQUF5QixHQUFHQSw2QkFBNkIsR0FBR0EsNkJBQTZCLEdBQUdBLDBCQUEwQixHQUFHQSw4QkFBOEIsR0FBR0EsK0JBQStCLEdBQUdBLDZCQUE2QixHQUFHQSxZQUFZLEdBQUcsS0FBSztBQUN6aUIsNkJBQTZCO0FBQzdCLElBQUlzQixPQUFPLENBQUMsR0FBRyw0Q0FBNEM7QUFFM0R0QixZQUFZLEdBQUdzQjtBQUNmLElBQUlELHdCQUF3QjtBQUM1QnJCLDZCQUE2QixHQUFHcUI7QUFDaEMsSUFBSUQsMEJBQTBCO0FBQzlCcEIsK0JBQStCLEdBQUdvQjtBQUNsQyxJQUFJRCx5QkFBeUI7QUFDN0JuQiw4QkFBOEIsR0FBR21CO0FBQ2pDLElBQUlELHFCQUFxQjtBQUN6QmxCLDBCQUEwQixHQUFHa0I7QUFDN0IsSUFBSUQsd0JBQXdCO0FBQzVCakIsNkJBQTZCLEdBQUdpQjtBQUNoQyxJQUFJRCx3QkFBd0IsSUFBSSxjQUFjO0FBRTlDaEIsNkJBQTZCLEdBQUdnQjtBQUNoQyxJQUFJRCxvQkFBb0I7QUFDeEJmLHlCQUF5QixHQUFHZTtBQUM1QixJQUFJRCx5QkFBeUI7QUFDN0JkLDhCQUE4QixHQUFHYztBQUNqQyxJQUFJRCxpQkFBaUI7QUFDckJiLHNCQUFzQixHQUFHYTtBQUN6QixJQUFJRCxZQUFZO0FBQ2hCWixpQkFBaUIsR0FBR1k7QUFDcEIsSUFBSUQsZUFBZTtBQUNuQlgsb0JBQW9CLEdBQUdXO0FBQ3ZCLElBQUlELGdCQUFnQjtBQUNwQlYscUJBQXFCLEdBQUdVO0FBQ3hCLElBQUlELGVBQWU7QUFDbkJULG9CQUFvQixHQUFHUztBQUN2QixJQUFJRCxnQkFBZ0I7QUFDcEJSLHFCQUFxQixHQUFHUTtBQUN4QixJQUFJRCxrQkFBa0I7QUFDdEJQLHVCQUF1QixHQUFHTztBQUMxQixJQUFJRCxtQkFBbUI7QUFDdkJOLHdCQUF3QixHQUFHTTtBQUMzQixJQUFJRCxrQkFBa0IsYUFBYSxnQkFBZ0I7QUFFbkRMLHVCQUF1QixHQUFHSztBQUMxQixJQUFJRCxjQUFjO0FBQ2xCSixtQkFBbUIsR0FBR0k7QUFDdEIsSUFBSUQsWUFBWTtBQUNoQkgsaUJBQWlCLEdBQUdHO0FBQ3BCLElBQUlELFlBQVk7QUFDaEJGLGlCQUFpQixHQUFHRSxXQUNwQixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xci1jb2RlLy4vbm9kZV9tb2R1bGVzL0BqaW1wL2NvcmUvZGlzdC9jb25zdGFudHMuanM/NWUwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRURHRV9DUk9QID0gZXhwb3J0cy5FREdFX1dSQVAgPSBleHBvcnRzLkVER0VfRVhURU5EID0gZXhwb3J0cy5CTEVORF9FWENMVVNJT04gPSBleHBvcnRzLkJMRU5EX0RJRkZFUkVOQ0UgPSBleHBvcnRzLkJMRU5EX0hBUkRMSUdIVCA9IGV4cG9ydHMuQkxFTkRfTElHSFRFTiA9IGV4cG9ydHMuQkxFTkRfREFSS0VOID0gZXhwb3J0cy5CTEVORF9PVkVSTEFZID0gZXhwb3J0cy5CTEVORF9TQ1JFRU4gPSBleHBvcnRzLkJMRU5EX0FERCA9IGV4cG9ydHMuQkxFTkRfTVVMVElQTFkgPSBleHBvcnRzLkJMRU5EX0RFU1RJTkFUSU9OX09WRVIgPSBleHBvcnRzLkJMRU5EX1NPVVJDRV9PVkVSID0gZXhwb3J0cy5WRVJUSUNBTF9BTElHTl9CT1RUT00gPSBleHBvcnRzLlZFUlRJQ0FMX0FMSUdOX01JRERMRSA9IGV4cG9ydHMuVkVSVElDQUxfQUxJR05fVE9QID0gZXhwb3J0cy5IT1JJWk9OVEFMX0FMSUdOX1JJR0hUID0gZXhwb3J0cy5IT1JJWk9OVEFMX0FMSUdOX0NFTlRFUiA9IGV4cG9ydHMuSE9SSVpPTlRBTF9BTElHTl9MRUZUID0gZXhwb3J0cy5BVVRPID0gdm9pZCAwO1xuLy8gdXNlZCB0byBhdXRvIHJlc2l6aW5nIGV0Yy5cbnZhciBBVVRPID0gLTE7IC8vIEFsaWduIG1vZGVzIGZvciBjb3ZlciwgY29udGFpbiwgYml0IG1hc2tzXG5cbmV4cG9ydHMuQVVUTyA9IEFVVE87XG52YXIgSE9SSVpPTlRBTF9BTElHTl9MRUZUID0gMTtcbmV4cG9ydHMuSE9SSVpPTlRBTF9BTElHTl9MRUZUID0gSE9SSVpPTlRBTF9BTElHTl9MRUZUO1xudmFyIEhPUklaT05UQUxfQUxJR05fQ0VOVEVSID0gMjtcbmV4cG9ydHMuSE9SSVpPTlRBTF9BTElHTl9DRU5URVIgPSBIT1JJWk9OVEFMX0FMSUdOX0NFTlRFUjtcbnZhciBIT1JJWk9OVEFMX0FMSUdOX1JJR0hUID0gNDtcbmV4cG9ydHMuSE9SSVpPTlRBTF9BTElHTl9SSUdIVCA9IEhPUklaT05UQUxfQUxJR05fUklHSFQ7XG52YXIgVkVSVElDQUxfQUxJR05fVE9QID0gODtcbmV4cG9ydHMuVkVSVElDQUxfQUxJR05fVE9QID0gVkVSVElDQUxfQUxJR05fVE9QO1xudmFyIFZFUlRJQ0FMX0FMSUdOX01JRERMRSA9IDE2O1xuZXhwb3J0cy5WRVJUSUNBTF9BTElHTl9NSURETEUgPSBWRVJUSUNBTF9BTElHTl9NSURETEU7XG52YXIgVkVSVElDQUxfQUxJR05fQk9UVE9NID0gMzI7IC8vIGJsZW5kIG1vZGVzXG5cbmV4cG9ydHMuVkVSVElDQUxfQUxJR05fQk9UVE9NID0gVkVSVElDQUxfQUxJR05fQk9UVE9NO1xudmFyIEJMRU5EX1NPVVJDRV9PVkVSID0gXCJzcmNPdmVyXCI7XG5leHBvcnRzLkJMRU5EX1NPVVJDRV9PVkVSID0gQkxFTkRfU09VUkNFX09WRVI7XG52YXIgQkxFTkRfREVTVElOQVRJT05fT1ZFUiA9IFwiZHN0T3ZlclwiO1xuZXhwb3J0cy5CTEVORF9ERVNUSU5BVElPTl9PVkVSID0gQkxFTkRfREVTVElOQVRJT05fT1ZFUjtcbnZhciBCTEVORF9NVUxUSVBMWSA9IFwibXVsdGlwbHlcIjtcbmV4cG9ydHMuQkxFTkRfTVVMVElQTFkgPSBCTEVORF9NVUxUSVBMWTtcbnZhciBCTEVORF9BREQgPSBcImFkZFwiO1xuZXhwb3J0cy5CTEVORF9BREQgPSBCTEVORF9BREQ7XG52YXIgQkxFTkRfU0NSRUVOID0gXCJzY3JlZW5cIjtcbmV4cG9ydHMuQkxFTkRfU0NSRUVOID0gQkxFTkRfU0NSRUVOO1xudmFyIEJMRU5EX09WRVJMQVkgPSBcIm92ZXJsYXlcIjtcbmV4cG9ydHMuQkxFTkRfT1ZFUkxBWSA9IEJMRU5EX09WRVJMQVk7XG52YXIgQkxFTkRfREFSS0VOID0gXCJkYXJrZW5cIjtcbmV4cG9ydHMuQkxFTkRfREFSS0VOID0gQkxFTkRfREFSS0VOO1xudmFyIEJMRU5EX0xJR0hURU4gPSBcImxpZ2h0ZW5cIjtcbmV4cG9ydHMuQkxFTkRfTElHSFRFTiA9IEJMRU5EX0xJR0hURU47XG52YXIgQkxFTkRfSEFSRExJR0hUID0gXCJoYXJkTGlnaHRcIjtcbmV4cG9ydHMuQkxFTkRfSEFSRExJR0hUID0gQkxFTkRfSEFSRExJR0hUO1xudmFyIEJMRU5EX0RJRkZFUkVOQ0UgPSBcImRpZmZlcmVuY2VcIjtcbmV4cG9ydHMuQkxFTkRfRElGRkVSRU5DRSA9IEJMRU5EX0RJRkZFUkVOQ0U7XG52YXIgQkxFTkRfRVhDTFVTSU9OID0gXCJleGNsdXNpb25cIjsgLy8gRWRnZSBIYW5kbGluZ1xuXG5leHBvcnRzLkJMRU5EX0VYQ0xVU0lPTiA9IEJMRU5EX0VYQ0xVU0lPTjtcbnZhciBFREdFX0VYVEVORCA9IDE7XG5leHBvcnRzLkVER0VfRVhURU5EID0gRURHRV9FWFRFTkQ7XG52YXIgRURHRV9XUkFQID0gMjtcbmV4cG9ydHMuRURHRV9XUkFQID0gRURHRV9XUkFQO1xudmFyIEVER0VfQ1JPUCA9IDM7XG5leHBvcnRzLkVER0VfQ1JPUCA9IEVER0VfQ1JPUDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJFREdFX0NST1AiLCJFREdFX1dSQVAiLCJFREdFX0VYVEVORCIsIkJMRU5EX0VYQ0xVU0lPTiIsIkJMRU5EX0RJRkZFUkVOQ0UiLCJCTEVORF9IQVJETElHSFQiLCJCTEVORF9MSUdIVEVOIiwiQkxFTkRfREFSS0VOIiwiQkxFTkRfT1ZFUkxBWSIsIkJMRU5EX1NDUkVFTiIsIkJMRU5EX0FERCIsIkJMRU5EX01VTFRJUExZIiwiQkxFTkRfREVTVElOQVRJT05fT1ZFUiIsIkJMRU5EX1NPVVJDRV9PVkVSIiwiVkVSVElDQUxfQUxJR05fQk9UVE9NIiwiVkVSVElDQUxfQUxJR05fTUlERExFIiwiVkVSVElDQUxfQUxJR05fVE9QIiwiSE9SSVpPTlRBTF9BTElHTl9SSUdIVCIsIkhPUklaT05UQUxfQUxJR05fQ0VOVEVSIiwiSE9SSVpPTlRBTF9BTElHTl9MRUZUIiwiQVVUTyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/core/dist/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/core/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/@jimp/core/dist/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireWildcard.js\");\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.addConstants = addConstants;\nexports.addJimpMethods = addJimpMethods;\nexports.jimpEvMethod = jimpEvMethod;\nexports.jimpEvChange = jimpEvChange;\nObject.defineProperty(exports, \"addType\", ({\n    enumerable: true,\n    get: function get() {\n        return MIME.addType;\n    }\n}));\nexports[\"default\"] = void 0;\nvar _construct2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/construct */ \"(ssr)/./node_modules/@babel/runtime/helpers/construct.js\"));\nvar _slicedToArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/slicedToArray.js\"));\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"(ssr)/./node_modules/@babel/runtime/helpers/classCallCheck.js\"));\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(ssr)/./node_modules/@babel/runtime/helpers/createClass.js\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ \"(ssr)/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\"));\nvar _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ \"(ssr)/./node_modules/@babel/runtime/helpers/getPrototypeOf.js\"));\nvar _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ \"(ssr)/./node_modules/@babel/runtime/helpers/assertThisInitialized.js\"));\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ \"(ssr)/./node_modules/@babel/runtime/helpers/inherits.js\"));\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ \"(ssr)/./node_modules/@babel/runtime/helpers/typeof.js\"));\nvar _fs = _interopRequireDefault(__webpack_require__(/*! fs */ \"fs\"));\nvar _path = _interopRequireDefault(__webpack_require__(/*! path */ \"path\"));\nvar _events = _interopRequireDefault(__webpack_require__(/*! events */ \"events\"));\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\nvar _anyBase = _interopRequireDefault(__webpack_require__(/*! any-base */ \"(ssr)/./node_modules/any-base/index.js\"));\nvar _mkdirp = _interopRequireDefault(__webpack_require__(/*! mkdirp */ \"(ssr)/./node_modules/mkdirp/index.js\"));\nvar _pixelmatch = _interopRequireDefault(__webpack_require__(/*! pixelmatch */ \"(ssr)/./node_modules/pixelmatch/index.js\"));\nvar _tinycolor = _interopRequireDefault(__webpack_require__(/*! tinycolor2 */ \"(ssr)/./node_modules/tinycolor2/cjs/tinycolor.js\"));\nvar _phash = _interopRequireDefault(__webpack_require__(/*! ./modules/phash */ \"(ssr)/./node_modules/@jimp/core/dist/modules/phash.js\"));\nvar _request = _interopRequireDefault(__webpack_require__(/*! ./request */ \"(ssr)/./node_modules/@jimp/core/dist/request.js\"));\nvar _composite = _interopRequireDefault(__webpack_require__(/*! ./composite */ \"(ssr)/./node_modules/@jimp/core/dist/composite/index.js\"));\nvar _promisify = _interopRequireDefault(__webpack_require__(/*! ./utils/promisify */ \"(ssr)/./node_modules/@jimp/core/dist/utils/promisify.js\"));\nvar MIME = _interopRequireWildcard(__webpack_require__(/*! ./utils/mime */ \"(ssr)/./node_modules/@jimp/core/dist/utils/mime.js\"));\nvar _imageBitmap = __webpack_require__(/*! ./utils/image-bitmap */ \"(ssr)/./node_modules/@jimp/core/dist/utils/image-bitmap.js\");\nvar constants = _interopRequireWildcard(__webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@jimp/core/dist/constants.js\"));\nvar alphabet = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_\"; // an array storing the maximum string length of hashes at various bases\n// 0 and 1 do not exist as possible hash lengths\nvar maxHashLength = [\n    NaN,\n    NaN\n];\nfor(var i = 2; i < 65; i++){\n    var maxHash = (0, _anyBase[\"default\"])(_anyBase[\"default\"].BIN, alphabet.slice(0, i))(new Array(64 + 1).join(\"1\"));\n    maxHashLength.push(maxHash.length);\n} // no operation\nfunction noop() {} // error checking methods\nfunction isArrayBuffer(test) {\n    return Object.prototype.toString.call(test).toLowerCase().indexOf(\"arraybuffer\") > -1;\n} // Prepare a Buffer object from the arrayBuffer. Necessary in the browser > node conversion,\n// But this function is not useful when running in node directly\nfunction bufferFromArrayBuffer(arrayBuffer) {\n    var buffer = Buffer.alloc(arrayBuffer.byteLength);\n    var view = new Uint8Array(arrayBuffer);\n    for(var _i = 0; _i < buffer.length; ++_i){\n        buffer[_i] = view[_i];\n    }\n    return buffer;\n}\nfunction loadFromURL(options, cb) {\n    (0, _request[\"default\"])(options, function(err, response, data) {\n        if (err) {\n            return cb(err);\n        }\n        if (\"headers\" in response && \"location\" in response.headers) {\n            options.url = response.headers.location;\n            return loadFromURL(options, cb);\n        }\n        if ((0, _typeof2[\"default\"])(data) === \"object\" && Buffer.isBuffer(data)) {\n            return cb(null, data);\n        }\n        var msg = \"Could not load Buffer from <\" + options.url + \"> \" + \"(HTTP: \" + response.statusCode + \")\";\n        return new Error(msg);\n    });\n}\nfunction loadBufferFromPath(src, cb) {\n    if (_fs[\"default\"] && typeof _fs[\"default\"].readFile === \"function\" && !src.match(/^(http|ftp)s?:\\/\\/./)) {\n        _fs[\"default\"].readFile(src, cb);\n    } else {\n        loadFromURL({\n            url: src\n        }, cb);\n    }\n}\nfunction isRawRGBAData(obj) {\n    return obj && (0, _typeof2[\"default\"])(obj) === \"object\" && typeof obj.width === \"number\" && typeof obj.height === \"number\" && (Buffer.isBuffer(obj.data) || obj.data instanceof Uint8Array || typeof Uint8ClampedArray === \"function\" && obj.data instanceof Uint8ClampedArray) && (obj.data.length === obj.width * obj.height * 4 || obj.data.length === obj.width * obj.height * 3);\n}\nfunction makeRGBABufferFromRGB(buffer) {\n    if (buffer.length % 3 !== 0) {\n        throw new Error(\"Buffer length is incorrect\");\n    }\n    var rgbaBuffer = Buffer.allocUnsafe(buffer.length / 3 * 4);\n    var j = 0;\n    for(var _i2 = 0; _i2 < buffer.length; _i2++){\n        rgbaBuffer[j] = buffer[_i2];\n        if ((_i2 + 1) % 3 === 0) {\n            rgbaBuffer[++j] = 255;\n        }\n        j++;\n    }\n    return rgbaBuffer;\n}\nvar emptyBitmap = {\n    data: null,\n    width: null,\n    height: null\n};\n/**\n * Jimp constructor (from a file)\n * @param path a path to the image\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */ /**\n * Jimp constructor (from a url with options)\n * @param options { url, otherOptions}\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */ /**\n * Jimp constructor (from another Jimp image or raw image data)\n * @param image a Jimp image to clone\n * @param {function(Error, Jimp)} cb a function to call when the image is parsed to a bitmap\n */ /**\n * Jimp constructor (from a Buffer)\n * @param data a Buffer containing the image data\n * @param {function(Error, Jimp)} cb a function to call when the image is parsed to a bitmap\n */ /**\n * Jimp constructor (to generate a new image)\n * @param w the width of the image\n * @param h the height of the image\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */ /**\n * Jimp constructor (to generate a new image)\n * @param w the width of the image\n * @param h the height of the image\n * @param background color to fill the image with\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */ var Jimp = /*#__PURE__*/ function(_EventEmitter) {\n    (0, _inherits2[\"default\"])(Jimp, _EventEmitter);\n    // An object representing a bitmap in memory, comprising:\n    //  - data: a buffer of the bitmap data\n    //  - width: the width of the image in pixels\n    //  - height: the height of the image in pixels\n    // Default colour to use for new pixels\n    // Default MIME is PNG\n    // Exif data for the image\n    // Whether Transparency supporting formats will be exported as RGB or RGBA\n    function Jimp() {\n        var _this;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        (0, _classCallCheck2[\"default\"])(this, Jimp);\n        _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Jimp).call(this));\n        (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"bitmap\", emptyBitmap);\n        (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_background\", 0x00000000);\n        (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_originalMime\", Jimp.MIME_PNG);\n        (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_exif\", null);\n        (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_rgba\", true);\n        (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"writeAsync\", function(path) {\n            return (0, _promisify[\"default\"])(_this.write, (0, _assertThisInitialized2[\"default\"])(_this), path);\n        });\n        (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"getBase64Async\", function(mime) {\n            return (0, _promisify[\"default\"])(_this.getBase64, (0, _assertThisInitialized2[\"default\"])(_this), mime);\n        });\n        (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"getBuffer\", _imageBitmap.getBuffer);\n        (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"getBufferAsync\", _imageBitmap.getBufferAsync);\n        (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"getPixelColour\", _this.getPixelColor);\n        (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"setPixelColour\", _this.setPixelColor);\n        var jimpInstance = (0, _assertThisInitialized2[\"default\"])(_this);\n        var cb = noop;\n        if (isArrayBuffer(args[0])) {\n            args[0] = bufferFromArrayBuffer(args[0]);\n        }\n        function finish() {\n            for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n                args[_key2] = arguments[_key2];\n            }\n            var err = args[0];\n            var evData = err || {};\n            evData.methodName = \"constructor\";\n            setTimeout(function() {\n                var _cb;\n                // run on next tick.\n                if (err && cb === noop) {\n                    jimpInstance.emitError(\"constructor\", err);\n                } else if (!err) {\n                    jimpInstance.emitMulti(\"constructor\", \"initialized\");\n                }\n                (_cb = cb).call.apply(_cb, [\n                    jimpInstance\n                ].concat(args));\n            }, 1);\n        }\n        if (typeof args[0] === \"number\" && typeof args[1] === \"number\" || parseInt(args[0], 10) && parseInt(args[1], 10)) {\n            // create a new image\n            var w = parseInt(args[0], 10);\n            var h = parseInt(args[1], 10);\n            cb = args[2]; // with a hex color\n            if (typeof args[2] === \"number\") {\n                _this._background = args[2];\n                cb = args[3];\n            } // with a css color\n            if (typeof args[2] === \"string\") {\n                _this._background = Jimp.cssColorToHex(args[2]);\n                cb = args[3];\n            }\n            if (typeof cb === \"undefined\") {\n                cb = noop;\n            }\n            if (typeof cb !== \"function\") {\n                return (0, _possibleConstructorReturn2[\"default\"])(_this, _utils.throwError.call((0, _assertThisInitialized2[\"default\"])(_this), \"cb must be a function\", finish));\n            }\n            _this.bitmap = {\n                data: Buffer.alloc(w * h * 4),\n                width: w,\n                height: h\n            };\n            for(var _i3 = 0; _i3 < _this.bitmap.data.length; _i3 += 4){\n                _this.bitmap.data.writeUInt32BE(_this._background, _i3);\n            }\n            finish(null, (0, _assertThisInitialized2[\"default\"])(_this));\n        } else if ((0, _typeof2[\"default\"])(args[0]) === \"object\" && args[0].url) {\n            cb = args[1] || noop;\n            if (typeof cb !== \"function\") {\n                return (0, _possibleConstructorReturn2[\"default\"])(_this, _utils.throwError.call((0, _assertThisInitialized2[\"default\"])(_this), \"cb must be a function\", finish));\n            }\n            loadFromURL(args[0], function(err, data) {\n                if (err) {\n                    return _utils.throwError.call((0, _assertThisInitialized2[\"default\"])(_this), err, finish);\n                }\n                _this.parseBitmap(data, args[0].url, finish);\n            });\n        } else if (args[0] instanceof Jimp) {\n            // clone an existing Jimp\n            var original = args[0];\n            cb = args[1];\n            if (typeof cb === \"undefined\") {\n                cb = noop;\n            }\n            if (typeof cb !== \"function\") {\n                return (0, _possibleConstructorReturn2[\"default\"])(_this, _utils.throwError.call((0, _assertThisInitialized2[\"default\"])(_this), \"cb must be a function\", finish));\n            }\n            _this.bitmap = {\n                data: Buffer.from(original.bitmap.data),\n                width: original.bitmap.width,\n                height: original.bitmap.height\n            };\n            _this._quality = original._quality;\n            _this._deflateLevel = original._deflateLevel;\n            _this._deflateStrategy = original._deflateStrategy;\n            _this._filterType = original._filterType;\n            _this._rgba = original._rgba;\n            _this._background = original._background;\n            _this._originalMime = original._originalMime;\n            finish(null, (0, _assertThisInitialized2[\"default\"])(_this));\n        } else if (isRawRGBAData(args[0])) {\n            var imageData = args[0];\n            cb = args[1] || noop;\n            var isRGBA = imageData.width * imageData.height * 4 === imageData.data.length;\n            var buffer = isRGBA ? Buffer.from(imageData.data) : makeRGBABufferFromRGB(imageData.data);\n            _this.bitmap = {\n                data: buffer,\n                width: imageData.width,\n                height: imageData.height\n            };\n            finish(null, (0, _assertThisInitialized2[\"default\"])(_this));\n        } else if (typeof args[0] === \"string\") {\n            // read from a path\n            var path = args[0];\n            cb = args[1];\n            if (typeof cb === \"undefined\") {\n                cb = noop;\n            }\n            if (typeof cb !== \"function\") {\n                return (0, _possibleConstructorReturn2[\"default\"])(_this, _utils.throwError.call((0, _assertThisInitialized2[\"default\"])(_this), \"cb must be a function\", finish));\n            }\n            loadBufferFromPath(path, function(err, data) {\n                if (err) {\n                    return _utils.throwError.call((0, _assertThisInitialized2[\"default\"])(_this), err, finish);\n                }\n                _this.parseBitmap(data, path, finish);\n            });\n        } else if ((0, _typeof2[\"default\"])(args[0]) === \"object\" && Buffer.isBuffer(args[0])) {\n            // read from a buffer\n            var data = args[0];\n            cb = args[1];\n            if (typeof cb !== \"function\") {\n                return (0, _possibleConstructorReturn2[\"default\"])(_this, _utils.throwError.call((0, _assertThisInitialized2[\"default\"])(_this), \"cb must be a function\", finish));\n            }\n            _this.parseBitmap(data, null, finish);\n        } else {\n            // Allow client libs to add new ways to build a Jimp object.\n            // Extra constructors must be added by `Jimp.appendConstructorOption()`\n            cb = args[args.length - 1];\n            if (typeof cb !== \"function\") {\n                // TODO: try to solve the args after cb problem.\n                cb = args[args.length - 2];\n                if (typeof cb !== \"function\") {\n                    cb = noop;\n                }\n            }\n            var extraConstructor = Jimp.__extraConstructors.find(function(c) {\n                return c.test.apply(c, args);\n            });\n            if (extraConstructor) {\n                new Promise(function(resolve, reject) {\n                    var _extraConstructor$run;\n                    (_extraConstructor$run = extraConstructor.run).call.apply(_extraConstructor$run, [\n                        (0, _assertThisInitialized2[\"default\"])(_this),\n                        resolve,\n                        reject\n                    ].concat(args));\n                }).then(function() {\n                    return finish(null, (0, _assertThisInitialized2[\"default\"])(_this));\n                })[\"catch\"](finish);\n            } else {\n                return (0, _possibleConstructorReturn2[\"default\"])(_this, _utils.throwError.call((0, _assertThisInitialized2[\"default\"])(_this), \"No matching constructor overloading was found. \" + \"Please see the docs for how to call the Jimp constructor.\", finish));\n            }\n        }\n        return _this;\n    }\n    /**\n   * Parse a bitmap with the loaded image types.\n   *\n   * @param {Buffer} data raw image data\n   * @param {string} path optional path to file\n   * @param {function(Error, Jimp)} finish (optional) a callback for when complete\n   * @memberof Jimp\n   */ (0, _createClass2[\"default\"])(Jimp, [\n        {\n            key: \"parseBitmap\",\n            value: function parseBitmap(data, path, finish) {\n                _imageBitmap.parseBitmap.call(this, data, null, finish);\n            }\n        },\n        {\n            key: \"rgba\",\n            value: function rgba(bool, cb) {\n                if (typeof bool !== \"boolean\") {\n                    return _utils.throwError.call(this, \"bool must be a boolean, true for RGBA or false for RGB\", cb);\n                }\n                this._rgba = bool;\n                if ((0, _utils.isNodePattern)(cb)) {\n                    cb.call(this, null, this);\n                }\n                return this;\n            }\n        },\n        {\n            key: \"emitMulti\",\n            value: function emitMulti(methodName, eventName) {\n                var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                data = Object.assign(data, {\n                    methodName: methodName,\n                    eventName: eventName\n                });\n                this.emit(\"any\", data);\n                if (methodName) {\n                    this.emit(methodName, data);\n                }\n                this.emit(eventName, data);\n            }\n        },\n        {\n            key: \"emitError\",\n            value: function emitError(methodName, err) {\n                this.emitMulti(methodName, \"error\", err);\n            }\n        },\n        {\n            key: \"getHeight\",\n            value: function getHeight() {\n                return this.bitmap.height;\n            }\n        },\n        {\n            key: \"getWidth\",\n            value: function getWidth() {\n                return this.bitmap.width;\n            }\n        },\n        {\n            key: \"inspect\",\n            value: function inspect() {\n                return \"<Jimp \" + (this.bitmap === emptyBitmap ? \"pending...\" : this.bitmap.width + \"x\" + this.bitmap.height) + \">\";\n            }\n        },\n        {\n            key: \"toString\",\n            value: function toString() {\n                return \"[object Jimp]\";\n            }\n        },\n        {\n            key: \"getMIME\",\n            value: function getMIME() {\n                var mime = this._originalMime || Jimp.MIME_PNG;\n                return mime;\n            }\n        },\n        {\n            key: \"getExtension\",\n            value: function getExtension() {\n                var mime = this.getMIME();\n                return MIME.getExtension(mime);\n            }\n        },\n        {\n            key: \"write\",\n            value: function write(path, cb) {\n                var _this2 = this;\n                if (!_fs[\"default\"] || !_fs[\"default\"].createWriteStream) {\n                    throw new Error(\"Cant access the filesystem. You can use the getBase64 method.\");\n                }\n                if (typeof path !== \"string\") {\n                    return _utils.throwError.call(this, \"path must be a string\", cb);\n                }\n                if (typeof cb === \"undefined\") {\n                    cb = noop;\n                }\n                if (typeof cb !== \"function\") {\n                    return _utils.throwError.call(this, \"cb must be a function\", cb);\n                }\n                var mime = MIME.getType(path) || this.getMIME();\n                var pathObj = _path[\"default\"].parse(path);\n                if (pathObj.dir) {\n                    _mkdirp[\"default\"].sync(pathObj.dir);\n                }\n                this.getBuffer(mime, function(err, buffer) {\n                    if (err) {\n                        return _utils.throwError.call(_this2, err, cb);\n                    }\n                    var stream = _fs[\"default\"].createWriteStream(path);\n                    stream.on(\"open\", function() {\n                        stream.write(buffer);\n                        stream.end();\n                    }).on(\"error\", function(err) {\n                        return _utils.throwError.call(_this2, err, cb);\n                    });\n                    stream.on(\"finish\", function() {\n                        cb.call(_this2, null, _this2);\n                    });\n                });\n                return this;\n            }\n        },\n        {\n            key: \"getBase64\",\n            /**\n     * Converts the image to a base 64 string\n     * @param {string} mime the mime type of the image data to be created\n     * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n     * @returns {Jimp} this for chaining of methods\n     */ value: function getBase64(mime, cb) {\n                if (mime === Jimp.AUTO) {\n                    // allow auto MIME detection\n                    mime = this.getMIME();\n                }\n                if (typeof mime !== \"string\") {\n                    return _utils.throwError.call(this, \"mime must be a string\", cb);\n                }\n                if (typeof cb !== \"function\") {\n                    return _utils.throwError.call(this, \"cb must be a function\", cb);\n                }\n                this.getBuffer(mime, function(err, data) {\n                    if (err) {\n                        return _utils.throwError.call(this, err, cb);\n                    }\n                    var src = \"data:\" + mime + \";base64,\" + data.toString(\"base64\");\n                    cb.call(this, null, src);\n                });\n                return this;\n            }\n        },\n        {\n            key: \"hash\",\n            /**\n     * Generates a perceptual hash of the image <https://en.wikipedia.org/wiki/Perceptual_hashing>. And pads the string. Can configure base.\n     * @param {number} base (optional) a number between 2 and 64 representing the base for the hash (e.g. 2 is binary, 10 is decimal, 16 is hex, 64 is base 64). Defaults to 64.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {string} a string representing the hash\n     */ value: function hash(base, cb) {\n                base = base || 64;\n                if (typeof base === \"function\") {\n                    cb = base;\n                    base = 64;\n                }\n                if (typeof base !== \"number\") {\n                    return _utils.throwError.call(this, \"base must be a number\", cb);\n                }\n                if (base < 2 || base > 64) {\n                    return _utils.throwError.call(this, \"base must be a number between 2 and 64\", cb);\n                }\n                var hash = this.pHash();\n                hash = (0, _anyBase[\"default\"])(_anyBase[\"default\"].BIN, alphabet.slice(0, base))(hash);\n                while(hash.length < maxHashLength[base]){\n                    hash = \"0\" + hash; // pad out with leading zeros\n                }\n                if ((0, _utils.isNodePattern)(cb)) {\n                    cb.call(this, null, hash);\n                }\n                return hash;\n            }\n        },\n        {\n            key: \"pHash\",\n            value: function pHash() {\n                var pHash = new _phash[\"default\"]();\n                return pHash.getHash(this);\n            }\n        },\n        {\n            key: \"distanceFromHash\",\n            value: function distanceFromHash(compareHash) {\n                var pHash = new _phash[\"default\"]();\n                var currentHash = pHash.getHash(this);\n                return pHash.distance(currentHash, compareHash);\n            }\n        },\n        {\n            key: \"getPixelIndex\",\n            /**\n     * Returns the offset of a pixel in the bitmap buffer\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @param {number} edgeHandling (optional) define how to sum pixels from outside the border\n     * @param {number} cb (optional) a callback for when complete\n     * @returns {number} the index of the pixel or -1 if not found\n     */ value: function getPixelIndex(x, y, edgeHandling, cb) {\n                var xi;\n                var yi;\n                if (typeof edgeHandling === \"function\" && typeof cb === \"undefined\") {\n                    cb = edgeHandling;\n                    edgeHandling = null;\n                }\n                if (!edgeHandling) {\n                    edgeHandling = Jimp.EDGE_EXTEND;\n                }\n                if (typeof x !== \"number\" || typeof y !== \"number\") {\n                    return _utils.throwError.call(this, \"x and y must be numbers\", cb);\n                } // round input\n                x = Math.round(x);\n                y = Math.round(y);\n                xi = x;\n                yi = y;\n                if (edgeHandling === Jimp.EDGE_EXTEND) {\n                    if (x < 0) xi = 0;\n                    if (x >= this.bitmap.width) xi = this.bitmap.width - 1;\n                    if (y < 0) yi = 0;\n                    if (y >= this.bitmap.height) yi = this.bitmap.height - 1;\n                }\n                if (edgeHandling === Jimp.EDGE_WRAP) {\n                    if (x < 0) {\n                        xi = this.bitmap.width + x;\n                    }\n                    if (x >= this.bitmap.width) {\n                        xi = x % this.bitmap.width;\n                    }\n                    if (y < 0) {\n                        xi = this.bitmap.height + y;\n                    }\n                    if (y >= this.bitmap.height) {\n                        yi = y % this.bitmap.height;\n                    }\n                }\n                var i = this.bitmap.width * yi + xi << 2; // if out of bounds index is -1\n                if (xi < 0 || xi >= this.bitmap.width) {\n                    i = -1;\n                }\n                if (yi < 0 || yi >= this.bitmap.height) {\n                    i = -1;\n                }\n                if ((0, _utils.isNodePattern)(cb)) {\n                    cb.call(this, null, i);\n                }\n                return i;\n            }\n        },\n        {\n            key: \"getPixelColor\",\n            value: function getPixelColor(x, y, cb) {\n                if (typeof x !== \"number\" || typeof y !== \"number\") return _utils.throwError.call(this, \"x and y must be numbers\", cb); // round input\n                x = Math.round(x);\n                y = Math.round(y);\n                var idx = this.getPixelIndex(x, y);\n                var hex = this.bitmap.data.readUInt32BE(idx);\n                if ((0, _utils.isNodePattern)(cb)) {\n                    cb.call(this, null, hex);\n                }\n                return hex;\n            }\n        },\n        {\n            key: \"setPixelColor\",\n            /**\n     * Returns the hex colour value of a pixel\n     * @param {number} hex color to set\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {number} the index of the pixel or -1 if not found\n     */ value: function setPixelColor(hex, x, y, cb) {\n                if (typeof hex !== \"number\" || typeof x !== \"number\" || typeof y !== \"number\") return _utils.throwError.call(this, \"hex, x and y must be numbers\", cb); // round input\n                x = Math.round(x);\n                y = Math.round(y);\n                var idx = this.getPixelIndex(x, y);\n                this.bitmap.data.writeUInt32BE(hex, idx);\n                if ((0, _utils.isNodePattern)(cb)) {\n                    cb.call(this, null, this);\n                }\n                return this;\n            }\n        },\n        {\n            key: \"hasAlpha\",\n            /**\n     * Determine if the image contains opaque pixels.\n     * @return {boolean} hasAlpha whether the image contains opaque pixels\n     */ value: function hasAlpha() {\n                for(var yIndex = 0; yIndex < this.bitmap.height; yIndex++){\n                    for(var xIndex = 0; xIndex < this.bitmap.width; xIndex++){\n                        var idx = this.bitmap.width * yIndex + xIndex << 2;\n                        var alpha = this.bitmap.data[idx + 3];\n                        if (alpha !== 0xff) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            }\n        },\n        {\n            key: \"scanIterator\",\n            value: function scanIterator(x, y, w, h) {\n                if (typeof x !== \"number\" || typeof y !== \"number\") {\n                    return _utils.throwError.call(this, \"x and y must be numbers\");\n                }\n                if (typeof w !== \"number\" || typeof h !== \"number\") {\n                    return _utils.throwError.call(this, \"w and h must be numbers\");\n                }\n                return (0, _utils.scanIterator)(this, x, y, w, h);\n            }\n        }\n    ]);\n    return Jimp;\n}(_events[\"default\"]);\nfunction addConstants(constants) {\n    var jimpInstance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Jimp;\n    Object.entries(constants).forEach(function(_ref) {\n        var _ref2 = (0, _slicedToArray2[\"default\"])(_ref, 2), name = _ref2[0], value = _ref2[1];\n        jimpInstance[name] = value;\n    });\n}\nfunction addJimpMethods(methods) {\n    var jimpInstance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Jimp;\n    Object.entries(methods).forEach(function(_ref3) {\n        var _ref4 = (0, _slicedToArray2[\"default\"])(_ref3, 2), name = _ref4[0], value = _ref4[1];\n        jimpInstance.prototype[name] = value;\n    });\n}\naddConstants(constants);\naddJimpMethods({\n    composite: _composite[\"default\"]\n});\nJimp.__extraConstructors = [];\n/**\n * Allow client libs to add new ways to build a Jimp object.\n * @param {string} name identify the extra constructor.\n * @param {function} test a function that returns true when it accepts the arguments passed to the main constructor.\n * @param {function} run where the magic happens.\n */ Jimp.appendConstructorOption = function(name, test, run) {\n    Jimp.__extraConstructors.push({\n        name: name,\n        test: test,\n        run: run\n    });\n};\n/**\n * Read an image from a file or a Buffer. Takes the same args as the constructor\n * @returns {Promise} a promise\n */ Jimp.read = function() {\n    for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++){\n        args[_key3] = arguments[_key3];\n    }\n    return new Promise(function(resolve, reject) {\n        // eslint-disable-next-line no-new\n        (0, _construct2[\"default\"])(Jimp, args.concat([\n            function(err, image) {\n                if (err) reject(err);\n                else resolve(image);\n            }\n        ]));\n    });\n};\nJimp.create = Jimp.read;\n/**\n * A static helper method that converts RGBA values to a single integer value\n * @param {number} r the red value (0-255)\n * @param {number} g the green value (0-255)\n * @param {number} b the blue value (0-255)\n * @param {number} a the alpha value (0-255)\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns {number} an single integer colour value\n */ Jimp.rgbaToInt = function(r, g, b, a, cb) {\n    if (typeof r !== \"number\" || typeof g !== \"number\" || typeof b !== \"number\" || typeof a !== \"number\") {\n        return _utils.throwError.call(this, \"r, g, b and a must be numbers\", cb);\n    }\n    if (r < 0 || r > 255) {\n        return _utils.throwError.call(this, \"r must be between 0 and 255\", cb);\n    }\n    if (g < 0 || g > 255) {\n        _utils.throwError.call(this, \"g must be between 0 and 255\", cb);\n    }\n    if (b < 0 || b > 255) {\n        return _utils.throwError.call(this, \"b must be between 0 and 255\", cb);\n    }\n    if (a < 0 || a > 255) {\n        return _utils.throwError.call(this, \"a must be between 0 and 255\", cb);\n    }\n    r = Math.round(r);\n    b = Math.round(b);\n    g = Math.round(g);\n    a = Math.round(a);\n    var i = r * Math.pow(256, 3) + g * Math.pow(256, 2) + b * Math.pow(256, 1) + a * Math.pow(256, 0);\n    if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, i);\n    }\n    return i;\n};\n/**\n * A static helper method that converts RGBA values to a single integer value\n * @param {number} i a single integer value representing an RGBA colour (e.g. 0xFF0000FF for red)\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns {object} an object with the properties r, g, b and a representing RGBA values\n */ Jimp.intToRGBA = function(i, cb) {\n    if (typeof i !== \"number\") {\n        return _utils.throwError.call(this, \"i must be a number\", cb);\n    }\n    var rgba = {};\n    rgba.r = Math.floor(i / Math.pow(256, 3));\n    rgba.g = Math.floor((i - rgba.r * Math.pow(256, 3)) / Math.pow(256, 2));\n    rgba.b = Math.floor((i - rgba.r * Math.pow(256, 3) - rgba.g * Math.pow(256, 2)) / Math.pow(256, 1));\n    rgba.a = Math.floor((i - rgba.r * Math.pow(256, 3) - rgba.g * Math.pow(256, 2) - rgba.b * Math.pow(256, 1)) / Math.pow(256, 0));\n    if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, rgba);\n    }\n    return rgba;\n};\n/**\n * Converts a css color (Hex, 8-digit (RGBA) Hex, RGB, RGBA, HSL, HSLA, HSV, HSVA, Named) to a hex number\n * @param {string} cssColor a number\n * @returns {number} a hex number representing a color\n */ Jimp.cssColorToHex = function(cssColor) {\n    cssColor = cssColor || 0; // 0, null, undefined, NaN\n    if (typeof cssColor === \"number\") return Number(cssColor);\n    return parseInt((0, _tinycolor[\"default\"])(cssColor).toHex8(), 16);\n};\n/**\n * Limits a number to between 0 or 255\n * @param {number} n a number\n * @returns {number} the number limited to between 0 or 255\n */ Jimp.limit255 = function(n) {\n    n = Math.max(n, 0);\n    n = Math.min(n, 255);\n    return n;\n};\n/**\n * Diffs two images and returns\n * @param {Jimp} img1 a Jimp image to compare\n * @param {Jimp} img2 a Jimp image to compare\n * @param {number} threshold (optional) a number, 0 to 1, the smaller the value the more sensitive the comparison (default: 0.1)\n * @returns {object} an object { percent: percent similar, diff: a Jimp image highlighting differences }\n */ Jimp.diff = function(img1, img2) {\n    var threshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;\n    if (!(img1 instanceof Jimp) || !(img2 instanceof Jimp)) return _utils.throwError.call(this, \"img1 and img2 must be an Jimp images\");\n    var bmp1 = img1.bitmap;\n    var bmp2 = img2.bitmap;\n    if (bmp1.width !== bmp2.width || bmp1.height !== bmp2.height) {\n        if (bmp1.width * bmp1.height > bmp2.width * bmp2.height) {\n            // img1 is bigger\n            img1 = img1.cloneQuiet().resize(bmp2.width, bmp2.height);\n        } else {\n            // img2 is bigger (or they are the same in area)\n            img2 = img2.cloneQuiet().resize(bmp1.width, bmp1.height);\n        }\n    }\n    if (typeof threshold !== \"number\" || threshold < 0 || threshold > 1) {\n        return _utils.throwError.call(this, \"threshold must be a number between 0 and 1\");\n    }\n    var diff = new Jimp(bmp1.width, bmp1.height, 0xffffffff);\n    var numDiffPixels = (0, _pixelmatch[\"default\"])(bmp1.data, bmp2.data, diff.bitmap.data, diff.bitmap.width, diff.bitmap.height, {\n        threshold: threshold\n    });\n    return {\n        percent: numDiffPixels / (diff.bitmap.width * diff.bitmap.height),\n        image: diff\n    };\n};\n/**\n * Calculates the hamming distance of two images based on their perceptual hash\n * @param {Jimp} img1 a Jimp image to compare\n * @param {Jimp} img2 a Jimp image to compare\n * @returns {number} a number ranging from 0 to 1, 0 means they are believed to be identical\n */ Jimp.distance = function(img1, img2) {\n    var phash = new _phash[\"default\"]();\n    var hash1 = phash.getHash(img1);\n    var hash2 = phash.getHash(img2);\n    return phash.distance(hash1, hash2);\n};\n/**\n * Calculates the hamming distance of two images based on their perceptual hash\n * @param {hash} hash1 a pHash\n * @param {hash} hash2 a pHash\n * @returns {number} a number ranging from 0 to 1, 0 means they are believed to be identical\n */ Jimp.compareHashes = function(hash1, hash2) {\n    var phash = new _phash[\"default\"]();\n    return phash.distance(hash1, hash2);\n};\n/**\n * Compute color difference\n * 0 means no difference, 1 means maximum difference.\n * @param {number} rgba1:    first color to compare.\n * @param {number} rgba2:    second color to compare.\n * Both parameters must be an color object {r:val, g:val, b:val, a:val}\n * Where `a` is optional and `val` is an integer between 0 and 255.\n * @returns {number} float between 0 and 1.\n */ Jimp.colorDiff = function(rgba1, rgba2) {\n    var pow = function pow(n) {\n        return Math.pow(n, 2);\n    };\n    var max = Math.max;\n    var maxVal = 255 * 255 * 3;\n    if (rgba1.a !== 0 && !rgba1.a) {\n        rgba1.a = 255;\n    }\n    if (rgba2.a !== 0 && !rgba2.a) {\n        rgba2.a = 255;\n    }\n    return (max(pow(rgba1.r - rgba2.r), pow(rgba1.r - rgba2.r - rgba1.a + rgba2.a)) + max(pow(rgba1.g - rgba2.g), pow(rgba1.g - rgba2.g - rgba1.a + rgba2.a)) + max(pow(rgba1.b - rgba2.b), pow(rgba1.b - rgba2.b - rgba1.a + rgba2.a))) / maxVal;\n};\n/**\n * Helper to create Jimp methods that emit events before and after its execution.\n * @param {string} methodName   The name to be appended to Jimp prototype.\n * @param {string} evName       The event name to be called.\n *                     It will be prefixed by `before-` and emitted when on method call.\n *                     It will be appended by `ed` and emitted after the method run.\n * @param {function} method       A function implementing the method itself.\n * It will also create a quiet version that will not emit events, to not\n * mess the user code with many `changed` event calls. You can call with\n * `methodName + \"Quiet\"`.\n *\n * The emitted event comes with a object parameter to the listener with the\n * `methodName` as one attribute.\n */ function jimpEvMethod(methodName, evName, method) {\n    var evNameBefore = \"before-\" + evName;\n    var evNameAfter = evName.replace(/e$/, \"\") + \"ed\";\n    Jimp.prototype[methodName] = function() {\n        var wrappedCb;\n        for(var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++){\n            args[_key4] = arguments[_key4];\n        }\n        var cb = args[method.length - 1];\n        var jimpInstance = this;\n        if (typeof cb === \"function\") {\n            wrappedCb = function wrappedCb() {\n                for(var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++){\n                    args[_key5] = arguments[_key5];\n                }\n                var err = args[0], data = args[1];\n                if (err) {\n                    jimpInstance.emitError(methodName, err);\n                } else {\n                    jimpInstance.emitMulti(methodName, evNameAfter, (0, _defineProperty2[\"default\"])({}, methodName, data));\n                }\n                cb.apply(this, args);\n            };\n            args[args.length - 1] = wrappedCb;\n        } else {\n            wrappedCb = false;\n        }\n        this.emitMulti(methodName, evNameBefore);\n        var result;\n        try {\n            result = method.apply(this, args);\n            if (!wrappedCb) {\n                this.emitMulti(methodName, evNameAfter, (0, _defineProperty2[\"default\"])({}, methodName, result));\n            }\n        } catch (error) {\n            error.methodName = methodName;\n            this.emitError(methodName, error);\n        }\n        return result;\n    };\n    Jimp.prototype[methodName + \"Quiet\"] = method;\n}\n/**\n * Creates a new image that is a clone of this one.\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns the new image\n */ jimpEvMethod(\"clone\", \"clone\", function(cb) {\n    var clone = new Jimp(this);\n    if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(clone, null, clone);\n    }\n    return clone;\n});\n/**\n * Simplify jimpEvMethod call for the common `change` evName.\n * @param {string} methodName name of the method\n * @param {function} method to watch changes for\n */ function jimpEvChange(methodName, method) {\n    jimpEvMethod(methodName, \"change\", method);\n}\n/**\n * Sets the type of the image (RGB or RGBA) when saving as PNG format (default is RGBA)\n * @param b A Boolean, true to use RGBA or false to use RGB\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */ jimpEvChange(\"background\", function(hex, cb) {\n    if (typeof hex !== \"number\") {\n        return _utils.throwError.call(this, \"hex must be a hexadecimal rgba value\", cb);\n    }\n    this._background = hex;\n    if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n    }\n    return this;\n});\n/**\n * Scans through a region of the bitmap, calling a function for each pixel.\n * @param {number} x the x coordinate to begin the scan at\n * @param {number} y the y coordinate to begin the scan at\n * @param w the width of the scan region\n * @param h the height of the scan region\n * @param f a function to call on even pixel; the (x, y) position of the pixel\n * and the index of the pixel in the bitmap buffer are passed to the function\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */ jimpEvChange(\"scan\", function(x, y, w, h, f, cb) {\n    if (typeof x !== \"number\" || typeof y !== \"number\") {\n        return _utils.throwError.call(this, \"x and y must be numbers\", cb);\n    }\n    if (typeof w !== \"number\" || typeof h !== \"number\") {\n        return _utils.throwError.call(this, \"w and h must be numbers\", cb);\n    }\n    if (typeof f !== \"function\") {\n        return _utils.throwError.call(this, \"f must be a function\", cb);\n    }\n    var result = (0, _utils.scan)(this, x, y, w, h, f);\n    if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, result);\n    }\n    return result;\n});\nif (process.env.ENVIRONMENT === \"BROWSER\") {\n    // For use in a web browser or web worker\n    /* global self */ var gl;\n    if (false) {}\n    if (typeof self !== \"undefined\" && (typeof self === \"undefined\" ? \"undefined\" : (0, _typeof2[\"default\"])(self)) === \"object\") {\n        gl = self;\n    }\n    gl.Jimp = Jimp;\n    gl.Buffer = Buffer;\n}\nvar _default = Jimp;\nexports[\"default\"] = _default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/core/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/core/dist/modules/phash.js":
/*!*******************************************************!*\
  !*** ./node_modules/@jimp/core/dist/modules/phash.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\n/*\nCopyright (c) 2011 Elliot Shepherd\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/ // https://code.google.com/p/ironchef-team21/source/browse/ironchef_team21/src/ImagePHash.java\n/*\n * pHash-like image hash.\n * Author: Elliot Shepherd (elliot@jarofworms.com\n * Based On: http://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html\n */ function ImagePHash(size, smallerSize) {\n    this.size = this.size || size;\n    this.smallerSize = this.smallerSize || smallerSize;\n    initCoefficients(this.size);\n}\nImagePHash.prototype.size = 32;\nImagePHash.prototype.smallerSize = 8;\nImagePHash.prototype.distance = function(s1, s2) {\n    var counter = 0;\n    for(var k = 0; k < s1.length; k++){\n        if (s1[k] !== s2[k]) {\n            counter++;\n        }\n    }\n    return counter / s1.length;\n}; // Returns a 'binary string' (like. 001010111011100010) which is easy to do a hamming distance on.\nImagePHash.prototype.getHash = function(img) {\n    /* 1. Reduce size.\n   * Like Average Hash, pHash starts with a small image.\n   * However, the image is larger than 8x8; 32x32 is a good size.\n   * This is really done to simplify the DCT computation and not\n   * because it is needed to reduce the high frequencies.\n   */ img = img.clone().resize(this.size, this.size);\n    /* 2. Reduce color.\n   * The image is reduced to a grayscale just to further simplify\n   * the number of computations.\n   */ img.grayscale();\n    var vals = [];\n    for(var x = 0; x < img.bitmap.width; x++){\n        vals[x] = [];\n        for(var y = 0; y < img.bitmap.height; y++){\n            vals[x][y] = intToRGBA(img.getPixelColor(x, y)).b;\n        }\n    }\n    /* 3. Compute the DCT.\n   * The DCT separates the image into a collection of frequencies\n   * and scalars. While JPEG uses an 8x8 DCT, this algorithm uses\n   * a 32x32 DCT.\n   */ var dctVals = applyDCT(vals, this.size);\n    /* 4. Reduce the DCT.\n   * This is the magic step. While the DCT is 32x32, just keep the\n   * top-left 8x8. Those represent the lowest frequencies in the\n   * picture.\n   */ /* 5. Compute the average value.\n   * Like the Average Hash, compute the mean DCT value (using only\n   * the 8x8 DCT low-frequency values and excluding the first term\n   * since the DC coefficient can be significantly different from\n   * the other values and will throw off the average).\n   */ var total = 0;\n    for(var _x = 0; _x < this.smallerSize; _x++){\n        for(var _y = 0; _y < this.smallerSize; _y++){\n            total += dctVals[_x][_y];\n        }\n    }\n    var avg = total / (this.smallerSize * this.smallerSize);\n    /* 6. Further reduce the DCT.\n   * This is the magic step. Set the 64 hash bits to 0 or 1\n   * depending on whether each of the 64 DCT values is above or\n   * below the average value. The result doesn't tell us the\n   * actual low frequencies; it just tells us the very-rough\n   * relative scale of the frequencies to the mean. The result\n   * will not vary as long as the overall structure of the image\n   * remains the same; this can survive gamma and color histogram\n   * adjustments without a problem.\n   */ var hash = \"\";\n    for(var _x2 = 0; _x2 < this.smallerSize; _x2++){\n        for(var _y2 = 0; _y2 < this.smallerSize; _y2++){\n            hash += dctVals[_x2][_y2] > avg ? \"1\" : \"0\";\n        }\n    }\n    return hash;\n}; // DCT function stolen from http://stackoverflow.com/questions/4240490/problems-with-dct-and-idct-algorithm-in-java\nfunction intToRGBA(i) {\n    var rgba = {};\n    rgba.r = Math.floor(i / Math.pow(256, 3));\n    rgba.g = Math.floor((i - rgba.r * Math.pow(256, 3)) / Math.pow(256, 2));\n    rgba.b = Math.floor((i - rgba.r * Math.pow(256, 3) - rgba.g * Math.pow(256, 2)) / Math.pow(256, 1));\n    rgba.a = Math.floor((i - rgba.r * Math.pow(256, 3) - rgba.g * Math.pow(256, 2) - rgba.b * Math.pow(256, 1)) / Math.pow(256, 0));\n    return rgba;\n}\nvar c = [];\nfunction initCoefficients(size) {\n    for(var i = 1; i < size; i++){\n        c[i] = 1;\n    }\n    c[0] = 1 / Math.sqrt(2.0);\n}\nfunction applyDCT(f, size) {\n    var N = size;\n    var F = [];\n    for(var u = 0; u < N; u++){\n        F[u] = [];\n        for(var v = 0; v < N; v++){\n            var sum = 0;\n            for(var i = 0; i < N; i++){\n                for(var j = 0; j < N; j++){\n                    sum += Math.cos((2 * i + 1) / (2.0 * N) * u * Math.PI) * Math.cos((2 * j + 1) / (2.0 * N) * v * Math.PI) * f[i][j];\n                }\n            }\n            sum *= c[u] * c[v] / 4;\n            F[u][v] = sum;\n        }\n    }\n    return F;\n}\nmodule.exports = ImagePHash; //# sourceMappingURL=phash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/core/dist/modules/phash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/core/dist/request.js":
/*!*************************************************!*\
  !*** ./node_modules/@jimp/core/dist/request.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/extends.js\"));\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(source, true).forEach(function(key) {\n                (0, _defineProperty2[\"default\"])(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(source).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\n/* global XMLHttpRequest */ if ( false || process.env.ENVIRONMENT === \"BROWSER\" || typeof process.versions.electron !== \"undefined\" && process.type === \"renderer\" && typeof XMLHttpRequest === \"function\") {\n    // If we run into a browser or the electron renderer process,\n    // use XHR method instead of Request node module.\n    module.exports = function(options, cb) {\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", options.url, true);\n        xhr.responseType = \"arraybuffer\";\n        xhr.addEventListener(\"load\", function() {\n            if (xhr.status < 400) {\n                try {\n                    var data = Buffer.from(this.response);\n                    cb(null, xhr, data);\n                } catch (error) {\n                    return cb(new Error(\"Response is not a buffer for url \" + options.url + \". Error: \" + error.message));\n                }\n            } else {\n                cb(new Error(\"HTTP Status \" + xhr.status + \" for url \" + options.url));\n            }\n        });\n        xhr.addEventListener(\"error\", function(e) {\n            cb(e);\n        });\n        xhr.send();\n    };\n} else {\n    module.exports = function(_ref, cb) {\n        var options = (0, _extends2[\"default\"])({}, _ref);\n        var p = __webpack_require__(/*! phin */ \"(ssr)/./node_modules/phin/lib/phin.compiled.js\");\n        p(_objectSpread({\n            compression: true\n        }, options), function(err, res) {\n            if (err === null) {\n                cb(null, res, res.body);\n            } else {\n                cb(err);\n            }\n        });\n    };\n} //# sourceMappingURL=request.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvY29yZS9kaXN0L3JlcXVlc3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSx5QkFBeUJDLG1CQUFPQSxDQUFDLDBIQUE4QztBQUVuRixJQUFJQyxtQkFBbUJGLHVCQUF1QkMsbUJBQU9BLENBQUMsNEdBQXVDO0FBRTdGLElBQUlFLFlBQVlILHVCQUF1QkMsbUJBQU9BLENBQUMsOEZBQWdDO0FBRS9FLFNBQVNHLFFBQVFDLE1BQU0sRUFBRUMsY0FBYztJQUFJLElBQUlDLE9BQU9DLE9BQU9ELElBQUksQ0FBQ0Y7SUFBUyxJQUFJRyxPQUFPQyxxQkFBcUIsRUFBRTtRQUFFLElBQUlDLFVBQVVGLE9BQU9DLHFCQUFxQixDQUFDSjtRQUFTLElBQUlDLGdCQUFnQkksVUFBVUEsUUFBUUMsTUFBTSxDQUFDLFNBQVVDLEdBQUc7WUFBSSxPQUFPSixPQUFPSyx3QkFBd0IsQ0FBQ1IsUUFBUU8sS0FBS0UsVUFBVTtRQUFFO1FBQUlQLEtBQUtRLElBQUksQ0FBQ0MsS0FBSyxDQUFDVCxNQUFNRztJQUFVO0lBQUUsT0FBT0g7QUFBTTtBQUVwVixTQUFTVSxjQUFjQyxNQUFNO0lBQUksSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlDLFVBQVVDLE1BQU0sRUFBRUYsSUFBSztRQUFFLElBQUlHLFNBQVNGLFNBQVMsQ0FBQ0QsRUFBRSxJQUFJLE9BQU9DLFNBQVMsQ0FBQ0QsRUFBRSxHQUFHLENBQUM7UUFBRyxJQUFJQSxJQUFJLEdBQUc7WUFBRWYsUUFBUWtCLFFBQVEsTUFBTUMsT0FBTyxDQUFDLFNBQVVDLEdBQUc7Z0JBQUssSUFBR3RCLGdCQUFnQixDQUFDLFVBQVUsRUFBRWdCLFFBQVFNLEtBQUtGLE1BQU0sQ0FBQ0UsSUFBSTtZQUFHO1FBQUksT0FBTyxJQUFJaEIsT0FBT2lCLHlCQUF5QixFQUFFO1lBQUVqQixPQUFPa0IsZ0JBQWdCLENBQUNSLFFBQVFWLE9BQU9pQix5QkFBeUIsQ0FBQ0g7UUFBVSxPQUFPO1lBQUVsQixRQUFRa0IsUUFBUUMsT0FBTyxDQUFDLFNBQVVDLEdBQUc7Z0JBQUloQixPQUFPbUIsY0FBYyxDQUFDVCxRQUFRTSxLQUFLaEIsT0FBT0ssd0JBQXdCLENBQUNTLFFBQVFFO1lBQU87UUFBSTtJQUFFO0lBQUUsT0FBT047QUFBUTtBQUV0aEIseUJBQXlCLEdBQ3pCLElBQUlVLE1BQWUsSUFBSUEsUUFBUUUsR0FBRyxDQUFDQyxXQUFXLEtBQUssYUFBYSxPQUFPSCxRQUFRSSxRQUFRLENBQUNDLFFBQVEsS0FBSyxlQUFlTCxRQUFRTSxJQUFJLEtBQUssY0FBYyxPQUFPQyxtQkFBbUIsWUFBWTtJQUN2TCw2REFBNkQ7SUFDN0QsaURBQWlEO0lBQ2pEQyxPQUFPQyxPQUFPLEdBQUcsU0FBVUMsT0FBTyxFQUFFQyxFQUFFO1FBQ3BDLElBQUlDLE1BQU0sSUFBSUw7UUFDZEssSUFBSUMsSUFBSSxDQUFDLE9BQU9ILFFBQVFJLEdBQUcsRUFBRTtRQUM3QkYsSUFBSUcsWUFBWSxHQUFHO1FBQ25CSCxJQUFJSSxnQkFBZ0IsQ0FBQyxRQUFRO1lBQzNCLElBQUlKLElBQUlLLE1BQU0sR0FBRyxLQUFLO2dCQUNwQixJQUFJO29CQUNGLElBQUlDLE9BQU9DLE9BQU9DLElBQUksQ0FBQyxJQUFJLENBQUNDLFFBQVE7b0JBQ3BDVixHQUFHLE1BQU1DLEtBQUtNO2dCQUNoQixFQUFFLE9BQU9JLE9BQU87b0JBQ2QsT0FBT1gsR0FBRyxJQUFJWSxNQUFNLHNDQUFzQ2IsUUFBUUksR0FBRyxHQUFHLGNBQWNRLE1BQU1FLE9BQU87Z0JBQ3JHO1lBQ0YsT0FBTztnQkFDTGIsR0FBRyxJQUFJWSxNQUFNLGlCQUFpQlgsSUFBSUssTUFBTSxHQUFHLGNBQWNQLFFBQVFJLEdBQUc7WUFDdEU7UUFDRjtRQUNBRixJQUFJSSxnQkFBZ0IsQ0FBQyxTQUFTLFNBQVVTLENBQUM7WUFDdkNkLEdBQUdjO1FBQ0w7UUFDQWIsSUFBSWMsSUFBSTtJQUNWO0FBQ0YsT0FBTztJQUNMbEIsT0FBT0MsT0FBTyxHQUFHLFNBQVVrQixJQUFJLEVBQUVoQixFQUFFO1FBQ2pDLElBQUlELFVBQVUsQ0FBQyxHQUFHbkMsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUdvRDtRQUU1QyxJQUFJQyxJQUFJdkQsbUJBQU9BLENBQUMsNERBQU07UUFFdEJ1RCxFQUFFdkMsY0FBYztZQUNkd0MsYUFBYTtRQUNmLEdBQUduQixVQUFVLFNBQVVvQixHQUFHLEVBQUVDLEdBQUc7WUFDN0IsSUFBSUQsUUFBUSxNQUFNO2dCQUNoQm5CLEdBQUcsTUFBTW9CLEtBQUtBLElBQUlDLElBQUk7WUFDeEIsT0FBTztnQkFDTHJCLEdBQUdtQjtZQUNMO1FBQ0Y7SUFDRjtBQUNGLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXItY29kZS8uL25vZGVfbW9kdWxlcy9AamltcC9jb3JlL2Rpc3QvcmVxdWVzdC5qcz9iMWVkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG4vKiBnbG9iYWwgWE1MSHR0cFJlcXVlc3QgKi9cbmlmIChwcm9jZXNzLmJyb3dzZXIgfHwgcHJvY2Vzcy5lbnYuRU5WSVJPTk1FTlQgPT09IFwiQlJPV1NFUlwiIHx8IHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLmVsZWN0cm9uICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MudHlwZSA9PT0gXCJyZW5kZXJlclwiICYmIHR5cGVvZiBYTUxIdHRwUmVxdWVzdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gIC8vIElmIHdlIHJ1biBpbnRvIGEgYnJvd3NlciBvciB0aGUgZWxlY3Ryb24gcmVuZGVyZXIgcHJvY2VzcyxcbiAgLy8gdXNlIFhIUiBtZXRob2QgaW5zdGVhZCBvZiBSZXF1ZXN0IG5vZGUgbW9kdWxlLlxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBjYikge1xuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4aHIub3BlbihcIkdFVFwiLCBvcHRpb25zLnVybCwgdHJ1ZSk7XG4gICAgeGhyLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcbiAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHhoci5zdGF0dXMgPCA0MDApIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgZGF0YSA9IEJ1ZmZlci5mcm9tKHRoaXMucmVzcG9uc2UpO1xuICAgICAgICAgIGNiKG51bGwsIHhociwgZGF0YSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcihcIlJlc3BvbnNlIGlzIG5vdCBhIGJ1ZmZlciBmb3IgdXJsIFwiICsgb3B0aW9ucy51cmwgKyBcIi4gRXJyb3I6IFwiICsgZXJyb3IubWVzc2FnZSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYihuZXcgRXJyb3IoXCJIVFRQIFN0YXR1cyBcIiArIHhoci5zdGF0dXMgKyBcIiBmb3IgdXJsIFwiICsgb3B0aW9ucy51cmwpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBjYihlKTtcbiAgICB9KTtcbiAgICB4aHIuc2VuZCgpO1xuICB9O1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoX3JlZiwgY2IpIHtcbiAgICB2YXIgb3B0aW9ucyA9ICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgX3JlZik7XG5cbiAgICB2YXIgcCA9IHJlcXVpcmUoXCJwaGluXCIpO1xuXG4gICAgcChfb2JqZWN0U3ByZWFkKHtcbiAgICAgIGNvbXByZXNzaW9uOiB0cnVlXG4gICAgfSwgb3B0aW9ucyksIGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgaWYgKGVyciA9PT0gbnVsbCkge1xuICAgICAgICBjYihudWxsLCByZXMsIHJlcy5ib2R5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNiKGVycik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0LmpzLm1hcCJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfZXh0ZW5kczIiLCJvd25LZXlzIiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJrZXlzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImZvckVhY2giLCJrZXkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwicHJvY2VzcyIsImJyb3dzZXIiLCJlbnYiLCJFTlZJUk9OTUVOVCIsInZlcnNpb25zIiwiZWxlY3Ryb24iLCJ0eXBlIiwiWE1MSHR0cFJlcXVlc3QiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9ucyIsImNiIiwieGhyIiwib3BlbiIsInVybCIsInJlc3BvbnNlVHlwZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdGF0dXMiLCJkYXRhIiwiQnVmZmVyIiwiZnJvbSIsInJlc3BvbnNlIiwiZXJyb3IiLCJFcnJvciIsIm1lc3NhZ2UiLCJlIiwic2VuZCIsIl9yZWYiLCJwIiwiY29tcHJlc3Npb24iLCJlcnIiLCJyZXMiLCJib2R5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/core/dist/request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/core/dist/utils/image-bitmap.js":
/*!************************************************************!*\
  !*** ./node_modules/@jimp/core/dist/utils/image-bitmap.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireWildcard.js\");\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseBitmap = parseBitmap;\nexports.getBuffer = getBuffer;\nexports.getBufferAsync = getBufferAsync;\nvar _slicedToArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/slicedToArray.js\"));\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ \"(ssr)/./node_modules/@babel/runtime/regenerator/index.js\"));\nvar _fileType = _interopRequireDefault(__webpack_require__(/*! file-type */ \"(ssr)/./node_modules/file-type/index.js\"));\nvar _exifParser = _interopRequireDefault(__webpack_require__(/*! exif-parser */ \"(ssr)/./node_modules/exif-parser/index.js\"));\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\nvar constants = _interopRequireWildcard(__webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/@jimp/core/dist/constants.js\"));\nvar MIME = _interopRequireWildcard(__webpack_require__(/*! ./mime */ \"(ssr)/./node_modules/@jimp/core/dist/utils/mime.js\"));\nvar _promisify = _interopRequireDefault(__webpack_require__(/*! ./promisify */ \"(ssr)/./node_modules/@jimp/core/dist/utils/promisify.js\"));\nfunction getMIMEFromBuffer(buffer, path) {\n    var fileTypeFromBuffer;\n    return _regenerator[\"default\"].async(function getMIMEFromBuffer$(_context) {\n        while(1){\n            switch(_context.prev = _context.next){\n                case 0:\n                    _context.next = 2;\n                    return _regenerator[\"default\"].awrap(_fileType[\"default\"].fromBuffer(buffer));\n                case 2:\n                    fileTypeFromBuffer = _context.sent;\n                    if (!fileTypeFromBuffer) {\n                        _context.next = 5;\n                        break;\n                    }\n                    return _context.abrupt(\"return\", fileTypeFromBuffer.mime);\n                case 5:\n                    if (!path) {\n                        _context.next = 7;\n                        break;\n                    }\n                    return _context.abrupt(\"return\", MIME.getType(path));\n                case 7:\n                    return _context.abrupt(\"return\", null);\n                case 8:\n                case \"end\":\n                    return _context.stop();\n            }\n        }\n    });\n}\n/*\n * Obtains image orientation from EXIF metadata.\n *\n * @param img {Jimp} a Jimp image object\n * @returns {number} a number 1-8 representing EXIF orientation,\n *          in particular 1 if orientation tag is missing\n */ function getExifOrientation(img) {\n    return img._exif && img._exif.tags && img._exif.tags.Orientation || 1;\n}\n/**\n * Returns a function which translates EXIF-rotated coordinates into\n * non-rotated ones.\n *\n * Transformation reference: http://sylvana.net/jpegcrop/exif_orientation.html.\n *\n * @param img {Jimp} a Jimp image object\n * @returns {function} transformation function for transformBitmap().\n */ function getExifOrientationTransformation(img) {\n    var w = img.getWidth();\n    var h = img.getHeight();\n    switch(getExifOrientation(img)){\n        case 1:\n            // Horizontal (normal)\n            // does not need to be supported here\n            return null;\n        case 2:\n            // Mirror horizontal\n            return function(x, y) {\n                return [\n                    w - x - 1,\n                    y\n                ];\n            };\n        case 3:\n            // Rotate 180\n            return function(x, y) {\n                return [\n                    w - x - 1,\n                    h - y - 1\n                ];\n            };\n        case 4:\n            // Mirror vertical\n            return function(x, y) {\n                return [\n                    x,\n                    h - y - 1\n                ];\n            };\n        case 5:\n            // Mirror horizontal and rotate 270 CW\n            return function(x, y) {\n                return [\n                    y,\n                    x\n                ];\n            };\n        case 6:\n            // Rotate 90 CW\n            return function(x, y) {\n                return [\n                    y,\n                    h - x - 1\n                ];\n            };\n        case 7:\n            // Mirror horizontal and rotate 90 CW\n            return function(x, y) {\n                return [\n                    w - y - 1,\n                    h - x - 1\n                ];\n            };\n        case 8:\n            // Rotate 270 CW\n            return function(x, y) {\n                return [\n                    w - y - 1,\n                    x\n                ];\n            };\n        default:\n            return null;\n    }\n}\n/*\n * Transforms bitmap in place (moves pixels around) according to given\n * transformation function.\n *\n * @param img {Jimp} a Jimp image object, which bitmap is supposed to\n *        be transformed\n * @param width {number} bitmap width after the transformation\n * @param height {number} bitmap height after the transformation\n * @param transformation {function} transformation function which defines pixel\n *        mapping between new and source bitmap. It takes a pair of coordinates\n *        in the target, and returns a respective pair of coordinates in\n *        the source bitmap, i.e. has following form:\n *        `function(new_x, new_y) { return [src_x, src_y] }`.\n */ function transformBitmap(img, width, height, transformation) {\n    // Underscore-prefixed values are related to the source bitmap\n    // Their counterparts with no prefix are related to the target bitmap\n    var _data = img.bitmap.data;\n    var _width = img.bitmap.width;\n    var data = Buffer.alloc(_data.length);\n    for(var x = 0; x < width; x++){\n        for(var y = 0; y < height; y++){\n            var _transformation = transformation(x, y), _transformation2 = (0, _slicedToArray2[\"default\"])(_transformation, 2), _x = _transformation2[0], _y = _transformation2[1];\n            var idx = width * y + x << 2;\n            var _idx = _width * _y + _x << 2;\n            var pixel = _data.readUInt32BE(_idx);\n            data.writeUInt32BE(pixel, idx);\n        }\n    }\n    img.bitmap.data = data;\n    img.bitmap.width = width;\n    img.bitmap.height = height;\n}\n/*\n * Automagically rotates an image based on its EXIF data (if present).\n * @param img {Jimp} a Jimp image object\n */ function exifRotate(img) {\n    if (getExifOrientation(img) < 2) return;\n    var transformation = getExifOrientationTransformation(img);\n    var swapDimensions = getExifOrientation(img) > 4;\n    var newWidth = swapDimensions ? img.bitmap.height : img.bitmap.width;\n    var newHeight = swapDimensions ? img.bitmap.width : img.bitmap.height;\n    transformBitmap(img, newWidth, newHeight, transformation);\n} // parses a bitmap from the constructor to the JIMP bitmap property\nfunction parseBitmap(data, path, cb) {\n    var mime, _mime;\n    return _regenerator[\"default\"].async(function parseBitmap$(_context2) {\n        while(1){\n            switch(_context2.prev = _context2.next){\n                case 0:\n                    _context2.next = 2;\n                    return _regenerator[\"default\"].awrap(getMIMEFromBuffer(data, path));\n                case 2:\n                    mime = _context2.sent;\n                    if (!(typeof mime !== \"string\")) {\n                        _context2.next = 5;\n                        break;\n                    }\n                    return _context2.abrupt(\"return\", cb(new Error(\"Could not find MIME for Buffer <\" + path + \">\")));\n                case 5:\n                    this._originalMime = mime.toLowerCase();\n                    _context2.prev = 6;\n                    _mime = this.getMIME();\n                    if (!this.constructor.decoders[_mime]) {\n                        _context2.next = 12;\n                        break;\n                    }\n                    this.bitmap = this.constructor.decoders[_mime](data);\n                    _context2.next = 13;\n                    break;\n                case 12:\n                    return _context2.abrupt(\"return\", _utils.throwError.call(this, \"Unsupported MIME type: \" + _mime, cb));\n                case 13:\n                    _context2.next = 18;\n                    break;\n                case 15:\n                    _context2.prev = 15;\n                    _context2.t0 = _context2[\"catch\"](6);\n                    return _context2.abrupt(\"return\", cb.call(this, _context2.t0, this));\n                case 18:\n                    try {\n                        this._exif = _exifParser[\"default\"].create(data).parse();\n                        exifRotate(this); // EXIF data\n                    } catch (error) {\n                    /* meh */ }\n                    cb.call(this, null, this);\n                    return _context2.abrupt(\"return\", this);\n                case 21:\n                case \"end\":\n                    return _context2.stop();\n            }\n        }\n    }, null, this, [\n        [\n            6,\n            15\n        ]\n    ]);\n}\nfunction compositeBitmapOverBackground(Jimp, image) {\n    return new Jimp(image.bitmap.width, image.bitmap.height, image._background).composite(image, 0, 0).bitmap;\n}\n/**\n * Converts the image to a buffer\n * @param {string} mime the mime type of the image buffer to be created\n * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n * @returns {Jimp} this for chaining of methods\n */ function getBuffer(mime, cb) {\n    if (mime === constants.AUTO) {\n        // allow auto MIME detection\n        mime = this.getMIME();\n    }\n    if (typeof mime !== \"string\") {\n        return _utils.throwError.call(this, \"mime must be a string\", cb);\n    }\n    if (typeof cb !== \"function\") {\n        return _utils.throwError.call(this, \"cb must be a function\", cb);\n    }\n    mime = mime.toLowerCase();\n    if (this._rgba && this.constructor.hasAlpha[mime]) {\n        this.bitmap.data = Buffer.from(this.bitmap.data);\n    } else {\n        // when format doesn't support alpha\n        // composite onto a new image so that the background shows through alpha channels\n        this.bitmap.data = compositeBitmapOverBackground(this.constructor, this).data;\n    }\n    if (this.constructor.encoders[mime]) {\n        var buffer = this.constructor.encoders[mime](this);\n        cb.call(this, null, buffer);\n    } else {\n        cb.call(this, \"Unsupported MIME type: \" + mime);\n    }\n    return this;\n}\nfunction getBufferAsync(mime) {\n    return (0, _promisify[\"default\"])(getBuffer, this, mime);\n} //# sourceMappingURL=image-bitmap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/core/dist/utils/image-bitmap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/core/dist/utils/mime.js":
/*!****************************************************!*\
  !*** ./node_modules/@jimp/core/dist/utils/mime.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getExtension = exports.getType = exports.addType = void 0;\nvar mimeTypes = {};\nvar findType = function findType(extension) {\n    return Object.entries(mimeTypes).find(function(type) {\n        return type[1].includes(extension);\n    }) || [];\n};\nvar addType = function addType(mime, extensions) {\n    mimeTypes[mime] = extensions;\n};\n/**\n * Lookup a mime type based on extension\n * @param {string} path path to find extension for\n * @returns {string} mime found mime type\n */ exports.addType = addType;\nvar getType = function getType(path) {\n    var pathParts = path.split(\"/\").slice(-1);\n    var extension = pathParts[pathParts.length - 1].split(\".\").pop();\n    var type = findType(extension);\n    return type[0];\n};\n/**\n * Return file extension associated with a mime type\n * @param {string} type mime type to look up\n * @returns {string} extension file extension\n */ exports.getType = getType;\nvar getExtension = function getExtension(type) {\n    return (mimeTypes[type.toLowerCase()] || [])[0];\n};\nexports.getExtension = getExtension; //# sourceMappingURL=mime.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvY29yZS9kaXN0L3V0aWxzL21pbWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELG9CQUFvQixHQUFHQSxlQUFlLEdBQUdBLGVBQWUsR0FBRyxLQUFLO0FBQ2hFLElBQUlLLFlBQVksQ0FBQztBQUVqQixJQUFJQyxXQUFXLFNBQVNBLFNBQVNDLFNBQVM7SUFDeEMsT0FBT1QsT0FBT1UsT0FBTyxDQUFDSCxXQUFXSSxJQUFJLENBQUMsU0FBVUMsSUFBSTtRQUNsRCxPQUFPQSxJQUFJLENBQUMsRUFBRSxDQUFDQyxRQUFRLENBQUNKO0lBQzFCLE1BQU0sRUFBRTtBQUNWO0FBRUEsSUFBSUgsVUFBVSxTQUFTQSxRQUFRUSxJQUFJLEVBQUVDLFVBQVU7SUFDN0NSLFNBQVMsQ0FBQ08sS0FBSyxHQUFHQztBQUNwQjtBQUNBOzs7O0NBSUMsR0FHRGIsZUFBZSxHQUFHSTtBQUVsQixJQUFJRCxVQUFVLFNBQVNBLFFBQVFXLElBQUk7SUFDakMsSUFBSUMsWUFBWUQsS0FBS0UsS0FBSyxDQUFDLEtBQUtDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLElBQUlWLFlBQVlRLFNBQVMsQ0FBQ0EsVUFBVUcsTUFBTSxHQUFHLEVBQUUsQ0FBQ0YsS0FBSyxDQUFDLEtBQUtHLEdBQUc7SUFDOUQsSUFBSVQsT0FBT0osU0FBU0M7SUFDcEIsT0FBT0csSUFBSSxDQUFDLEVBQUU7QUFDaEI7QUFDQTs7OztDQUlDLEdBR0RWLGVBQWUsR0FBR0c7QUFFbEIsSUFBSUQsZUFBZSxTQUFTQSxhQUFhUSxJQUFJO0lBQzNDLE9BQU8sQ0FBQ0wsU0FBUyxDQUFDSyxLQUFLVSxXQUFXLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2pEO0FBRUFwQixvQkFBb0IsR0FBR0UsY0FDdkIsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXItY29kZS8uL25vZGVfbW9kdWxlcy9AamltcC9jb3JlL2Rpc3QvdXRpbHMvbWltZS5qcz9lODFhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRFeHRlbnNpb24gPSBleHBvcnRzLmdldFR5cGUgPSBleHBvcnRzLmFkZFR5cGUgPSB2b2lkIDA7XG52YXIgbWltZVR5cGVzID0ge307XG5cbnZhciBmaW5kVHlwZSA9IGZ1bmN0aW9uIGZpbmRUeXBlKGV4dGVuc2lvbikge1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMobWltZVR5cGVzKS5maW5kKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGVbMV0uaW5jbHVkZXMoZXh0ZW5zaW9uKTtcbiAgfSkgfHwgW107XG59O1xuXG52YXIgYWRkVHlwZSA9IGZ1bmN0aW9uIGFkZFR5cGUobWltZSwgZXh0ZW5zaW9ucykge1xuICBtaW1lVHlwZXNbbWltZV0gPSBleHRlbnNpb25zO1xufTtcbi8qKlxuICogTG9va3VwIGEgbWltZSB0eXBlIGJhc2VkIG9uIGV4dGVuc2lvblxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggcGF0aCB0byBmaW5kIGV4dGVuc2lvbiBmb3JcbiAqIEByZXR1cm5zIHtzdHJpbmd9IG1pbWUgZm91bmQgbWltZSB0eXBlXG4gKi9cblxuXG5leHBvcnRzLmFkZFR5cGUgPSBhZGRUeXBlO1xuXG52YXIgZ2V0VHlwZSA9IGZ1bmN0aW9uIGdldFR5cGUocGF0aCkge1xuICB2YXIgcGF0aFBhcnRzID0gcGF0aC5zcGxpdChcIi9cIikuc2xpY2UoLTEpO1xuICB2YXIgZXh0ZW5zaW9uID0gcGF0aFBhcnRzW3BhdGhQYXJ0cy5sZW5ndGggLSAxXS5zcGxpdChcIi5cIikucG9wKCk7XG4gIHZhciB0eXBlID0gZmluZFR5cGUoZXh0ZW5zaW9uKTtcbiAgcmV0dXJuIHR5cGVbMF07XG59O1xuLyoqXG4gKiBSZXR1cm4gZmlsZSBleHRlbnNpb24gYXNzb2NpYXRlZCB3aXRoIGEgbWltZSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBtaW1lIHR5cGUgdG8gbG9vayB1cFxuICogQHJldHVybnMge3N0cmluZ30gZXh0ZW5zaW9uIGZpbGUgZXh0ZW5zaW9uXG4gKi9cblxuXG5leHBvcnRzLmdldFR5cGUgPSBnZXRUeXBlO1xuXG52YXIgZ2V0RXh0ZW5zaW9uID0gZnVuY3Rpb24gZ2V0RXh0ZW5zaW9uKHR5cGUpIHtcbiAgcmV0dXJuIChtaW1lVHlwZXNbdHlwZS50b0xvd2VyQ2FzZSgpXSB8fCBbXSlbMF07XG59O1xuXG5leHBvcnRzLmdldEV4dGVuc2lvbiA9IGdldEV4dGVuc2lvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pbWUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0RXh0ZW5zaW9uIiwiZ2V0VHlwZSIsImFkZFR5cGUiLCJtaW1lVHlwZXMiLCJmaW5kVHlwZSIsImV4dGVuc2lvbiIsImVudHJpZXMiLCJmaW5kIiwidHlwZSIsImluY2x1ZGVzIiwibWltZSIsImV4dGVuc2lvbnMiLCJwYXRoIiwicGF0aFBhcnRzIiwic3BsaXQiLCJzbGljZSIsImxlbmd0aCIsInBvcCIsInRvTG93ZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/core/dist/utils/mime.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/core/dist/utils/promisify.js":
/*!*********************************************************!*\
  !*** ./node_modules/@jimp/core/dist/utils/promisify.js ***!
  \*********************************************************/
/***/ ((module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar promisify = function promisify(fun, ctx) {\n    for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n        args[_key - 2] = arguments[_key];\n    }\n    return new Promise(function(resolve, reject) {\n        args.push(function(err, data) {\n            if (err) {\n                reject(err);\n            }\n            resolve(data);\n        });\n        fun.bind(ctx).apply(void 0, args);\n    });\n};\nvar _default = promisify;\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=promisify.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvY29yZS9kaXN0L3V0aWxzL3Byb21pc2lmeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUcsS0FBSztBQUUxQixJQUFJRSxZQUFZLFNBQVNBLFVBQVVDLEdBQUcsRUFBRUMsR0FBRztJQUN6QyxJQUFLLElBQUlDLE9BQU9DLFVBQVVDLE1BQU0sRUFBRUMsT0FBTyxJQUFJQyxNQUFNSixPQUFPLElBQUlBLE9BQU8sSUFBSSxJQUFJSyxPQUFPLEdBQUdBLE9BQU9MLE1BQU1LLE9BQVE7UUFDMUdGLElBQUksQ0FBQ0UsT0FBTyxFQUFFLEdBQUdKLFNBQVMsQ0FBQ0ksS0FBSztJQUNsQztJQUVBLE9BQU8sSUFBSUMsUUFBUSxTQUFVQyxPQUFPLEVBQUVDLE1BQU07UUFDMUNMLEtBQUtNLElBQUksQ0FBQyxTQUFVQyxHQUFHLEVBQUVDLElBQUk7WUFDM0IsSUFBSUQsS0FBSztnQkFDUEYsT0FBT0U7WUFDVDtZQUVBSCxRQUFRSTtRQUNWO1FBQ0FiLElBQUljLElBQUksQ0FBQ2IsS0FBS2MsS0FBSyxDQUFDLEtBQUssR0FBR1Y7SUFDOUI7QUFDRjtBQUVBLElBQUlXLFdBQVdqQjtBQUNmRixrQkFBa0IsR0FBR21CO0FBQ3JCQyxPQUFPcEIsT0FBTyxHQUFHQSxRQUFRcUIsT0FBTyxFQUNoQyxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xci1jb2RlLy4vbm9kZV9tb2R1bGVzL0BqaW1wL2NvcmUvZGlzdC91dGlscy9wcm9taXNpZnkuanM/ZDc4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgcHJvbWlzaWZ5ID0gZnVuY3Rpb24gcHJvbWlzaWZ5KGZ1biwgY3R4KSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgYXJncy5wdXNoKGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9XG5cbiAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgfSk7XG4gICAgZnVuLmJpbmQoY3R4KS5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICB9KTtcbn07XG5cbnZhciBfZGVmYXVsdCA9IHByb21pc2lmeTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb21pc2lmeS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwcm9taXNpZnkiLCJmdW4iLCJjdHgiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicHVzaCIsImVyciIsImRhdGEiLCJiaW5kIiwiYXBwbHkiLCJfZGVmYXVsdCIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/core/dist/utils/promisify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/custom/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@jimp/custom/dist/index.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireWildcard.js\");\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = configure;\nvar _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/toConsumableArray.js\"));\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _slicedToArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/slicedToArray.js\"));\nvar _core = _interopRequireWildcard(__webpack_require__(/*! @jimp/core */ \"(ssr)/./node_modules/@jimp/core/dist/index.js\"));\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(source, true).forEach(function(key) {\n                (0, _defineProperty2[\"default\"])(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(source).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction configure(configuration) {\n    var jimpInstance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _core[\"default\"];\n    var jimpConfig = {\n        hasAlpha: {},\n        encoders: {},\n        decoders: {},\n        \"class\": {},\n        constants: {}\n    };\n    function addToConfig(newConfig) {\n        Object.entries(newConfig).forEach(function(_ref) {\n            var _ref2 = (0, _slicedToArray2[\"default\"])(_ref, 2), key = _ref2[0], value = _ref2[1];\n            jimpConfig[key] = _objectSpread({}, jimpConfig[key], {}, value);\n        });\n    }\n    function addImageType(typeModule) {\n        var type = typeModule();\n        if (Array.isArray(type.mime)) {\n            _core.addType.apply(void 0, (0, _toConsumableArray2[\"default\"])(type.mime));\n        } else {\n            Object.entries(type.mime).forEach(function(mimeType) {\n                return _core.addType.apply(void 0, (0, _toConsumableArray2[\"default\"])(mimeType));\n            });\n        }\n        delete type.mime;\n        addToConfig(type);\n    }\n    function addPlugin(pluginModule) {\n        var plugin = pluginModule(_core.jimpEvChange) || {};\n        if (!plugin[\"class\"] && !plugin.constants) {\n            // Default to class function\n            addToConfig({\n                \"class\": plugin\n            });\n        } else {\n            addToConfig(plugin);\n        }\n    }\n    if (configuration.types) {\n        configuration.types.forEach(addImageType);\n        jimpInstance.decoders = _objectSpread({}, jimpInstance.decoders, {}, jimpConfig.decoders);\n        jimpInstance.encoders = _objectSpread({}, jimpInstance.encoders, {}, jimpConfig.encoders);\n        jimpInstance.hasAlpha = _objectSpread({}, jimpInstance.hasAlpha, {}, jimpConfig.hasAlpha);\n    }\n    if (configuration.plugins) {\n        configuration.plugins.forEach(addPlugin);\n    }\n    (0, _core.addJimpMethods)(jimpConfig[\"class\"], jimpInstance);\n    (0, _core.addConstants)(jimpConfig.constants, jimpInstance);\n    return _core[\"default\"];\n}\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/custom/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/gif/dist/index.js":
/*!**********************************************!*\
  !*** ./node_modules/@jimp/gif/dist/index.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _omggif = _interopRequireDefault(__webpack_require__(/*! omggif */ \"(ssr)/./node_modules/omggif/omggif.js\"));\nvar _gifwrap = __webpack_require__(/*! gifwrap */ \"(ssr)/./node_modules/gifwrap/src/index.js\");\nvar MIME_TYPE = \"image/gif\";\nvar _default = function _default() {\n    return {\n        mime: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, [\n            \"gif\"\n        ]),\n        constants: {\n            MIME_GIF: MIME_TYPE\n        },\n        decoders: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, function(data) {\n            var gifObj = new _omggif[\"default\"].GifReader(data);\n            var gifData = Buffer.alloc(gifObj.width * gifObj.height * 4);\n            gifObj.decodeAndBlitFrameRGBA(0, gifData);\n            return {\n                data: gifData,\n                width: gifObj.width,\n                height: gifObj.height\n            };\n        }),\n        encoders: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, function(data) {\n            var bitmap = new _gifwrap.BitmapImage(data.bitmap);\n            _gifwrap.GifUtil.quantizeDekker(bitmap, 256);\n            var newFrame = new _gifwrap.GifFrame(bitmap);\n            var gifCodec = new _gifwrap.GifCodec();\n            return gifCodec.encodeGif([\n                newFrame\n            ], {}).then(function(newGif) {\n                return newGif.buffer;\n            });\n        })\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvZ2lmL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSx5QkFBeUJDLG1CQUFPQSxDQUFDLDBIQUE4QztBQUVuRkMsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFrQixHQUFHLEtBQUs7QUFFMUIsSUFBSUUsbUJBQW1CTix1QkFBdUJDLG1CQUFPQSxDQUFDLDRHQUF1QztBQUU3RixJQUFJTSxVQUFVUCx1QkFBdUJDLG1CQUFPQSxDQUFDLHFEQUFRO0FBRXJELElBQUlPLFdBQVdQLG1CQUFPQSxDQUFDLDBEQUFTO0FBRWhDLElBQUlRLFlBQVk7QUFFaEIsSUFBSUMsV0FBVyxTQUFTQTtJQUN0QixPQUFPO1FBQ0xDLE1BQU0sQ0FBQyxHQUFHTCxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHRyxXQUFXO1lBQUM7U0FBTTtRQUM3REcsV0FBVztZQUNUQyxVQUFVSjtRQUNaO1FBQ0FLLFVBQVUsQ0FBQyxHQUFHUixnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHRyxXQUFXLFNBQVVNLElBQUk7WUFDdEUsSUFBSUMsU0FBUyxJQUFJVCxPQUFPLENBQUMsVUFBVSxDQUFDVSxTQUFTLENBQUNGO1lBQzlDLElBQUlHLFVBQVVDLE9BQU9DLEtBQUssQ0FBQ0osT0FBT0ssS0FBSyxHQUFHTCxPQUFPTSxNQUFNLEdBQUc7WUFDMUROLE9BQU9PLHNCQUFzQixDQUFDLEdBQUdMO1lBQ2pDLE9BQU87Z0JBQ0xILE1BQU1HO2dCQUNORyxPQUFPTCxPQUFPSyxLQUFLO2dCQUNuQkMsUUFBUU4sT0FBT00sTUFBTTtZQUN2QjtRQUNGO1FBQ0FFLFVBQVUsQ0FBQyxHQUFHbEIsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBR0csV0FBVyxTQUFVTSxJQUFJO1lBQ3RFLElBQUlVLFNBQVMsSUFBSWpCLFNBQVNrQixXQUFXLENBQUNYLEtBQUtVLE1BQU07WUFFakRqQixTQUFTbUIsT0FBTyxDQUFDQyxjQUFjLENBQUNILFFBQVE7WUFFeEMsSUFBSUksV0FBVyxJQUFJckIsU0FBU3NCLFFBQVEsQ0FBQ0w7WUFDckMsSUFBSU0sV0FBVyxJQUFJdkIsU0FBU3dCLFFBQVE7WUFDcEMsT0FBT0QsU0FBU0UsU0FBUyxDQUFDO2dCQUFDSjthQUFTLEVBQUUsQ0FBQyxHQUFHSyxJQUFJLENBQUMsU0FBVUMsTUFBTTtnQkFDN0QsT0FBT0EsT0FBT0MsTUFBTTtZQUN0QjtRQUNGO0lBQ0Y7QUFDRjtBQUVBaEMsa0JBQWtCLEdBQUdNO0FBQ3JCMkIsT0FBT2pDLE9BQU8sR0FBR0EsUUFBUWtDLE9BQU8sRUFDaEMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXItY29kZS8uL25vZGVfbW9kdWxlcy9AamltcC9naWYvZGlzdC9pbmRleC5qcz9hYmE3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29tZ2dpZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm9tZ2dpZlwiKSk7XG5cbnZhciBfZ2lmd3JhcCA9IHJlcXVpcmUoXCJnaWZ3cmFwXCIpO1xuXG52YXIgTUlNRV9UWVBFID0gXCJpbWFnZS9naWZcIjtcblxudmFyIF9kZWZhdWx0ID0gZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gIHJldHVybiB7XG4gICAgbWltZTogKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh7fSwgTUlNRV9UWVBFLCBbXCJnaWZcIl0pLFxuICAgIGNvbnN0YW50czoge1xuICAgICAgTUlNRV9HSUY6IE1JTUVfVFlQRVxuICAgIH0sXG4gICAgZGVjb2RlcnM6ICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoe30sIE1JTUVfVFlQRSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHZhciBnaWZPYmogPSBuZXcgX29tZ2dpZltcImRlZmF1bHRcIl0uR2lmUmVhZGVyKGRhdGEpO1xuICAgICAgdmFyIGdpZkRhdGEgPSBCdWZmZXIuYWxsb2MoZ2lmT2JqLndpZHRoICogZ2lmT2JqLmhlaWdodCAqIDQpO1xuICAgICAgZ2lmT2JqLmRlY29kZUFuZEJsaXRGcmFtZVJHQkEoMCwgZ2lmRGF0YSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBnaWZEYXRhLFxuICAgICAgICB3aWR0aDogZ2lmT2JqLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IGdpZk9iai5oZWlnaHRcbiAgICAgIH07XG4gICAgfSksXG4gICAgZW5jb2RlcnM6ICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoe30sIE1JTUVfVFlQRSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHZhciBiaXRtYXAgPSBuZXcgX2dpZndyYXAuQml0bWFwSW1hZ2UoZGF0YS5iaXRtYXApO1xuXG4gICAgICBfZ2lmd3JhcC5HaWZVdGlsLnF1YW50aXplRGVra2VyKGJpdG1hcCwgMjU2KTtcblxuICAgICAgdmFyIG5ld0ZyYW1lID0gbmV3IF9naWZ3cmFwLkdpZkZyYW1lKGJpdG1hcCk7XG4gICAgICB2YXIgZ2lmQ29kZWMgPSBuZXcgX2dpZndyYXAuR2lmQ29kZWMoKTtcbiAgICAgIHJldHVybiBnaWZDb2RlYy5lbmNvZGVHaWYoW25ld0ZyYW1lXSwge30pLnRoZW4oZnVuY3Rpb24gKG5ld0dpZikge1xuICAgICAgICByZXR1cm4gbmV3R2lmLmJ1ZmZlcjtcbiAgICAgIH0pO1xuICAgIH0pXG4gIH07XG59O1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfb21nZ2lmIiwiX2dpZndyYXAiLCJNSU1FX1RZUEUiLCJfZGVmYXVsdCIsIm1pbWUiLCJjb25zdGFudHMiLCJNSU1FX0dJRiIsImRlY29kZXJzIiwiZGF0YSIsImdpZk9iaiIsIkdpZlJlYWRlciIsImdpZkRhdGEiLCJCdWZmZXIiLCJhbGxvYyIsIndpZHRoIiwiaGVpZ2h0IiwiZGVjb2RlQW5kQmxpdEZyYW1lUkdCQSIsImVuY29kZXJzIiwiYml0bWFwIiwiQml0bWFwSW1hZ2UiLCJHaWZVdGlsIiwicXVhbnRpemVEZWtrZXIiLCJuZXdGcmFtZSIsIkdpZkZyYW1lIiwiZ2lmQ29kZWMiLCJHaWZDb2RlYyIsImVuY29kZUdpZiIsInRoZW4iLCJuZXdHaWYiLCJidWZmZXIiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/gif/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/jpeg/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/@jimp/jpeg/dist/index.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _jpegJs = _interopRequireDefault(__webpack_require__(/*! jpeg-js */ \"(ssr)/./node_modules/jpeg-js/index.js\"));\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\nvar MIME_TYPE = \"image/jpeg\";\nvar _default = function _default() {\n    return {\n        mime: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, [\n            \"jpeg\",\n            \"jpg\",\n            \"jpe\"\n        ]),\n        constants: {\n            MIME_JPEG: MIME_TYPE\n        },\n        decoders: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, _jpegJs[\"default\"].decode),\n        encoders: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, function(image) {\n            return _jpegJs[\"default\"].encode(image.bitmap, image._quality).data;\n        }),\n        \"class\": {\n            // The quality to be used when saving JPEG images\n            _quality: 100,\n            /**\n       * Sets the quality of the image when saving as JPEG format (default is 100)\n       * @param {number} n The quality to use 0-100\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */ quality: function quality(n, cb) {\n                if (typeof n !== \"number\") {\n                    return _utils.throwError.call(this, \"n must be a number\", cb);\n                }\n                if (n < 0 || n > 100) {\n                    return _utils.throwError.call(this, \"n must be a number 0 - 100\", cb);\n                }\n                this._quality = Math.round(n);\n                if ((0, _utils.isNodePattern)(cb)) {\n                    cb.call(this, null, this);\n                }\n                return this;\n            }\n        }\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvanBlZy9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsSUFBSUEseUJBQXlCQyxtQkFBT0EsQ0FBQywwSEFBOEM7QUFFbkZDLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBa0IsR0FBRyxLQUFLO0FBRTFCLElBQUlFLG1CQUFtQk4sdUJBQXVCQyxtQkFBT0EsQ0FBQyw0R0FBdUM7QUFFN0YsSUFBSU0sVUFBVVAsdUJBQXVCQyxtQkFBT0EsQ0FBQyxzREFBUztBQUV0RCxJQUFJTyxTQUFTUCxtQkFBT0EsQ0FBQyxtRUFBYTtBQUVsQyxJQUFJUSxZQUFZO0FBRWhCLElBQUlDLFdBQVcsU0FBU0E7SUFDdEIsT0FBTztRQUNMQyxNQUFNLENBQUMsR0FBR0wsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBR0csV0FBVztZQUFDO1lBQVE7WUFBTztTQUFNO1FBQzVFRyxXQUFXO1lBQ1RDLFdBQVdKO1FBQ2I7UUFDQUssVUFBVSxDQUFDLEdBQUdSLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUdHLFdBQVdGLE9BQU8sQ0FBQyxVQUFVLENBQUNRLE1BQU07UUFDbkZDLFVBQVUsQ0FBQyxHQUFHVixnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHRyxXQUFXLFNBQVVRLEtBQUs7WUFDdkUsT0FBT1YsT0FBTyxDQUFDLFVBQVUsQ0FBQ1csTUFBTSxDQUFDRCxNQUFNRSxNQUFNLEVBQUVGLE1BQU1HLFFBQVEsRUFBRUMsSUFBSTtRQUNyRTtRQUNBLFNBQVM7WUFDUCxpREFBaUQ7WUFDakRELFVBQVU7WUFFVjs7Ozs7T0FLQyxHQUNERSxTQUFTLFNBQVNBLFFBQVFDLENBQUMsRUFBRUMsRUFBRTtnQkFDN0IsSUFBSSxPQUFPRCxNQUFNLFVBQVU7b0JBQ3pCLE9BQU9mLE9BQU9pQixVQUFVLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUUsc0JBQXNCRjtnQkFDNUQ7Z0JBRUEsSUFBSUQsSUFBSSxLQUFLQSxJQUFJLEtBQUs7b0JBQ3BCLE9BQU9mLE9BQU9pQixVQUFVLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUUsOEJBQThCRjtnQkFDcEU7Z0JBRUEsSUFBSSxDQUFDSixRQUFRLEdBQUdPLEtBQUtDLEtBQUssQ0FBQ0w7Z0JBRTNCLElBQUksQ0FBQyxHQUFHZixPQUFPcUIsYUFBYSxFQUFFTCxLQUFLO29CQUNqQ0EsR0FBR0UsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLElBQUk7Z0JBQzFCO2dCQUVBLE9BQU8sSUFBSTtZQUNiO1FBQ0Y7SUFDRjtBQUNGO0FBRUF0QixrQkFBa0IsR0FBR007QUFDckJvQixPQUFPMUIsT0FBTyxHQUFHQSxRQUFRMkIsT0FBTyxFQUNoQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xci1jb2RlLy4vbm9kZV9tb2R1bGVzL0BqaW1wL2pwZWcvZGlzdC9pbmRleC5qcz9kZThkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX2pwZWdKcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImpwZWctanNcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBqaW1wL3V0aWxzXCIpO1xuXG52YXIgTUlNRV9UWVBFID0gXCJpbWFnZS9qcGVnXCI7XG5cbnZhciBfZGVmYXVsdCA9IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICByZXR1cm4ge1xuICAgIG1pbWU6ICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoe30sIE1JTUVfVFlQRSwgW1wianBlZ1wiLCBcImpwZ1wiLCBcImpwZVwiXSksXG4gICAgY29uc3RhbnRzOiB7XG4gICAgICBNSU1FX0pQRUc6IE1JTUVfVFlQRVxuICAgIH0sXG4gICAgZGVjb2RlcnM6ICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoe30sIE1JTUVfVFlQRSwgX2pwZWdKc1tcImRlZmF1bHRcIl0uZGVjb2RlKSxcbiAgICBlbmNvZGVyczogKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh7fSwgTUlNRV9UWVBFLCBmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgIHJldHVybiBfanBlZ0pzW1wiZGVmYXVsdFwiXS5lbmNvZGUoaW1hZ2UuYml0bWFwLCBpbWFnZS5fcXVhbGl0eSkuZGF0YTtcbiAgICB9KSxcbiAgICBcImNsYXNzXCI6IHtcbiAgICAgIC8vIFRoZSBxdWFsaXR5IHRvIGJlIHVzZWQgd2hlbiBzYXZpbmcgSlBFRyBpbWFnZXNcbiAgICAgIF9xdWFsaXR5OiAxMDAsXG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0cyB0aGUgcXVhbGl0eSBvZiB0aGUgaW1hZ2Ugd2hlbiBzYXZpbmcgYXMgSlBFRyBmb3JtYXQgKGRlZmF1bHQgaXMgMTAwKVxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIHF1YWxpdHkgdG8gdXNlIDAtMTAwXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEVycm9yLCBKaW1wKX0gY2IgKG9wdGlvbmFsKSBhIGNhbGxiYWNrIGZvciB3aGVuIGNvbXBsZXRlXG4gICAgICAgKiBAcmV0dXJucyB7SmltcH0gdGhpcyBmb3IgY2hhaW5pbmcgb2YgbWV0aG9kc1xuICAgICAgICovXG4gICAgICBxdWFsaXR5OiBmdW5jdGlvbiBxdWFsaXR5KG4sIGNiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbiAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIHJldHVybiBfdXRpbHMudGhyb3dFcnJvci5jYWxsKHRoaXMsIFwibiBtdXN0IGJlIGEgbnVtYmVyXCIsIGNiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuIDwgMCB8fCBuID4gMTAwKSB7XG4gICAgICAgICAgcmV0dXJuIF91dGlscy50aHJvd0Vycm9yLmNhbGwodGhpcywgXCJuIG11c3QgYmUgYSBudW1iZXIgMCAtIDEwMFwiLCBjYik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9xdWFsaXR5ID0gTWF0aC5yb3VuZChuKTtcblxuICAgICAgICBpZiAoKDAsIF91dGlscy5pc05vZGVQYXR0ZXJuKShjYikpIHtcbiAgICAgICAgICBjYi5jYWxsKHRoaXMsIG51bGwsIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfZGVmaW5lUHJvcGVydHkyIiwiX2pwZWdKcyIsIl91dGlscyIsIk1JTUVfVFlQRSIsIl9kZWZhdWx0IiwibWltZSIsImNvbnN0YW50cyIsIk1JTUVfSlBFRyIsImRlY29kZXJzIiwiZGVjb2RlIiwiZW5jb2RlcnMiLCJpbWFnZSIsImVuY29kZSIsImJpdG1hcCIsIl9xdWFsaXR5IiwiZGF0YSIsInF1YWxpdHkiLCJuIiwiY2IiLCJ0aHJvd0Vycm9yIiwiY2FsbCIsIk1hdGgiLCJyb3VuZCIsImlzTm9kZVBhdHRlcm4iLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/jpeg/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-blit/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@jimp/plugin-blit/dist/index.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ \"(ssr)/./node_modules/@babel/runtime/helpers/typeof.js\"));\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\nvar _default = function _default() {\n    return {\n        /**\n     * Blits a source image on to this image\n     * @param {Jimp} src the source Jimp instance\n     * @param {number} x the x position to blit the image\n     * @param {number} y the y position to blit the image\n     * @param {number} srcx (optional) the x position from which to crop the source image\n     * @param {number} srcy (optional) the y position from which to crop the source image\n     * @param {number} srcw (optional) the width to which to crop the source image\n     * @param {number} srch (optional) the height to which to crop the source image\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */ blit: function blit(src, x, y, srcx, srcy, srcw, srch, cb) {\n            if (!(src instanceof this.constructor)) {\n                return _utils.throwError.call(this, \"The source must be a Jimp image\", cb);\n            }\n            if (typeof x !== \"number\" || typeof y !== \"number\") {\n                return _utils.throwError.call(this, \"x and y must be numbers\", cb);\n            }\n            if (typeof srcx === \"function\") {\n                cb = srcx;\n                srcx = 0;\n                srcy = 0;\n                srcw = src.bitmap.width;\n                srch = src.bitmap.height;\n            } else if ((0, _typeof2[\"default\"])(srcx) === (0, _typeof2[\"default\"])(srcy) && (0, _typeof2[\"default\"])(srcy) === (0, _typeof2[\"default\"])(srcw) && (0, _typeof2[\"default\"])(srcw) === (0, _typeof2[\"default\"])(srch)) {\n                srcx = srcx || 0;\n                srcy = srcy || 0;\n                srcw = srcw || src.bitmap.width;\n                srch = srch || src.bitmap.height;\n            } else {\n                return _utils.throwError.call(this, \"srcx, srcy, srcw, srch must be numbers\", cb);\n            } // round input\n            x = Math.round(x);\n            y = Math.round(y); // round input\n            srcx = Math.round(srcx);\n            srcy = Math.round(srcy);\n            srcw = Math.round(srcw);\n            srch = Math.round(srch);\n            var maxWidth = this.bitmap.width;\n            var maxHeight = this.bitmap.height;\n            var baseImage = this;\n            src.scanQuiet(srcx, srcy, srcw, srch, function(sx, sy, idx) {\n                var xOffset = x + sx - srcx;\n                var yOffset = y + sy - srcy;\n                if (xOffset >= 0 && yOffset >= 0 && maxWidth - xOffset > 0 && maxHeight - yOffset > 0) {\n                    var dstIdx = baseImage.getPixelIndex(xOffset, yOffset);\n                    var _src = {\n                        r: this.bitmap.data[idx],\n                        g: this.bitmap.data[idx + 1],\n                        b: this.bitmap.data[idx + 2],\n                        a: this.bitmap.data[idx + 3]\n                    };\n                    var dst = {\n                        r: baseImage.bitmap.data[dstIdx],\n                        g: baseImage.bitmap.data[dstIdx + 1],\n                        b: baseImage.bitmap.data[dstIdx + 2],\n                        a: baseImage.bitmap.data[dstIdx + 3]\n                    };\n                    baseImage.bitmap.data[dstIdx] = (_src.a * (_src.r - dst.r) - dst.r + 255 >> 8) + dst.r;\n                    baseImage.bitmap.data[dstIdx + 1] = (_src.a * (_src.g - dst.g) - dst.g + 255 >> 8) + dst.g;\n                    baseImage.bitmap.data[dstIdx + 2] = (_src.a * (_src.b - dst.b) - dst.b + 255 >> 8) + dst.b;\n                    baseImage.bitmap.data[dstIdx + 3] = this.constructor.limit255(dst.a + _src.a);\n                }\n            });\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        }\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-blit/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-blur/dist/blur-tables.js":
/*!************************************************************!*\
  !*** ./node_modules/@jimp/plugin-blur/dist/blur-tables.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.shgTable = exports.mulTable = void 0;\nvar mulTable = [\n    1,\n    57,\n    41,\n    21,\n    203,\n    34,\n    97,\n    73,\n    227,\n    91,\n    149,\n    62,\n    105,\n    45,\n    39,\n    137,\n    241,\n    107,\n    3,\n    173,\n    39,\n    71,\n    65,\n    238,\n    219,\n    101,\n    187,\n    87,\n    81,\n    151,\n    141,\n    133,\n    249,\n    117,\n    221,\n    209,\n    197,\n    187,\n    177,\n    169,\n    5,\n    153,\n    73,\n    139,\n    133,\n    127,\n    243,\n    233,\n    223,\n    107,\n    103,\n    99,\n    191,\n    23,\n    177,\n    171,\n    165,\n    159,\n    77,\n    149,\n    9,\n    139,\n    135,\n    131,\n    253,\n    245,\n    119,\n    231,\n    224,\n    109,\n    211,\n    103,\n    25,\n    195,\n    189,\n    23,\n    45,\n    175,\n    171,\n    83,\n    81,\n    79,\n    155,\n    151,\n    147,\n    9,\n    141,\n    137,\n    67,\n    131,\n    129,\n    251,\n    123,\n    30,\n    235,\n    115,\n    113,\n    221,\n    217,\n    53,\n    13,\n    51,\n    50,\n    49,\n    193,\n    189,\n    185,\n    91,\n    179,\n    175,\n    43,\n    169,\n    83,\n    163,\n    5,\n    79,\n    155,\n    19,\n    75,\n    147,\n    145,\n    143,\n    35,\n    69,\n    17,\n    67,\n    33,\n    65,\n    255,\n    251,\n    247,\n    243,\n    239,\n    59,\n    29,\n    229,\n    113,\n    111,\n    219,\n    27,\n    213,\n    105,\n    207,\n    51,\n    201,\n    199,\n    49,\n    193,\n    191,\n    47,\n    93,\n    183,\n    181,\n    179,\n    11,\n    87,\n    43,\n    85,\n    167,\n    165,\n    163,\n    161,\n    159,\n    157,\n    155,\n    77,\n    19,\n    75,\n    37,\n    73,\n    145,\n    143,\n    141,\n    35,\n    138,\n    137,\n    135,\n    67,\n    33,\n    131,\n    129,\n    255,\n    63,\n    250,\n    247,\n    61,\n    121,\n    239,\n    237,\n    117,\n    29,\n    229,\n    227,\n    225,\n    111,\n    55,\n    109,\n    216,\n    213,\n    211,\n    209,\n    207,\n    205,\n    203,\n    201,\n    199,\n    197,\n    195,\n    193,\n    48,\n    190,\n    47,\n    93,\n    185,\n    183,\n    181,\n    179,\n    178,\n    176,\n    175,\n    173,\n    171,\n    85,\n    21,\n    167,\n    165,\n    41,\n    163,\n    161,\n    5,\n    79,\n    157,\n    78,\n    154,\n    153,\n    19,\n    75,\n    149,\n    74,\n    147,\n    73,\n    144,\n    143,\n    71,\n    141,\n    140,\n    139,\n    137,\n    17,\n    135,\n    134,\n    133,\n    66,\n    131,\n    65,\n    129,\n    1\n];\nexports.mulTable = mulTable;\nvar shgTable = [\n    0,\n    9,\n    10,\n    10,\n    14,\n    12,\n    14,\n    14,\n    16,\n    15,\n    16,\n    15,\n    16,\n    15,\n    15,\n    17,\n    18,\n    17,\n    12,\n    18,\n    16,\n    17,\n    17,\n    19,\n    19,\n    18,\n    19,\n    18,\n    18,\n    19,\n    19,\n    19,\n    20,\n    19,\n    20,\n    20,\n    20,\n    20,\n    20,\n    20,\n    15,\n    20,\n    19,\n    20,\n    20,\n    20,\n    21,\n    21,\n    21,\n    20,\n    20,\n    20,\n    21,\n    18,\n    21,\n    21,\n    21,\n    21,\n    20,\n    21,\n    17,\n    21,\n    21,\n    21,\n    22,\n    22,\n    21,\n    22,\n    22,\n    21,\n    22,\n    21,\n    19,\n    22,\n    22,\n    19,\n    20,\n    22,\n    22,\n    21,\n    21,\n    21,\n    22,\n    22,\n    22,\n    18,\n    22,\n    22,\n    21,\n    22,\n    22,\n    23,\n    22,\n    20,\n    23,\n    22,\n    22,\n    23,\n    23,\n    21,\n    19,\n    21,\n    21,\n    21,\n    23,\n    23,\n    23,\n    22,\n    23,\n    23,\n    21,\n    23,\n    22,\n    23,\n    18,\n    22,\n    23,\n    20,\n    22,\n    23,\n    23,\n    23,\n    21,\n    22,\n    20,\n    22,\n    21,\n    22,\n    24,\n    24,\n    24,\n    24,\n    24,\n    22,\n    21,\n    24,\n    23,\n    23,\n    24,\n    21,\n    24,\n    23,\n    24,\n    22,\n    24,\n    24,\n    22,\n    24,\n    24,\n    22,\n    23,\n    24,\n    24,\n    24,\n    20,\n    23,\n    22,\n    23,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    23,\n    21,\n    23,\n    22,\n    23,\n    24,\n    24,\n    24,\n    22,\n    24,\n    24,\n    24,\n    23,\n    22,\n    24,\n    24,\n    25,\n    23,\n    25,\n    25,\n    23,\n    24,\n    25,\n    25,\n    24,\n    22,\n    25,\n    25,\n    25,\n    24,\n    23,\n    24,\n    25,\n    25,\n    25,\n    25,\n    25,\n    25,\n    25,\n    25,\n    25,\n    25,\n    25,\n    25,\n    23,\n    25,\n    23,\n    24,\n    25,\n    25,\n    25,\n    25,\n    25,\n    25,\n    25,\n    25,\n    25,\n    24,\n    22,\n    25,\n    25,\n    23,\n    25,\n    25,\n    20,\n    24,\n    25,\n    24,\n    25,\n    25,\n    22,\n    24,\n    25,\n    24,\n    25,\n    24,\n    25,\n    25,\n    24,\n    25,\n    25,\n    25,\n    25,\n    22,\n    25,\n    25,\n    25,\n    24,\n    25,\n    24,\n    25,\n    18\n];\nexports.shgTable = shgTable; //# sourceMappingURL=blur-tables.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWJsdXIvZGlzdC9ibHVyLXRhYmxlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsZ0JBQWdCLEdBQUdBLGdCQUFnQixHQUFHLEtBQUs7QUFDM0MsSUFBSUcsV0FBVztJQUFDO0lBQUc7SUFBSTtJQUFJO0lBQUk7SUFBSztJQUFJO0lBQUk7SUFBSTtJQUFLO0lBQUk7SUFBSztJQUFJO0lBQUs7SUFBSTtJQUFJO0lBQUs7SUFBSztJQUFLO0lBQUc7SUFBSztJQUFJO0lBQUk7SUFBSTtJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUk7SUFBSTtJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBRztJQUFLO0lBQUk7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUk7SUFBSztJQUFJO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSTtJQUFLO0lBQUc7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUk7SUFBSztJQUFLO0lBQUk7SUFBSTtJQUFLO0lBQUs7SUFBSTtJQUFJO0lBQUk7SUFBSztJQUFLO0lBQUs7SUFBRztJQUFLO0lBQUs7SUFBSTtJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUk7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFLO0lBQUs7SUFBSztJQUFJO0lBQUs7SUFBSztJQUFJO0lBQUs7SUFBSTtJQUFLO0lBQUc7SUFBSTtJQUFLO0lBQUk7SUFBSTtJQUFLO0lBQUs7SUFBSztJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSTtJQUFJO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSTtJQUFLO0lBQUs7SUFBSztJQUFJO0lBQUs7SUFBSztJQUFJO0lBQUs7SUFBSztJQUFJO0lBQUk7SUFBSztJQUFLO0lBQUs7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFLO0lBQUs7SUFBSztJQUFJO0lBQUs7SUFBSztJQUFLO0lBQUk7SUFBSTtJQUFLO0lBQUs7SUFBSztJQUFJO0lBQUs7SUFBSztJQUFJO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSTtJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUk7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFJO0lBQUs7SUFBSTtJQUFJO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUk7SUFBSTtJQUFLO0lBQUs7SUFBSTtJQUFLO0lBQUs7SUFBRztJQUFJO0lBQUs7SUFBSTtJQUFLO0lBQUs7SUFBSTtJQUFJO0lBQUs7SUFBSTtJQUFLO0lBQUk7SUFBSztJQUFLO0lBQUk7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFJO0lBQUs7SUFBSztJQUFLO0lBQUk7SUFBSztJQUFJO0lBQUs7Q0FBRTtBQUNqckNILGdCQUFnQixHQUFHRztBQUNuQixJQUFJRCxXQUFXO0lBQUM7SUFBRztJQUFHO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtDQUFHO0FBQ2poQ0YsZ0JBQWdCLEdBQUdFLFVBQ25CLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3FyLWNvZGUvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWJsdXIvZGlzdC9ibHVyLXRhYmxlcy5qcz9lNzIwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5zaGdUYWJsZSA9IGV4cG9ydHMubXVsVGFibGUgPSB2b2lkIDA7XG52YXIgbXVsVGFibGUgPSBbMSwgNTcsIDQxLCAyMSwgMjAzLCAzNCwgOTcsIDczLCAyMjcsIDkxLCAxNDksIDYyLCAxMDUsIDQ1LCAzOSwgMTM3LCAyNDEsIDEwNywgMywgMTczLCAzOSwgNzEsIDY1LCAyMzgsIDIxOSwgMTAxLCAxODcsIDg3LCA4MSwgMTUxLCAxNDEsIDEzMywgMjQ5LCAxMTcsIDIyMSwgMjA5LCAxOTcsIDE4NywgMTc3LCAxNjksIDUsIDE1MywgNzMsIDEzOSwgMTMzLCAxMjcsIDI0MywgMjMzLCAyMjMsIDEwNywgMTAzLCA5OSwgMTkxLCAyMywgMTc3LCAxNzEsIDE2NSwgMTU5LCA3NywgMTQ5LCA5LCAxMzksIDEzNSwgMTMxLCAyNTMsIDI0NSwgMTE5LCAyMzEsIDIyNCwgMTA5LCAyMTEsIDEwMywgMjUsIDE5NSwgMTg5LCAyMywgNDUsIDE3NSwgMTcxLCA4MywgODEsIDc5LCAxNTUsIDE1MSwgMTQ3LCA5LCAxNDEsIDEzNywgNjcsIDEzMSwgMTI5LCAyNTEsIDEyMywgMzAsIDIzNSwgMTE1LCAxMTMsIDIyMSwgMjE3LCA1MywgMTMsIDUxLCA1MCwgNDksIDE5MywgMTg5LCAxODUsIDkxLCAxNzksIDE3NSwgNDMsIDE2OSwgODMsIDE2MywgNSwgNzksIDE1NSwgMTksIDc1LCAxNDcsIDE0NSwgMTQzLCAzNSwgNjksIDE3LCA2NywgMzMsIDY1LCAyNTUsIDI1MSwgMjQ3LCAyNDMsIDIzOSwgNTksIDI5LCAyMjksIDExMywgMTExLCAyMTksIDI3LCAyMTMsIDEwNSwgMjA3LCA1MSwgMjAxLCAxOTksIDQ5LCAxOTMsIDE5MSwgNDcsIDkzLCAxODMsIDE4MSwgMTc5LCAxMSwgODcsIDQzLCA4NSwgMTY3LCAxNjUsIDE2MywgMTYxLCAxNTksIDE1NywgMTU1LCA3NywgMTksIDc1LCAzNywgNzMsIDE0NSwgMTQzLCAxNDEsIDM1LCAxMzgsIDEzNywgMTM1LCA2NywgMzMsIDEzMSwgMTI5LCAyNTUsIDYzLCAyNTAsIDI0NywgNjEsIDEyMSwgMjM5LCAyMzcsIDExNywgMjksIDIyOSwgMjI3LCAyMjUsIDExMSwgNTUsIDEwOSwgMjE2LCAyMTMsIDIxMSwgMjA5LCAyMDcsIDIwNSwgMjAzLCAyMDEsIDE5OSwgMTk3LCAxOTUsIDE5MywgNDgsIDE5MCwgNDcsIDkzLCAxODUsIDE4MywgMTgxLCAxNzksIDE3OCwgMTc2LCAxNzUsIDE3MywgMTcxLCA4NSwgMjEsIDE2NywgMTY1LCA0MSwgMTYzLCAxNjEsIDUsIDc5LCAxNTcsIDc4LCAxNTQsIDE1MywgMTksIDc1LCAxNDksIDc0LCAxNDcsIDczLCAxNDQsIDE0MywgNzEsIDE0MSwgMTQwLCAxMzksIDEzNywgMTcsIDEzNSwgMTM0LCAxMzMsIDY2LCAxMzEsIDY1LCAxMjksIDFdO1xuZXhwb3J0cy5tdWxUYWJsZSA9IG11bFRhYmxlO1xudmFyIHNoZ1RhYmxlID0gWzAsIDksIDEwLCAxMCwgMTQsIDEyLCAxNCwgMTQsIDE2LCAxNSwgMTYsIDE1LCAxNiwgMTUsIDE1LCAxNywgMTgsIDE3LCAxMiwgMTgsIDE2LCAxNywgMTcsIDE5LCAxOSwgMTgsIDE5LCAxOCwgMTgsIDE5LCAxOSwgMTksIDIwLCAxOSwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMCwgMTUsIDIwLCAxOSwgMjAsIDIwLCAyMCwgMjEsIDIxLCAyMSwgMjAsIDIwLCAyMCwgMjEsIDE4LCAyMSwgMjEsIDIxLCAyMSwgMjAsIDIxLCAxNywgMjEsIDIxLCAyMSwgMjIsIDIyLCAyMSwgMjIsIDIyLCAyMSwgMjIsIDIxLCAxOSwgMjIsIDIyLCAxOSwgMjAsIDIyLCAyMiwgMjEsIDIxLCAyMSwgMjIsIDIyLCAyMiwgMTgsIDIyLCAyMiwgMjEsIDIyLCAyMiwgMjMsIDIyLCAyMCwgMjMsIDIyLCAyMiwgMjMsIDIzLCAyMSwgMTksIDIxLCAyMSwgMjEsIDIzLCAyMywgMjMsIDIyLCAyMywgMjMsIDIxLCAyMywgMjIsIDIzLCAxOCwgMjIsIDIzLCAyMCwgMjIsIDIzLCAyMywgMjMsIDIxLCAyMiwgMjAsIDIyLCAyMSwgMjIsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjIsIDIxLCAyNCwgMjMsIDIzLCAyNCwgMjEsIDI0LCAyMywgMjQsIDIyLCAyNCwgMjQsIDIyLCAyNCwgMjQsIDIyLCAyMywgMjQsIDI0LCAyNCwgMjAsIDIzLCAyMiwgMjMsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyMywgMjEsIDIzLCAyMiwgMjMsIDI0LCAyNCwgMjQsIDIyLCAyNCwgMjQsIDI0LCAyMywgMjIsIDI0LCAyNCwgMjUsIDIzLCAyNSwgMjUsIDIzLCAyNCwgMjUsIDI1LCAyNCwgMjIsIDI1LCAyNSwgMjUsIDI0LCAyMywgMjQsIDI1LCAyNSwgMjUsIDI1LCAyNSwgMjUsIDI1LCAyNSwgMjUsIDI1LCAyNSwgMjUsIDIzLCAyNSwgMjMsIDI0LCAyNSwgMjUsIDI1LCAyNSwgMjUsIDI1LCAyNSwgMjUsIDI1LCAyNCwgMjIsIDI1LCAyNSwgMjMsIDI1LCAyNSwgMjAsIDI0LCAyNSwgMjQsIDI1LCAyNSwgMjIsIDI0LCAyNSwgMjQsIDI1LCAyNCwgMjUsIDI1LCAyNCwgMjUsIDI1LCAyNSwgMjUsIDIyLCAyNSwgMjUsIDI1LCAyNCwgMjUsIDI0LCAyNSwgMThdO1xuZXhwb3J0cy5zaGdUYWJsZSA9IHNoZ1RhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ymx1ci10YWJsZXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic2hnVGFibGUiLCJtdWxUYWJsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-blur/dist/blur-tables.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-blur/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@jimp/plugin-blur/dist/index.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\nvar _blurTables = __webpack_require__(/*! ./blur-tables */ \"(ssr)/./node_modules/@jimp/plugin-blur/dist/blur-tables.js\");\n/*\n    Superfast Blur (0.5)\n    http://www.quasimondo.com/BoxBlurForCanvas/FastBlur.js\n\n    Copyright (c) 2011 Mario Klingemann\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without\n    restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n*/ var _default = function _default() {\n    return {\n        /**\n     * A fast blur algorithm that produces similar effect to a Gaussian blur - but MUCH quicker\n     * @param {number} r the pixel radius of the blur\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */ blur: function blur(r, cb) {\n            if (typeof r !== \"number\") return _utils.throwError.call(this, \"r must be a number\", cb);\n            if (r < 1) return _utils.throwError.call(this, \"r must be greater than 0\", cb);\n            var rsum;\n            var gsum;\n            var bsum;\n            var asum;\n            var x;\n            var y;\n            var i;\n            var p;\n            var p1;\n            var p2;\n            var yp;\n            var yi;\n            var yw;\n            var pa;\n            var wm = this.bitmap.width - 1;\n            var hm = this.bitmap.height - 1; // const wh = this.bitmap.width * this.bitmap.height;\n            var rad1 = r + 1;\n            var mulSum = _blurTables.mulTable[r];\n            var shgSum = _blurTables.shgTable[r];\n            var red = [];\n            var green = [];\n            var blue = [];\n            var alpha = [];\n            var vmin = [];\n            var vmax = [];\n            var iterations = 2;\n            while(iterations-- > 0){\n                yi = 0;\n                yw = 0;\n                for(y = 0; y < this.bitmap.height; y++){\n                    rsum = this.bitmap.data[yw] * rad1;\n                    gsum = this.bitmap.data[yw + 1] * rad1;\n                    bsum = this.bitmap.data[yw + 2] * rad1;\n                    asum = this.bitmap.data[yw + 3] * rad1;\n                    for(i = 1; i <= r; i++){\n                        p = yw + ((i > wm ? wm : i) << 2);\n                        rsum += this.bitmap.data[p++];\n                        gsum += this.bitmap.data[p++];\n                        bsum += this.bitmap.data[p++];\n                        asum += this.bitmap.data[p];\n                    }\n                    for(x = 0; x < this.bitmap.width; x++){\n                        red[yi] = rsum;\n                        green[yi] = gsum;\n                        blue[yi] = bsum;\n                        alpha[yi] = asum;\n                        if (y === 0) {\n                            vmin[x] = ((p = x + rad1) < wm ? p : wm) << 2;\n                            vmax[x] = (p = x - r) > 0 ? p << 2 : 0;\n                        }\n                        p1 = yw + vmin[x];\n                        p2 = yw + vmax[x];\n                        rsum += this.bitmap.data[p1++] - this.bitmap.data[p2++];\n                        gsum += this.bitmap.data[p1++] - this.bitmap.data[p2++];\n                        bsum += this.bitmap.data[p1++] - this.bitmap.data[p2++];\n                        asum += this.bitmap.data[p1] - this.bitmap.data[p2];\n                        yi++;\n                    }\n                    yw += this.bitmap.width << 2;\n                }\n                for(x = 0; x < this.bitmap.width; x++){\n                    yp = x;\n                    rsum = red[yp] * rad1;\n                    gsum = green[yp] * rad1;\n                    bsum = blue[yp] * rad1;\n                    asum = alpha[yp] * rad1;\n                    for(i = 1; i <= r; i++){\n                        yp += i > hm ? 0 : this.bitmap.width;\n                        rsum += red[yp];\n                        gsum += green[yp];\n                        bsum += blue[yp];\n                        asum += alpha[yp];\n                    }\n                    yi = x << 2;\n                    for(y = 0; y < this.bitmap.height; y++){\n                        pa = asum * mulSum >>> shgSum;\n                        this.bitmap.data[yi + 3] = pa; // normalize alpha\n                        if (pa > 255) {\n                            this.bitmap.data[yi + 3] = 255;\n                        }\n                        if (pa > 0) {\n                            pa = 255 / pa;\n                            this.bitmap.data[yi] = (rsum * mulSum >>> shgSum) * pa;\n                            this.bitmap.data[yi + 1] = (gsum * mulSum >>> shgSum) * pa;\n                            this.bitmap.data[yi + 2] = (bsum * mulSum >>> shgSum) * pa;\n                        } else {\n                            this.bitmap.data[yi + 2] = 0;\n                            this.bitmap.data[yi + 1] = 0;\n                            this.bitmap.data[yi] = 0;\n                        }\n                        if (x === 0) {\n                            vmin[y] = ((p = y + rad1) < hm ? p : hm) * this.bitmap.width;\n                            vmax[y] = (p = y - r) > 0 ? p * this.bitmap.width : 0;\n                        }\n                        p1 = x + vmin[y];\n                        p2 = x + vmax[y];\n                        rsum += red[p1] - red[p2];\n                        gsum += green[p1] - green[p2];\n                        bsum += blue[p1] - blue[p2];\n                        asum += alpha[p1] - alpha[p2];\n                        yi += this.bitmap.width << 2;\n                    }\n                }\n            }\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        }\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-blur/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-circle/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@jimp/plugin-circle/dist/index.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\n/**\n * Creates a circle out of an image.\n * @param {function(Error, Jimp)} options (optional) radius, x, y\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */ var _default = function _default() {\n    return {\n        circle: function circle() {\n            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            var cb = arguments.length > 1 ? arguments[1] : undefined;\n            if (typeof options === \"function\") {\n                cb = options;\n                options = {};\n            }\n            var radius = options.radius || (this.bitmap.width > this.bitmap.height ? this.bitmap.height : this.bitmap.width) / 2;\n            var center = {\n                x: typeof options.x === \"number\" ? options.x : this.bitmap.width / 2,\n                y: typeof options.y === \"number\" ? options.y : this.bitmap.height / 2\n            };\n            this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(x, y, idx) {\n                var curR = Math.sqrt(Math.pow(x - center.x, 2) + Math.pow(y - center.y, 2));\n                if (radius - curR <= 0.0) {\n                    this.bitmap.data[idx + 3] = 0;\n                } else if (radius - curR < 1.0) {\n                    this.bitmap.data[idx + 3] = 255 * (radius - curR);\n                }\n            });\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        }\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWNpcmNsZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBa0IsR0FBRyxLQUFLO0FBRTFCLElBQUlFLFNBQVNDLG1CQUFPQSxDQUFDLG1FQUFhO0FBRWxDOzs7OztDQUtDLEdBQ0QsSUFBSUMsV0FBVyxTQUFTQTtJQUN0QixPQUFPO1FBQ0xDLFFBQVEsU0FBU0E7WUFDZixJQUFJQyxVQUFVQyxVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS0UsWUFBWUYsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO1lBQ25GLElBQUlHLEtBQUtILFVBQVVDLE1BQU0sR0FBRyxJQUFJRCxTQUFTLENBQUMsRUFBRSxHQUFHRTtZQUUvQyxJQUFJLE9BQU9ILFlBQVksWUFBWTtnQkFDakNJLEtBQUtKO2dCQUNMQSxVQUFVLENBQUM7WUFDYjtZQUVBLElBQUlLLFNBQVNMLFFBQVFLLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxLQUFLLEdBQUcsSUFBSSxDQUFDRCxNQUFNLENBQUNFLE1BQU0sR0FBRyxJQUFJLENBQUNGLE1BQU0sQ0FBQ0UsTUFBTSxHQUFHLElBQUksQ0FBQ0YsTUFBTSxDQUFDQyxLQUFLLElBQUk7WUFDbkgsSUFBSUUsU0FBUztnQkFDWEMsR0FBRyxPQUFPVixRQUFRVSxDQUFDLEtBQUssV0FBV1YsUUFBUVUsQ0FBQyxHQUFHLElBQUksQ0FBQ0osTUFBTSxDQUFDQyxLQUFLLEdBQUc7Z0JBQ25FSSxHQUFHLE9BQU9YLFFBQVFXLENBQUMsS0FBSyxXQUFXWCxRQUFRVyxDQUFDLEdBQUcsSUFBSSxDQUFDTCxNQUFNLENBQUNFLE1BQU0sR0FBRztZQUN0RTtZQUNBLElBQUksQ0FBQ0ksU0FBUyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUNOLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLElBQUksQ0FBQ0QsTUFBTSxDQUFDRSxNQUFNLEVBQUUsU0FBVUUsQ0FBQyxFQUFFQyxDQUFDLEVBQUVFLEdBQUc7Z0JBQzdFLElBQUlDLE9BQU9DLEtBQUtDLElBQUksQ0FBQ0QsS0FBS0UsR0FBRyxDQUFDUCxJQUFJRCxPQUFPQyxDQUFDLEVBQUUsS0FBS0ssS0FBS0UsR0FBRyxDQUFDTixJQUFJRixPQUFPRSxDQUFDLEVBQUU7Z0JBRXhFLElBQUlOLFNBQVNTLFFBQVEsS0FBSztvQkFDeEIsSUFBSSxDQUFDUixNQUFNLENBQUNZLElBQUksQ0FBQ0wsTUFBTSxFQUFFLEdBQUc7Z0JBQzlCLE9BQU8sSUFBSVIsU0FBU1MsT0FBTyxLQUFLO29CQUM5QixJQUFJLENBQUNSLE1BQU0sQ0FBQ1ksSUFBSSxDQUFDTCxNQUFNLEVBQUUsR0FBRyxNQUFPUixDQUFBQSxTQUFTUyxJQUFHO2dCQUNqRDtZQUNGO1lBRUEsSUFBSSxDQUFDLEdBQUdsQixPQUFPdUIsYUFBYSxFQUFFZixLQUFLO2dCQUNqQ0EsR0FBR2dCLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxJQUFJO1lBQzFCO1lBRUEsT0FBTyxJQUFJO1FBQ2I7SUFDRjtBQUNGO0FBRUExQixrQkFBa0IsR0FBR0k7QUFDckJ1QixPQUFPM0IsT0FBTyxHQUFHQSxRQUFRNEIsT0FBTyxFQUNoQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xci1jb2RlLy4vbm9kZV9tb2R1bGVzL0BqaW1wL3BsdWdpbi1jaXJjbGUvZGlzdC9pbmRleC5qcz81ZDY2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQGppbXAvdXRpbHNcIik7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNpcmNsZSBvdXQgb2YgYW4gaW1hZ2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEVycm9yLCBKaW1wKX0gb3B0aW9ucyAob3B0aW9uYWwpIHJhZGl1cywgeCwgeVxuICogQHBhcmFtIHtmdW5jdGlvbihFcnJvciwgSmltcCl9IGNiIChvcHRpb25hbCkgYSBjYWxsYmFjayBmb3Igd2hlbiBjb21wbGV0ZVxuICogQHJldHVybnMge0ppbXB9IHRoaXMgZm9yIGNoYWluaW5nIG9mIG1ldGhvZHNcbiAqL1xudmFyIF9kZWZhdWx0ID0gZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gIHJldHVybiB7XG4gICAgY2lyY2xlOiBmdW5jdGlvbiBjaXJjbGUoKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICB2YXIgY2IgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2IgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICB9XG5cbiAgICAgIHZhciByYWRpdXMgPSBvcHRpb25zLnJhZGl1cyB8fCAodGhpcy5iaXRtYXAud2lkdGggPiB0aGlzLmJpdG1hcC5oZWlnaHQgPyB0aGlzLmJpdG1hcC5oZWlnaHQgOiB0aGlzLmJpdG1hcC53aWR0aCkgLyAyO1xuICAgICAgdmFyIGNlbnRlciA9IHtcbiAgICAgICAgeDogdHlwZW9mIG9wdGlvbnMueCA9PT0gXCJudW1iZXJcIiA/IG9wdGlvbnMueCA6IHRoaXMuYml0bWFwLndpZHRoIC8gMixcbiAgICAgICAgeTogdHlwZW9mIG9wdGlvbnMueSA9PT0gXCJudW1iZXJcIiA/IG9wdGlvbnMueSA6IHRoaXMuYml0bWFwLmhlaWdodCAvIDJcbiAgICAgIH07XG4gICAgICB0aGlzLnNjYW5RdWlldCgwLCAwLCB0aGlzLmJpdG1hcC53aWR0aCwgdGhpcy5iaXRtYXAuaGVpZ2h0LCBmdW5jdGlvbiAoeCwgeSwgaWR4KSB7XG4gICAgICAgIHZhciBjdXJSID0gTWF0aC5zcXJ0KE1hdGgucG93KHggLSBjZW50ZXIueCwgMikgKyBNYXRoLnBvdyh5IC0gY2VudGVyLnksIDIpKTtcblxuICAgICAgICBpZiAocmFkaXVzIC0gY3VyUiA8PSAwLjApIHtcbiAgICAgICAgICB0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDNdID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChyYWRpdXMgLSBjdXJSIDwgMS4wKSB7XG4gICAgICAgICAgdGhpcy5iaXRtYXAuZGF0YVtpZHggKyAzXSA9IDI1NSAqIChyYWRpdXMgLSBjdXJSKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICgoMCwgX3V0aWxzLmlzTm9kZVBhdHRlcm4pKGNiKSkge1xuICAgICAgICBjYi5jYWxsKHRoaXMsIG51bGwsIHRoaXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfdXRpbHMiLCJyZXF1aXJlIiwiX2RlZmF1bHQiLCJjaXJjbGUiLCJvcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiY2IiLCJyYWRpdXMiLCJiaXRtYXAiLCJ3aWR0aCIsImhlaWdodCIsImNlbnRlciIsIngiLCJ5Iiwic2NhblF1aWV0IiwiaWR4IiwiY3VyUiIsIk1hdGgiLCJzcXJ0IiwicG93IiwiZGF0YSIsImlzTm9kZVBhdHRlcm4iLCJjYWxsIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-circle/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-color/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@jimp/plugin-color/dist/index.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/toConsumableArray.js\"));\nvar _tinycolor = _interopRequireDefault(__webpack_require__(/*! tinycolor2 */ \"(ssr)/./node_modules/tinycolor2/cjs/tinycolor.js\"));\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\nfunction applyKernel(im, kernel, x, y) {\n    var value = [\n        0,\n        0,\n        0\n    ];\n    var size = (kernel.length - 1) / 2;\n    for(var kx = 0; kx < kernel.length; kx += 1){\n        for(var ky = 0; ky < kernel[kx].length; ky += 1){\n            var idx = im.getPixelIndex(x + kx - size, y + ky - size);\n            value[0] += im.bitmap.data[idx] * kernel[kx][ky];\n            value[1] += im.bitmap.data[idx + 1] * kernel[kx][ky];\n            value[2] += im.bitmap.data[idx + 2] * kernel[kx][ky];\n        }\n    }\n    return value;\n}\nvar isDef = function isDef(v) {\n    return typeof v !== \"undefined\" && v !== null;\n};\nfunction greyscale(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(x, y, idx) {\n        var grey = parseInt(0.2126 * this.bitmap.data[idx] + 0.7152 * this.bitmap.data[idx + 1] + 0.0722 * this.bitmap.data[idx + 2], 10);\n        this.bitmap.data[idx] = grey;\n        this.bitmap.data[idx + 1] = grey;\n        this.bitmap.data[idx + 2] = grey;\n    });\n    if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n    }\n    return this;\n}\nfunction mix(clr, clr2) {\n    var p = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;\n    return {\n        r: (clr2.r - clr.r) * (p / 100) + clr.r,\n        g: (clr2.g - clr.g) * (p / 100) + clr.g,\n        b: (clr2.b - clr.b) * (p / 100) + clr.b\n    };\n}\nfunction colorFn(actions, cb) {\n    var _this = this;\n    if (!actions || !Array.isArray(actions)) {\n        return _utils.throwError.call(this, \"actions must be an array\", cb);\n    }\n    actions = actions.map(function(action) {\n        if (action.apply === \"xor\" || action.apply === \"mix\") {\n            action.params[0] = (0, _tinycolor[\"default\"])(action.params[0]).toRgb();\n        }\n        return action;\n    });\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(x, y, idx) {\n        var clr = {\n            r: _this.bitmap.data[idx],\n            g: _this.bitmap.data[idx + 1],\n            b: _this.bitmap.data[idx + 2]\n        };\n        var colorModifier = function colorModifier(i, amount) {\n            return _this.constructor.limit255(clr[i] + amount);\n        };\n        actions.forEach(function(action) {\n            if (action.apply === \"mix\") {\n                clr = mix(clr, action.params[0], action.params[1]);\n            } else if (action.apply === \"tint\") {\n                clr = mix(clr, {\n                    r: 255,\n                    g: 255,\n                    b: 255\n                }, action.params[0]);\n            } else if (action.apply === \"shade\") {\n                clr = mix(clr, {\n                    r: 0,\n                    g: 0,\n                    b: 0\n                }, action.params[0]);\n            } else if (action.apply === \"xor\") {\n                clr = {\n                    r: clr.r ^ action.params[0].r,\n                    g: clr.g ^ action.params[0].g,\n                    b: clr.b ^ action.params[0].b\n                };\n            } else if (action.apply === \"red\") {\n                clr.r = colorModifier(\"r\", action.params[0]);\n            } else if (action.apply === \"green\") {\n                clr.g = colorModifier(\"g\", action.params[0]);\n            } else if (action.apply === \"blue\") {\n                clr.b = colorModifier(\"b\", action.params[0]);\n            } else {\n                var _clr;\n                if (action.apply === \"hue\") {\n                    action.apply = \"spin\";\n                }\n                clr = (0, _tinycolor[\"default\"])(clr);\n                if (!clr[action.apply]) {\n                    return _utils.throwError.call(_this, \"action \" + action.apply + \" not supported\", cb);\n                }\n                clr = (_clr = clr)[action.apply].apply(_clr, (0, _toConsumableArray2[\"default\"])(action.params)).toRgb();\n            }\n        });\n        _this.bitmap.data[idx] = clr.r;\n        _this.bitmap.data[idx + 1] = clr.g;\n        _this.bitmap.data[idx + 2] = clr.b;\n    });\n    if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n    }\n    return this;\n}\nvar _default = function _default() {\n    return {\n        /**\n     * Adjusts the brightness of the image\n     * @param {number} val the amount to adjust the brightness, a number between -1 and +1\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */ brightness: function brightness(val, cb) {\n            if (typeof val !== \"number\") {\n                return _utils.throwError.call(this, \"val must be numbers\", cb);\n            }\n            if (val < -1 || val > +1) {\n                return _utils.throwError.call(this, \"val must be a number between -1 and +1\", cb);\n            }\n            this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(x, y, idx) {\n                if (val < 0.0) {\n                    this.bitmap.data[idx] *= 1 + val;\n                    this.bitmap.data[idx + 1] *= 1 + val;\n                    this.bitmap.data[idx + 2] *= 1 + val;\n                } else {\n                    this.bitmap.data[idx] += (255 - this.bitmap.data[idx]) * val;\n                    this.bitmap.data[idx + 1] += (255 - this.bitmap.data[idx + 1]) * val;\n                    this.bitmap.data[idx + 2] += (255 - this.bitmap.data[idx + 2]) * val;\n                }\n            });\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        },\n        /**\n     * Adjusts the contrast of the image\n     * @param {number} val the amount to adjust the contrast, a number between -1 and +1\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */ contrast: function contrast(val, cb) {\n            if (typeof val !== \"number\") {\n                return _utils.throwError.call(this, \"val must be numbers\", cb);\n            }\n            if (val < -1 || val > +1) {\n                return _utils.throwError.call(this, \"val must be a number between -1 and +1\", cb);\n            }\n            var factor = (val + 1) / (1 - val);\n            function adjust(value) {\n                value = Math.floor(factor * (value - 127) + 127);\n                return value < 0 ? 0 : value > 255 ? 255 : value;\n            }\n            this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(x, y, idx) {\n                this.bitmap.data[idx] = adjust(this.bitmap.data[idx]);\n                this.bitmap.data[idx + 1] = adjust(this.bitmap.data[idx + 1]);\n                this.bitmap.data[idx + 2] = adjust(this.bitmap.data[idx + 2]);\n            });\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        },\n        /**\n     * Apply a posterize effect\n     * @param {number} n the amount to adjust the contrast, minimum threshold is two\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */ posterize: function posterize(n, cb) {\n            if (typeof n !== \"number\") {\n                return _utils.throwError.call(this, \"n must be numbers\", cb);\n            }\n            if (n < 2) {\n                n = 2;\n            } // minimum of 2 levels\n            this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(x, y, idx) {\n                this.bitmap.data[idx] = Math.floor(this.bitmap.data[idx] / 255 * (n - 1)) / (n - 1) * 255;\n                this.bitmap.data[idx + 1] = Math.floor(this.bitmap.data[idx + 1] / 255 * (n - 1)) / (n - 1) * 255;\n                this.bitmap.data[idx + 2] = Math.floor(this.bitmap.data[idx + 2] / 255 * (n - 1)) / (n - 1) * 255;\n            });\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        },\n        /**\n     * Removes colour from the image using ITU Rec 709 luminance values\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */ greyscale: greyscale,\n        // Alias of greyscale for our American friends\n        grayscale: greyscale,\n        /**\n     * Multiplies the opacity of each pixel by a factor between 0 and 1\n     * @param {number} f A number, the factor by which to multiply the opacity of each pixel\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */ opacity: function opacity(f, cb) {\n            if (typeof f !== \"number\") return _utils.throwError.call(this, \"f must be a number\", cb);\n            if (f < 0 || f > 1) return _utils.throwError.call(this, \"f must be a number from 0 to 1\", cb);\n            this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(x, y, idx) {\n                var v = this.bitmap.data[idx + 3] * f;\n                this.bitmap.data[idx + 3] = v;\n            });\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        },\n        /**\n     * Applies a sepia tone to the image\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */ sepia: function sepia(cb) {\n            this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(x, y, idx) {\n                var red = this.bitmap.data[idx];\n                var green = this.bitmap.data[idx + 1];\n                var blue = this.bitmap.data[idx + 2];\n                red = red * 0.393 + green * 0.769 + blue * 0.189;\n                green = red * 0.349 + green * 0.686 + blue * 0.168;\n                blue = red * 0.272 + green * 0.534 + blue * 0.131;\n                this.bitmap.data[idx] = red < 255 ? red : 255;\n                this.bitmap.data[idx + 1] = green < 255 ? green : 255;\n                this.bitmap.data[idx + 2] = blue < 255 ? blue : 255;\n            });\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        },\n        /**\n     * Fades each pixel by a factor between 0 and 1\n     * @param {number} f A number from 0 to 1. 0 will haven no effect. 1 will turn the image completely transparent.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */ fade: function fade(f, cb) {\n            if (typeof f !== \"number\") {\n                return _utils.throwError.call(this, \"f must be a number\", cb);\n            }\n            if (f < 0 || f > 1) {\n                return _utils.throwError.call(this, \"f must be a number from 0 to 1\", cb);\n            } // this method is an alternative to opacity (which may be deprecated)\n            this.opacity(1 - f);\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        },\n        /**\n     * Adds each element of the image to its local neighbors, weighted by the kernel\n     * @param {array} kernel a matrix to weight the neighbors sum\n     * @param {number} edgeHandling (optional) define how to sum pixels from outside the border\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */ convolution: function convolution(kernel, edgeHandling, cb) {\n            if (typeof edgeHandling === \"function\" && typeof cb === \"undefined\") {\n                cb = edgeHandling;\n                edgeHandling = null;\n            }\n            if (!edgeHandling) {\n                edgeHandling = this.constructor.EDGE_EXTEND;\n            }\n            var newData = Buffer.from(this.bitmap.data);\n            var kRows = kernel.length;\n            var kCols = kernel[0].length;\n            var rowEnd = Math.floor(kRows / 2);\n            var colEnd = Math.floor(kCols / 2);\n            var rowIni = -rowEnd;\n            var colIni = -colEnd;\n            var weight;\n            var rSum;\n            var gSum;\n            var bSum;\n            var ri;\n            var gi;\n            var bi;\n            var xi;\n            var yi;\n            var idxi;\n            this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(x, y, idx) {\n                bSum = 0;\n                gSum = 0;\n                rSum = 0;\n                for(var row = rowIni; row <= rowEnd; row++){\n                    for(var col = colIni; col <= colEnd; col++){\n                        xi = x + col;\n                        yi = y + row;\n                        weight = kernel[row + rowEnd][col + colEnd];\n                        idxi = this.getPixelIndex(xi, yi, edgeHandling);\n                        if (idxi === -1) {\n                            bi = 0;\n                            gi = 0;\n                            ri = 0;\n                        } else {\n                            ri = this.bitmap.data[idxi + 0];\n                            gi = this.bitmap.data[idxi + 1];\n                            bi = this.bitmap.data[idxi + 2];\n                        }\n                        rSum += weight * ri;\n                        gSum += weight * gi;\n                        bSum += weight * bi;\n                    }\n                }\n                if (rSum < 0) {\n                    rSum = 0;\n                }\n                if (gSum < 0) {\n                    gSum = 0;\n                }\n                if (bSum < 0) {\n                    bSum = 0;\n                }\n                if (rSum > 255) {\n                    rSum = 255;\n                }\n                if (gSum > 255) {\n                    gSum = 255;\n                }\n                if (bSum > 255) {\n                    bSum = 255;\n                }\n                newData[idx + 0] = rSum;\n                newData[idx + 1] = gSum;\n                newData[idx + 2] = bSum;\n            });\n            this.bitmap.data = newData;\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        },\n        /**\n     * Set the alpha channel on every pixel to fully opaque\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */ opaque: function opaque(cb) {\n            this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(x, y, idx) {\n                this.bitmap.data[idx + 3] = 255;\n            });\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        },\n        /**\n     * Pixelates the image or a region\n     * @param {number} size the size of the pixels\n     * @param {number} x (optional) the x position of the region to pixelate\n     * @param {number} y (optional) the y position of the region to pixelate\n     * @param {number} w (optional) the width of the region to pixelate\n     * @param {number} h (optional) the height of the region to pixelate\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */ pixelate: function pixelate(size, x, y, w, h, cb) {\n            if (typeof x === \"function\") {\n                cb = x;\n                h = null;\n                w = null;\n                y = null;\n                x = null;\n            } else {\n                if (typeof size !== \"number\") {\n                    return _utils.throwError.call(this, \"size must be a number\", cb);\n                }\n                if (isDef(x) && typeof x !== \"number\") {\n                    return _utils.throwError.call(this, \"x must be a number\", cb);\n                }\n                if (isDef(y) && typeof y !== \"number\") {\n                    return _utils.throwError.call(this, \"y must be a number\", cb);\n                }\n                if (isDef(w) && typeof w !== \"number\") {\n                    return _utils.throwError.call(this, \"w must be a number\", cb);\n                }\n                if (isDef(h) && typeof h !== \"number\") {\n                    return _utils.throwError.call(this, \"h must be a number\", cb);\n                }\n            }\n            var kernel = [\n                [\n                    1 / 16,\n                    2 / 16,\n                    1 / 16\n                ],\n                [\n                    2 / 16,\n                    4 / 16,\n                    2 / 16\n                ],\n                [\n                    1 / 16,\n                    2 / 16,\n                    1 / 16\n                ]\n            ];\n            x = x || 0;\n            y = y || 0;\n            w = isDef(w) ? w : this.bitmap.width - x;\n            h = isDef(h) ? h : this.bitmap.height - y;\n            var source = this.cloneQuiet();\n            this.scanQuiet(x, y, w, h, function(xx, yx, idx) {\n                xx = size * Math.floor(xx / size);\n                yx = size * Math.floor(yx / size);\n                var value = applyKernel(source, kernel, xx, yx);\n                this.bitmap.data[idx] = value[0];\n                this.bitmap.data[idx + 1] = value[1];\n                this.bitmap.data[idx + 2] = value[2];\n            });\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        },\n        /**\n     * Applies a convolution kernel to the image or a region\n     * @param {array} kernel the convolution kernel\n     * @param {number} x (optional) the x position of the region to apply convolution to\n     * @param {number} y (optional) the y position of the region to apply convolution to\n     * @param {number} w (optional) the width of the region to apply convolution to\n     * @param {number} h (optional) the height of the region to apply convolution to\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */ convolute: function convolute(kernel, x, y, w, h, cb) {\n            if (!Array.isArray(kernel)) return _utils.throwError.call(this, \"the kernel must be an array\", cb);\n            if (typeof x === \"function\") {\n                cb = x;\n                x = null;\n                y = null;\n                w = null;\n                h = null;\n            } else {\n                if (isDef(x) && typeof x !== \"number\") {\n                    return _utils.throwError.call(this, \"x must be a number\", cb);\n                }\n                if (isDef(y) && typeof y !== \"number\") {\n                    return _utils.throwError.call(this, \"y must be a number\", cb);\n                }\n                if (isDef(w) && typeof w !== \"number\") {\n                    return _utils.throwError.call(this, \"w must be a number\", cb);\n                }\n                if (isDef(h) && typeof h !== \"number\") {\n                    return _utils.throwError.call(this, \"h must be a number\", cb);\n                }\n            }\n            var ksize = (kernel.length - 1) / 2;\n            x = isDef(x) ? x : ksize;\n            y = isDef(y) ? y : ksize;\n            w = isDef(w) ? w : this.bitmap.width - x;\n            h = isDef(h) ? h : this.bitmap.height - y;\n            var source = this.cloneQuiet();\n            this.scanQuiet(x, y, w, h, function(xx, yx, idx) {\n                var value = applyKernel(source, kernel, xx, yx);\n                this.bitmap.data[idx] = this.constructor.limit255(value[0]);\n                this.bitmap.data[idx + 1] = this.constructor.limit255(value[1]);\n                this.bitmap.data[idx + 2] = this.constructor.limit255(value[2]);\n            });\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        },\n        /**\n     * Apply multiple color modification rules\n     * @param {array} actions list of color modification rules, in following format: { apply: '<rule-name>', params: [ <rule-parameters> ]  }\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */ color: colorFn,\n        colour: colorFn\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-color/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-contain/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@jimp/plugin-contain/dist/index.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\n/**\n * Scale the image to the given width and height keeping the aspect ratio. Some parts of the image may be letter boxed.\n * @param {number} w the width to resize the image to\n * @param {number} h the height to resize the image to\n * @param {number} alignBits (optional) A bitmask for horizontal and vertical alignment\n * @param {string} mode (optional) a scaling method (e.g. Jimp.RESIZE_BEZIER)\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */ var _default = function _default() {\n    return {\n        contain: function contain(w, h, alignBits, mode, cb) {\n            if (typeof w !== \"number\" || typeof h !== \"number\") {\n                return _utils.throwError.call(this, \"w and h must be numbers\", cb);\n            } // permit any sort of optional parameters combination\n            if (typeof alignBits === \"string\") {\n                if (typeof mode === \"function\" && typeof cb === \"undefined\") cb = mode;\n                mode = alignBits;\n                alignBits = null;\n            }\n            if (typeof alignBits === \"function\") {\n                if (typeof cb === \"undefined\") cb = alignBits;\n                mode = null;\n                alignBits = null;\n            }\n            if (typeof mode === \"function\" && typeof cb === \"undefined\") {\n                cb = mode;\n                mode = null;\n            }\n            alignBits = alignBits || this.constructor.HORIZONTAL_ALIGN_CENTER | this.constructor.VERTICAL_ALIGN_MIDDLE;\n            var hbits = alignBits & (1 << 3) - 1;\n            var vbits = alignBits >> 3; // check if more flags than one is in the bit sets\n            if (!(hbits !== 0 && !(hbits & hbits - 1) || vbits !== 0 && !(vbits & vbits - 1))) {\n                return _utils.throwError.call(this, \"only use one flag per alignment direction\", cb);\n            }\n            var alignH = hbits >> 1; // 0, 1, 2\n            var alignV = vbits >> 1; // 0, 1, 2\n            var f = w / h > this.bitmap.width / this.bitmap.height ? h / this.bitmap.height : w / this.bitmap.width;\n            var c = this.cloneQuiet().scale(f, mode);\n            this.resize(w, h, mode);\n            this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(x, y, idx) {\n                this.bitmap.data.writeUInt32BE(this._background, idx);\n            });\n            this.blit(c, (this.bitmap.width - c.bitmap.width) / 2 * alignH, (this.bitmap.height - c.bitmap.height) / 2 * alignV);\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        }\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWNvbnRhaW4vZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUcsS0FBSztBQUUxQixJQUFJRSxTQUFTQyxtQkFBT0EsQ0FBQyxtRUFBYTtBQUVsQzs7Ozs7Ozs7Q0FRQyxHQUNELElBQUlDLFdBQVcsU0FBU0E7SUFDdEIsT0FBTztRQUNMQyxTQUFTLFNBQVNBLFFBQVFDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxTQUFTLEVBQUVDLElBQUksRUFBRUMsRUFBRTtZQUNqRCxJQUFJLE9BQU9KLE1BQU0sWUFBWSxPQUFPQyxNQUFNLFVBQVU7Z0JBQ2xELE9BQU9MLE9BQU9TLFVBQVUsQ0FBQ0MsSUFBSSxDQUFDLElBQUksRUFBRSwyQkFBMkJGO1lBQ2pFLEVBQUUscURBQXFEO1lBR3ZELElBQUksT0FBT0YsY0FBYyxVQUFVO2dCQUNqQyxJQUFJLE9BQU9DLFNBQVMsY0FBYyxPQUFPQyxPQUFPLGFBQWFBLEtBQUtEO2dCQUNsRUEsT0FBT0Q7Z0JBQ1BBLFlBQVk7WUFDZDtZQUVBLElBQUksT0FBT0EsY0FBYyxZQUFZO2dCQUNuQyxJQUFJLE9BQU9FLE9BQU8sYUFBYUEsS0FBS0Y7Z0JBQ3BDQyxPQUFPO2dCQUNQRCxZQUFZO1lBQ2Q7WUFFQSxJQUFJLE9BQU9DLFNBQVMsY0FBYyxPQUFPQyxPQUFPLGFBQWE7Z0JBQzNEQSxLQUFLRDtnQkFDTEEsT0FBTztZQUNUO1lBRUFELFlBQVlBLGFBQWEsSUFBSSxDQUFDSyxXQUFXLENBQUNDLHVCQUF1QixHQUFHLElBQUksQ0FBQ0QsV0FBVyxDQUFDRSxxQkFBcUI7WUFDMUcsSUFBSUMsUUFBUVIsWUFBWSxDQUFDLEtBQUssS0FBSztZQUNuQyxJQUFJUyxRQUFRVCxhQUFhLEdBQUcsa0RBQWtEO1lBRTlFLElBQUksQ0FBRVEsQ0FBQUEsVUFBVSxLQUFLLENBQUVBLENBQUFBLFFBQVFBLFFBQVEsTUFBTUMsVUFBVSxLQUFLLENBQUVBLENBQUFBLFFBQVFBLFFBQVEsRUFBQyxHQUFJO2dCQUNqRixPQUFPZixPQUFPUyxVQUFVLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUUsNkNBQTZDRjtZQUNuRjtZQUVBLElBQUlRLFNBQVNGLFNBQVMsR0FBRyxVQUFVO1lBRW5DLElBQUlHLFNBQVNGLFNBQVMsR0FBRyxVQUFVO1lBRW5DLElBQUlHLElBQUlkLElBQUlDLElBQUksSUFBSSxDQUFDYyxNQUFNLENBQUNDLEtBQUssR0FBRyxJQUFJLENBQUNELE1BQU0sQ0FBQ0UsTUFBTSxHQUFHaEIsSUFBSSxJQUFJLENBQUNjLE1BQU0sQ0FBQ0UsTUFBTSxHQUFHakIsSUFBSSxJQUFJLENBQUNlLE1BQU0sQ0FBQ0MsS0FBSztZQUN2RyxJQUFJRSxJQUFJLElBQUksQ0FBQ0MsVUFBVSxHQUFHQyxLQUFLLENBQUNOLEdBQUdYO1lBQ25DLElBQUksQ0FBQ2tCLE1BQU0sQ0FBQ3JCLEdBQUdDLEdBQUdFO1lBQ2xCLElBQUksQ0FBQ21CLFNBQVMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDUCxNQUFNLENBQUNDLEtBQUssRUFBRSxJQUFJLENBQUNELE1BQU0sQ0FBQ0UsTUFBTSxFQUFFLFNBQVVNLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxHQUFHO2dCQUM3RSxJQUFJLENBQUNWLE1BQU0sQ0FBQ1csSUFBSSxDQUFDQyxhQUFhLENBQUMsSUFBSSxDQUFDQyxXQUFXLEVBQUVIO1lBQ25EO1lBQ0EsSUFBSSxDQUFDSSxJQUFJLENBQUNYLEdBQUcsQ0FBQyxJQUFJLENBQUNILE1BQU0sQ0FBQ0MsS0FBSyxHQUFHRSxFQUFFSCxNQUFNLENBQUNDLEtBQUssSUFBSSxJQUFJSixRQUFRLENBQUMsSUFBSSxDQUFDRyxNQUFNLENBQUNFLE1BQU0sR0FBR0MsRUFBRUgsTUFBTSxDQUFDRSxNQUFNLElBQUksSUFBSUo7WUFFN0csSUFBSSxDQUFDLEdBQUdqQixPQUFPa0MsYUFBYSxFQUFFMUIsS0FBSztnQkFDakNBLEdBQUdFLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxJQUFJO1lBQzFCO1lBRUEsT0FBTyxJQUFJO1FBQ2I7SUFDRjtBQUNGO0FBRUFaLGtCQUFrQixHQUFHSTtBQUNyQmlDLE9BQU9yQyxPQUFPLEdBQUdBLFFBQVFzQyxPQUFPLEVBQ2hDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3FyLWNvZGUvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWNvbnRhaW4vZGlzdC9pbmRleC5qcz82OTU1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQGppbXAvdXRpbHNcIik7XG5cbi8qKlxuICogU2NhbGUgdGhlIGltYWdlIHRvIHRoZSBnaXZlbiB3aWR0aCBhbmQgaGVpZ2h0IGtlZXBpbmcgdGhlIGFzcGVjdCByYXRpby4gU29tZSBwYXJ0cyBvZiB0aGUgaW1hZ2UgbWF5IGJlIGxldHRlciBib3hlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB3IHRoZSB3aWR0aCB0byByZXNpemUgdGhlIGltYWdlIHRvXG4gKiBAcGFyYW0ge251bWJlcn0gaCB0aGUgaGVpZ2h0IHRvIHJlc2l6ZSB0aGUgaW1hZ2UgdG9cbiAqIEBwYXJhbSB7bnVtYmVyfSBhbGlnbkJpdHMgKG9wdGlvbmFsKSBBIGJpdG1hc2sgZm9yIGhvcml6b250YWwgYW5kIHZlcnRpY2FsIGFsaWdubWVudFxuICogQHBhcmFtIHtzdHJpbmd9IG1vZGUgKG9wdGlvbmFsKSBhIHNjYWxpbmcgbWV0aG9kIChlLmcuIEppbXAuUkVTSVpFX0JFWklFUilcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIEppbXApfSBjYiAob3B0aW9uYWwpIGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGVcbiAqIEByZXR1cm5zIHtKaW1wfSB0aGlzIGZvciBjaGFpbmluZyBvZiBtZXRob2RzXG4gKi9cbnZhciBfZGVmYXVsdCA9IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICByZXR1cm4ge1xuICAgIGNvbnRhaW46IGZ1bmN0aW9uIGNvbnRhaW4odywgaCwgYWxpZ25CaXRzLCBtb2RlLCBjYikge1xuICAgICAgaWYgKHR5cGVvZiB3ICE9PSBcIm51bWJlclwiIHx8IHR5cGVvZiBoICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBfdXRpbHMudGhyb3dFcnJvci5jYWxsKHRoaXMsIFwidyBhbmQgaCBtdXN0IGJlIG51bWJlcnNcIiwgY2IpO1xuICAgICAgfSAvLyBwZXJtaXQgYW55IHNvcnQgb2Ygb3B0aW9uYWwgcGFyYW1ldGVycyBjb21iaW5hdGlvblxuXG5cbiAgICAgIGlmICh0eXBlb2YgYWxpZ25CaXRzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbW9kZSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBjYiA9PT0gXCJ1bmRlZmluZWRcIikgY2IgPSBtb2RlO1xuICAgICAgICBtb2RlID0gYWxpZ25CaXRzO1xuICAgICAgICBhbGlnbkJpdHMgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGFsaWduQml0cyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2IgPT09IFwidW5kZWZpbmVkXCIpIGNiID0gYWxpZ25CaXRzO1xuICAgICAgICBtb2RlID0gbnVsbDtcbiAgICAgICAgYWxpZ25CaXRzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBtb2RlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGNiID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGNiID0gbW9kZTtcbiAgICAgICAgbW9kZSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGFsaWduQml0cyA9IGFsaWduQml0cyB8fCB0aGlzLmNvbnN0cnVjdG9yLkhPUklaT05UQUxfQUxJR05fQ0VOVEVSIHwgdGhpcy5jb25zdHJ1Y3Rvci5WRVJUSUNBTF9BTElHTl9NSURETEU7XG4gICAgICB2YXIgaGJpdHMgPSBhbGlnbkJpdHMgJiAoMSA8PCAzKSAtIDE7XG4gICAgICB2YXIgdmJpdHMgPSBhbGlnbkJpdHMgPj4gMzsgLy8gY2hlY2sgaWYgbW9yZSBmbGFncyB0aGFuIG9uZSBpcyBpbiB0aGUgYml0IHNldHNcblxuICAgICAgaWYgKCEoaGJpdHMgIT09IDAgJiYgIShoYml0cyAmIGhiaXRzIC0gMSkgfHwgdmJpdHMgIT09IDAgJiYgISh2Yml0cyAmIHZiaXRzIC0gMSkpKSB7XG4gICAgICAgIHJldHVybiBfdXRpbHMudGhyb3dFcnJvci5jYWxsKHRoaXMsIFwib25seSB1c2Ugb25lIGZsYWcgcGVyIGFsaWdubWVudCBkaXJlY3Rpb25cIiwgY2IpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWxpZ25IID0gaGJpdHMgPj4gMTsgLy8gMCwgMSwgMlxuXG4gICAgICB2YXIgYWxpZ25WID0gdmJpdHMgPj4gMTsgLy8gMCwgMSwgMlxuXG4gICAgICB2YXIgZiA9IHcgLyBoID4gdGhpcy5iaXRtYXAud2lkdGggLyB0aGlzLmJpdG1hcC5oZWlnaHQgPyBoIC8gdGhpcy5iaXRtYXAuaGVpZ2h0IDogdyAvIHRoaXMuYml0bWFwLndpZHRoO1xuICAgICAgdmFyIGMgPSB0aGlzLmNsb25lUXVpZXQoKS5zY2FsZShmLCBtb2RlKTtcbiAgICAgIHRoaXMucmVzaXplKHcsIGgsIG1vZGUpO1xuICAgICAgdGhpcy5zY2FuUXVpZXQoMCwgMCwgdGhpcy5iaXRtYXAud2lkdGgsIHRoaXMuYml0bWFwLmhlaWdodCwgZnVuY3Rpb24gKHgsIHksIGlkeCkge1xuICAgICAgICB0aGlzLmJpdG1hcC5kYXRhLndyaXRlVUludDMyQkUodGhpcy5fYmFja2dyb3VuZCwgaWR4KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5ibGl0KGMsICh0aGlzLmJpdG1hcC53aWR0aCAtIGMuYml0bWFwLndpZHRoKSAvIDIgKiBhbGlnbkgsICh0aGlzLmJpdG1hcC5oZWlnaHQgLSBjLmJpdG1hcC5oZWlnaHQpIC8gMiAqIGFsaWduVik7XG5cbiAgICAgIGlmICgoMCwgX3V0aWxzLmlzTm9kZVBhdHRlcm4pKGNiKSkge1xuICAgICAgICBjYi5jYWxsKHRoaXMsIG51bGwsIHRoaXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfdXRpbHMiLCJyZXF1aXJlIiwiX2RlZmF1bHQiLCJjb250YWluIiwidyIsImgiLCJhbGlnbkJpdHMiLCJtb2RlIiwiY2IiLCJ0aHJvd0Vycm9yIiwiY2FsbCIsImNvbnN0cnVjdG9yIiwiSE9SSVpPTlRBTF9BTElHTl9DRU5URVIiLCJWRVJUSUNBTF9BTElHTl9NSURETEUiLCJoYml0cyIsInZiaXRzIiwiYWxpZ25IIiwiYWxpZ25WIiwiZiIsImJpdG1hcCIsIndpZHRoIiwiaGVpZ2h0IiwiYyIsImNsb25lUXVpZXQiLCJzY2FsZSIsInJlc2l6ZSIsInNjYW5RdWlldCIsIngiLCJ5IiwiaWR4IiwiZGF0YSIsIndyaXRlVUludDMyQkUiLCJfYmFja2dyb3VuZCIsImJsaXQiLCJpc05vZGVQYXR0ZXJuIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-contain/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-cover/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@jimp/plugin-cover/dist/index.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\n/**\n * Scale the image so the given width and height keeping the aspect ratio. Some parts of the image may be clipped.\n * @param {number} w the width to resize the image to\n * @param {number} h the height to resize the image to\n * @param {number} alignBits (optional) A bitmask for horizontal and vertical alignment\n * @param {string} mode (optional) a scaling method (e.g. Jimp.RESIZE_BEZIER)\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */ var _default = function _default() {\n    return {\n        cover: function cover(w, h, alignBits, mode, cb) {\n            if (typeof w !== \"number\" || typeof h !== \"number\") {\n                return _utils.throwError.call(this, \"w and h must be numbers\", cb);\n            }\n            if (alignBits && typeof alignBits === \"function\" && typeof cb === \"undefined\") {\n                cb = alignBits;\n                alignBits = null;\n                mode = null;\n            } else if (typeof mode === \"function\" && typeof cb === \"undefined\") {\n                cb = mode;\n                mode = null;\n            }\n            alignBits = alignBits || this.constructor.HORIZONTAL_ALIGN_CENTER | this.constructor.VERTICAL_ALIGN_MIDDLE;\n            var hbits = alignBits & (1 << 3) - 1;\n            var vbits = alignBits >> 3; // check if more flags than one is in the bit sets\n            if (!(hbits !== 0 && !(hbits & hbits - 1) || vbits !== 0 && !(vbits & vbits - 1))) return _utils.throwError.call(this, \"only use one flag per alignment direction\", cb);\n            var alignH = hbits >> 1; // 0, 1, 2\n            var alignV = vbits >> 1; // 0, 1, 2\n            var f = w / h > this.bitmap.width / this.bitmap.height ? w / this.bitmap.width : h / this.bitmap.height;\n            this.scale(f, mode);\n            this.crop((this.bitmap.width - w) / 2 * alignH, (this.bitmap.height - h) / 2 * alignV, w, h);\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        }\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWNvdmVyL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFrQixHQUFHLEtBQUs7QUFFMUIsSUFBSUUsU0FBU0MsbUJBQU9BLENBQUMsbUVBQWE7QUFFbEM7Ozs7Ozs7O0NBUUMsR0FDRCxJQUFJQyxXQUFXLFNBQVNBO0lBQ3RCLE9BQU87UUFDTEMsT0FBTyxTQUFTQSxNQUFNQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsU0FBUyxFQUFFQyxJQUFJLEVBQUVDLEVBQUU7WUFDN0MsSUFBSSxPQUFPSixNQUFNLFlBQVksT0FBT0MsTUFBTSxVQUFVO2dCQUNsRCxPQUFPTCxPQUFPUyxVQUFVLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUUsMkJBQTJCRjtZQUNqRTtZQUVBLElBQUlGLGFBQWEsT0FBT0EsY0FBYyxjQUFjLE9BQU9FLE9BQU8sYUFBYTtnQkFDN0VBLEtBQUtGO2dCQUNMQSxZQUFZO2dCQUNaQyxPQUFPO1lBQ1QsT0FBTyxJQUFJLE9BQU9BLFNBQVMsY0FBYyxPQUFPQyxPQUFPLGFBQWE7Z0JBQ2xFQSxLQUFLRDtnQkFDTEEsT0FBTztZQUNUO1lBRUFELFlBQVlBLGFBQWEsSUFBSSxDQUFDSyxXQUFXLENBQUNDLHVCQUF1QixHQUFHLElBQUksQ0FBQ0QsV0FBVyxDQUFDRSxxQkFBcUI7WUFDMUcsSUFBSUMsUUFBUVIsWUFBWSxDQUFDLEtBQUssS0FBSztZQUNuQyxJQUFJUyxRQUFRVCxhQUFhLEdBQUcsa0RBQWtEO1lBRTlFLElBQUksQ0FBRVEsQ0FBQUEsVUFBVSxLQUFLLENBQUVBLENBQUFBLFFBQVFBLFFBQVEsTUFBTUMsVUFBVSxLQUFLLENBQUVBLENBQUFBLFFBQVFBLFFBQVEsRUFBQyxHQUFJLE9BQU9mLE9BQU9TLFVBQVUsQ0FBQ0MsSUFBSSxDQUFDLElBQUksRUFBRSw2Q0FBNkNGO1lBQ3BLLElBQUlRLFNBQVNGLFNBQVMsR0FBRyxVQUFVO1lBRW5DLElBQUlHLFNBQVNGLFNBQVMsR0FBRyxVQUFVO1lBRW5DLElBQUlHLElBQUlkLElBQUlDLElBQUksSUFBSSxDQUFDYyxNQUFNLENBQUNDLEtBQUssR0FBRyxJQUFJLENBQUNELE1BQU0sQ0FBQ0UsTUFBTSxHQUFHakIsSUFBSSxJQUFJLENBQUNlLE1BQU0sQ0FBQ0MsS0FBSyxHQUFHZixJQUFJLElBQUksQ0FBQ2MsTUFBTSxDQUFDRSxNQUFNO1lBQ3ZHLElBQUksQ0FBQ0MsS0FBSyxDQUFDSixHQUFHWDtZQUNkLElBQUksQ0FBQ2dCLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQ0osTUFBTSxDQUFDQyxLQUFLLEdBQUdoQixDQUFBQSxJQUFLLElBQUlZLFFBQVEsQ0FBQyxJQUFJLENBQUNHLE1BQU0sQ0FBQ0UsTUFBTSxHQUFHaEIsQ0FBQUEsSUFBSyxJQUFJWSxRQUFRYixHQUFHQztZQUUxRixJQUFJLENBQUMsR0FBR0wsT0FBT3dCLGFBQWEsRUFBRWhCLEtBQUs7Z0JBQ2pDQSxHQUFHRSxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sSUFBSTtZQUMxQjtZQUVBLE9BQU8sSUFBSTtRQUNiO0lBQ0Y7QUFDRjtBQUVBWixrQkFBa0IsR0FBR0k7QUFDckJ1QixPQUFPM0IsT0FBTyxHQUFHQSxRQUFRNEIsT0FBTyxFQUNoQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xci1jb2RlLy4vbm9kZV9tb2R1bGVzL0BqaW1wL3BsdWdpbi1jb3Zlci9kaXN0L2luZGV4LmpzP2RlYzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAamltcC91dGlsc1wiKTtcblxuLyoqXG4gKiBTY2FsZSB0aGUgaW1hZ2Ugc28gdGhlIGdpdmVuIHdpZHRoIGFuZCBoZWlnaHQga2VlcGluZyB0aGUgYXNwZWN0IHJhdGlvLiBTb21lIHBhcnRzIG9mIHRoZSBpbWFnZSBtYXkgYmUgY2xpcHBlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB3IHRoZSB3aWR0aCB0byByZXNpemUgdGhlIGltYWdlIHRvXG4gKiBAcGFyYW0ge251bWJlcn0gaCB0aGUgaGVpZ2h0IHRvIHJlc2l6ZSB0aGUgaW1hZ2UgdG9cbiAqIEBwYXJhbSB7bnVtYmVyfSBhbGlnbkJpdHMgKG9wdGlvbmFsKSBBIGJpdG1hc2sgZm9yIGhvcml6b250YWwgYW5kIHZlcnRpY2FsIGFsaWdubWVudFxuICogQHBhcmFtIHtzdHJpbmd9IG1vZGUgKG9wdGlvbmFsKSBhIHNjYWxpbmcgbWV0aG9kIChlLmcuIEppbXAuUkVTSVpFX0JFWklFUilcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIEppbXApfSBjYiAob3B0aW9uYWwpIGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGVcbiAqIEByZXR1cm5zIHtKaW1wfSB0aGlzIGZvciBjaGFpbmluZyBvZiBtZXRob2RzXG4gKi9cbnZhciBfZGVmYXVsdCA9IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICByZXR1cm4ge1xuICAgIGNvdmVyOiBmdW5jdGlvbiBjb3Zlcih3LCBoLCBhbGlnbkJpdHMsIG1vZGUsIGNiKSB7XG4gICAgICBpZiAodHlwZW9mIHcgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIGggIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIF91dGlscy50aHJvd0Vycm9yLmNhbGwodGhpcywgXCJ3IGFuZCBoIG11c3QgYmUgbnVtYmVyc1wiLCBjYik7XG4gICAgICB9XG5cbiAgICAgIGlmIChhbGlnbkJpdHMgJiYgdHlwZW9mIGFsaWduQml0cyA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBjYiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBjYiA9IGFsaWduQml0cztcbiAgICAgICAgYWxpZ25CaXRzID0gbnVsbDtcbiAgICAgICAgbW9kZSA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2RlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGNiID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGNiID0gbW9kZTtcbiAgICAgICAgbW9kZSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGFsaWduQml0cyA9IGFsaWduQml0cyB8fCB0aGlzLmNvbnN0cnVjdG9yLkhPUklaT05UQUxfQUxJR05fQ0VOVEVSIHwgdGhpcy5jb25zdHJ1Y3Rvci5WRVJUSUNBTF9BTElHTl9NSURETEU7XG4gICAgICB2YXIgaGJpdHMgPSBhbGlnbkJpdHMgJiAoMSA8PCAzKSAtIDE7XG4gICAgICB2YXIgdmJpdHMgPSBhbGlnbkJpdHMgPj4gMzsgLy8gY2hlY2sgaWYgbW9yZSBmbGFncyB0aGFuIG9uZSBpcyBpbiB0aGUgYml0IHNldHNcblxuICAgICAgaWYgKCEoaGJpdHMgIT09IDAgJiYgIShoYml0cyAmIGhiaXRzIC0gMSkgfHwgdmJpdHMgIT09IDAgJiYgISh2Yml0cyAmIHZiaXRzIC0gMSkpKSByZXR1cm4gX3V0aWxzLnRocm93RXJyb3IuY2FsbCh0aGlzLCBcIm9ubHkgdXNlIG9uZSBmbGFnIHBlciBhbGlnbm1lbnQgZGlyZWN0aW9uXCIsIGNiKTtcbiAgICAgIHZhciBhbGlnbkggPSBoYml0cyA+PiAxOyAvLyAwLCAxLCAyXG5cbiAgICAgIHZhciBhbGlnblYgPSB2Yml0cyA+PiAxOyAvLyAwLCAxLCAyXG5cbiAgICAgIHZhciBmID0gdyAvIGggPiB0aGlzLmJpdG1hcC53aWR0aCAvIHRoaXMuYml0bWFwLmhlaWdodCA/IHcgLyB0aGlzLmJpdG1hcC53aWR0aCA6IGggLyB0aGlzLmJpdG1hcC5oZWlnaHQ7XG4gICAgICB0aGlzLnNjYWxlKGYsIG1vZGUpO1xuICAgICAgdGhpcy5jcm9wKCh0aGlzLmJpdG1hcC53aWR0aCAtIHcpIC8gMiAqIGFsaWduSCwgKHRoaXMuYml0bWFwLmhlaWdodCAtIGgpIC8gMiAqIGFsaWduViwgdywgaCk7XG5cbiAgICAgIGlmICgoMCwgX3V0aWxzLmlzTm9kZVBhdHRlcm4pKGNiKSkge1xuICAgICAgICBjYi5jYWxsKHRoaXMsIG51bGwsIHRoaXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfdXRpbHMiLCJyZXF1aXJlIiwiX2RlZmF1bHQiLCJjb3ZlciIsInciLCJoIiwiYWxpZ25CaXRzIiwibW9kZSIsImNiIiwidGhyb3dFcnJvciIsImNhbGwiLCJjb25zdHJ1Y3RvciIsIkhPUklaT05UQUxfQUxJR05fQ0VOVEVSIiwiVkVSVElDQUxfQUxJR05fTUlERExFIiwiaGJpdHMiLCJ2Yml0cyIsImFsaWduSCIsImFsaWduViIsImYiLCJiaXRtYXAiLCJ3aWR0aCIsImhlaWdodCIsInNjYWxlIiwiY3JvcCIsImlzTm9kZVBhdHRlcm4iLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-cover/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-crop/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@jimp/plugin-crop/dist/index.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = pluginCrop;\nvar _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ \"(ssr)/./node_modules/@babel/runtime/helpers/typeof.js\"));\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\n/* eslint-disable no-labels */ function pluginCrop(event) {\n    /**\n   * Crops the image at a given point to a give size\n   * @param {number} x the x coordinate to crop form\n   * @param {number} y the y coordinate to crop form\n   * @param w the width of the crop region\n   * @param h the height of the crop region\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp} this for chaining of methods\n   */ event(\"crop\", function(x, y, w, h, cb) {\n        if (typeof x !== \"number\" || typeof y !== \"number\") return _utils.throwError.call(this, \"x and y must be numbers\", cb);\n        if (typeof w !== \"number\" || typeof h !== \"number\") return _utils.throwError.call(this, \"w and h must be numbers\", cb); // round input\n        x = Math.round(x);\n        y = Math.round(y);\n        w = Math.round(w);\n        h = Math.round(h);\n        if (x === 0 && w === this.bitmap.width) {\n            // shortcut\n            var start = w * y + x << 2;\n            var end = start + (h * w << 2);\n            this.bitmap.data = this.bitmap.data.slice(start, end);\n        } else {\n            var bitmap = Buffer.allocUnsafe(w * h * 4);\n            var offset = 0;\n            this.scanQuiet(x, y, w, h, function(x, y, idx) {\n                var data = this.bitmap.data.readUInt32BE(idx, true);\n                bitmap.writeUInt32BE(data, offset, true);\n                offset += 4;\n            });\n            this.bitmap.data = bitmap;\n        }\n        this.bitmap.width = w;\n        this.bitmap.height = h;\n        if ((0, _utils.isNodePattern)(cb)) {\n            cb.call(this, null, this);\n        }\n        return this;\n    });\n    return {\n        \"class\": {\n            /**\n       * Autocrop same color borders from this image\n       * @param {number} tolerance (optional): a percent value of tolerance for pixels color difference (default: 0.0002%)\n       * @param {boolean} cropOnlyFrames (optional): flag to crop only real frames: all 4 sides of the image must have some border (default: true)\n       * @param {function(Error, Jimp)} cb (optional): a callback for when complete (default: no callback)\n       * @returns {Jimp} this for chaining of methods\n       */ autocrop: function autocrop() {\n                var w = this.bitmap.width;\n                var h = this.bitmap.height;\n                var minPixelsPerSide = 1; // to avoid cropping completely the image, resulting in an invalid 0 sized image\n                var cb; // callback\n                var leaveBorder = 0; // Amount of pixels in border to leave\n                var tolerance = 0.0002; // percent of color difference tolerance (default value)\n                var cropOnlyFrames = true; // flag to force cropping only if the image has a real \"frame\"\n                // i.e. all 4 sides have some border (default value)\n                var cropSymmetric = false; // flag to force cropping top be symmetric.\n                // i.e. north and south / east and west are cropped by the same value\n                var ignoreSides = {\n                    north: false,\n                    south: false,\n                    east: false,\n                    west: false\n                }; // parse arguments\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                for(var a = 0, len = args.length; a < len; a++){\n                    if (typeof args[a] === \"number\") {\n                        // tolerance value passed\n                        tolerance = args[a];\n                    }\n                    if (typeof args[a] === \"boolean\") {\n                        // cropOnlyFrames value passed\n                        cropOnlyFrames = args[a];\n                    }\n                    if (typeof args[a] === \"function\") {\n                        // callback value passed\n                        cb = args[a];\n                    }\n                    if ((0, _typeof2[\"default\"])(args[a]) === \"object\") {\n                        // config object passed\n                        var config = args[a];\n                        if (typeof config.tolerance !== \"undefined\") {\n                            tolerance = config.tolerance;\n                        }\n                        if (typeof config.cropOnlyFrames !== \"undefined\") {\n                            cropOnlyFrames = config.cropOnlyFrames;\n                        }\n                        if (typeof config.cropSymmetric !== \"undefined\") {\n                            cropSymmetric = config.cropSymmetric;\n                        }\n                        if (typeof config.leaveBorder !== \"undefined\") {\n                            leaveBorder = config.leaveBorder;\n                        }\n                        if (typeof config.ignoreSides !== \"undefined\") {\n                            ignoreSides = config.ignoreSides;\n                        }\n                    }\n                }\n                /**\n         * All borders must be of the same color as the top left pixel, to be cropped.\n         * It should be possible to crop borders each with a different color,\n         * but since there are many ways for corners to intersect, it would\n         * introduce unnecessary complexity to the algorithm.\n         */ // scan each side for same color borders\n                var colorTarget = this.getPixelColor(0, 0); // top left pixel color is the target color\n                var rgba1 = this.constructor.intToRGBA(colorTarget); // for north and east sides\n                var northPixelsToCrop = 0;\n                var eastPixelsToCrop = 0;\n                var southPixelsToCrop = 0;\n                var westPixelsToCrop = 0; // north side (scan rows from north to south)\n                colorTarget = this.getPixelColor(0, 0);\n                if (!ignoreSides.north) {\n                    north: for(var y = 0; y < h - minPixelsPerSide; y++){\n                        for(var x = 0; x < w; x++){\n                            var colorXY = this.getPixelColor(x, y);\n                            var rgba2 = this.constructor.intToRGBA(colorXY);\n                            if (this.constructor.colorDiff(rgba1, rgba2) > tolerance) {\n                                break north;\n                            }\n                        } // this row contains all pixels with the same color: increment this side pixels to crop\n                        northPixelsToCrop++;\n                    }\n                } // east side (scan columns from east to west)\n                colorTarget = this.getPixelColor(w, 0);\n                if (!ignoreSides.east) {\n                    east: for(var _x = 0; _x < w - minPixelsPerSide; _x++){\n                        for(var _y = 0 + northPixelsToCrop; _y < h; _y++){\n                            var _colorXY = this.getPixelColor(_x, _y);\n                            var _rgba = this.constructor.intToRGBA(_colorXY);\n                            if (this.constructor.colorDiff(rgba1, _rgba) > tolerance) {\n                                break east;\n                            }\n                        } // this column contains all pixels with the same color: increment this side pixels to crop\n                        eastPixelsToCrop++;\n                    }\n                } // south side (scan rows from south to north)\n                colorTarget = this.getPixelColor(0, h);\n                if (!ignoreSides.south) {\n                    south: for(var _y2 = h - 1; _y2 >= northPixelsToCrop + minPixelsPerSide; _y2--){\n                        for(var _x2 = w - eastPixelsToCrop - 1; _x2 >= 0; _x2--){\n                            var _colorXY2 = this.getPixelColor(_x2, _y2);\n                            var _rgba2 = this.constructor.intToRGBA(_colorXY2);\n                            if (this.constructor.colorDiff(rgba1, _rgba2) > tolerance) {\n                                break south;\n                            }\n                        } // this row contains all pixels with the same color: increment this side pixels to crop\n                        southPixelsToCrop++;\n                    }\n                } // west side (scan columns from west to east)\n                colorTarget = this.getPixelColor(w, h);\n                if (!ignoreSides.west) {\n                    west: for(var _x3 = w - 1; _x3 >= 0 + eastPixelsToCrop + minPixelsPerSide; _x3--){\n                        for(var _y3 = h - 1; _y3 >= 0 + northPixelsToCrop; _y3--){\n                            var _colorXY3 = this.getPixelColor(_x3, _y3);\n                            var _rgba3 = this.constructor.intToRGBA(_colorXY3);\n                            if (this.constructor.colorDiff(rgba1, _rgba3) > tolerance) {\n                                break west;\n                            }\n                        } // this column contains all pixels with the same color: increment this side pixels to crop\n                        westPixelsToCrop++;\n                    }\n                } // decide if a crop is needed\n                var doCrop = false; // apply leaveBorder\n                westPixelsToCrop -= leaveBorder;\n                eastPixelsToCrop -= leaveBorder;\n                northPixelsToCrop -= leaveBorder;\n                southPixelsToCrop -= leaveBorder;\n                if (cropSymmetric) {\n                    var horizontal = Math.min(eastPixelsToCrop, westPixelsToCrop);\n                    var vertical = Math.min(northPixelsToCrop, southPixelsToCrop);\n                    westPixelsToCrop = horizontal;\n                    eastPixelsToCrop = horizontal;\n                    northPixelsToCrop = vertical;\n                    southPixelsToCrop = vertical;\n                } // make sure that crops are >= 0\n                westPixelsToCrop = westPixelsToCrop >= 0 ? westPixelsToCrop : 0;\n                eastPixelsToCrop = eastPixelsToCrop >= 0 ? eastPixelsToCrop : 0;\n                northPixelsToCrop = northPixelsToCrop >= 0 ? northPixelsToCrop : 0;\n                southPixelsToCrop = southPixelsToCrop >= 0 ? southPixelsToCrop : 0; // safety checks\n                var widthOfRemainingPixels = w - (westPixelsToCrop + eastPixelsToCrop);\n                var heightOfRemainingPixels = h - (southPixelsToCrop + northPixelsToCrop);\n                if (cropOnlyFrames) {\n                    // crop image if all sides should be cropped\n                    doCrop = eastPixelsToCrop !== 0 && northPixelsToCrop !== 0 && westPixelsToCrop !== 0 && southPixelsToCrop !== 0;\n                } else {\n                    // crop image if at least one side should be cropped\n                    doCrop = eastPixelsToCrop !== 0 || northPixelsToCrop !== 0 || westPixelsToCrop !== 0 || southPixelsToCrop !== 0;\n                }\n                if (doCrop) {\n                    // do the real crop\n                    this.crop(eastPixelsToCrop, northPixelsToCrop, widthOfRemainingPixels, heightOfRemainingPixels);\n                }\n                if ((0, _utils.isNodePattern)(cb)) {\n                    cb.call(this, null, this);\n                }\n                return this;\n            }\n        }\n    };\n}\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-crop/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-displace/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@jimp/plugin-displace/dist/index.js ***!
  \**********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ \"(ssr)/./node_modules/@babel/runtime/helpers/typeof.js\"));\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\n/**\n * Displaces the image based on the provided displacement map\n * @param {object} map the source Jimp instance\n * @param {number} offset the maximum displacement value\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */ var _default = function _default() {\n    return {\n        displace: function displace(map, offset, cb) {\n            if ((0, _typeof2[\"default\"])(map) !== \"object\" || map.constructor !== this.constructor) {\n                return _utils.throwError.call(this, \"The source must be a Jimp image\", cb);\n            }\n            if (typeof offset !== \"number\") {\n                return _utils.throwError.call(this, \"factor must be a number\", cb);\n            }\n            var source = this.cloneQuiet();\n            this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(x, y, idx) {\n                var displacement = map.bitmap.data[idx] / 256 * offset;\n                displacement = Math.round(displacement);\n                var ids = this.getPixelIndex(x + displacement, y);\n                this.bitmap.data[ids] = source.bitmap.data[idx];\n                this.bitmap.data[ids + 1] = source.bitmap.data[idx + 1];\n                this.bitmap.data[ids + 2] = source.bitmap.data[idx + 2];\n            });\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        }\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWRpc3BsYWNlL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSx5QkFBeUJDLG1CQUFPQSxDQUFDLDBIQUE4QztBQUVuRkMsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFrQixHQUFHLEtBQUs7QUFFMUIsSUFBSUUsV0FBV04sdUJBQXVCQyxtQkFBT0EsQ0FBQyw0RkFBK0I7QUFFN0UsSUFBSU0sU0FBU04sbUJBQU9BLENBQUMsbUVBQWE7QUFFbEM7Ozs7OztDQU1DLEdBQ0QsSUFBSU8sV0FBVyxTQUFTQTtJQUN0QixPQUFPO1FBQ0xDLFVBQVUsU0FBU0EsU0FBU0MsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLEVBQUU7WUFDekMsSUFBSSxDQUFDLEdBQUdOLFFBQVEsQ0FBQyxVQUFVLEVBQUVJLFNBQVMsWUFBWUEsSUFBSUcsV0FBVyxLQUFLLElBQUksQ0FBQ0EsV0FBVyxFQUFFO2dCQUN0RixPQUFPTixPQUFPTyxVQUFVLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUUsbUNBQW1DSDtZQUN6RTtZQUVBLElBQUksT0FBT0QsV0FBVyxVQUFVO2dCQUM5QixPQUFPSixPQUFPTyxVQUFVLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUUsMkJBQTJCSDtZQUNqRTtZQUVBLElBQUlJLFNBQVMsSUFBSSxDQUFDQyxVQUFVO1lBQzVCLElBQUksQ0FBQ0MsU0FBUyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLElBQUksQ0FBQ0QsTUFBTSxDQUFDRSxNQUFNLEVBQUUsU0FBVUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEdBQUc7Z0JBQzdFLElBQUlDLGVBQWVmLElBQUlTLE1BQU0sQ0FBQ08sSUFBSSxDQUFDRixJQUFJLEdBQUcsTUFBTWI7Z0JBQ2hEYyxlQUFlRSxLQUFLQyxLQUFLLENBQUNIO2dCQUMxQixJQUFJSSxNQUFNLElBQUksQ0FBQ0MsYUFBYSxDQUFDUixJQUFJRyxjQUFjRjtnQkFDL0MsSUFBSSxDQUFDSixNQUFNLENBQUNPLElBQUksQ0FBQ0csSUFBSSxHQUFHYixPQUFPRyxNQUFNLENBQUNPLElBQUksQ0FBQ0YsSUFBSTtnQkFDL0MsSUFBSSxDQUFDTCxNQUFNLENBQUNPLElBQUksQ0FBQ0csTUFBTSxFQUFFLEdBQUdiLE9BQU9HLE1BQU0sQ0FBQ08sSUFBSSxDQUFDRixNQUFNLEVBQUU7Z0JBQ3ZELElBQUksQ0FBQ0wsTUFBTSxDQUFDTyxJQUFJLENBQUNHLE1BQU0sRUFBRSxHQUFHYixPQUFPRyxNQUFNLENBQUNPLElBQUksQ0FBQ0YsTUFBTSxFQUFFO1lBQ3pEO1lBRUEsSUFBSSxDQUFDLEdBQUdqQixPQUFPd0IsYUFBYSxFQUFFbkIsS0FBSztnQkFDakNBLEdBQUdHLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxJQUFJO1lBQzFCO1lBRUEsT0FBTyxJQUFJO1FBQ2I7SUFDRjtBQUNGO0FBRUFYLGtCQUFrQixHQUFHSTtBQUNyQndCLE9BQU81QixPQUFPLEdBQUdBLFFBQVE2QixPQUFPLEVBQ2hDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3FyLWNvZGUvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWRpc3BsYWNlL2Rpc3QvaW5kZXguanM/NGY1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF90eXBlb2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBqaW1wL3V0aWxzXCIpO1xuXG4vKipcbiAqIERpc3BsYWNlcyB0aGUgaW1hZ2UgYmFzZWQgb24gdGhlIHByb3ZpZGVkIGRpc3BsYWNlbWVudCBtYXBcbiAqIEBwYXJhbSB7b2JqZWN0fSBtYXAgdGhlIHNvdXJjZSBKaW1wIGluc3RhbmNlXG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IHRoZSBtYXhpbXVtIGRpc3BsYWNlbWVudCB2YWx1ZVxuICogQHBhcmFtIHtmdW5jdGlvbihFcnJvciwgSmltcCl9IGNiIChvcHRpb25hbCkgYSBjYWxsYmFjayBmb3Igd2hlbiBjb21wbGV0ZVxuICogQHJldHVybnMge0ppbXB9IHRoaXMgZm9yIGNoYWluaW5nIG9mIG1ldGhvZHNcbiAqL1xudmFyIF9kZWZhdWx0ID0gZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gIHJldHVybiB7XG4gICAgZGlzcGxhY2U6IGZ1bmN0aW9uIGRpc3BsYWNlKG1hcCwgb2Zmc2V0LCBjYikge1xuICAgICAgaWYgKCgwLCBfdHlwZW9mMltcImRlZmF1bHRcIl0pKG1hcCkgIT09IFwib2JqZWN0XCIgfHwgbWFwLmNvbnN0cnVjdG9yICE9PSB0aGlzLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHJldHVybiBfdXRpbHMudGhyb3dFcnJvci5jYWxsKHRoaXMsIFwiVGhlIHNvdXJjZSBtdXN0IGJlIGEgSmltcCBpbWFnZVwiLCBjYik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBfdXRpbHMudGhyb3dFcnJvci5jYWxsKHRoaXMsIFwiZmFjdG9yIG11c3QgYmUgYSBudW1iZXJcIiwgY2IpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc291cmNlID0gdGhpcy5jbG9uZVF1aWV0KCk7XG4gICAgICB0aGlzLnNjYW5RdWlldCgwLCAwLCB0aGlzLmJpdG1hcC53aWR0aCwgdGhpcy5iaXRtYXAuaGVpZ2h0LCBmdW5jdGlvbiAoeCwgeSwgaWR4KSB7XG4gICAgICAgIHZhciBkaXNwbGFjZW1lbnQgPSBtYXAuYml0bWFwLmRhdGFbaWR4XSAvIDI1NiAqIG9mZnNldDtcbiAgICAgICAgZGlzcGxhY2VtZW50ID0gTWF0aC5yb3VuZChkaXNwbGFjZW1lbnQpO1xuICAgICAgICB2YXIgaWRzID0gdGhpcy5nZXRQaXhlbEluZGV4KHggKyBkaXNwbGFjZW1lbnQsIHkpO1xuICAgICAgICB0aGlzLmJpdG1hcC5kYXRhW2lkc10gPSBzb3VyY2UuYml0bWFwLmRhdGFbaWR4XTtcbiAgICAgICAgdGhpcy5iaXRtYXAuZGF0YVtpZHMgKyAxXSA9IHNvdXJjZS5iaXRtYXAuZGF0YVtpZHggKyAxXTtcbiAgICAgICAgdGhpcy5iaXRtYXAuZGF0YVtpZHMgKyAyXSA9IHNvdXJjZS5iaXRtYXAuZGF0YVtpZHggKyAyXTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoKDAsIF91dGlscy5pc05vZGVQYXR0ZXJuKShjYikpIHtcbiAgICAgICAgY2IuY2FsbCh0aGlzLCBudWxsLCB0aGlzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfdHlwZW9mMiIsIl91dGlscyIsIl9kZWZhdWx0IiwiZGlzcGxhY2UiLCJtYXAiLCJvZmZzZXQiLCJjYiIsImNvbnN0cnVjdG9yIiwidGhyb3dFcnJvciIsImNhbGwiLCJzb3VyY2UiLCJjbG9uZVF1aWV0Iiwic2NhblF1aWV0IiwiYml0bWFwIiwid2lkdGgiLCJoZWlnaHQiLCJ4IiwieSIsImlkeCIsImRpc3BsYWNlbWVudCIsImRhdGEiLCJNYXRoIiwicm91bmQiLCJpZHMiLCJnZXRQaXhlbEluZGV4IiwiaXNOb2RlUGF0dGVybiIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-displace/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-dither/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@jimp/plugin-dither/dist/index.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\n/**\n * Apply a ordered dithering effect\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */ function dither(cb) {\n    var rgb565Matrix = [\n        1,\n        9,\n        3,\n        11,\n        13,\n        5,\n        15,\n        7,\n        4,\n        12,\n        2,\n        10,\n        16,\n        8,\n        14,\n        6\n    ];\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(x, y, idx) {\n        var thresholdId = ((y & 3) << 2) + x % 4;\n        var dither = rgb565Matrix[thresholdId];\n        this.bitmap.data[idx] = Math.min(this.bitmap.data[idx] + dither, 0xff);\n        this.bitmap.data[idx + 1] = Math.min(this.bitmap.data[idx + 1] + dither, 0xff);\n        this.bitmap.data[idx + 2] = Math.min(this.bitmap.data[idx + 2] + dither, 0xff);\n    });\n    if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n    }\n    return this;\n}\nvar _default = function _default() {\n    return {\n        dither565: dither,\n        dither16: dither\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWRpdGhlci9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBa0IsR0FBRyxLQUFLO0FBRTFCLElBQUlFLFNBQVNDLG1CQUFPQSxDQUFDLG1FQUFhO0FBRWxDOzs7O0NBSUMsR0FDRCxTQUFTQyxPQUFPQyxFQUFFO0lBQ2hCLElBQUlDLGVBQWU7UUFBQztRQUFHO1FBQUc7UUFBRztRQUFJO1FBQUk7UUFBRztRQUFJO1FBQUc7UUFBRztRQUFJO1FBQUc7UUFBSTtRQUFJO1FBQUc7UUFBSTtLQUFFO0lBQzFFLElBQUksQ0FBQ0MsU0FBUyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLElBQUksQ0FBQ0QsTUFBTSxDQUFDRSxNQUFNLEVBQUUsU0FBVUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEdBQUc7UUFDN0UsSUFBSUMsY0FBYyxDQUFDLENBQUNGLElBQUksTUFBTSxLQUFLRCxJQUFJO1FBQ3ZDLElBQUlQLFNBQVNFLFlBQVksQ0FBQ1EsWUFBWTtRQUN0QyxJQUFJLENBQUNOLE1BQU0sQ0FBQ08sSUFBSSxDQUFDRixJQUFJLEdBQUdHLEtBQUtDLEdBQUcsQ0FBQyxJQUFJLENBQUNULE1BQU0sQ0FBQ08sSUFBSSxDQUFDRixJQUFJLEdBQUdULFFBQVE7UUFDakUsSUFBSSxDQUFDSSxNQUFNLENBQUNPLElBQUksQ0FBQ0YsTUFBTSxFQUFFLEdBQUdHLEtBQUtDLEdBQUcsQ0FBQyxJQUFJLENBQUNULE1BQU0sQ0FBQ08sSUFBSSxDQUFDRixNQUFNLEVBQUUsR0FBR1QsUUFBUTtRQUN6RSxJQUFJLENBQUNJLE1BQU0sQ0FBQ08sSUFBSSxDQUFDRixNQUFNLEVBQUUsR0FBR0csS0FBS0MsR0FBRyxDQUFDLElBQUksQ0FBQ1QsTUFBTSxDQUFDTyxJQUFJLENBQUNGLE1BQU0sRUFBRSxHQUFHVCxRQUFRO0lBQzNFO0lBRUEsSUFBSSxDQUFDLEdBQUdGLE9BQU9nQixhQUFhLEVBQUViLEtBQUs7UUFDakNBLEdBQUdjLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxJQUFJO0lBQzFCO0lBRUEsT0FBTyxJQUFJO0FBQ2I7QUFFQSxJQUFJQyxXQUFXLFNBQVNBO0lBQ3RCLE9BQU87UUFDTEMsV0FBV2pCO1FBQ1hrQixVQUFVbEI7SUFDWjtBQUNGO0FBRUFKLGtCQUFrQixHQUFHb0I7QUFDckJHLE9BQU92QixPQUFPLEdBQUdBLFFBQVF3QixPQUFPLEVBQ2hDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3FyLWNvZGUvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWRpdGhlci9kaXN0L2luZGV4LmpzPzYwOTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAamltcC91dGlsc1wiKTtcblxuLyoqXG4gKiBBcHBseSBhIG9yZGVyZWQgZGl0aGVyaW5nIGVmZmVjdFxuICogQHBhcmFtIHtmdW5jdGlvbihFcnJvciwgSmltcCl9IGNiIChvcHRpb25hbCkgYSBjYWxsYmFjayBmb3Igd2hlbiBjb21wbGV0ZVxuICogQHJldHVybnMge0ppbXB9IHRoaXMgZm9yIGNoYWluaW5nIG9mIG1ldGhvZHNcbiAqL1xuZnVuY3Rpb24gZGl0aGVyKGNiKSB7XG4gIHZhciByZ2I1NjVNYXRyaXggPSBbMSwgOSwgMywgMTEsIDEzLCA1LCAxNSwgNywgNCwgMTIsIDIsIDEwLCAxNiwgOCwgMTQsIDZdO1xuICB0aGlzLnNjYW5RdWlldCgwLCAwLCB0aGlzLmJpdG1hcC53aWR0aCwgdGhpcy5iaXRtYXAuaGVpZ2h0LCBmdW5jdGlvbiAoeCwgeSwgaWR4KSB7XG4gICAgdmFyIHRocmVzaG9sZElkID0gKCh5ICYgMykgPDwgMikgKyB4ICUgNDtcbiAgICB2YXIgZGl0aGVyID0gcmdiNTY1TWF0cml4W3RocmVzaG9sZElkXTtcbiAgICB0aGlzLmJpdG1hcC5kYXRhW2lkeF0gPSBNYXRoLm1pbih0aGlzLmJpdG1hcC5kYXRhW2lkeF0gKyBkaXRoZXIsIDB4ZmYpO1xuICAgIHRoaXMuYml0bWFwLmRhdGFbaWR4ICsgMV0gPSBNYXRoLm1pbih0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDFdICsgZGl0aGVyLCAweGZmKTtcbiAgICB0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDJdID0gTWF0aC5taW4odGhpcy5iaXRtYXAuZGF0YVtpZHggKyAyXSArIGRpdGhlciwgMHhmZik7XG4gIH0pO1xuXG4gIGlmICgoMCwgX3V0aWxzLmlzTm9kZVBhdHRlcm4pKGNiKSkge1xuICAgIGNiLmNhbGwodGhpcywgbnVsbCwgdGhpcyk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxudmFyIF9kZWZhdWx0ID0gZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gIHJldHVybiB7XG4gICAgZGl0aGVyNTY1OiBkaXRoZXIsXG4gICAgZGl0aGVyMTY6IGRpdGhlclxuICB9O1xufTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3V0aWxzIiwicmVxdWlyZSIsImRpdGhlciIsImNiIiwicmdiNTY1TWF0cml4Iiwic2NhblF1aWV0IiwiYml0bWFwIiwid2lkdGgiLCJoZWlnaHQiLCJ4IiwieSIsImlkeCIsInRocmVzaG9sZElkIiwiZGF0YSIsIk1hdGgiLCJtaW4iLCJpc05vZGVQYXR0ZXJuIiwiY2FsbCIsIl9kZWZhdWx0IiwiZGl0aGVyNTY1IiwiZGl0aGVyMTYiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-dither/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-fisheye/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@jimp/plugin-fisheye/dist/index.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\n/**\n * Creates a circle out of an image.\n * @param {object} options (optional) r: radius of effect\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */ var _default = function _default() {\n    return {\n        fisheye: function fisheye() {\n            var _this = this;\n            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n                r: 2.5\n            };\n            var cb = arguments.length > 1 ? arguments[1] : undefined;\n            if (typeof options === \"function\") {\n                cb = options;\n                options = {\n                    r: 2.5\n                };\n            }\n            var source = this.cloneQuiet();\n            var _source$bitmap = source.bitmap, width = _source$bitmap.width, height = _source$bitmap.height;\n            source.scanQuiet(0, 0, width, height, function(x, y) {\n                var hx = x / width;\n                var hy = y / height;\n                var r = Math.sqrt(Math.pow(hx - 0.5, 2) + Math.pow(hy - 0.5, 2));\n                var rn = 2 * Math.pow(r, options.r);\n                var cosA = (hx - 0.5) / r;\n                var sinA = (hy - 0.5) / r;\n                var newX = Math.round((rn * cosA + 0.5) * width);\n                var newY = Math.round((rn * sinA + 0.5) * height);\n                var color = source.getPixelColor(newX, newY);\n                _this.setPixelColor(color, x, y);\n            });\n            /* Set center pixel color, otherwise it will be transparent */ this.setPixelColor(source.getPixelColor(width / 2, height / 2), width / 2, height / 2);\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        }\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWZpc2hleWUvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUcsS0FBSztBQUUxQixJQUFJRSxTQUFTQyxtQkFBT0EsQ0FBQyxtRUFBYTtBQUVsQzs7Ozs7Q0FLQyxHQUNELElBQUlDLFdBQVcsU0FBU0E7SUFDdEIsT0FBTztRQUNMQyxTQUFTLFNBQVNBO1lBQ2hCLElBQUlDLFFBQVEsSUFBSTtZQUVoQixJQUFJQyxVQUFVQyxVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS0UsWUFBWUYsU0FBUyxDQUFDLEVBQUUsR0FBRztnQkFDaEZHLEdBQUc7WUFDTDtZQUNBLElBQUlDLEtBQUtKLFVBQVVDLE1BQU0sR0FBRyxJQUFJRCxTQUFTLENBQUMsRUFBRSxHQUFHRTtZQUUvQyxJQUFJLE9BQU9ILFlBQVksWUFBWTtnQkFDakNLLEtBQUtMO2dCQUNMQSxVQUFVO29CQUNSSSxHQUFHO2dCQUNMO1lBQ0Y7WUFFQSxJQUFJRSxTQUFTLElBQUksQ0FBQ0MsVUFBVTtZQUM1QixJQUFJQyxpQkFBaUJGLE9BQU9HLE1BQU0sRUFDOUJDLFFBQVFGLGVBQWVFLEtBQUssRUFDNUJDLFNBQVNILGVBQWVHLE1BQU07WUFDbENMLE9BQU9NLFNBQVMsQ0FBQyxHQUFHLEdBQUdGLE9BQU9DLFFBQVEsU0FBVUUsQ0FBQyxFQUFFQyxDQUFDO2dCQUNsRCxJQUFJQyxLQUFLRixJQUFJSDtnQkFDYixJQUFJTSxLQUFLRixJQUFJSDtnQkFDYixJQUFJUCxJQUFJYSxLQUFLQyxJQUFJLENBQUNELEtBQUtFLEdBQUcsQ0FBQ0osS0FBSyxLQUFLLEtBQUtFLEtBQUtFLEdBQUcsQ0FBQ0gsS0FBSyxLQUFLO2dCQUM3RCxJQUFJSSxLQUFLLElBQUlILEtBQUtFLEdBQUcsQ0FBQ2YsR0FBR0osUUFBUUksQ0FBQztnQkFDbEMsSUFBSWlCLE9BQU8sQ0FBQ04sS0FBSyxHQUFFLElBQUtYO2dCQUN4QixJQUFJa0IsT0FBTyxDQUFDTixLQUFLLEdBQUUsSUFBS1o7Z0JBQ3hCLElBQUltQixPQUFPTixLQUFLTyxLQUFLLENBQUMsQ0FBQ0osS0FBS0MsT0FBTyxHQUFFLElBQUtYO2dCQUMxQyxJQUFJZSxPQUFPUixLQUFLTyxLQUFLLENBQUMsQ0FBQ0osS0FBS0UsT0FBTyxHQUFFLElBQUtYO2dCQUMxQyxJQUFJZSxRQUFRcEIsT0FBT3FCLGFBQWEsQ0FBQ0osTUFBTUU7Z0JBRXZDMUIsTUFBTTZCLGFBQWEsQ0FBQ0YsT0FBT2IsR0FBR0M7WUFDaEM7WUFDQSw0REFBNEQsR0FFNUQsSUFBSSxDQUFDYyxhQUFhLENBQUN0QixPQUFPcUIsYUFBYSxDQUFDakIsUUFBUSxHQUFHQyxTQUFTLElBQUlELFFBQVEsR0FBR0MsU0FBUztZQUVwRixJQUFJLENBQUMsR0FBR2hCLE9BQU9rQyxhQUFhLEVBQUV4QixLQUFLO2dCQUNqQ0EsR0FBR3lCLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxJQUFJO1lBQzFCO1lBRUEsT0FBTyxJQUFJO1FBQ2I7SUFDRjtBQUNGO0FBRUFyQyxrQkFBa0IsR0FBR0k7QUFDckJrQyxPQUFPdEMsT0FBTyxHQUFHQSxRQUFRdUMsT0FBTyxFQUNoQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xci1jb2RlLy4vbm9kZV9tb2R1bGVzL0BqaW1wL3BsdWdpbi1maXNoZXllL2Rpc3QvaW5kZXguanM/M2YwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBqaW1wL3V0aWxzXCIpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjaXJjbGUgb3V0IG9mIGFuIGltYWdlLlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgKG9wdGlvbmFsKSByOiByYWRpdXMgb2YgZWZmZWN0XG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEVycm9yLCBKaW1wKX0gY2IgKG9wdGlvbmFsKSBhIGNhbGxiYWNrIGZvciB3aGVuIGNvbXBsZXRlXG4gKiBAcmV0dXJucyB7SmltcH0gdGhpcyBmb3IgY2hhaW5pbmcgb2YgbWV0aG9kc1xuICovXG52YXIgX2RlZmF1bHQgPSBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgcmV0dXJuIHtcbiAgICBmaXNoZXllOiBmdW5jdGlvbiBmaXNoZXllKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHtcbiAgICAgICAgcjogMi41XG4gICAgICB9O1xuICAgICAgdmFyIGNiID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNiID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICByOiAyLjVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuY2xvbmVRdWlldCgpO1xuICAgICAgdmFyIF9zb3VyY2UkYml0bWFwID0gc291cmNlLmJpdG1hcCxcbiAgICAgICAgICB3aWR0aCA9IF9zb3VyY2UkYml0bWFwLndpZHRoLFxuICAgICAgICAgIGhlaWdodCA9IF9zb3VyY2UkYml0bWFwLmhlaWdodDtcbiAgICAgIHNvdXJjZS5zY2FuUXVpZXQoMCwgMCwgd2lkdGgsIGhlaWdodCwgZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgdmFyIGh4ID0geCAvIHdpZHRoO1xuICAgICAgICB2YXIgaHkgPSB5IC8gaGVpZ2h0O1xuICAgICAgICB2YXIgciA9IE1hdGguc3FydChNYXRoLnBvdyhoeCAtIDAuNSwgMikgKyBNYXRoLnBvdyhoeSAtIDAuNSwgMikpO1xuICAgICAgICB2YXIgcm4gPSAyICogTWF0aC5wb3cociwgb3B0aW9ucy5yKTtcbiAgICAgICAgdmFyIGNvc0EgPSAoaHggLSAwLjUpIC8gcjtcbiAgICAgICAgdmFyIHNpbkEgPSAoaHkgLSAwLjUpIC8gcjtcbiAgICAgICAgdmFyIG5ld1ggPSBNYXRoLnJvdW5kKChybiAqIGNvc0EgKyAwLjUpICogd2lkdGgpO1xuICAgICAgICB2YXIgbmV3WSA9IE1hdGgucm91bmQoKHJuICogc2luQSArIDAuNSkgKiBoZWlnaHQpO1xuICAgICAgICB2YXIgY29sb3IgPSBzb3VyY2UuZ2V0UGl4ZWxDb2xvcihuZXdYLCBuZXdZKTtcblxuICAgICAgICBfdGhpcy5zZXRQaXhlbENvbG9yKGNvbG9yLCB4LCB5KTtcbiAgICAgIH0pO1xuICAgICAgLyogU2V0IGNlbnRlciBwaXhlbCBjb2xvciwgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgdHJhbnNwYXJlbnQgKi9cblxuICAgICAgdGhpcy5zZXRQaXhlbENvbG9yKHNvdXJjZS5nZXRQaXhlbENvbG9yKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMiksIHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7XG5cbiAgICAgIGlmICgoMCwgX3V0aWxzLmlzTm9kZVBhdHRlcm4pKGNiKSkge1xuICAgICAgICBjYi5jYWxsKHRoaXMsIG51bGwsIHRoaXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfdXRpbHMiLCJyZXF1aXJlIiwiX2RlZmF1bHQiLCJmaXNoZXllIiwiX3RoaXMiLCJvcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiciIsImNiIiwic291cmNlIiwiY2xvbmVRdWlldCIsIl9zb3VyY2UkYml0bWFwIiwiYml0bWFwIiwid2lkdGgiLCJoZWlnaHQiLCJzY2FuUXVpZXQiLCJ4IiwieSIsImh4IiwiaHkiLCJNYXRoIiwic3FydCIsInBvdyIsInJuIiwiY29zQSIsInNpbkEiLCJuZXdYIiwicm91bmQiLCJuZXdZIiwiY29sb3IiLCJnZXRQaXhlbENvbG9yIiwic2V0UGl4ZWxDb2xvciIsImlzTm9kZVBhdHRlcm4iLCJjYWxsIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-fisheye/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-flip/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@jimp/plugin-flip/dist/index.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\n/**\n * Flip the image horizontally\n * @param {boolean} horizontal a Boolean, if true the image will be flipped horizontally\n * @param {boolean} vertical a Boolean, if true the image will be flipped vertically\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */ function flipFn(horizontal, vertical, cb) {\n    if (typeof horizontal !== \"boolean\" || typeof vertical !== \"boolean\") return _utils.throwError.call(this, \"horizontal and vertical must be Booleans\", cb);\n    var bitmap = Buffer.alloc(this.bitmap.data.length);\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(x, y, idx) {\n        var _x = horizontal ? this.bitmap.width - 1 - x : x;\n        var _y = vertical ? this.bitmap.height - 1 - y : y;\n        var _idx = this.bitmap.width * _y + _x << 2;\n        var data = this.bitmap.data.readUInt32BE(idx);\n        bitmap.writeUInt32BE(data, _idx);\n    });\n    this.bitmap.data = Buffer.from(bitmap);\n    if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n    }\n    return this;\n}\nvar _default = function _default() {\n    return {\n        flip: flipFn,\n        mirror: flipFn\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWZsaXAvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUcsS0FBSztBQUUxQixJQUFJRSxTQUFTQyxtQkFBT0EsQ0FBQyxtRUFBYTtBQUVsQzs7Ozs7O0NBTUMsR0FDRCxTQUFTQyxPQUFPQyxVQUFVLEVBQUVDLFFBQVEsRUFBRUMsRUFBRTtJQUN0QyxJQUFJLE9BQU9GLGVBQWUsYUFBYSxPQUFPQyxhQUFhLFdBQVcsT0FBT0osT0FBT00sVUFBVSxDQUFDQyxJQUFJLENBQUMsSUFBSSxFQUFFLDRDQUE0Q0Y7SUFDdEosSUFBSUcsU0FBU0MsT0FBT0MsS0FBSyxDQUFDLElBQUksQ0FBQ0YsTUFBTSxDQUFDRyxJQUFJLENBQUNDLE1BQU07SUFDakQsSUFBSSxDQUFDQyxTQUFTLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQ0wsTUFBTSxDQUFDTSxLQUFLLEVBQUUsSUFBSSxDQUFDTixNQUFNLENBQUNPLE1BQU0sRUFBRSxTQUFVQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsR0FBRztRQUM3RSxJQUFJQyxLQUFLaEIsYUFBYSxJQUFJLENBQUNLLE1BQU0sQ0FBQ00sS0FBSyxHQUFHLElBQUlFLElBQUlBO1FBRWxELElBQUlJLEtBQUtoQixXQUFXLElBQUksQ0FBQ0ksTUFBTSxDQUFDTyxNQUFNLEdBQUcsSUFBSUUsSUFBSUE7UUFFakQsSUFBSUksT0FBTyxJQUFJLENBQUNiLE1BQU0sQ0FBQ00sS0FBSyxHQUFHTSxLQUFLRCxNQUFNO1FBRTFDLElBQUlSLE9BQU8sSUFBSSxDQUFDSCxNQUFNLENBQUNHLElBQUksQ0FBQ1csWUFBWSxDQUFDSjtRQUN6Q1YsT0FBT2UsYUFBYSxDQUFDWixNQUFNVTtJQUM3QjtJQUNBLElBQUksQ0FBQ2IsTUFBTSxDQUFDRyxJQUFJLEdBQUdGLE9BQU9lLElBQUksQ0FBQ2hCO0lBRS9CLElBQUksQ0FBQyxHQUFHUixPQUFPeUIsYUFBYSxFQUFFcEIsS0FBSztRQUNqQ0EsR0FBR0UsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLElBQUk7SUFDMUI7SUFFQSxPQUFPLElBQUk7QUFDYjtBQUVBLElBQUltQixXQUFXLFNBQVNBO0lBQ3RCLE9BQU87UUFDTEMsTUFBTXpCO1FBQ04wQixRQUFRMUI7SUFDVjtBQUNGO0FBRUFKLGtCQUFrQixHQUFHNEI7QUFDckJHLE9BQU8vQixPQUFPLEdBQUdBLFFBQVFnQyxPQUFPLEVBQ2hDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3FyLWNvZGUvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWZsaXAvZGlzdC9pbmRleC5qcz8zM2Q2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQGppbXAvdXRpbHNcIik7XG5cbi8qKlxuICogRmxpcCB0aGUgaW1hZ2UgaG9yaXpvbnRhbGx5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGhvcml6b250YWwgYSBCb29sZWFuLCBpZiB0cnVlIHRoZSBpbWFnZSB3aWxsIGJlIGZsaXBwZWQgaG9yaXpvbnRhbGx5XG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZlcnRpY2FsIGEgQm9vbGVhbiwgaWYgdHJ1ZSB0aGUgaW1hZ2Ugd2lsbCBiZSBmbGlwcGVkIHZlcnRpY2FsbHlcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIEppbXApfSBjYiAob3B0aW9uYWwpIGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGVcbiAqIEByZXR1cm5zIHtKaW1wfSB0aGlzIGZvciBjaGFpbmluZyBvZiBtZXRob2RzXG4gKi9cbmZ1bmN0aW9uIGZsaXBGbihob3Jpem9udGFsLCB2ZXJ0aWNhbCwgY2IpIHtcbiAgaWYgKHR5cGVvZiBob3Jpem9udGFsICE9PSBcImJvb2xlYW5cIiB8fCB0eXBlb2YgdmVydGljYWwgIT09IFwiYm9vbGVhblwiKSByZXR1cm4gX3V0aWxzLnRocm93RXJyb3IuY2FsbCh0aGlzLCBcImhvcml6b250YWwgYW5kIHZlcnRpY2FsIG11c3QgYmUgQm9vbGVhbnNcIiwgY2IpO1xuICB2YXIgYml0bWFwID0gQnVmZmVyLmFsbG9jKHRoaXMuYml0bWFwLmRhdGEubGVuZ3RoKTtcbiAgdGhpcy5zY2FuUXVpZXQoMCwgMCwgdGhpcy5iaXRtYXAud2lkdGgsIHRoaXMuYml0bWFwLmhlaWdodCwgZnVuY3Rpb24gKHgsIHksIGlkeCkge1xuICAgIHZhciBfeCA9IGhvcml6b250YWwgPyB0aGlzLmJpdG1hcC53aWR0aCAtIDEgLSB4IDogeDtcblxuICAgIHZhciBfeSA9IHZlcnRpY2FsID8gdGhpcy5iaXRtYXAuaGVpZ2h0IC0gMSAtIHkgOiB5O1xuXG4gICAgdmFyIF9pZHggPSB0aGlzLmJpdG1hcC53aWR0aCAqIF95ICsgX3ggPDwgMjtcblxuICAgIHZhciBkYXRhID0gdGhpcy5iaXRtYXAuZGF0YS5yZWFkVUludDMyQkUoaWR4KTtcbiAgICBiaXRtYXAud3JpdGVVSW50MzJCRShkYXRhLCBfaWR4KTtcbiAgfSk7XG4gIHRoaXMuYml0bWFwLmRhdGEgPSBCdWZmZXIuZnJvbShiaXRtYXApO1xuXG4gIGlmICgoMCwgX3V0aWxzLmlzTm9kZVBhdHRlcm4pKGNiKSkge1xuICAgIGNiLmNhbGwodGhpcywgbnVsbCwgdGhpcyk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxudmFyIF9kZWZhdWx0ID0gZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gIHJldHVybiB7XG4gICAgZmxpcDogZmxpcEZuLFxuICAgIG1pcnJvcjogZmxpcEZuXG4gIH07XG59O1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfdXRpbHMiLCJyZXF1aXJlIiwiZmxpcEZuIiwiaG9yaXpvbnRhbCIsInZlcnRpY2FsIiwiY2IiLCJ0aHJvd0Vycm9yIiwiY2FsbCIsImJpdG1hcCIsIkJ1ZmZlciIsImFsbG9jIiwiZGF0YSIsImxlbmd0aCIsInNjYW5RdWlldCIsIndpZHRoIiwiaGVpZ2h0IiwieCIsInkiLCJpZHgiLCJfeCIsIl95IiwiX2lkeCIsInJlYWRVSW50MzJCRSIsIndyaXRlVUludDMyQkUiLCJmcm9tIiwiaXNOb2RlUGF0dGVybiIsIl9kZWZhdWx0IiwiZmxpcCIsIm1pcnJvciIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-flip/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-gaussian/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@jimp/plugin-gaussian/dist/index.js ***!
  \**********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\n/**\n * Applies a true Gaussian blur to the image (warning: this is VERY slow)\n * @param {number} r the pixel radius of the blur\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */ var _default = function _default() {\n    return {\n        gaussian: function gaussian(r, cb) {\n            // http://blog.ivank.net/fastest-gaussian-blur.html\n            if (typeof r !== \"number\") {\n                return _utils.throwError.call(this, \"r must be a number\", cb);\n            }\n            if (r < 1) {\n                return _utils.throwError.call(this, \"r must be greater than 0\", cb);\n            }\n            var rs = Math.ceil(r * 2.57); // significant radius\n            var range = rs * 2 + 1;\n            var rr2 = r * r * 2;\n            var rr2pi = rr2 * Math.PI;\n            var weights = [];\n            for(var y = 0; y < range; y++){\n                weights[y] = [];\n                for(var x = 0; x < range; x++){\n                    var dsq = Math.pow(x - rs, 2) + Math.pow(y - rs, 2);\n                    weights[y][x] = Math.exp(-dsq / rr2) / rr2pi;\n                }\n            }\n            for(var _y = 0; _y < this.bitmap.height; _y++){\n                for(var _x = 0; _x < this.bitmap.width; _x++){\n                    var red = 0;\n                    var green = 0;\n                    var blue = 0;\n                    var alpha = 0;\n                    var wsum = 0;\n                    for(var iy = 0; iy < range; iy++){\n                        for(var ix = 0; ix < range; ix++){\n                            var x1 = Math.min(this.bitmap.width - 1, Math.max(0, ix + _x - rs));\n                            var y1 = Math.min(this.bitmap.height - 1, Math.max(0, iy + _y - rs));\n                            var weight = weights[iy][ix];\n                            var _idx = y1 * this.bitmap.width + x1 << 2;\n                            red += this.bitmap.data[_idx] * weight;\n                            green += this.bitmap.data[_idx + 1] * weight;\n                            blue += this.bitmap.data[_idx + 2] * weight;\n                            alpha += this.bitmap.data[_idx + 3] * weight;\n                            wsum += weight;\n                        }\n                        var idx = _y * this.bitmap.width + _x << 2;\n                        this.bitmap.data[idx] = Math.round(red / wsum);\n                        this.bitmap.data[idx + 1] = Math.round(green / wsum);\n                        this.bitmap.data[idx + 2] = Math.round(blue / wsum);\n                        this.bitmap.data[idx + 3] = Math.round(alpha / wsum);\n                    }\n                }\n            }\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        }\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWdhdXNzaWFuL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFrQixHQUFHLEtBQUs7QUFFMUIsSUFBSUUsU0FBU0MsbUJBQU9BLENBQUMsbUVBQWE7QUFFbEM7Ozs7O0NBS0MsR0FDRCxJQUFJQyxXQUFXLFNBQVNBO0lBQ3RCLE9BQU87UUFDTEMsVUFBVSxTQUFTQSxTQUFTQyxDQUFDLEVBQUVDLEVBQUU7WUFDL0IsbURBQW1EO1lBQ25ELElBQUksT0FBT0QsTUFBTSxVQUFVO2dCQUN6QixPQUFPSixPQUFPTSxVQUFVLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUUsc0JBQXNCRjtZQUM1RDtZQUVBLElBQUlELElBQUksR0FBRztnQkFDVCxPQUFPSixPQUFPTSxVQUFVLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUUsNEJBQTRCRjtZQUNsRTtZQUVBLElBQUlHLEtBQUtDLEtBQUtDLElBQUksQ0FBQ04sSUFBSSxPQUFPLHFCQUFxQjtZQUVuRCxJQUFJTyxRQUFRSCxLQUFLLElBQUk7WUFDckIsSUFBSUksTUFBTVIsSUFBSUEsSUFBSTtZQUNsQixJQUFJUyxRQUFRRCxNQUFNSCxLQUFLSyxFQUFFO1lBQ3pCLElBQUlDLFVBQVUsRUFBRTtZQUVoQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUwsT0FBT0ssSUFBSztnQkFDOUJELE9BQU8sQ0FBQ0MsRUFBRSxHQUFHLEVBQUU7Z0JBRWYsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlOLE9BQU9NLElBQUs7b0JBQzlCLElBQUlDLE1BQU1ULEtBQUtVLEdBQUcsQ0FBQ0YsSUFBSVQsSUFBSSxLQUFLQyxLQUFLVSxHQUFHLENBQUNILElBQUlSLElBQUk7b0JBQ2pETyxPQUFPLENBQUNDLEVBQUUsQ0FBQ0MsRUFBRSxHQUFHUixLQUFLVyxHQUFHLENBQUMsQ0FBQ0YsTUFBTU4sT0FBT0M7Z0JBQ3pDO1lBQ0Y7WUFFQSxJQUFLLElBQUlRLEtBQUssR0FBR0EsS0FBSyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsTUFBTSxFQUFFRixLQUFNO2dCQUM5QyxJQUFLLElBQUlHLEtBQUssR0FBR0EsS0FBSyxJQUFJLENBQUNGLE1BQU0sQ0FBQ0csS0FBSyxFQUFFRCxLQUFNO29CQUM3QyxJQUFJRSxNQUFNO29CQUNWLElBQUlDLFFBQVE7b0JBQ1osSUFBSUMsT0FBTztvQkFDWCxJQUFJQyxRQUFRO29CQUNaLElBQUlDLE9BQU87b0JBRVgsSUFBSyxJQUFJQyxLQUFLLEdBQUdBLEtBQUtwQixPQUFPb0IsS0FBTTt3QkFDakMsSUFBSyxJQUFJQyxLQUFLLEdBQUdBLEtBQUtyQixPQUFPcUIsS0FBTTs0QkFDakMsSUFBSUMsS0FBS3hCLEtBQUt5QixHQUFHLENBQUMsSUFBSSxDQUFDWixNQUFNLENBQUNHLEtBQUssR0FBRyxHQUFHaEIsS0FBSzBCLEdBQUcsQ0FBQyxHQUFHSCxLQUFLUixLQUFLaEI7NEJBQy9ELElBQUk0QixLQUFLM0IsS0FBS3lCLEdBQUcsQ0FBQyxJQUFJLENBQUNaLE1BQU0sQ0FBQ0MsTUFBTSxHQUFHLEdBQUdkLEtBQUswQixHQUFHLENBQUMsR0FBR0osS0FBS1YsS0FBS2I7NEJBQ2hFLElBQUk2QixTQUFTdEIsT0FBTyxDQUFDZ0IsR0FBRyxDQUFDQyxHQUFHOzRCQUU1QixJQUFJTSxPQUFPRixLQUFLLElBQUksQ0FBQ2QsTUFBTSxDQUFDRyxLQUFLLEdBQUdRLE1BQU07NEJBRTFDUCxPQUFPLElBQUksQ0FBQ0osTUFBTSxDQUFDaUIsSUFBSSxDQUFDRCxLQUFLLEdBQUdEOzRCQUNoQ1YsU0FBUyxJQUFJLENBQUNMLE1BQU0sQ0FBQ2lCLElBQUksQ0FBQ0QsT0FBTyxFQUFFLEdBQUdEOzRCQUN0Q1QsUUFBUSxJQUFJLENBQUNOLE1BQU0sQ0FBQ2lCLElBQUksQ0FBQ0QsT0FBTyxFQUFFLEdBQUdEOzRCQUNyQ1IsU0FBUyxJQUFJLENBQUNQLE1BQU0sQ0FBQ2lCLElBQUksQ0FBQ0QsT0FBTyxFQUFFLEdBQUdEOzRCQUN0Q1AsUUFBUU87d0JBQ1Y7d0JBRUEsSUFBSUcsTUFBTW5CLEtBQUssSUFBSSxDQUFDQyxNQUFNLENBQUNHLEtBQUssR0FBR0QsTUFBTTt3QkFDekMsSUFBSSxDQUFDRixNQUFNLENBQUNpQixJQUFJLENBQUNDLElBQUksR0FBRy9CLEtBQUtnQyxLQUFLLENBQUNmLE1BQU1JO3dCQUN6QyxJQUFJLENBQUNSLE1BQU0sQ0FBQ2lCLElBQUksQ0FBQ0MsTUFBTSxFQUFFLEdBQUcvQixLQUFLZ0MsS0FBSyxDQUFDZCxRQUFRRzt3QkFDL0MsSUFBSSxDQUFDUixNQUFNLENBQUNpQixJQUFJLENBQUNDLE1BQU0sRUFBRSxHQUFHL0IsS0FBS2dDLEtBQUssQ0FBQ2IsT0FBT0U7d0JBQzlDLElBQUksQ0FBQ1IsTUFBTSxDQUFDaUIsSUFBSSxDQUFDQyxNQUFNLEVBQUUsR0FBRy9CLEtBQUtnQyxLQUFLLENBQUNaLFFBQVFDO29CQUNqRDtnQkFDRjtZQUNGO1lBRUEsSUFBSSxDQUFDLEdBQUc5QixPQUFPMEMsYUFBYSxFQUFFckMsS0FBSztnQkFDakNBLEdBQUdFLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxJQUFJO1lBQzFCO1lBRUEsT0FBTyxJQUFJO1FBQ2I7SUFDRjtBQUNGO0FBRUFULGtCQUFrQixHQUFHSTtBQUNyQnlDLE9BQU83QyxPQUFPLEdBQUdBLFFBQVE4QyxPQUFPLEVBQ2hDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3FyLWNvZGUvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWdhdXNzaWFuL2Rpc3QvaW5kZXguanM/ZjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBqaW1wL3V0aWxzXCIpO1xuXG4vKipcbiAqIEFwcGxpZXMgYSB0cnVlIEdhdXNzaWFuIGJsdXIgdG8gdGhlIGltYWdlICh3YXJuaW5nOiB0aGlzIGlzIFZFUlkgc2xvdylcbiAqIEBwYXJhbSB7bnVtYmVyfSByIHRoZSBwaXhlbCByYWRpdXMgb2YgdGhlIGJsdXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIEppbXApfSBjYiAob3B0aW9uYWwpIGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGVcbiAqIEByZXR1cm5zIHtKaW1wfSB0aGlzIGZvciBjaGFpbmluZyBvZiBtZXRob2RzXG4gKi9cbnZhciBfZGVmYXVsdCA9IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICByZXR1cm4ge1xuICAgIGdhdXNzaWFuOiBmdW5jdGlvbiBnYXVzc2lhbihyLCBjYikge1xuICAgICAgLy8gaHR0cDovL2Jsb2cuaXZhbmsubmV0L2Zhc3Rlc3QtZ2F1c3NpYW4tYmx1ci5odG1sXG4gICAgICBpZiAodHlwZW9mIHIgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIF91dGlscy50aHJvd0Vycm9yLmNhbGwodGhpcywgXCJyIG11c3QgYmUgYSBudW1iZXJcIiwgY2IpO1xuICAgICAgfVxuXG4gICAgICBpZiAociA8IDEpIHtcbiAgICAgICAgcmV0dXJuIF91dGlscy50aHJvd0Vycm9yLmNhbGwodGhpcywgXCJyIG11c3QgYmUgZ3JlYXRlciB0aGFuIDBcIiwgY2IpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcnMgPSBNYXRoLmNlaWwociAqIDIuNTcpOyAvLyBzaWduaWZpY2FudCByYWRpdXNcblxuICAgICAgdmFyIHJhbmdlID0gcnMgKiAyICsgMTtcbiAgICAgIHZhciBycjIgPSByICogciAqIDI7XG4gICAgICB2YXIgcnIycGkgPSBycjIgKiBNYXRoLlBJO1xuICAgICAgdmFyIHdlaWdodHMgPSBbXTtcblxuICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCByYW5nZTsgeSsrKSB7XG4gICAgICAgIHdlaWdodHNbeV0gPSBbXTtcblxuICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHJhbmdlOyB4KyspIHtcbiAgICAgICAgICB2YXIgZHNxID0gTWF0aC5wb3coeCAtIHJzLCAyKSArIE1hdGgucG93KHkgLSBycywgMik7XG4gICAgICAgICAgd2VpZ2h0c1t5XVt4XSA9IE1hdGguZXhwKC1kc3EgLyBycjIpIC8gcnIycGk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX3kgPSAwOyBfeSA8IHRoaXMuYml0bWFwLmhlaWdodDsgX3krKykge1xuICAgICAgICBmb3IgKHZhciBfeCA9IDA7IF94IDwgdGhpcy5iaXRtYXAud2lkdGg7IF94KyspIHtcbiAgICAgICAgICB2YXIgcmVkID0gMDtcbiAgICAgICAgICB2YXIgZ3JlZW4gPSAwO1xuICAgICAgICAgIHZhciBibHVlID0gMDtcbiAgICAgICAgICB2YXIgYWxwaGEgPSAwO1xuICAgICAgICAgIHZhciB3c3VtID0gMDtcblxuICAgICAgICAgIGZvciAodmFyIGl5ID0gMDsgaXkgPCByYW5nZTsgaXkrKykge1xuICAgICAgICAgICAgZm9yICh2YXIgaXggPSAwOyBpeCA8IHJhbmdlOyBpeCsrKSB7XG4gICAgICAgICAgICAgIHZhciB4MSA9IE1hdGgubWluKHRoaXMuYml0bWFwLndpZHRoIC0gMSwgTWF0aC5tYXgoMCwgaXggKyBfeCAtIHJzKSk7XG4gICAgICAgICAgICAgIHZhciB5MSA9IE1hdGgubWluKHRoaXMuYml0bWFwLmhlaWdodCAtIDEsIE1hdGgubWF4KDAsIGl5ICsgX3kgLSBycykpO1xuICAgICAgICAgICAgICB2YXIgd2VpZ2h0ID0gd2VpZ2h0c1tpeV1baXhdO1xuXG4gICAgICAgICAgICAgIHZhciBfaWR4ID0geTEgKiB0aGlzLmJpdG1hcC53aWR0aCArIHgxIDw8IDI7XG5cbiAgICAgICAgICAgICAgcmVkICs9IHRoaXMuYml0bWFwLmRhdGFbX2lkeF0gKiB3ZWlnaHQ7XG4gICAgICAgICAgICAgIGdyZWVuICs9IHRoaXMuYml0bWFwLmRhdGFbX2lkeCArIDFdICogd2VpZ2h0O1xuICAgICAgICAgICAgICBibHVlICs9IHRoaXMuYml0bWFwLmRhdGFbX2lkeCArIDJdICogd2VpZ2h0O1xuICAgICAgICAgICAgICBhbHBoYSArPSB0aGlzLmJpdG1hcC5kYXRhW19pZHggKyAzXSAqIHdlaWdodDtcbiAgICAgICAgICAgICAgd3N1bSArPSB3ZWlnaHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpZHggPSBfeSAqIHRoaXMuYml0bWFwLndpZHRoICsgX3ggPDwgMjtcbiAgICAgICAgICAgIHRoaXMuYml0bWFwLmRhdGFbaWR4XSA9IE1hdGgucm91bmQocmVkIC8gd3N1bSk7XG4gICAgICAgICAgICB0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDFdID0gTWF0aC5yb3VuZChncmVlbiAvIHdzdW0pO1xuICAgICAgICAgICAgdGhpcy5iaXRtYXAuZGF0YVtpZHggKyAyXSA9IE1hdGgucm91bmQoYmx1ZSAvIHdzdW0pO1xuICAgICAgICAgICAgdGhpcy5iaXRtYXAuZGF0YVtpZHggKyAzXSA9IE1hdGgucm91bmQoYWxwaGEgLyB3c3VtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCgwLCBfdXRpbHMuaXNOb2RlUGF0dGVybikoY2IpKSB7XG4gICAgICAgIGNiLmNhbGwodGhpcywgbnVsbCwgdGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl91dGlscyIsInJlcXVpcmUiLCJfZGVmYXVsdCIsImdhdXNzaWFuIiwiciIsImNiIiwidGhyb3dFcnJvciIsImNhbGwiLCJycyIsIk1hdGgiLCJjZWlsIiwicmFuZ2UiLCJycjIiLCJycjJwaSIsIlBJIiwid2VpZ2h0cyIsInkiLCJ4IiwiZHNxIiwicG93IiwiZXhwIiwiX3kiLCJiaXRtYXAiLCJoZWlnaHQiLCJfeCIsIndpZHRoIiwicmVkIiwiZ3JlZW4iLCJibHVlIiwiYWxwaGEiLCJ3c3VtIiwiaXkiLCJpeCIsIngxIiwibWluIiwibWF4IiwieTEiLCJ3ZWlnaHQiLCJfaWR4IiwiZGF0YSIsImlkeCIsInJvdW5kIiwiaXNOb2RlUGF0dGVybiIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-gaussian/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-invert/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@jimp/plugin-invert/dist/index.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */ var _default = function _default() {\n    return {\n        invert: function invert(cb) {\n            this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(x, y, idx) {\n                this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n                this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n                this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n            });\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        }\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWludmVydC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBa0IsR0FBRyxLQUFLO0FBRTFCLElBQUlFLFNBQVNDLG1CQUFPQSxDQUFDLG1FQUFhO0FBRWxDOzs7O0NBSUMsR0FDRCxJQUFJQyxXQUFXLFNBQVNBO0lBQ3RCLE9BQU87UUFDTEMsUUFBUSxTQUFTQSxPQUFPQyxFQUFFO1lBQ3hCLElBQUksQ0FBQ0MsU0FBUyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLElBQUksQ0FBQ0QsTUFBTSxDQUFDRSxNQUFNLEVBQUUsU0FBVUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEdBQUc7Z0JBQzdFLElBQUksQ0FBQ0wsTUFBTSxDQUFDTSxJQUFJLENBQUNELElBQUksR0FBRyxNQUFNLElBQUksQ0FBQ0wsTUFBTSxDQUFDTSxJQUFJLENBQUNELElBQUk7Z0JBQ25ELElBQUksQ0FBQ0wsTUFBTSxDQUFDTSxJQUFJLENBQUNELE1BQU0sRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDTCxNQUFNLENBQUNNLElBQUksQ0FBQ0QsTUFBTSxFQUFFO2dCQUMzRCxJQUFJLENBQUNMLE1BQU0sQ0FBQ00sSUFBSSxDQUFDRCxNQUFNLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQ0wsTUFBTSxDQUFDTSxJQUFJLENBQUNELE1BQU0sRUFBRTtZQUM3RDtZQUVBLElBQUksQ0FBQyxHQUFHWCxPQUFPYSxhQUFhLEVBQUVULEtBQUs7Z0JBQ2pDQSxHQUFHVSxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sSUFBSTtZQUMxQjtZQUVBLE9BQU8sSUFBSTtRQUNiO0lBQ0Y7QUFDRjtBQUVBaEIsa0JBQWtCLEdBQUdJO0FBQ3JCYSxPQUFPakIsT0FBTyxHQUFHQSxRQUFRa0IsT0FBTyxFQUNoQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xci1jb2RlLy4vbm9kZV9tb2R1bGVzL0BqaW1wL3BsdWdpbi1pbnZlcnQvZGlzdC9pbmRleC5qcz9iMmJiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQGppbXAvdXRpbHNcIik7XG5cbi8qKlxuICogSW52ZXJ0cyB0aGUgaW1hZ2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIEppbXApfSBjYiAob3B0aW9uYWwpIGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGVcbiAqIEByZXR1cm5zIHtKaW1wfSB0aGlzIGZvciBjaGFpbmluZyBvZiBtZXRob2RzXG4gKi9cbnZhciBfZGVmYXVsdCA9IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICByZXR1cm4ge1xuICAgIGludmVydDogZnVuY3Rpb24gaW52ZXJ0KGNiKSB7XG4gICAgICB0aGlzLnNjYW5RdWlldCgwLCAwLCB0aGlzLmJpdG1hcC53aWR0aCwgdGhpcy5iaXRtYXAuaGVpZ2h0LCBmdW5jdGlvbiAoeCwgeSwgaWR4KSB7XG4gICAgICAgIHRoaXMuYml0bWFwLmRhdGFbaWR4XSA9IDI1NSAtIHRoaXMuYml0bWFwLmRhdGFbaWR4XTtcbiAgICAgICAgdGhpcy5iaXRtYXAuZGF0YVtpZHggKyAxXSA9IDI1NSAtIHRoaXMuYml0bWFwLmRhdGFbaWR4ICsgMV07XG4gICAgICAgIHRoaXMuYml0bWFwLmRhdGFbaWR4ICsgMl0gPSAyNTUgLSB0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDJdO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICgoMCwgX3V0aWxzLmlzTm9kZVBhdHRlcm4pKGNiKSkge1xuICAgICAgICBjYi5jYWxsKHRoaXMsIG51bGwsIHRoaXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfdXRpbHMiLCJyZXF1aXJlIiwiX2RlZmF1bHQiLCJpbnZlcnQiLCJjYiIsInNjYW5RdWlldCIsImJpdG1hcCIsIndpZHRoIiwiaGVpZ2h0IiwieCIsInkiLCJpZHgiLCJkYXRhIiwiaXNOb2RlUGF0dGVybiIsImNhbGwiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-invert/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-mask/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@jimp/plugin-mask/dist/index.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\n/**\n * Masks a source image on to this image using average pixel colour. A completely black pixel on the mask will turn a pixel in the image completely transparent.\n * @param {Jimp} src the source Jimp instance\n * @param {number} x the horizontal position to blit the image\n * @param {number} y the vertical position to blit the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */ var _default = function _default() {\n    return {\n        mask: function mask(src) {\n            var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n            var cb = arguments.length > 3 ? arguments[3] : undefined;\n            if (!(src instanceof this.constructor)) {\n                return _utils.throwError.call(this, \"The source must be a Jimp image\", cb);\n            }\n            if (typeof x !== \"number\" || typeof y !== \"number\") {\n                return _utils.throwError.call(this, \"x and y must be numbers\", cb);\n            } // round input\n            x = Math.round(x);\n            y = Math.round(y);\n            var w = this.bitmap.width;\n            var h = this.bitmap.height;\n            var baseImage = this;\n            src.scanQuiet(0, 0, src.bitmap.width, src.bitmap.height, function(sx, sy, idx) {\n                var destX = x + sx;\n                var destY = y + sy;\n                if (destX >= 0 && destY >= 0 && destX < w && destY < h) {\n                    var dstIdx = baseImage.getPixelIndex(destX, destY);\n                    var data = this.bitmap.data;\n                    var avg = (data[idx + 0] + data[idx + 1] + data[idx + 2]) / 3;\n                    baseImage.bitmap.data[dstIdx + 3] *= avg / 255;\n                }\n            });\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        }\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLW1hc2svZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUcsS0FBSztBQUUxQixJQUFJRSxTQUFTQyxtQkFBT0EsQ0FBQyxtRUFBYTtBQUVsQzs7Ozs7OztDQU9DLEdBQ0QsSUFBSUMsV0FBVyxTQUFTQTtJQUN0QixPQUFPO1FBQ0xDLE1BQU0sU0FBU0EsS0FBS0MsR0FBRztZQUNyQixJQUFJQyxJQUFJQyxVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS0UsWUFBWUYsU0FBUyxDQUFDLEVBQUUsR0FBRztZQUM1RSxJQUFJRyxJQUFJSCxVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS0UsWUFBWUYsU0FBUyxDQUFDLEVBQUUsR0FBRztZQUM1RSxJQUFJSSxLQUFLSixVQUFVQyxNQUFNLEdBQUcsSUFBSUQsU0FBUyxDQUFDLEVBQUUsR0FBR0U7WUFFL0MsSUFBSSxDQUFFSixDQUFBQSxlQUFlLElBQUksQ0FBQ08sV0FBVyxHQUFHO2dCQUN0QyxPQUFPWCxPQUFPWSxVQUFVLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUUsbUNBQW1DSDtZQUN6RTtZQUVBLElBQUksT0FBT0wsTUFBTSxZQUFZLE9BQU9JLE1BQU0sVUFBVTtnQkFDbEQsT0FBT1QsT0FBT1ksVUFBVSxDQUFDQyxJQUFJLENBQUMsSUFBSSxFQUFFLDJCQUEyQkg7WUFDakUsRUFBRSxjQUFjO1lBR2hCTCxJQUFJUyxLQUFLQyxLQUFLLENBQUNWO1lBQ2ZJLElBQUlLLEtBQUtDLEtBQUssQ0FBQ047WUFDZixJQUFJTyxJQUFJLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxLQUFLO1lBQ3pCLElBQUlDLElBQUksSUFBSSxDQUFDRixNQUFNLENBQUNHLE1BQU07WUFDMUIsSUFBSUMsWUFBWSxJQUFJO1lBQ3BCakIsSUFBSWtCLFNBQVMsQ0FBQyxHQUFHLEdBQUdsQixJQUFJYSxNQUFNLENBQUNDLEtBQUssRUFBRWQsSUFBSWEsTUFBTSxDQUFDRyxNQUFNLEVBQUUsU0FBVUcsRUFBRSxFQUFFQyxFQUFFLEVBQUVDLEdBQUc7Z0JBQzVFLElBQUlDLFFBQVFyQixJQUFJa0I7Z0JBQ2hCLElBQUlJLFFBQVFsQixJQUFJZTtnQkFFaEIsSUFBSUUsU0FBUyxLQUFLQyxTQUFTLEtBQUtELFFBQVFWLEtBQUtXLFFBQVFSLEdBQUc7b0JBQ3RELElBQUlTLFNBQVNQLFVBQVVRLGFBQWEsQ0FBQ0gsT0FBT0M7b0JBQzVDLElBQUlHLE9BQU8sSUFBSSxDQUFDYixNQUFNLENBQUNhLElBQUk7b0JBQzNCLElBQUlDLE1BQU0sQ0FBQ0QsSUFBSSxDQUFDTCxNQUFNLEVBQUUsR0FBR0ssSUFBSSxDQUFDTCxNQUFNLEVBQUUsR0FBR0ssSUFBSSxDQUFDTCxNQUFNLEVBQUUsSUFBSTtvQkFDNURKLFVBQVVKLE1BQU0sQ0FBQ2EsSUFBSSxDQUFDRixTQUFTLEVBQUUsSUFBSUcsTUFBTTtnQkFDN0M7WUFDRjtZQUVBLElBQUksQ0FBQyxHQUFHL0IsT0FBT2dDLGFBQWEsRUFBRXRCLEtBQUs7Z0JBQ2pDQSxHQUFHRyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sSUFBSTtZQUMxQjtZQUVBLE9BQU8sSUFBSTtRQUNiO0lBQ0Y7QUFDRjtBQUVBZixrQkFBa0IsR0FBR0k7QUFDckIrQixPQUFPbkMsT0FBTyxHQUFHQSxRQUFRb0MsT0FBTyxFQUNoQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xci1jb2RlLy4vbm9kZV9tb2R1bGVzL0BqaW1wL3BsdWdpbi1tYXNrL2Rpc3QvaW5kZXguanM/ZGUyMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBqaW1wL3V0aWxzXCIpO1xuXG4vKipcbiAqIE1hc2tzIGEgc291cmNlIGltYWdlIG9uIHRvIHRoaXMgaW1hZ2UgdXNpbmcgYXZlcmFnZSBwaXhlbCBjb2xvdXIuIEEgY29tcGxldGVseSBibGFjayBwaXhlbCBvbiB0aGUgbWFzayB3aWxsIHR1cm4gYSBwaXhlbCBpbiB0aGUgaW1hZ2UgY29tcGxldGVseSB0cmFuc3BhcmVudC5cbiAqIEBwYXJhbSB7SmltcH0gc3JjIHRoZSBzb3VyY2UgSmltcCBpbnN0YW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IHggdGhlIGhvcml6b250YWwgcG9zaXRpb24gdG8gYmxpdCB0aGUgaW1hZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSB5IHRoZSB2ZXJ0aWNhbCBwb3NpdGlvbiB0byBibGl0IHRoZSBpbWFnZVxuICogQHBhcmFtIHtmdW5jdGlvbihFcnJvciwgSmltcCl9IGNiIChvcHRpb25hbCkgYSBjYWxsYmFjayBmb3Igd2hlbiBjb21wbGV0ZVxuICogQHJldHVybnMge0ppbXB9IHRoaXMgZm9yIGNoYWluaW5nIG9mIG1ldGhvZHNcbiAqL1xudmFyIF9kZWZhdWx0ID0gZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gIHJldHVybiB7XG4gICAgbWFzazogZnVuY3Rpb24gbWFzayhzcmMpIHtcbiAgICAgIHZhciB4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICAgICAgdmFyIHkgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDA7XG4gICAgICB2YXIgY2IgPSBhcmd1bWVudHMubGVuZ3RoID4gMyA/IGFyZ3VtZW50c1szXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKCEoc3JjIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgcmV0dXJuIF91dGlscy50aHJvd0Vycm9yLmNhbGwodGhpcywgXCJUaGUgc291cmNlIG11c3QgYmUgYSBKaW1wIGltYWdlXCIsIGNiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB4ICE9PSBcIm51bWJlclwiIHx8IHR5cGVvZiB5ICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBfdXRpbHMudGhyb3dFcnJvci5jYWxsKHRoaXMsIFwieCBhbmQgeSBtdXN0IGJlIG51bWJlcnNcIiwgY2IpO1xuICAgICAgfSAvLyByb3VuZCBpbnB1dFxuXG5cbiAgICAgIHggPSBNYXRoLnJvdW5kKHgpO1xuICAgICAgeSA9IE1hdGgucm91bmQoeSk7XG4gICAgICB2YXIgdyA9IHRoaXMuYml0bWFwLndpZHRoO1xuICAgICAgdmFyIGggPSB0aGlzLmJpdG1hcC5oZWlnaHQ7XG4gICAgICB2YXIgYmFzZUltYWdlID0gdGhpcztcbiAgICAgIHNyYy5zY2FuUXVpZXQoMCwgMCwgc3JjLmJpdG1hcC53aWR0aCwgc3JjLmJpdG1hcC5oZWlnaHQsIGZ1bmN0aW9uIChzeCwgc3ksIGlkeCkge1xuICAgICAgICB2YXIgZGVzdFggPSB4ICsgc3g7XG4gICAgICAgIHZhciBkZXN0WSA9IHkgKyBzeTtcblxuICAgICAgICBpZiAoZGVzdFggPj0gMCAmJiBkZXN0WSA+PSAwICYmIGRlc3RYIDwgdyAmJiBkZXN0WSA8IGgpIHtcbiAgICAgICAgICB2YXIgZHN0SWR4ID0gYmFzZUltYWdlLmdldFBpeGVsSW5kZXgoZGVzdFgsIGRlc3RZKTtcbiAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuYml0bWFwLmRhdGE7XG4gICAgICAgICAgdmFyIGF2ZyA9IChkYXRhW2lkeCArIDBdICsgZGF0YVtpZHggKyAxXSArIGRhdGFbaWR4ICsgMl0pIC8gMztcbiAgICAgICAgICBiYXNlSW1hZ2UuYml0bWFwLmRhdGFbZHN0SWR4ICsgM10gKj0gYXZnIC8gMjU1O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKCgwLCBfdXRpbHMuaXNOb2RlUGF0dGVybikoY2IpKSB7XG4gICAgICAgIGNiLmNhbGwodGhpcywgbnVsbCwgdGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl91dGlscyIsInJlcXVpcmUiLCJfZGVmYXVsdCIsIm1hc2siLCJzcmMiLCJ4IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwieSIsImNiIiwiY29uc3RydWN0b3IiLCJ0aHJvd0Vycm9yIiwiY2FsbCIsIk1hdGgiLCJyb3VuZCIsInciLCJiaXRtYXAiLCJ3aWR0aCIsImgiLCJoZWlnaHQiLCJiYXNlSW1hZ2UiLCJzY2FuUXVpZXQiLCJzeCIsInN5IiwiaWR4IiwiZGVzdFgiLCJkZXN0WSIsImRzdElkeCIsImdldFBpeGVsSW5kZXgiLCJkYXRhIiwiYXZnIiwiaXNOb2RlUGF0dGVybiIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-mask/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-normalize/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@jimp/plugin-normalize/dist/index.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\n/**\n * Get an image's histogram\n * @return {object} An object with an array of color occurrence counts for each channel (r,g,b)\n */ function histogram() {\n    var histogram = {\n        r: new Array(256).fill(0),\n        g: new Array(256).fill(0),\n        b: new Array(256).fill(0)\n    };\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(x, y, index) {\n        histogram.r[this.bitmap.data[index + 0]]++;\n        histogram.g[this.bitmap.data[index + 1]]++;\n        histogram.b[this.bitmap.data[index + 2]]++;\n    });\n    return histogram;\n}\n/**\n * Normalize values\n * @param  {integer} value Pixel channel value.\n * @param  {integer} min   Minimum value for channel\n * @param  {integer} max   Maximum value for channel\n * @return {integer} normalized values\n */ var _normalize = function normalize(value, min, max) {\n    return (value - min) * 255 / (max - min);\n};\nvar getBounds = function getBounds(histogramChannel) {\n    return [\n        histogramChannel.findIndex(function(value) {\n            return value > 0;\n        }),\n        255 - histogramChannel.slice().reverse().findIndex(function(value) {\n            return value > 0;\n        })\n    ];\n};\n/**\n * Normalizes the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */ var _default = function _default() {\n    return {\n        normalize: function normalize(cb) {\n            var h = histogram.call(this); // store bounds (minimum and maximum values)\n            var bounds = {\n                r: getBounds(h.r),\n                g: getBounds(h.g),\n                b: getBounds(h.b)\n            }; // apply value transformations\n            this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(x, y, idx) {\n                var r = this.bitmap.data[idx + 0];\n                var g = this.bitmap.data[idx + 1];\n                var b = this.bitmap.data[idx + 2];\n                this.bitmap.data[idx + 0] = _normalize(r, bounds.r[0], bounds.r[1]);\n                this.bitmap.data[idx + 1] = _normalize(g, bounds.g[0], bounds.g[1]);\n                this.bitmap.data[idx + 2] = _normalize(b, bounds.b[0], bounds.b[1]);\n            });\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        }\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLW5vcm1hbGl6ZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBa0IsR0FBRyxLQUFLO0FBRTFCLElBQUlFLFNBQVNDLG1CQUFPQSxDQUFDLG1FQUFhO0FBRWxDOzs7Q0FHQyxHQUNELFNBQVNDO0lBQ1AsSUFBSUEsWUFBWTtRQUNkQyxHQUFHLElBQUlDLE1BQU0sS0FBS0MsSUFBSSxDQUFDO1FBQ3ZCQyxHQUFHLElBQUlGLE1BQU0sS0FBS0MsSUFBSSxDQUFDO1FBQ3ZCRSxHQUFHLElBQUlILE1BQU0sS0FBS0MsSUFBSSxDQUFDO0lBQ3pCO0lBQ0EsSUFBSSxDQUFDRyxTQUFTLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxLQUFLLEVBQUUsSUFBSSxDQUFDRCxNQUFNLENBQUNFLE1BQU0sRUFBRSxTQUFVQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsS0FBSztRQUMvRVosVUFBVUMsQ0FBQyxDQUFDLElBQUksQ0FBQ00sTUFBTSxDQUFDTSxJQUFJLENBQUNELFFBQVEsRUFBRSxDQUFDO1FBQ3hDWixVQUFVSSxDQUFDLENBQUMsSUFBSSxDQUFDRyxNQUFNLENBQUNNLElBQUksQ0FBQ0QsUUFBUSxFQUFFLENBQUM7UUFDeENaLFVBQVVLLENBQUMsQ0FBQyxJQUFJLENBQUNFLE1BQU0sQ0FBQ00sSUFBSSxDQUFDRCxRQUFRLEVBQUUsQ0FBQztJQUMxQztJQUNBLE9BQU9aO0FBQ1Q7QUFDQTs7Ozs7O0NBTUMsR0FHRCxJQUFJYyxhQUFhLFNBQVNDLFVBQVVsQixLQUFLLEVBQUVtQixHQUFHLEVBQUVDLEdBQUc7SUFDakQsT0FBTyxDQUFDcEIsUUFBUW1CLEdBQUUsSUFBSyxNQUFPQyxDQUFBQSxNQUFNRCxHQUFFO0FBQ3hDO0FBRUEsSUFBSUUsWUFBWSxTQUFTQSxVQUFVQyxnQkFBZ0I7SUFDakQsT0FBTztRQUFDQSxpQkFBaUJDLFNBQVMsQ0FBQyxTQUFVdkIsS0FBSztZQUNoRCxPQUFPQSxRQUFRO1FBQ2pCO1FBQUksTUFBTXNCLGlCQUFpQkUsS0FBSyxHQUFHQyxPQUFPLEdBQUdGLFNBQVMsQ0FBQyxTQUFVdkIsS0FBSztZQUNwRSxPQUFPQSxRQUFRO1FBQ2pCO0tBQUc7QUFDTDtBQUNBOzs7O0NBSUMsR0FHRCxJQUFJMEIsV0FBVyxTQUFTQTtJQUN0QixPQUFPO1FBQ0xSLFdBQVcsU0FBU0EsVUFBVVMsRUFBRTtZQUM5QixJQUFJQyxJQUFJekIsVUFBVTBCLElBQUksQ0FBQyxJQUFJLEdBQUcsNENBQTRDO1lBRTFFLElBQUlDLFNBQVM7Z0JBQ1gxQixHQUFHaUIsVUFBVU8sRUFBRXhCLENBQUM7Z0JBQ2hCRyxHQUFHYyxVQUFVTyxFQUFFckIsQ0FBQztnQkFDaEJDLEdBQUdhLFVBQVVPLEVBQUVwQixDQUFDO1lBQ2xCLEdBQUcsOEJBQThCO1lBRWpDLElBQUksQ0FBQ0MsU0FBUyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLElBQUksQ0FBQ0QsTUFBTSxDQUFDRSxNQUFNLEVBQUUsU0FBVUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVpQixHQUFHO2dCQUM3RSxJQUFJM0IsSUFBSSxJQUFJLENBQUNNLE1BQU0sQ0FBQ00sSUFBSSxDQUFDZSxNQUFNLEVBQUU7Z0JBQ2pDLElBQUl4QixJQUFJLElBQUksQ0FBQ0csTUFBTSxDQUFDTSxJQUFJLENBQUNlLE1BQU0sRUFBRTtnQkFDakMsSUFBSXZCLElBQUksSUFBSSxDQUFDRSxNQUFNLENBQUNNLElBQUksQ0FBQ2UsTUFBTSxFQUFFO2dCQUNqQyxJQUFJLENBQUNyQixNQUFNLENBQUNNLElBQUksQ0FBQ2UsTUFBTSxFQUFFLEdBQUdkLFdBQVdiLEdBQUcwQixPQUFPMUIsQ0FBQyxDQUFDLEVBQUUsRUFBRTBCLE9BQU8xQixDQUFDLENBQUMsRUFBRTtnQkFDbEUsSUFBSSxDQUFDTSxNQUFNLENBQUNNLElBQUksQ0FBQ2UsTUFBTSxFQUFFLEdBQUdkLFdBQVdWLEdBQUd1QixPQUFPdkIsQ0FBQyxDQUFDLEVBQUUsRUFBRXVCLE9BQU92QixDQUFDLENBQUMsRUFBRTtnQkFDbEUsSUFBSSxDQUFDRyxNQUFNLENBQUNNLElBQUksQ0FBQ2UsTUFBTSxFQUFFLEdBQUdkLFdBQVdULEdBQUdzQixPQUFPdEIsQ0FBQyxDQUFDLEVBQUUsRUFBRXNCLE9BQU90QixDQUFDLENBQUMsRUFBRTtZQUNwRTtZQUVBLElBQUksQ0FBQyxHQUFHUCxPQUFPK0IsYUFBYSxFQUFFTCxLQUFLO2dCQUNqQ0EsR0FBR0UsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLElBQUk7WUFDMUI7WUFFQSxPQUFPLElBQUk7UUFDYjtJQUNGO0FBQ0Y7QUFFQTlCLGtCQUFrQixHQUFHMkI7QUFDckJPLE9BQU9sQyxPQUFPLEdBQUdBLFFBQVFtQyxPQUFPLEVBQ2hDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3FyLWNvZGUvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLW5vcm1hbGl6ZS9kaXN0L2luZGV4LmpzPzY5YmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAamltcC91dGlsc1wiKTtcblxuLyoqXG4gKiBHZXQgYW4gaW1hZ2UncyBoaXN0b2dyYW1cbiAqIEByZXR1cm4ge29iamVjdH0gQW4gb2JqZWN0IHdpdGggYW4gYXJyYXkgb2YgY29sb3Igb2NjdXJyZW5jZSBjb3VudHMgZm9yIGVhY2ggY2hhbm5lbCAocixnLGIpXG4gKi9cbmZ1bmN0aW9uIGhpc3RvZ3JhbSgpIHtcbiAgdmFyIGhpc3RvZ3JhbSA9IHtcbiAgICByOiBuZXcgQXJyYXkoMjU2KS5maWxsKDApLFxuICAgIGc6IG5ldyBBcnJheSgyNTYpLmZpbGwoMCksXG4gICAgYjogbmV3IEFycmF5KDI1NikuZmlsbCgwKVxuICB9O1xuICB0aGlzLnNjYW5RdWlldCgwLCAwLCB0aGlzLmJpdG1hcC53aWR0aCwgdGhpcy5iaXRtYXAuaGVpZ2h0LCBmdW5jdGlvbiAoeCwgeSwgaW5kZXgpIHtcbiAgICBoaXN0b2dyYW0uclt0aGlzLmJpdG1hcC5kYXRhW2luZGV4ICsgMF1dKys7XG4gICAgaGlzdG9ncmFtLmdbdGhpcy5iaXRtYXAuZGF0YVtpbmRleCArIDFdXSsrO1xuICAgIGhpc3RvZ3JhbS5iW3RoaXMuYml0bWFwLmRhdGFbaW5kZXggKyAyXV0rKztcbiAgfSk7XG4gIHJldHVybiBoaXN0b2dyYW07XG59XG4vKipcbiAqIE5vcm1hbGl6ZSB2YWx1ZXNcbiAqIEBwYXJhbSAge2ludGVnZXJ9IHZhbHVlIFBpeGVsIGNoYW5uZWwgdmFsdWUuXG4gKiBAcGFyYW0gIHtpbnRlZ2VyfSBtaW4gICBNaW5pbXVtIHZhbHVlIGZvciBjaGFubmVsXG4gKiBAcGFyYW0gIHtpbnRlZ2VyfSBtYXggICBNYXhpbXVtIHZhbHVlIGZvciBjaGFubmVsXG4gKiBAcmV0dXJuIHtpbnRlZ2VyfSBub3JtYWxpemVkIHZhbHVlc1xuICovXG5cblxudmFyIF9ub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUodmFsdWUsIG1pbiwgbWF4KSB7XG4gIHJldHVybiAodmFsdWUgLSBtaW4pICogMjU1IC8gKG1heCAtIG1pbik7XG59O1xuXG52YXIgZ2V0Qm91bmRzID0gZnVuY3Rpb24gZ2V0Qm91bmRzKGhpc3RvZ3JhbUNoYW5uZWwpIHtcbiAgcmV0dXJuIFtoaXN0b2dyYW1DaGFubmVsLmZpbmRJbmRleChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPiAwO1xuICB9KSwgMjU1IC0gaGlzdG9ncmFtQ2hhbm5lbC5zbGljZSgpLnJldmVyc2UoKS5maW5kSW5kZXgoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID4gMDtcbiAgfSldO1xufTtcbi8qKlxuICogTm9ybWFsaXplcyB0aGUgaW1hZ2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIEppbXApfSBjYiAob3B0aW9uYWwpIGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGVcbiAqIEByZXR1cm5zIHtKaW1wfSB0aGlzIGZvciBjaGFpbmluZyBvZiBtZXRob2RzXG4gKi9cblxuXG52YXIgX2RlZmF1bHQgPSBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgcmV0dXJuIHtcbiAgICBub3JtYWxpemU6IGZ1bmN0aW9uIG5vcm1hbGl6ZShjYikge1xuICAgICAgdmFyIGggPSBoaXN0b2dyYW0uY2FsbCh0aGlzKTsgLy8gc3RvcmUgYm91bmRzIChtaW5pbXVtIGFuZCBtYXhpbXVtIHZhbHVlcylcblxuICAgICAgdmFyIGJvdW5kcyA9IHtcbiAgICAgICAgcjogZ2V0Qm91bmRzKGguciksXG4gICAgICAgIGc6IGdldEJvdW5kcyhoLmcpLFxuICAgICAgICBiOiBnZXRCb3VuZHMoaC5iKVxuICAgICAgfTsgLy8gYXBwbHkgdmFsdWUgdHJhbnNmb3JtYXRpb25zXG5cbiAgICAgIHRoaXMuc2NhblF1aWV0KDAsIDAsIHRoaXMuYml0bWFwLndpZHRoLCB0aGlzLmJpdG1hcC5oZWlnaHQsIGZ1bmN0aW9uICh4LCB5LCBpZHgpIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLmJpdG1hcC5kYXRhW2lkeCArIDBdO1xuICAgICAgICB2YXIgZyA9IHRoaXMuYml0bWFwLmRhdGFbaWR4ICsgMV07XG4gICAgICAgIHZhciBiID0gdGhpcy5iaXRtYXAuZGF0YVtpZHggKyAyXTtcbiAgICAgICAgdGhpcy5iaXRtYXAuZGF0YVtpZHggKyAwXSA9IF9ub3JtYWxpemUociwgYm91bmRzLnJbMF0sIGJvdW5kcy5yWzFdKTtcbiAgICAgICAgdGhpcy5iaXRtYXAuZGF0YVtpZHggKyAxXSA9IF9ub3JtYWxpemUoZywgYm91bmRzLmdbMF0sIGJvdW5kcy5nWzFdKTtcbiAgICAgICAgdGhpcy5iaXRtYXAuZGF0YVtpZHggKyAyXSA9IF9ub3JtYWxpemUoYiwgYm91bmRzLmJbMF0sIGJvdW5kcy5iWzFdKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoKDAsIF91dGlscy5pc05vZGVQYXR0ZXJuKShjYikpIHtcbiAgICAgICAgY2IuY2FsbCh0aGlzLCBudWxsLCB0aGlzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3V0aWxzIiwicmVxdWlyZSIsImhpc3RvZ3JhbSIsInIiLCJBcnJheSIsImZpbGwiLCJnIiwiYiIsInNjYW5RdWlldCIsImJpdG1hcCIsIndpZHRoIiwiaGVpZ2h0IiwieCIsInkiLCJpbmRleCIsImRhdGEiLCJfbm9ybWFsaXplIiwibm9ybWFsaXplIiwibWluIiwibWF4IiwiZ2V0Qm91bmRzIiwiaGlzdG9ncmFtQ2hhbm5lbCIsImZpbmRJbmRleCIsInNsaWNlIiwicmV2ZXJzZSIsIl9kZWZhdWx0IiwiY2IiLCJoIiwiY2FsbCIsImJvdW5kcyIsImlkeCIsImlzTm9kZVBhdHRlcm4iLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-normalize/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-print/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@jimp/plugin-print/dist/index.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ \"(ssr)/./node_modules/@babel/runtime/helpers/typeof.js\"));\nvar _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/toConsumableArray.js\"));\nvar _path = _interopRequireDefault(__webpack_require__(/*! path */ \"path\"));\nvar _loadBmfont = _interopRequireDefault(__webpack_require__(/*! load-bmfont */ \"(ssr)/./node_modules/load-bmfont/index.js\"));\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\nvar _measureText = __webpack_require__(/*! ./measure-text */ \"(ssr)/./node_modules/@jimp/plugin-print/dist/measure-text.js\");\nfunction xOffsetBasedOnAlignment(constants, font, line, maxWidth, alignment) {\n    if (alignment === constants.HORIZONTAL_ALIGN_LEFT) {\n        return 0;\n    }\n    if (alignment === constants.HORIZONTAL_ALIGN_CENTER) {\n        return (maxWidth - (0, _measureText.measureText)(font, line)) / 2;\n    }\n    return maxWidth - (0, _measureText.measureText)(font, line);\n}\nfunction drawCharacter(image, font, x, y, _char) {\n    if (_char.width > 0 && _char.height > 0) {\n        var characterPage = font.pages[_char.page];\n        image.blit(characterPage, x + _char.xoffset, y + _char.yoffset, _char.x, _char.y, _char.width, _char.height);\n    }\n    return image;\n}\nfunction printText(font, x, y, text, defaultCharWidth) {\n    for(var i = 0; i < text.length; i++){\n        var _char2 = void 0;\n        if (font.chars[text[i]]) {\n            _char2 = text[i];\n        } else if (/\\s/.test(text[i])) {\n            _char2 = \"\";\n        } else {\n            _char2 = \"?\";\n        }\n        var fontChar = font.chars[_char2] || {};\n        var fontKerning = font.kernings[_char2];\n        drawCharacter(this, font, x, y, fontChar || {});\n        var kerning = fontKerning && fontKerning[text[i + 1]] ? fontKerning[text[i + 1]] : 0;\n        x += kerning + (fontChar.xadvance || defaultCharWidth);\n    }\n}\nfunction splitLines(font, text, maxWidth) {\n    var words = text.split(\" \");\n    var lines = [];\n    var currentLine = [];\n    var longestLine = 0;\n    words.forEach(function(word) {\n        var line = [].concat((0, _toConsumableArray2[\"default\"])(currentLine), [\n            word\n        ]).join(\" \");\n        var length = (0, _measureText.measureText)(font, line);\n        if (length <= maxWidth) {\n            if (length > longestLine) {\n                longestLine = length;\n            }\n            currentLine.push(word);\n        } else {\n            lines.push(currentLine);\n            currentLine = [\n                word\n            ];\n        }\n    });\n    lines.push(currentLine);\n    return {\n        lines: lines,\n        longestLine: longestLine\n    };\n}\nfunction loadPages(Jimp, dir, pages) {\n    var newPages = pages.map(function(page) {\n        return Jimp.read(dir + \"/\" + page);\n    });\n    return Promise.all(newPages);\n}\nvar dir = process.env.DIRNAME || \"\".concat(__dirname, \"/../\");\nvar _default = function _default() {\n    return {\n        constants: {\n            measureText: _measureText.measureText,\n            measureTextHeight: _measureText.measureTextHeight,\n            FONT_SANS_8_BLACK: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-8-black/open-sans-8-black.fnt\"),\n            FONT_SANS_10_BLACK: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-10-black/open-sans-10-black.fnt\"),\n            FONT_SANS_12_BLACK: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-12-black/open-sans-12-black.fnt\"),\n            FONT_SANS_14_BLACK: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-14-black/open-sans-14-black.fnt\"),\n            FONT_SANS_16_BLACK: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-16-black/open-sans-16-black.fnt\"),\n            FONT_SANS_32_BLACK: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-32-black/open-sans-32-black.fnt\"),\n            FONT_SANS_64_BLACK: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-64-black/open-sans-64-black.fnt\"),\n            FONT_SANS_128_BLACK: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-128-black/open-sans-128-black.fnt\"),\n            FONT_SANS_8_WHITE: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-8-white/open-sans-8-white.fnt\"),\n            FONT_SANS_16_WHITE: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-16-white/open-sans-16-white.fnt\"),\n            FONT_SANS_32_WHITE: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-32-white/open-sans-32-white.fnt\"),\n            FONT_SANS_64_WHITE: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-64-white/open-sans-64-white.fnt\"),\n            FONT_SANS_128_WHITE: _path[\"default\"].join(dir, \"fonts/open-sans/open-sans-128-white/open-sans-128-white.fnt\"),\n            /**\n       * Loads a bitmap font from a file\n       * @param {string} file the file path of a .fnt file\n       * @param {function(Error, Jimp)} cb (optional) a function to call when the font is loaded\n       * @returns {Promise} a promise\n       */ loadFont: function loadFont(file, cb) {\n                var _this = this;\n                if (typeof file !== \"string\") return _utils.throwError.call(this, \"file must be a string\", cb);\n                return new Promise(function(resolve, reject) {\n                    cb = cb || function(err, font) {\n                        if (err) reject(err);\n                        else resolve(font);\n                    };\n                    (0, _loadBmfont[\"default\"])(file, function(err, font) {\n                        var chars = {};\n                        var kernings = {};\n                        if (err) {\n                            return _utils.throwError.call(_this, err, cb);\n                        }\n                        for(var i = 0; i < font.chars.length; i++){\n                            chars[String.fromCharCode(font.chars[i].id)] = font.chars[i];\n                        }\n                        for(var _i = 0; _i < font.kernings.length; _i++){\n                            var firstString = String.fromCharCode(font.kernings[_i].first);\n                            kernings[firstString] = kernings[firstString] || {};\n                            kernings[firstString][String.fromCharCode(font.kernings[_i].second)] = font.kernings[_i].amount;\n                        }\n                        loadPages(_this, _path[\"default\"].dirname(file), font.pages).then(function(pages) {\n                            cb(null, {\n                                chars: chars,\n                                kernings: kernings,\n                                pages: pages,\n                                common: font.common,\n                                info: font.info\n                            });\n                        });\n                    });\n                });\n            }\n        },\n        \"class\": {\n            /**\n       * Draws a text on a image on a given boundary\n       * @param {Jimp} font a bitmap font loaded from `Jimp.loadFont` command\n       * @param {number} x the x position to start drawing the text\n       * @param {number} y the y position to start drawing the text\n       * @param {any} text the text to draw (string or object with `text`, `alignmentX`, and/or `alignmentY`)\n       * @param {number} maxWidth (optional) the boundary width to draw in\n       * @param {number} maxHeight (optional) the boundary height to draw in\n       * @param {function(Error, Jimp)} cb (optional) a function to call when the text is written\n       * @returns {Jimp} this for chaining of methods\n       */ print: function print(font, x, y, text, maxWidth, maxHeight, cb) {\n                var _this2 = this;\n                if (typeof maxWidth === \"function\" && typeof cb === \"undefined\") {\n                    cb = maxWidth;\n                    maxWidth = Infinity;\n                }\n                if (typeof maxWidth === \"undefined\") {\n                    maxWidth = Infinity;\n                }\n                if (typeof maxHeight === \"function\" && typeof cb === \"undefined\") {\n                    cb = maxHeight;\n                    maxHeight = Infinity;\n                }\n                if (typeof maxHeight === \"undefined\") {\n                    maxHeight = Infinity;\n                }\n                if ((0, _typeof2[\"default\"])(font) !== \"object\") {\n                    return _utils.throwError.call(this, \"font must be a Jimp loadFont\", cb);\n                }\n                if (typeof x !== \"number\" || typeof y !== \"number\" || typeof maxWidth !== \"number\") {\n                    return _utils.throwError.call(this, \"x, y and maxWidth must be numbers\", cb);\n                }\n                if (typeof maxWidth !== \"number\") {\n                    return _utils.throwError.call(this, \"maxWidth must be a number\", cb);\n                }\n                if (typeof maxHeight !== \"number\") {\n                    return _utils.throwError.call(this, \"maxHeight must be a number\", cb);\n                }\n                var alignmentX;\n                var alignmentY;\n                if ((0, _typeof2[\"default\"])(text) === \"object\" && text.text !== null && text.text !== undefined) {\n                    alignmentX = text.alignmentX || this.constructor.HORIZONTAL_ALIGN_LEFT;\n                    alignmentY = text.alignmentY || this.constructor.VERTICAL_ALIGN_TOP;\n                    var _text = text;\n                    text = _text.text;\n                } else {\n                    alignmentX = this.constructor.HORIZONTAL_ALIGN_LEFT;\n                    alignmentY = this.constructor.VERTICAL_ALIGN_TOP;\n                    text = text.toString();\n                }\n                if (maxHeight !== Infinity && alignmentY === this.constructor.VERTICAL_ALIGN_BOTTOM) {\n                    y += maxHeight - (0, _measureText.measureTextHeight)(font, text, maxWidth);\n                } else if (maxHeight !== Infinity && alignmentY === this.constructor.VERTICAL_ALIGN_MIDDLE) {\n                    y += maxHeight / 2 - (0, _measureText.measureTextHeight)(font, text, maxWidth) / 2;\n                }\n                var defaultCharWidth = Object.entries(font.chars)[0][1].xadvance;\n                var _splitLines = splitLines(font, text, maxWidth), lines = _splitLines.lines, longestLine = _splitLines.longestLine;\n                lines.forEach(function(line) {\n                    var lineString = line.join(\" \");\n                    var alignmentWidth = xOffsetBasedOnAlignment(_this2.constructor, font, lineString, maxWidth, alignmentX);\n                    printText.call(_this2, font, x + alignmentWidth, y, lineString, defaultCharWidth);\n                    y += font.common.lineHeight;\n                });\n                if ((0, _utils.isNodePattern)(cb)) {\n                    cb.call(this, null, this, {\n                        x: x + longestLine,\n                        y: y\n                    });\n                }\n                return this;\n            }\n        }\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-print/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-print/dist/measure-text.js":
/*!**************************************************************!*\
  !*** ./node_modules/@jimp/plugin-print/dist/measure-text.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.measureText = measureText;\nexports.measureTextHeight = measureTextHeight;\nfunction measureText(font, text) {\n    var x = 0;\n    for(var i = 0; i < text.length; i++){\n        if (font.chars[text[i]]) {\n            var kerning = font.kernings[text[i]] && font.kernings[text[i]][text[i + 1]] ? font.kernings[text[i]][text[i + 1]] : 0;\n            x += (font.chars[text[i]].xadvance || 0) + kerning;\n        }\n    }\n    return x;\n}\nfunction measureTextHeight(font, text, maxWidth) {\n    var words = text.split(\" \");\n    var line = \"\";\n    var textTotalHeight = font.common.lineHeight;\n    for(var n = 0; n < words.length; n++){\n        var testLine = line + words[n] + \" \";\n        var testWidth = measureText(font, testLine);\n        if (testWidth > maxWidth && n > 0) {\n            textTotalHeight += font.common.lineHeight;\n            line = words[n] + \" \";\n        } else {\n            line = testLine;\n        }\n    }\n    return textTotalHeight;\n} //# sourceMappingURL=measure-text.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLXByaW50L2Rpc3QvbWVhc3VyZS10ZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxtQkFBbUIsR0FBR0U7QUFDdEJGLHlCQUF5QixHQUFHRztBQUU1QixTQUFTRCxZQUFZRSxJQUFJLEVBQUVDLElBQUk7SUFDN0IsSUFBSUMsSUFBSTtJQUVSLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRixLQUFLRyxNQUFNLEVBQUVELElBQUs7UUFDcEMsSUFBSUgsS0FBS0ssS0FBSyxDQUFDSixJQUFJLENBQUNFLEVBQUUsQ0FBQyxFQUFFO1lBQ3ZCLElBQUlHLFVBQVVOLEtBQUtPLFFBQVEsQ0FBQ04sSUFBSSxDQUFDRSxFQUFFLENBQUMsSUFBSUgsS0FBS08sUUFBUSxDQUFDTixJQUFJLENBQUNFLEVBQUUsQ0FBQyxDQUFDRixJQUFJLENBQUNFLElBQUksRUFBRSxDQUFDLEdBQUdILEtBQUtPLFFBQVEsQ0FBQ04sSUFBSSxDQUFDRSxFQUFFLENBQUMsQ0FBQ0YsSUFBSSxDQUFDRSxJQUFJLEVBQUUsQ0FBQyxHQUFHO1lBQ3BIRCxLQUFLLENBQUNGLEtBQUtLLEtBQUssQ0FBQ0osSUFBSSxDQUFDRSxFQUFFLENBQUMsQ0FBQ0ssUUFBUSxJQUFJLEtBQUtGO1FBQzdDO0lBQ0Y7SUFFQSxPQUFPSjtBQUNUO0FBRUEsU0FBU0gsa0JBQWtCQyxJQUFJLEVBQUVDLElBQUksRUFBRVEsUUFBUTtJQUM3QyxJQUFJQyxRQUFRVCxLQUFLVSxLQUFLLENBQUM7SUFDdkIsSUFBSUMsT0FBTztJQUNYLElBQUlDLGtCQUFrQmIsS0FBS2MsTUFBTSxDQUFDQyxVQUFVO0lBRTVDLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJTixNQUFNTixNQUFNLEVBQUVZLElBQUs7UUFDckMsSUFBSUMsV0FBV0wsT0FBT0YsS0FBSyxDQUFDTSxFQUFFLEdBQUc7UUFDakMsSUFBSUUsWUFBWXBCLFlBQVlFLE1BQU1pQjtRQUVsQyxJQUFJQyxZQUFZVCxZQUFZTyxJQUFJLEdBQUc7WUFDakNILG1CQUFtQmIsS0FBS2MsTUFBTSxDQUFDQyxVQUFVO1lBQ3pDSCxPQUFPRixLQUFLLENBQUNNLEVBQUUsR0FBRztRQUNwQixPQUFPO1lBQ0xKLE9BQU9LO1FBQ1Q7SUFDRjtJQUVBLE9BQU9KO0FBQ1QsRUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xci1jb2RlLy4vbm9kZV9tb2R1bGVzL0BqaW1wL3BsdWdpbi1wcmludC9kaXN0L21lYXN1cmUtdGV4dC5qcz83MWFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5tZWFzdXJlVGV4dCA9IG1lYXN1cmVUZXh0O1xuZXhwb3J0cy5tZWFzdXJlVGV4dEhlaWdodCA9IG1lYXN1cmVUZXh0SGVpZ2h0O1xuXG5mdW5jdGlvbiBtZWFzdXJlVGV4dChmb250LCB0ZXh0KSB7XG4gIHZhciB4ID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZm9udC5jaGFyc1t0ZXh0W2ldXSkge1xuICAgICAgdmFyIGtlcm5pbmcgPSBmb250Lmtlcm5pbmdzW3RleHRbaV1dICYmIGZvbnQua2VybmluZ3NbdGV4dFtpXV1bdGV4dFtpICsgMV1dID8gZm9udC5rZXJuaW5nc1t0ZXh0W2ldXVt0ZXh0W2kgKyAxXV0gOiAwO1xuICAgICAgeCArPSAoZm9udC5jaGFyc1t0ZXh0W2ldXS54YWR2YW5jZSB8fCAwKSArIGtlcm5pbmc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHg7XG59XG5cbmZ1bmN0aW9uIG1lYXN1cmVUZXh0SGVpZ2h0KGZvbnQsIHRleHQsIG1heFdpZHRoKSB7XG4gIHZhciB3b3JkcyA9IHRleHQuc3BsaXQoXCIgXCIpO1xuICB2YXIgbGluZSA9IFwiXCI7XG4gIHZhciB0ZXh0VG90YWxIZWlnaHQgPSBmb250LmNvbW1vbi5saW5lSGVpZ2h0O1xuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwgd29yZHMubGVuZ3RoOyBuKyspIHtcbiAgICB2YXIgdGVzdExpbmUgPSBsaW5lICsgd29yZHNbbl0gKyBcIiBcIjtcbiAgICB2YXIgdGVzdFdpZHRoID0gbWVhc3VyZVRleHQoZm9udCwgdGVzdExpbmUpO1xuXG4gICAgaWYgKHRlc3RXaWR0aCA+IG1heFdpZHRoICYmIG4gPiAwKSB7XG4gICAgICB0ZXh0VG90YWxIZWlnaHQgKz0gZm9udC5jb21tb24ubGluZUhlaWdodDtcbiAgICAgIGxpbmUgPSB3b3Jkc1tuXSArIFwiIFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5lID0gdGVzdExpbmU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRleHRUb3RhbEhlaWdodDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lYXN1cmUtdGV4dC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtZWFzdXJlVGV4dCIsIm1lYXN1cmVUZXh0SGVpZ2h0IiwiZm9udCIsInRleHQiLCJ4IiwiaSIsImxlbmd0aCIsImNoYXJzIiwia2VybmluZyIsImtlcm5pbmdzIiwieGFkdmFuY2UiLCJtYXhXaWR0aCIsIndvcmRzIiwic3BsaXQiLCJsaW5lIiwidGV4dFRvdGFsSGVpZ2h0IiwiY29tbW9uIiwibGluZUhlaWdodCIsIm4iLCJ0ZXN0TGluZSIsInRlc3RXaWR0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-print/dist/measure-text.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-resize/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@jimp/plugin-resize/dist/index.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\nvar _resize = _interopRequireDefault(__webpack_require__(/*! ./modules/resize */ \"(ssr)/./node_modules/@jimp/plugin-resize/dist/modules/resize.js\"));\nvar _resize2 = _interopRequireDefault(__webpack_require__(/*! ./modules/resize2 */ \"(ssr)/./node_modules/@jimp/plugin-resize/dist/modules/resize2.js\"));\nvar _default = function _default() {\n    return {\n        constants: {\n            RESIZE_NEAREST_NEIGHBOR: \"nearestNeighbor\",\n            RESIZE_BILINEAR: \"bilinearInterpolation\",\n            RESIZE_BICUBIC: \"bicubicInterpolation\",\n            RESIZE_HERMITE: \"hermiteInterpolation\",\n            RESIZE_BEZIER: \"bezierInterpolation\"\n        },\n        \"class\": {\n            /**\n       * Resizes the image to a set width and height using a 2-pass bilinear algorithm\n       * @param {number} w the width to resize the image to (or Jimp.AUTO)\n       * @param {number} h the height to resize the image to (or Jimp.AUTO)\n       * @param {string} mode (optional) a scaling method (e.g. Jimp.RESIZE_BEZIER)\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */ resize: function resize(w, h, mode, cb) {\n                if (typeof w !== \"number\" || typeof h !== \"number\") {\n                    return _utils.throwError.call(this, \"w and h must be numbers\", cb);\n                }\n                if (typeof mode === \"function\" && typeof cb === \"undefined\") {\n                    cb = mode;\n                    mode = null;\n                }\n                if (w === this.constructor.AUTO && h === this.constructor.AUTO) {\n                    return _utils.throwError.call(this, \"w and h cannot both be set to auto\", cb);\n                }\n                if (w === this.constructor.AUTO) {\n                    w = this.bitmap.width * (h / this.bitmap.height);\n                }\n                if (h === this.constructor.AUTO) {\n                    h = this.bitmap.height * (w / this.bitmap.width);\n                }\n                if (w < 0 || h < 0) {\n                    return _utils.throwError.call(this, \"w and h must be positive numbers\", cb);\n                } // round inputs\n                w = Math.round(w);\n                h = Math.round(h);\n                if (typeof _resize2[\"default\"][mode] === \"function\") {\n                    var dst = {\n                        data: Buffer.alloc(w * h * 4),\n                        width: w,\n                        height: h\n                    };\n                    _resize2[\"default\"][mode](this.bitmap, dst);\n                    this.bitmap = dst;\n                } else {\n                    var image = this;\n                    var resize = new _resize[\"default\"](this.bitmap.width, this.bitmap.height, w, h, true, true, function(buffer) {\n                        image.bitmap.data = Buffer.from(buffer);\n                        image.bitmap.width = w;\n                        image.bitmap.height = h;\n                    });\n                    resize.resize(this.bitmap.data);\n                }\n                if ((0, _utils.isNodePattern)(cb)) {\n                    cb.call(this, null, this);\n                }\n                return this;\n            }\n        }\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLXJlc2l6ZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsSUFBSUEseUJBQXlCQyxtQkFBT0EsQ0FBQywwSEFBOEM7QUFFbkZDLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBa0IsR0FBRyxLQUFLO0FBRTFCLElBQUlFLFNBQVNMLG1CQUFPQSxDQUFDLG1FQUFhO0FBRWxDLElBQUlNLFVBQVVQLHVCQUF1QkMsbUJBQU9BLENBQUMseUZBQWtCO0FBRS9ELElBQUlPLFdBQVdSLHVCQUF1QkMsbUJBQU9BLENBQUMsMkZBQW1CO0FBRWpFLElBQUlRLFdBQVcsU0FBU0E7SUFDdEIsT0FBTztRQUNMQyxXQUFXO1lBQ1RDLHlCQUF5QjtZQUN6QkMsaUJBQWlCO1lBQ2pCQyxnQkFBZ0I7WUFDaEJDLGdCQUFnQjtZQUNoQkMsZUFBZTtRQUNqQjtRQUNBLFNBQVM7WUFDUDs7Ozs7OztPQU9DLEdBQ0RDLFFBQVEsU0FBU0EsT0FBT0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLElBQUksRUFBRUMsRUFBRTtnQkFDcEMsSUFBSSxPQUFPSCxNQUFNLFlBQVksT0FBT0MsTUFBTSxVQUFVO29CQUNsRCxPQUFPWixPQUFPZSxVQUFVLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUUsMkJBQTJCRjtnQkFDakU7Z0JBRUEsSUFBSSxPQUFPRCxTQUFTLGNBQWMsT0FBT0MsT0FBTyxhQUFhO29CQUMzREEsS0FBS0Q7b0JBQ0xBLE9BQU87Z0JBQ1Q7Z0JBRUEsSUFBSUYsTUFBTSxJQUFJLENBQUNNLFdBQVcsQ0FBQ0MsSUFBSSxJQUFJTixNQUFNLElBQUksQ0FBQ0ssV0FBVyxDQUFDQyxJQUFJLEVBQUU7b0JBQzlELE9BQU9sQixPQUFPZSxVQUFVLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUUsc0NBQXNDRjtnQkFDNUU7Z0JBRUEsSUFBSUgsTUFBTSxJQUFJLENBQUNNLFdBQVcsQ0FBQ0MsSUFBSSxFQUFFO29CQUMvQlAsSUFBSSxJQUFJLENBQUNRLE1BQU0sQ0FBQ0MsS0FBSyxHQUFJUixDQUFBQSxJQUFJLElBQUksQ0FBQ08sTUFBTSxDQUFDRSxNQUFNO2dCQUNqRDtnQkFFQSxJQUFJVCxNQUFNLElBQUksQ0FBQ0ssV0FBVyxDQUFDQyxJQUFJLEVBQUU7b0JBQy9CTixJQUFJLElBQUksQ0FBQ08sTUFBTSxDQUFDRSxNQUFNLEdBQUlWLENBQUFBLElBQUksSUFBSSxDQUFDUSxNQUFNLENBQUNDLEtBQUs7Z0JBQ2pEO2dCQUVBLElBQUlULElBQUksS0FBS0MsSUFBSSxHQUFHO29CQUNsQixPQUFPWixPQUFPZSxVQUFVLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUUsb0NBQW9DRjtnQkFDMUUsRUFBRSxlQUFlO2dCQUdqQkgsSUFBSVcsS0FBS0MsS0FBSyxDQUFDWjtnQkFDZkMsSUFBSVUsS0FBS0MsS0FBSyxDQUFDWDtnQkFFZixJQUFJLE9BQU9WLFFBQVEsQ0FBQyxVQUFVLENBQUNXLEtBQUssS0FBSyxZQUFZO29CQUNuRCxJQUFJVyxNQUFNO3dCQUNSQyxNQUFNQyxPQUFPQyxLQUFLLENBQUNoQixJQUFJQyxJQUFJO3dCQUMzQlEsT0FBT1Q7d0JBQ1BVLFFBQVFUO29CQUNWO29CQUVBVixRQUFRLENBQUMsVUFBVSxDQUFDVyxLQUFLLENBQUMsSUFBSSxDQUFDTSxNQUFNLEVBQUVLO29CQUV2QyxJQUFJLENBQUNMLE1BQU0sR0FBR0s7Z0JBQ2hCLE9BQU87b0JBQ0wsSUFBSUksUUFBUSxJQUFJO29CQUNoQixJQUFJbEIsU0FBUyxJQUFJVCxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQ2tCLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLElBQUksQ0FBQ0QsTUFBTSxDQUFDRSxNQUFNLEVBQUVWLEdBQUdDLEdBQUcsTUFBTSxNQUFNLFNBQVVpQixNQUFNO3dCQUMzR0QsTUFBTVQsTUFBTSxDQUFDTSxJQUFJLEdBQUdDLE9BQU9JLElBQUksQ0FBQ0Q7d0JBQ2hDRCxNQUFNVCxNQUFNLENBQUNDLEtBQUssR0FBR1Q7d0JBQ3JCaUIsTUFBTVQsTUFBTSxDQUFDRSxNQUFNLEdBQUdUO29CQUN4QjtvQkFDQUYsT0FBT0EsTUFBTSxDQUFDLElBQUksQ0FBQ1MsTUFBTSxDQUFDTSxJQUFJO2dCQUNoQztnQkFFQSxJQUFJLENBQUMsR0FBR3pCLE9BQU8rQixhQUFhLEVBQUVqQixLQUFLO29CQUNqQ0EsR0FBR0UsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLElBQUk7Z0JBQzFCO2dCQUVBLE9BQU8sSUFBSTtZQUNiO1FBQ0Y7SUFDRjtBQUNGO0FBRUFsQixrQkFBa0IsR0FBR0s7QUFDckI2QixPQUFPbEMsT0FBTyxHQUFHQSxRQUFRbUMsT0FBTyxFQUNoQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xci1jb2RlLy4vbm9kZV9tb2R1bGVzL0BqaW1wL3BsdWdpbi1yZXNpemUvZGlzdC9pbmRleC5qcz85ODgyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBqaW1wL3V0aWxzXCIpO1xuXG52YXIgX3Jlc2l6ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbW9kdWxlcy9yZXNpemVcIikpO1xuXG52YXIgX3Jlc2l6ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL21vZHVsZXMvcmVzaXplMlwiKSk7XG5cbnZhciBfZGVmYXVsdCA9IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICByZXR1cm4ge1xuICAgIGNvbnN0YW50czoge1xuICAgICAgUkVTSVpFX05FQVJFU1RfTkVJR0hCT1I6IFwibmVhcmVzdE5laWdoYm9yXCIsXG4gICAgICBSRVNJWkVfQklMSU5FQVI6IFwiYmlsaW5lYXJJbnRlcnBvbGF0aW9uXCIsXG4gICAgICBSRVNJWkVfQklDVUJJQzogXCJiaWN1YmljSW50ZXJwb2xhdGlvblwiLFxuICAgICAgUkVTSVpFX0hFUk1JVEU6IFwiaGVybWl0ZUludGVycG9sYXRpb25cIixcbiAgICAgIFJFU0laRV9CRVpJRVI6IFwiYmV6aWVySW50ZXJwb2xhdGlvblwiXG4gICAgfSxcbiAgICBcImNsYXNzXCI6IHtcbiAgICAgIC8qKlxuICAgICAgICogUmVzaXplcyB0aGUgaW1hZ2UgdG8gYSBzZXQgd2lkdGggYW5kIGhlaWdodCB1c2luZyBhIDItcGFzcyBiaWxpbmVhciBhbGdvcml0aG1cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3IHRoZSB3aWR0aCB0byByZXNpemUgdGhlIGltYWdlIHRvIChvciBKaW1wLkFVVE8pXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gaCB0aGUgaGVpZ2h0IHRvIHJlc2l6ZSB0aGUgaW1hZ2UgdG8gKG9yIEppbXAuQVVUTylcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlIChvcHRpb25hbCkgYSBzY2FsaW5nIG1ldGhvZCAoZS5nLiBKaW1wLlJFU0laRV9CRVpJRVIpXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEVycm9yLCBKaW1wKX0gY2IgKG9wdGlvbmFsKSBhIGNhbGxiYWNrIGZvciB3aGVuIGNvbXBsZXRlXG4gICAgICAgKiBAcmV0dXJucyB7SmltcH0gdGhpcyBmb3IgY2hhaW5pbmcgb2YgbWV0aG9kc1xuICAgICAgICovXG4gICAgICByZXNpemU6IGZ1bmN0aW9uIHJlc2l6ZSh3LCBoLCBtb2RlLCBjYikge1xuICAgICAgICBpZiAodHlwZW9mIHcgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIGggIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICByZXR1cm4gX3V0aWxzLnRocm93RXJyb3IuY2FsbCh0aGlzLCBcIncgYW5kIGggbXVzdCBiZSBudW1iZXJzXCIsIGNiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgbW9kZSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBjYiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGNiID0gbW9kZTtcbiAgICAgICAgICBtb2RlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3ID09PSB0aGlzLmNvbnN0cnVjdG9yLkFVVE8gJiYgaCA9PT0gdGhpcy5jb25zdHJ1Y3Rvci5BVVRPKSB7XG4gICAgICAgICAgcmV0dXJuIF91dGlscy50aHJvd0Vycm9yLmNhbGwodGhpcywgXCJ3IGFuZCBoIGNhbm5vdCBib3RoIGJlIHNldCB0byBhdXRvXCIsIGNiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3ID09PSB0aGlzLmNvbnN0cnVjdG9yLkFVVE8pIHtcbiAgICAgICAgICB3ID0gdGhpcy5iaXRtYXAud2lkdGggKiAoaCAvIHRoaXMuYml0bWFwLmhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaCA9PT0gdGhpcy5jb25zdHJ1Y3Rvci5BVVRPKSB7XG4gICAgICAgICAgaCA9IHRoaXMuYml0bWFwLmhlaWdodCAqICh3IC8gdGhpcy5iaXRtYXAud2lkdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHcgPCAwIHx8IGggPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIF91dGlscy50aHJvd0Vycm9yLmNhbGwodGhpcywgXCJ3IGFuZCBoIG11c3QgYmUgcG9zaXRpdmUgbnVtYmVyc1wiLCBjYik7XG4gICAgICAgIH0gLy8gcm91bmQgaW5wdXRzXG5cblxuICAgICAgICB3ID0gTWF0aC5yb3VuZCh3KTtcbiAgICAgICAgaCA9IE1hdGgucm91bmQoaCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBfcmVzaXplMltcImRlZmF1bHRcIl1bbW9kZV0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHZhciBkc3QgPSB7XG4gICAgICAgICAgICBkYXRhOiBCdWZmZXIuYWxsb2ModyAqIGggKiA0KSxcbiAgICAgICAgICAgIHdpZHRoOiB3LFxuICAgICAgICAgICAgaGVpZ2h0OiBoXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIF9yZXNpemUyW1wiZGVmYXVsdFwiXVttb2RlXSh0aGlzLmJpdG1hcCwgZHN0KTtcblxuICAgICAgICAgIHRoaXMuYml0bWFwID0gZHN0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBpbWFnZSA9IHRoaXM7XG4gICAgICAgICAgdmFyIHJlc2l6ZSA9IG5ldyBfcmVzaXplW1wiZGVmYXVsdFwiXSh0aGlzLmJpdG1hcC53aWR0aCwgdGhpcy5iaXRtYXAuaGVpZ2h0LCB3LCBoLCB0cnVlLCB0cnVlLCBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gICAgICAgICAgICBpbWFnZS5iaXRtYXAuZGF0YSA9IEJ1ZmZlci5mcm9tKGJ1ZmZlcik7XG4gICAgICAgICAgICBpbWFnZS5iaXRtYXAud2lkdGggPSB3O1xuICAgICAgICAgICAgaW1hZ2UuYml0bWFwLmhlaWdodCA9IGg7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmVzaXplLnJlc2l6ZSh0aGlzLmJpdG1hcC5kYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoMCwgX3V0aWxzLmlzTm9kZVBhdHRlcm4pKGNiKSkge1xuICAgICAgICAgIGNiLmNhbGwodGhpcywgbnVsbCwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl91dGlscyIsIl9yZXNpemUiLCJfcmVzaXplMiIsIl9kZWZhdWx0IiwiY29uc3RhbnRzIiwiUkVTSVpFX05FQVJFU1RfTkVJR0hCT1IiLCJSRVNJWkVfQklMSU5FQVIiLCJSRVNJWkVfQklDVUJJQyIsIlJFU0laRV9IRVJNSVRFIiwiUkVTSVpFX0JFWklFUiIsInJlc2l6ZSIsInciLCJoIiwibW9kZSIsImNiIiwidGhyb3dFcnJvciIsImNhbGwiLCJjb25zdHJ1Y3RvciIsIkFVVE8iLCJiaXRtYXAiLCJ3aWR0aCIsImhlaWdodCIsIk1hdGgiLCJyb3VuZCIsImRzdCIsImRhdGEiLCJCdWZmZXIiLCJhbGxvYyIsImltYWdlIiwiYnVmZmVyIiwiZnJvbSIsImlzTm9kZVBhdHRlcm4iLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-resize/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-resize/dist/modules/resize.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@jimp/plugin-resize/dist/modules/resize.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("\n// JavaScript Image Resizer (c) 2012 - Grant Galitz\n// Released to public domain 29 July 2013: https://github.com/grantgalitz/JS-Image-Resizer/issues/4\nfunction Resize(widthOriginal, heightOriginal, targetWidth, targetHeight, blendAlpha, interpolationPass, resizeCallback) {\n    this.widthOriginal = Math.abs(Math.floor(widthOriginal) || 0);\n    this.heightOriginal = Math.abs(Math.floor(heightOriginal) || 0);\n    this.targetWidth = Math.abs(Math.floor(targetWidth) || 0);\n    this.targetHeight = Math.abs(Math.floor(targetHeight) || 0);\n    this.colorChannels = blendAlpha ? 4 : 3;\n    this.interpolationPass = Boolean(interpolationPass);\n    this.resizeCallback = typeof resizeCallback === \"function\" ? resizeCallback : function() {};\n    this.targetWidthMultipliedByChannels = this.targetWidth * this.colorChannels;\n    this.originalWidthMultipliedByChannels = this.widthOriginal * this.colorChannels;\n    this.originalHeightMultipliedByChannels = this.heightOriginal * this.colorChannels;\n    this.widthPassResultSize = this.targetWidthMultipliedByChannels * this.heightOriginal;\n    this.finalResultSize = this.targetWidthMultipliedByChannels * this.targetHeight;\n    this.initialize();\n}\nResize.prototype.initialize = function() {\n    // Perform some checks:\n    if (this.widthOriginal > 0 && this.heightOriginal > 0 && this.targetWidth > 0 && this.targetHeight > 0) {\n        this.configurePasses();\n    } else {\n        throw new Error(\"Invalid settings specified for the resizer.\");\n    }\n};\nResize.prototype.configurePasses = function() {\n    if (this.widthOriginal === this.targetWidth) {\n        // Bypass the width resizer pass:\n        this.resizeWidth = this.bypassResizer;\n    } else {\n        // Setup the width resizer pass:\n        this.ratioWeightWidthPass = this.widthOriginal / this.targetWidth;\n        if (this.ratioWeightWidthPass < 1 && this.interpolationPass) {\n            this.initializeFirstPassBuffers(true);\n            this.resizeWidth = this.colorChannels === 4 ? this.resizeWidthInterpolatedRGBA : this.resizeWidthInterpolatedRGB;\n        } else {\n            this.initializeFirstPassBuffers(false);\n            this.resizeWidth = this.colorChannels === 4 ? this.resizeWidthRGBA : this.resizeWidthRGB;\n        }\n    }\n    if (this.heightOriginal === this.targetHeight) {\n        // Bypass the height resizer pass:\n        this.resizeHeight = this.bypassResizer;\n    } else {\n        // Setup the height resizer pass:\n        this.ratioWeightHeightPass = this.heightOriginal / this.targetHeight;\n        if (this.ratioWeightHeightPass < 1 && this.interpolationPass) {\n            this.initializeSecondPassBuffers(true);\n            this.resizeHeight = this.resizeHeightInterpolated;\n        } else {\n            this.initializeSecondPassBuffers(false);\n            this.resizeHeight = this.colorChannels === 4 ? this.resizeHeightRGBA : this.resizeHeightRGB;\n        }\n    }\n};\nResize.prototype._resizeWidthInterpolatedRGBChannels = function(buffer, fourthChannel) {\n    var channelsNum = fourthChannel ? 4 : 3;\n    var ratioWeight = this.ratioWeightWidthPass;\n    var outputBuffer = this.widthBuffer;\n    var weight = 0;\n    var finalOffset = 0;\n    var pixelOffset = 0;\n    var firstWeight = 0;\n    var secondWeight = 0;\n    var targetPosition; // Handle for only one interpolation input being valid for start calculation:\n    for(targetPosition = 0; weight < 1 / 3; targetPosition += channelsNum, weight += ratioWeight){\n        for(finalOffset = targetPosition, pixelOffset = 0; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels){\n            outputBuffer[finalOffset] = buffer[pixelOffset];\n            outputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];\n            outputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];\n            if (fourthChannel) outputBuffer[finalOffset + 3] = buffer[pixelOffset + 3];\n        }\n    } // Adjust for overshoot of the last pass's counter:\n    weight -= 1 / 3;\n    var interpolationWidthSourceReadStop;\n    for(interpolationWidthSourceReadStop = this.widthOriginal - 1; weight < interpolationWidthSourceReadStop; targetPosition += channelsNum, weight += ratioWeight){\n        // Calculate weightings:\n        secondWeight = weight % 1;\n        firstWeight = 1 - secondWeight; // Interpolate:\n        for(finalOffset = targetPosition, pixelOffset = Math.floor(weight) * channelsNum; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels){\n            outputBuffer[finalOffset + 0] = buffer[pixelOffset + 0] * firstWeight + buffer[pixelOffset + channelsNum + 0] * secondWeight;\n            outputBuffer[finalOffset + 1] = buffer[pixelOffset + 1] * firstWeight + buffer[pixelOffset + channelsNum + 1] * secondWeight;\n            outputBuffer[finalOffset + 2] = buffer[pixelOffset + 2] * firstWeight + buffer[pixelOffset + channelsNum + 2] * secondWeight;\n            if (fourthChannel) outputBuffer[finalOffset + 3] = buffer[pixelOffset + 3] * firstWeight + buffer[pixelOffset + channelsNum + 3] * secondWeight;\n        }\n    } // Handle for only one interpolation input being valid for end calculation:\n    for(interpolationWidthSourceReadStop = this.originalWidthMultipliedByChannels - channelsNum; targetPosition < this.targetWidthMultipliedByChannels; targetPosition += channelsNum){\n        for(finalOffset = targetPosition, pixelOffset = interpolationWidthSourceReadStop; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels){\n            outputBuffer[finalOffset] = buffer[pixelOffset];\n            outputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];\n            outputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];\n            if (fourthChannel) outputBuffer[finalOffset + 3] = buffer[pixelOffset + 3];\n        }\n    }\n    return outputBuffer;\n};\nResize.prototype._resizeWidthRGBChannels = function(buffer, fourthChannel) {\n    var channelsNum = fourthChannel ? 4 : 3;\n    var ratioWeight = this.ratioWeightWidthPass;\n    var ratioWeightDivisor = 1 / ratioWeight;\n    var nextLineOffsetOriginalWidth = this.originalWidthMultipliedByChannels - channelsNum + 1;\n    var nextLineOffsetTargetWidth = this.targetWidthMultipliedByChannels - channelsNum + 1;\n    var output = this.outputWidthWorkBench;\n    var outputBuffer = this.widthBuffer;\n    var trustworthyColorsCount = this.outputWidthWorkBenchOpaquePixelsCount;\n    var weight = 0;\n    var amountToNext = 0;\n    var actualPosition = 0;\n    var currentPosition = 0;\n    var line = 0;\n    var pixelOffset = 0;\n    var outputOffset = 0;\n    var multiplier = 1;\n    var r = 0;\n    var g = 0;\n    var b = 0;\n    var a = 0;\n    do {\n        for(line = 0; line < this.originalHeightMultipliedByChannels;){\n            output[line++] = 0;\n            output[line++] = 0;\n            output[line++] = 0;\n            if (fourthChannel) {\n                output[line++] = 0;\n                trustworthyColorsCount[line / channelsNum - 1] = 0;\n            }\n        }\n        weight = ratioWeight;\n        do {\n            amountToNext = 1 + actualPosition - currentPosition;\n            multiplier = Math.min(weight, amountToNext);\n            for(line = 0, pixelOffset = actualPosition; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetOriginalWidth){\n                r = buffer[pixelOffset];\n                g = buffer[++pixelOffset];\n                b = buffer[++pixelOffset];\n                a = fourthChannel ? buffer[++pixelOffset] : 255; // Ignore RGB values if pixel is completely transparent\n                output[line++] += (a ? r : 0) * multiplier;\n                output[line++] += (a ? g : 0) * multiplier;\n                output[line++] += (a ? b : 0) * multiplier;\n                if (fourthChannel) {\n                    output[line++] += a * multiplier;\n                    trustworthyColorsCount[line / channelsNum - 1] += a ? multiplier : 0;\n                }\n            }\n            if (weight >= amountToNext) {\n                actualPosition += channelsNum;\n                currentPosition = actualPosition;\n                weight -= amountToNext;\n            } else {\n                currentPosition += weight;\n                break;\n            }\n        }while (weight > 0 && actualPosition < this.originalWidthMultipliedByChannels);\n        for(line = 0, pixelOffset = outputOffset; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetTargetWidth){\n            weight = fourthChannel ? trustworthyColorsCount[line / channelsNum] : 1;\n            multiplier = fourthChannel ? weight ? 1 / weight : 0 : ratioWeightDivisor;\n            outputBuffer[pixelOffset] = output[line++] * multiplier;\n            outputBuffer[++pixelOffset] = output[line++] * multiplier;\n            outputBuffer[++pixelOffset] = output[line++] * multiplier;\n            if (fourthChannel) outputBuffer[++pixelOffset] = output[line++] * ratioWeightDivisor;\n        }\n        outputOffset += channelsNum;\n    }while (outputOffset < this.targetWidthMultipliedByChannels);\n    return outputBuffer;\n};\nResize.prototype._resizeHeightRGBChannels = function(buffer, fourthChannel) {\n    var ratioWeight = this.ratioWeightHeightPass;\n    var ratioWeightDivisor = 1 / ratioWeight;\n    var output = this.outputHeightWorkBench;\n    var outputBuffer = this.heightBuffer;\n    var trustworthyColorsCount = this.outputHeightWorkBenchOpaquePixelsCount;\n    var weight = 0;\n    var amountToNext = 0;\n    var actualPosition = 0;\n    var currentPosition = 0;\n    var pixelOffset = 0;\n    var outputOffset = 0;\n    var caret = 0;\n    var multiplier = 1;\n    var r = 0;\n    var g = 0;\n    var b = 0;\n    var a = 0;\n    do {\n        for(pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;){\n            output[pixelOffset++] = 0;\n            output[pixelOffset++] = 0;\n            output[pixelOffset++] = 0;\n            if (fourthChannel) {\n                output[pixelOffset++] = 0;\n                trustworthyColorsCount[pixelOffset / 4 - 1] = 0;\n            }\n        }\n        weight = ratioWeight;\n        do {\n            amountToNext = 1 + actualPosition - currentPosition;\n            multiplier = Math.min(weight, amountToNext);\n            caret = actualPosition;\n            for(pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;){\n                r = buffer[caret++];\n                g = buffer[caret++];\n                b = buffer[caret++];\n                a = fourthChannel ? buffer[caret++] : 255; // Ignore RGB values if pixel is completely transparent\n                output[pixelOffset++] += (a ? r : 0) * multiplier;\n                output[pixelOffset++] += (a ? g : 0) * multiplier;\n                output[pixelOffset++] += (a ? b : 0) * multiplier;\n                if (fourthChannel) {\n                    output[pixelOffset++] += a * multiplier;\n                    trustworthyColorsCount[pixelOffset / 4 - 1] += a ? multiplier : 0;\n                }\n            }\n            if (weight >= amountToNext) {\n                actualPosition = caret;\n                currentPosition = actualPosition;\n                weight -= amountToNext;\n            } else {\n                currentPosition += weight;\n                break;\n            }\n        }while (weight > 0 && actualPosition < this.widthPassResultSize);\n        for(pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;){\n            weight = fourthChannel ? trustworthyColorsCount[pixelOffset / 4] : 1;\n            multiplier = fourthChannel ? weight ? 1 / weight : 0 : ratioWeightDivisor;\n            outputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * multiplier);\n            outputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * multiplier);\n            outputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * multiplier);\n            if (fourthChannel) {\n                outputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * ratioWeightDivisor);\n            }\n        }\n    }while (outputOffset < this.finalResultSize);\n    return outputBuffer;\n};\nResize.prototype.resizeWidthInterpolatedRGB = function(buffer) {\n    return this._resizeWidthInterpolatedRGBChannels(buffer, false);\n};\nResize.prototype.resizeWidthInterpolatedRGBA = function(buffer) {\n    return this._resizeWidthInterpolatedRGBChannels(buffer, true);\n};\nResize.prototype.resizeWidthRGB = function(buffer) {\n    return this._resizeWidthRGBChannels(buffer, false);\n};\nResize.prototype.resizeWidthRGBA = function(buffer) {\n    return this._resizeWidthRGBChannels(buffer, true);\n};\nResize.prototype.resizeHeightInterpolated = function(buffer) {\n    var ratioWeight = this.ratioWeightHeightPass;\n    var outputBuffer = this.heightBuffer;\n    var weight = 0;\n    var finalOffset = 0;\n    var pixelOffset = 0;\n    var pixelOffsetAccumulated = 0;\n    var pixelOffsetAccumulated2 = 0;\n    var firstWeight = 0;\n    var secondWeight = 0;\n    var interpolationHeightSourceReadStop; // Handle for only one interpolation input being valid for start calculation:\n    for(; weight < 1 / 3; weight += ratioWeight){\n        for(pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;){\n            outputBuffer[finalOffset++] = Math.round(buffer[pixelOffset++]);\n        }\n    } // Adjust for overshoot of the last pass's counter:\n    weight -= 1 / 3;\n    for(interpolationHeightSourceReadStop = this.heightOriginal - 1; weight < interpolationHeightSourceReadStop; weight += ratioWeight){\n        // Calculate weightings:\n        secondWeight = weight % 1;\n        firstWeight = 1 - secondWeight; // Interpolate:\n        pixelOffsetAccumulated = Math.floor(weight) * this.targetWidthMultipliedByChannels;\n        pixelOffsetAccumulated2 = pixelOffsetAccumulated + this.targetWidthMultipliedByChannels;\n        for(pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels; ++pixelOffset){\n            outputBuffer[finalOffset++] = Math.round(buffer[pixelOffsetAccumulated++] * firstWeight + buffer[pixelOffsetAccumulated2++] * secondWeight);\n        }\n    } // Handle for only one interpolation input being valid for end calculation:\n    while(finalOffset < this.finalResultSize){\n        for(pixelOffset = 0, pixelOffsetAccumulated = interpolationHeightSourceReadStop * this.targetWidthMultipliedByChannels; pixelOffset < this.targetWidthMultipliedByChannels; ++pixelOffset){\n            outputBuffer[finalOffset++] = Math.round(buffer[pixelOffsetAccumulated++]);\n        }\n    }\n    return outputBuffer;\n};\nResize.prototype.resizeHeightRGB = function(buffer) {\n    return this._resizeHeightRGBChannels(buffer, false);\n};\nResize.prototype.resizeHeightRGBA = function(buffer) {\n    return this._resizeHeightRGBChannels(buffer, true);\n};\nResize.prototype.resize = function(buffer) {\n    this.resizeCallback(this.resizeHeight(this.resizeWidth(buffer)));\n};\nResize.prototype.bypassResizer = function(buffer) {\n    // Just return the buffer passed:\n    return buffer;\n};\nResize.prototype.initializeFirstPassBuffers = function(BILINEARAlgo) {\n    // Initialize the internal width pass buffers:\n    this.widthBuffer = this.generateFloatBuffer(this.widthPassResultSize);\n    if (!BILINEARAlgo) {\n        this.outputWidthWorkBench = this.generateFloatBuffer(this.originalHeightMultipliedByChannels);\n        if (this.colorChannels > 3) {\n            this.outputWidthWorkBenchOpaquePixelsCount = this.generateFloat64Buffer(this.heightOriginal);\n        }\n    }\n};\nResize.prototype.initializeSecondPassBuffers = function(BILINEARAlgo) {\n    // Initialize the internal height pass buffers:\n    this.heightBuffer = this.generateUint8Buffer(this.finalResultSize);\n    if (!BILINEARAlgo) {\n        this.outputHeightWorkBench = this.generateFloatBuffer(this.targetWidthMultipliedByChannels);\n        if (this.colorChannels > 3) {\n            this.outputHeightWorkBenchOpaquePixelsCount = this.generateFloat64Buffer(this.targetWidth);\n        }\n    }\n};\nResize.prototype.generateFloatBuffer = function(bufferLength) {\n    // Generate a float32 typed array buffer:\n    try {\n        return new Float32Array(bufferLength);\n    } catch (error) {\n        return [];\n    }\n};\nResize.prototype.generateFloat64Buffer = function(bufferLength) {\n    // Generate a float64 typed array buffer:\n    try {\n        return new Float64Array(bufferLength);\n    } catch (error) {\n        return [];\n    }\n};\nResize.prototype.generateUint8Buffer = function(bufferLength) {\n    // Generate a uint8 typed array buffer:\n    try {\n        return new Uint8Array(bufferLength);\n    } catch (error) {\n        return [];\n    }\n};\nmodule.exports = Resize; //# sourceMappingURL=resize.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-resize/dist/modules/resize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-resize/dist/modules/resize2.js":
/*!******************************************************************!*\
  !*** ./node_modules/@jimp/plugin-resize/dist/modules/resize2.js ***!
  \******************************************************************/
/***/ ((module) => {

eval("\n/**\n * Copyright (c) 2015 Guyon Roche\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:</p>\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */ module.exports = {\n    nearestNeighbor: function nearestNeighbor(src, dst) {\n        var wSrc = src.width;\n        var hSrc = src.height;\n        var wDst = dst.width;\n        var hDst = dst.height;\n        var bufSrc = src.data;\n        var bufDst = dst.data;\n        for(var i = 0; i < hDst; i++){\n            for(var j = 0; j < wDst; j++){\n                var posDst = (i * wDst + j) * 4;\n                var iSrc = Math.floor(i * hSrc / hDst);\n                var jSrc = Math.floor(j * wSrc / wDst);\n                var posSrc = (iSrc * wSrc + jSrc) * 4;\n                bufDst[posDst++] = bufSrc[posSrc++];\n                bufDst[posDst++] = bufSrc[posSrc++];\n                bufDst[posDst++] = bufSrc[posSrc++];\n                bufDst[posDst++] = bufSrc[posSrc++];\n            }\n        }\n    },\n    bilinearInterpolation: function bilinearInterpolation(src, dst) {\n        var wSrc = src.width;\n        var hSrc = src.height;\n        var wDst = dst.width;\n        var hDst = dst.height;\n        var bufSrc = src.data;\n        var bufDst = dst.data;\n        var interpolate = function interpolate(k, kMin, vMin, kMax, vMax) {\n            // special case - k is integer\n            if (kMin === kMax) {\n                return vMin;\n            }\n            return Math.round((k - kMin) * vMax + (kMax - k) * vMin);\n        };\n        var assign = function assign(pos, offset, x, xMin, xMax, y, yMin, yMax) {\n            var posMin = (yMin * wSrc + xMin) * 4 + offset;\n            var posMax = (yMin * wSrc + xMax) * 4 + offset;\n            var vMin = interpolate(x, xMin, bufSrc[posMin], xMax, bufSrc[posMax]); // special case, y is integer\n            if (yMax === yMin) {\n                bufDst[pos + offset] = vMin;\n            } else {\n                posMin = (yMax * wSrc + xMin) * 4 + offset;\n                posMax = (yMax * wSrc + xMax) * 4 + offset;\n                var vMax = interpolate(x, xMin, bufSrc[posMin], xMax, bufSrc[posMax]);\n                bufDst[pos + offset] = interpolate(y, yMin, vMin, yMax, vMax);\n            }\n        };\n        for(var i = 0; i < hDst; i++){\n            for(var j = 0; j < wDst; j++){\n                var posDst = (i * wDst + j) * 4; // x & y in src coordinates\n                var x = j * wSrc / wDst;\n                var xMin = Math.floor(x);\n                var xMax = Math.min(Math.ceil(x), wSrc - 1);\n                var y = i * hSrc / hDst;\n                var yMin = Math.floor(y);\n                var yMax = Math.min(Math.ceil(y), hSrc - 1);\n                assign(posDst, 0, x, xMin, xMax, y, yMin, yMax);\n                assign(posDst, 1, x, xMin, xMax, y, yMin, yMax);\n                assign(posDst, 2, x, xMin, xMax, y, yMin, yMax);\n                assign(posDst, 3, x, xMin, xMax, y, yMin, yMax);\n            }\n        }\n    },\n    _interpolate2D: function _interpolate2D(src, dst, options, interpolate) {\n        var bufSrc = src.data;\n        var bufDst = dst.data;\n        var wSrc = src.width;\n        var hSrc = src.height;\n        var wDst = dst.width;\n        var hDst = dst.height; // when dst smaller than src/2, interpolate first to a multiple between 0.5 and 1.0 src, then sum squares\n        var wM = Math.max(1, Math.floor(wSrc / wDst));\n        var wDst2 = wDst * wM;\n        var hM = Math.max(1, Math.floor(hSrc / hDst));\n        var hDst2 = hDst * hM; // ===========================================================\n        // Pass 1 - interpolate rows\n        // buf1 has width of dst2 and height of src\n        var buf1 = Buffer.alloc(wDst2 * hSrc * 4);\n        for(var i = 0; i < hSrc; i++){\n            for(var j = 0; j < wDst2; j++){\n                // i in src coords, j in dst coords\n                // calculate x in src coords\n                // this interpolation requires 4 sample points and the two inner ones must be real\n                // the outer points can be fudged for the edges.\n                // therefore (wSrc-1)/wDst2\n                var x = j * (wSrc - 1) / wDst2;\n                var xPos = Math.floor(x);\n                var t = x - xPos;\n                var srcPos = (i * wSrc + xPos) * 4;\n                var buf1Pos = (i * wDst2 + j) * 4;\n                for(var k = 0; k < 4; k++){\n                    var kPos = srcPos + k;\n                    var x0 = xPos > 0 ? bufSrc[kPos - 4] : 2 * bufSrc[kPos] - bufSrc[kPos + 4];\n                    var x1 = bufSrc[kPos];\n                    var x2 = bufSrc[kPos + 4];\n                    var x3 = xPos < wSrc - 2 ? bufSrc[kPos + 8] : 2 * bufSrc[kPos + 4] - bufSrc[kPos];\n                    buf1[buf1Pos + k] = interpolate(x0, x1, x2, x3, t);\n                }\n            }\n        } // this._writeFile(wDst2, hSrc, buf1, \"out/buf1.jpg\");\n        // ===========================================================\n        // Pass 2 - interpolate columns\n        // buf2 has width and height of dst2\n        var buf2 = Buffer.alloc(wDst2 * hDst2 * 4);\n        for(var _i = 0; _i < hDst2; _i++){\n            for(var _j = 0; _j < wDst2; _j++){\n                // i&j in dst2 coords\n                // calculate y in buf1 coords\n                // this interpolation requires 4 sample points and the two inner ones must be real\n                // the outer points can be fudged for the edges.\n                // therefore (hSrc-1)/hDst2\n                var y = _i * (hSrc - 1) / hDst2;\n                var yPos = Math.floor(y);\n                var _t = y - yPos;\n                var _buf1Pos = (yPos * wDst2 + _j) * 4;\n                var buf2Pos = (_i * wDst2 + _j) * 4;\n                for(var _k = 0; _k < 4; _k++){\n                    var _kPos = _buf1Pos + _k;\n                    var y0 = yPos > 0 ? buf1[_kPos - wDst2 * 4] : 2 * buf1[_kPos] - buf1[_kPos + wDst2 * 4];\n                    var y1 = buf1[_kPos];\n                    var y2 = buf1[_kPos + wDst2 * 4];\n                    var y3 = yPos < hSrc - 2 ? buf1[_kPos + wDst2 * 8] : 2 * buf1[_kPos + wDst2 * 4] - buf1[_kPos];\n                    buf2[buf2Pos + _k] = interpolate(y0, y1, y2, y3, _t);\n                }\n            }\n        } // this._writeFile(wDst2, hDst2, buf2, \"out/buf2.jpg\");\n        // ===========================================================\n        // Pass 3 - scale to dst\n        var m = wM * hM;\n        if (m > 1) {\n            for(var _i2 = 0; _i2 < hDst; _i2++){\n                for(var _j2 = 0; _j2 < wDst; _j2++){\n                    // i&j in dst bounded coords\n                    var r = 0;\n                    var g = 0;\n                    var b = 0;\n                    var a = 0;\n                    var realColors = 0;\n                    for(var _y = 0; _y < hM; _y++){\n                        var _yPos = _i2 * hM + _y;\n                        for(var _x = 0; _x < wM; _x++){\n                            var _xPos = _j2 * wM + _x;\n                            var xyPos = (_yPos * wDst2 + _xPos) * 4;\n                            var pixelAlpha = buf2[xyPos + 3];\n                            if (pixelAlpha) {\n                                r += buf2[xyPos];\n                                g += buf2[xyPos + 1];\n                                b += buf2[xyPos + 2];\n                                realColors++;\n                            }\n                            a += pixelAlpha;\n                        }\n                    }\n                    var pos = (_i2 * wDst + _j2) * 4;\n                    bufDst[pos] = realColors ? Math.round(r / realColors) : 0;\n                    bufDst[pos + 1] = realColors ? Math.round(g / realColors) : 0;\n                    bufDst[pos + 2] = realColors ? Math.round(b / realColors) : 0;\n                    bufDst[pos + 3] = Math.round(a / m);\n                }\n            }\n        } else {\n            // replace dst buffer with buf2\n            dst.data = buf2;\n        }\n    },\n    bicubicInterpolation: function bicubicInterpolation(src, dst, options) {\n        var interpolateCubic = function interpolateCubic(x0, x1, x2, x3, t) {\n            var a0 = x3 - x2 - x0 + x1;\n            var a1 = x0 - x1 - a0;\n            var a2 = x2 - x0;\n            var a3 = x1;\n            return Math.max(0, Math.min(255, a0 * (t * t * t) + a1 * (t * t) + a2 * t + a3));\n        };\n        return this._interpolate2D(src, dst, options, interpolateCubic);\n    },\n    hermiteInterpolation: function hermiteInterpolation(src, dst, options) {\n        var interpolateHermite = function interpolateHermite(x0, x1, x2, x3, t) {\n            var c0 = x1;\n            var c1 = 0.5 * (x2 - x0);\n            var c2 = x0 - 2.5 * x1 + 2 * x2 - 0.5 * x3;\n            var c3 = 0.5 * (x3 - x0) + 1.5 * (x1 - x2);\n            return Math.max(0, Math.min(255, Math.round(((c3 * t + c2) * t + c1) * t + c0)));\n        };\n        return this._interpolate2D(src, dst, options, interpolateHermite);\n    },\n    bezierInterpolation: function bezierInterpolation(src, dst, options) {\n        // between 2 points y(n), y(n+1), use next points out, y(n-1), y(n+2)\n        // to predict control points (a & b) to be placed at n+0.5\n        //  ya(n) = y(n) + (y(n+1)-y(n-1))/4\n        //  yb(n) = y(n+1) - (y(n+2)-y(n))/4\n        // then use std bezier to interpolate [n,n+1)\n        //  y(n+t) = y(n)*(1-t)^3 + 3 * ya(n)*(1-t)^2*t + 3 * yb(n)*(1-t)*t^2 + y(n+1)*t^3\n        //  note the 3* factor for the two control points\n        // for edge cases, can choose:\n        //  y(-1) = y(0) - 2*(y(1)-y(0))\n        //  y(w) = y(w-1) + 2*(y(w-1)-y(w-2))\n        // but can go with y(-1) = y(0) and y(w) = y(w-1)\n        var interpolateBezier = function interpolateBezier(x0, x1, x2, x3, t) {\n            // x1, x2 are the knots, use x0 and x3 to calculate control points\n            var cp1 = x1 + (x2 - x0) / 4;\n            var cp2 = x2 - (x3 - x1) / 4;\n            var nt = 1 - t;\n            var c0 = x1 * nt * nt * nt;\n            var c1 = 3 * cp1 * nt * nt * t;\n            var c2 = 3 * cp2 * nt * t * t;\n            var c3 = x2 * t * t * t;\n            return Math.max(0, Math.min(255, Math.round(c0 + c1 + c2 + c3)));\n        };\n        return this._interpolate2D(src, dst, options, interpolateBezier);\n    }\n}; //# sourceMappingURL=resize2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-resize/dist/modules/resize2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-rotate/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@jimp/plugin-rotate/dist/index.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\n/**\n * Rotates an image clockwise by an arbitrary number of degrees. NB: 'this' must be a Jimp object.\n * @param {number} deg the number of degrees to rotate the image by\n * @param {string|boolean} mode (optional) resize mode or a boolean, if false then the width and height of the image will not be changed\n */ function advancedRotate(deg, mode) {\n    deg %= 360;\n    var rad = deg * Math.PI / 180;\n    var cosine = Math.cos(rad);\n    var sine = Math.sin(rad); // the final width and height will change if resize == true\n    var w = this.bitmap.width;\n    var h = this.bitmap.height;\n    if (mode === true || typeof mode === \"string\") {\n        // resize the image to it maximum dimension and blit the existing image\n        // onto the center so that when it is rotated the image is kept in bounds\n        // http://stackoverflow.com/questions/3231176/how-to-get-size-of-a-rotated-rectangle\n        // Plus 1 border pixel to ensure to show all rotated result for some cases.\n        w = Math.ceil(Math.abs(this.bitmap.width * cosine) + Math.abs(this.bitmap.height * sine)) + 1;\n        h = Math.ceil(Math.abs(this.bitmap.width * sine) + Math.abs(this.bitmap.height * cosine)) + 1; // Ensure destination to have even size to a better result.\n        if (w % 2 !== 0) {\n            w++;\n        }\n        if (h % 2 !== 0) {\n            h++;\n        }\n        var c = this.cloneQuiet();\n        this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(x, y, idx) {\n            this.bitmap.data.writeUInt32BE(this._background, idx);\n        });\n        var max = Math.max(w, h, this.bitmap.width, this.bitmap.height);\n        this.resize(max, max, mode);\n        this.blit(c, this.bitmap.width / 2 - c.bitmap.width / 2, this.bitmap.height / 2 - c.bitmap.height / 2);\n    }\n    var bW = this.bitmap.width;\n    var bH = this.bitmap.height;\n    var dstBuffer = Buffer.alloc(this.bitmap.data.length);\n    function createTranslationFunction(deltaX, deltaY) {\n        return function(x, y) {\n            return {\n                x: x + deltaX,\n                y: y + deltaY\n            };\n        };\n    }\n    var translate2Cartesian = createTranslationFunction(-(bW / 2), -(bH / 2));\n    var translate2Screen = createTranslationFunction(bW / 2 + 0.5, bH / 2 + 0.5);\n    for(var y = 1; y <= bH; y++){\n        for(var x = 1; x <= bW; x++){\n            var cartesian = translate2Cartesian(x, y);\n            var source = translate2Screen(cosine * cartesian.x - sine * cartesian.y, cosine * cartesian.y + sine * cartesian.x);\n            var dstIdx = bW * (y - 1) + x - 1 << 2;\n            if (source.x >= 0 && source.x < bW && source.y >= 0 && source.y < bH) {\n                var srcIdx = (bW * (source.y | 0) + source.x | 0) << 2;\n                var pixelRGBA = this.bitmap.data.readUInt32BE(srcIdx);\n                dstBuffer.writeUInt32BE(pixelRGBA, dstIdx);\n            } else {\n                // reset off-image pixels\n                dstBuffer.writeUInt32BE(this._background, dstIdx);\n            }\n        }\n    }\n    this.bitmap.data = dstBuffer;\n    if (mode === true || typeof mode === \"string\") {\n        // now crop the image to the final size\n        var _x = bW / 2 - w / 2;\n        var _y = bH / 2 - h / 2;\n        this.crop(_x, _y, w, h);\n    }\n}\nvar _default = function _default() {\n    return {\n        /**\n     * Rotates the image clockwise by a number of degrees. By default the width and height of the image will be resized appropriately.\n     * @param {number} deg the number of degrees to rotate the image by\n     * @param {string|boolean} mode (optional) resize mode or a boolean, if false then the width and height of the image will not be changed\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */ rotate: function rotate(deg, mode, cb) {\n            // enable overloading\n            if (typeof mode === \"undefined\" || mode === null) {\n                // e.g. image.resize(120);\n                // e.g. image.resize(120, null, cb);\n                // e.g. image.resize(120, undefined, cb);\n                mode = true;\n            }\n            if (typeof mode === \"function\" && typeof cb === \"undefined\") {\n                // e.g. image.resize(120, cb);\n                cb = mode;\n                mode = true;\n            }\n            if (typeof deg !== \"number\") {\n                return _utils.throwError.call(this, \"deg must be a number\", cb);\n            }\n            if (typeof mode !== \"boolean\" && typeof mode !== \"string\") {\n                return _utils.throwError.call(this, \"mode must be a boolean or a string\", cb);\n            }\n            advancedRotate.call(this, deg, mode, cb);\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        }\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-rotate/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-scale/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@jimp/plugin-scale/dist/index.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\nvar _default = function _default() {\n    return {\n        /**\n     * Uniformly scales the image by a factor.\n     * @param {number} f the factor to scale the image by\n     * @param {string} mode (optional) a scaling method (e.g. Jimp.RESIZE_BEZIER)\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */ scale: function scale(f, mode, cb) {\n            if (typeof f !== \"number\") {\n                return _utils.throwError.call(this, \"f must be a number\", cb);\n            }\n            if (f < 0) {\n                return _utils.throwError.call(this, \"f must be a positive number\", cb);\n            }\n            if (typeof mode === \"function\" && typeof cb === \"undefined\") {\n                cb = mode;\n                mode = null;\n            }\n            var w = this.bitmap.width * f;\n            var h = this.bitmap.height * f;\n            this.resize(w, h, mode);\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        },\n        /**\n     * Scale the image to the largest size that fits inside the rectangle that has the given width and height.\n     * @param {number} w the width to resize the image to\n     * @param {number} h the height to resize the image to\n     * @param {string} mode (optional) a scaling method (e.g. Jimp.RESIZE_BEZIER)\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */ scaleToFit: function scaleToFit(w, h, mode, cb) {\n            if (typeof w !== \"number\" || typeof h !== \"number\") {\n                return _utils.throwError.call(this, \"w and h must be numbers\", cb);\n            }\n            if (typeof mode === \"function\" && typeof cb === \"undefined\") {\n                cb = mode;\n                mode = null;\n            }\n            var f = w / h > this.bitmap.width / this.bitmap.height ? h / this.bitmap.height : w / this.bitmap.width;\n            this.scale(f, mode);\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        }\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLXNjYWxlL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFrQixHQUFHLEtBQUs7QUFFMUIsSUFBSUUsU0FBU0MsbUJBQU9BLENBQUMsbUVBQWE7QUFFbEMsSUFBSUMsV0FBVyxTQUFTQTtJQUN0QixPQUFPO1FBQ0w7Ozs7OztLQU1DLEdBQ0RDLE9BQU8sU0FBU0EsTUFBTUMsQ0FBQyxFQUFFQyxJQUFJLEVBQUVDLEVBQUU7WUFDL0IsSUFBSSxPQUFPRixNQUFNLFVBQVU7Z0JBQ3pCLE9BQU9KLE9BQU9PLFVBQVUsQ0FBQ0MsSUFBSSxDQUFDLElBQUksRUFBRSxzQkFBc0JGO1lBQzVEO1lBRUEsSUFBSUYsSUFBSSxHQUFHO2dCQUNULE9BQU9KLE9BQU9PLFVBQVUsQ0FBQ0MsSUFBSSxDQUFDLElBQUksRUFBRSwrQkFBK0JGO1lBQ3JFO1lBRUEsSUFBSSxPQUFPRCxTQUFTLGNBQWMsT0FBT0MsT0FBTyxhQUFhO2dCQUMzREEsS0FBS0Q7Z0JBQ0xBLE9BQU87WUFDVDtZQUVBLElBQUlJLElBQUksSUFBSSxDQUFDQyxNQUFNLENBQUNDLEtBQUssR0FBR1A7WUFDNUIsSUFBSVEsSUFBSSxJQUFJLENBQUNGLE1BQU0sQ0FBQ0csTUFBTSxHQUFHVDtZQUM3QixJQUFJLENBQUNVLE1BQU0sQ0FBQ0wsR0FBR0csR0FBR1A7WUFFbEIsSUFBSSxDQUFDLEdBQUdMLE9BQU9lLGFBQWEsRUFBRVQsS0FBSztnQkFDakNBLEdBQUdFLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxJQUFJO1lBQzFCO1lBRUEsT0FBTyxJQUFJO1FBQ2I7UUFFQTs7Ozs7OztLQU9DLEdBQ0RRLFlBQVksU0FBU0EsV0FBV1AsQ0FBQyxFQUFFRyxDQUFDLEVBQUVQLElBQUksRUFBRUMsRUFBRTtZQUM1QyxJQUFJLE9BQU9HLE1BQU0sWUFBWSxPQUFPRyxNQUFNLFVBQVU7Z0JBQ2xELE9BQU9aLE9BQU9PLFVBQVUsQ0FBQ0MsSUFBSSxDQUFDLElBQUksRUFBRSwyQkFBMkJGO1lBQ2pFO1lBRUEsSUFBSSxPQUFPRCxTQUFTLGNBQWMsT0FBT0MsT0FBTyxhQUFhO2dCQUMzREEsS0FBS0Q7Z0JBQ0xBLE9BQU87WUFDVDtZQUVBLElBQUlELElBQUlLLElBQUlHLElBQUksSUFBSSxDQUFDRixNQUFNLENBQUNDLEtBQUssR0FBRyxJQUFJLENBQUNELE1BQU0sQ0FBQ0csTUFBTSxHQUFHRCxJQUFJLElBQUksQ0FBQ0YsTUFBTSxDQUFDRyxNQUFNLEdBQUdKLElBQUksSUFBSSxDQUFDQyxNQUFNLENBQUNDLEtBQUs7WUFDdkcsSUFBSSxDQUFDUixLQUFLLENBQUNDLEdBQUdDO1lBRWQsSUFBSSxDQUFDLEdBQUdMLE9BQU9lLGFBQWEsRUFBRVQsS0FBSztnQkFDakNBLEdBQUdFLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxJQUFJO1lBQzFCO1lBRUEsT0FBTyxJQUFJO1FBQ2I7SUFDRjtBQUNGO0FBRUFWLGtCQUFrQixHQUFHSTtBQUNyQmUsT0FBT25CLE9BQU8sR0FBR0EsUUFBUW9CLE9BQU8sRUFDaEMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXItY29kZS8uL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tc2NhbGUvZGlzdC9pbmRleC5qcz85MTk5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQGppbXAvdXRpbHNcIik7XG5cbnZhciBfZGVmYXVsdCA9IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICByZXR1cm4ge1xuICAgIC8qKlxuICAgICAqIFVuaWZvcm1seSBzY2FsZXMgdGhlIGltYWdlIGJ5IGEgZmFjdG9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmIHRoZSBmYWN0b3IgdG8gc2NhbGUgdGhlIGltYWdlIGJ5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGUgKG9wdGlvbmFsKSBhIHNjYWxpbmcgbWV0aG9kIChlLmcuIEppbXAuUkVTSVpFX0JFWklFUilcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEVycm9yLCBKaW1wKX0gY2IgKG9wdGlvbmFsKSBhIGNhbGxiYWNrIGZvciB3aGVuIGNvbXBsZXRlXG4gICAgICogQHJldHVybnMge0ppbXB9IHRoaXMgZm9yIGNoYWluaW5nIG9mIG1ldGhvZHNcbiAgICAgKi9cbiAgICBzY2FsZTogZnVuY3Rpb24gc2NhbGUoZiwgbW9kZSwgY2IpIHtcbiAgICAgIGlmICh0eXBlb2YgZiAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4gX3V0aWxzLnRocm93RXJyb3IuY2FsbCh0aGlzLCBcImYgbXVzdCBiZSBhIG51bWJlclwiLCBjYik7XG4gICAgICB9XG5cbiAgICAgIGlmIChmIDwgMCkge1xuICAgICAgICByZXR1cm4gX3V0aWxzLnRocm93RXJyb3IuY2FsbCh0aGlzLCBcImYgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlclwiLCBjYik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbW9kZSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBjYiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBjYiA9IG1vZGU7XG4gICAgICAgIG1vZGUgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgdyA9IHRoaXMuYml0bWFwLndpZHRoICogZjtcbiAgICAgIHZhciBoID0gdGhpcy5iaXRtYXAuaGVpZ2h0ICogZjtcbiAgICAgIHRoaXMucmVzaXplKHcsIGgsIG1vZGUpO1xuXG4gICAgICBpZiAoKDAsIF91dGlscy5pc05vZGVQYXR0ZXJuKShjYikpIHtcbiAgICAgICAgY2IuY2FsbCh0aGlzLCBudWxsLCB0aGlzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNjYWxlIHRoZSBpbWFnZSB0byB0aGUgbGFyZ2VzdCBzaXplIHRoYXQgZml0cyBpbnNpZGUgdGhlIHJlY3RhbmdsZSB0aGF0IGhhcyB0aGUgZ2l2ZW4gd2lkdGggYW5kIGhlaWdodC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdyB0aGUgd2lkdGggdG8gcmVzaXplIHRoZSBpbWFnZSB0b1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoIHRoZSBoZWlnaHQgdG8gcmVzaXplIHRoZSBpbWFnZSB0b1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlIChvcHRpb25hbCkgYSBzY2FsaW5nIG1ldGhvZCAoZS5nLiBKaW1wLlJFU0laRV9CRVpJRVIpXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihFcnJvciwgSmltcCl9IGNiIChvcHRpb25hbCkgYSBjYWxsYmFjayBmb3Igd2hlbiBjb21wbGV0ZVxuICAgICAqIEByZXR1cm5zIHtKaW1wfSB0aGlzIGZvciBjaGFpbmluZyBvZiBtZXRob2RzXG4gICAgICovXG4gICAgc2NhbGVUb0ZpdDogZnVuY3Rpb24gc2NhbGVUb0ZpdCh3LCBoLCBtb2RlLCBjYikge1xuICAgICAgaWYgKHR5cGVvZiB3ICE9PSBcIm51bWJlclwiIHx8IHR5cGVvZiBoICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBfdXRpbHMudGhyb3dFcnJvci5jYWxsKHRoaXMsIFwidyBhbmQgaCBtdXN0IGJlIG51bWJlcnNcIiwgY2IpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG1vZGUgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgY2IgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgY2IgPSBtb2RlO1xuICAgICAgICBtb2RlID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGYgPSB3IC8gaCA+IHRoaXMuYml0bWFwLndpZHRoIC8gdGhpcy5iaXRtYXAuaGVpZ2h0ID8gaCAvIHRoaXMuYml0bWFwLmhlaWdodCA6IHcgLyB0aGlzLmJpdG1hcC53aWR0aDtcbiAgICAgIHRoaXMuc2NhbGUoZiwgbW9kZSk7XG5cbiAgICAgIGlmICgoMCwgX3V0aWxzLmlzTm9kZVBhdHRlcm4pKGNiKSkge1xuICAgICAgICBjYi5jYWxsKHRoaXMsIG51bGwsIHRoaXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfdXRpbHMiLCJyZXF1aXJlIiwiX2RlZmF1bHQiLCJzY2FsZSIsImYiLCJtb2RlIiwiY2IiLCJ0aHJvd0Vycm9yIiwiY2FsbCIsInciLCJiaXRtYXAiLCJ3aWR0aCIsImgiLCJoZWlnaHQiLCJyZXNpemUiLCJpc05vZGVQYXR0ZXJuIiwic2NhbGVUb0ZpdCIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-scale/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-shadow/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@jimp/plugin-shadow/dist/index.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\n/**\n * Creates a circle out of an image.\n * @param {function(Error, Jimp)} options (optional)\n * opacity - opacity of the shadow between 0 and 1\n * size,- of the shadow\n * blur - how blurry the shadow is\n * x- x position of shadow\n * y - y position of shadow\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */ var _default = function _default() {\n    return {\n        shadow: function shadow() {\n            var _this = this;\n            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            var cb = arguments.length > 1 ? arguments[1] : undefined;\n            if (typeof options === \"function\") {\n                cb = options;\n                options = {};\n            }\n            var _options = options, _options$opacity = _options.opacity, opacity = _options$opacity === void 0 ? 0.7 : _options$opacity, _options$size = _options.size, size = _options$size === void 0 ? 1.1 : _options$size, _options$x = _options.x, x = _options$x === void 0 ? -25 : _options$x, _options$y = _options.y, y = _options$y === void 0 ? 25 : _options$y, _options$blur = _options.blur, blur = _options$blur === void 0 ? 5 : _options$blur; // clone the image\n            var orig = this.clone();\n            var shadow = this.clone(); // turn all it's pixels black\n            shadow.scan(0, 0, shadow.bitmap.width, shadow.bitmap.height, function(x, y, idx) {\n                shadow.bitmap.data[idx] = 0x00;\n                shadow.bitmap.data[idx + 1] = 0x00;\n                shadow.bitmap.data[idx + 2] = 0x00; // up the opacity a little,\n                shadow.bitmap.data[idx + 3] = shadow.constructor.limit255(shadow.bitmap.data[idx + 3] * opacity);\n                _this.bitmap.data[idx] = 0x00;\n                _this.bitmap.data[idx + 1] = 0x00;\n                _this.bitmap.data[idx + 2] = 0x00;\n                _this.bitmap.data[idx + 3] = 0x00;\n            }); // enlarge it. This creates a \"shadow\".\n            shadow.resize(shadow.bitmap.width * size, shadow.bitmap.height * size).blur(blur); // Then blit the \"shadow\" onto the background and the image on top of that.\n            this.composite(shadow, x, y);\n            this.composite(orig, 0, 0);\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        }\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLXNoYWRvdy9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBa0IsR0FBRyxLQUFLO0FBRTFCLElBQUlFLFNBQVNDLG1CQUFPQSxDQUFDLG1FQUFhO0FBRWxDOzs7Ozs7Ozs7O0NBVUMsR0FDRCxJQUFJQyxXQUFXLFNBQVNBO0lBQ3RCLE9BQU87UUFDTEMsUUFBUSxTQUFTQTtZQUNmLElBQUlDLFFBQVEsSUFBSTtZQUVoQixJQUFJQyxVQUFVQyxVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS0UsWUFBWUYsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO1lBQ25GLElBQUlHLEtBQUtILFVBQVVDLE1BQU0sR0FBRyxJQUFJRCxTQUFTLENBQUMsRUFBRSxHQUFHRTtZQUUvQyxJQUFJLE9BQU9ILFlBQVksWUFBWTtnQkFDakNJLEtBQUtKO2dCQUNMQSxVQUFVLENBQUM7WUFDYjtZQUVBLElBQUlLLFdBQVdMLFNBQ1hNLG1CQUFtQkQsU0FBU0UsT0FBTyxFQUNuQ0EsVUFBVUQscUJBQXFCLEtBQUssSUFBSSxNQUFNQSxrQkFDOUNFLGdCQUFnQkgsU0FBU0ksSUFBSSxFQUM3QkEsT0FBT0Qsa0JBQWtCLEtBQUssSUFBSSxNQUFNQSxlQUN4Q0UsYUFBYUwsU0FBU00sQ0FBQyxFQUN2QkEsSUFBSUQsZUFBZSxLQUFLLElBQUksQ0FBQyxLQUFLQSxZQUNsQ0UsYUFBYVAsU0FBU1EsQ0FBQyxFQUN2QkEsSUFBSUQsZUFBZSxLQUFLLElBQUksS0FBS0EsWUFDakNFLGdCQUFnQlQsU0FBU1UsSUFBSSxFQUM3QkEsT0FBT0Qsa0JBQWtCLEtBQUssSUFBSSxJQUFJQSxlQUFlLGtCQUFrQjtZQUUzRSxJQUFJRSxPQUFPLElBQUksQ0FBQ0MsS0FBSztZQUNyQixJQUFJbkIsU0FBUyxJQUFJLENBQUNtQixLQUFLLElBQUksNkJBQTZCO1lBRXhEbkIsT0FBT29CLElBQUksQ0FBQyxHQUFHLEdBQUdwQixPQUFPcUIsTUFBTSxDQUFDQyxLQUFLLEVBQUV0QixPQUFPcUIsTUFBTSxDQUFDRSxNQUFNLEVBQUUsU0FBVVYsQ0FBQyxFQUFFRSxDQUFDLEVBQUVTLEdBQUc7Z0JBQzlFeEIsT0FBT3FCLE1BQU0sQ0FBQ0ksSUFBSSxDQUFDRCxJQUFJLEdBQUc7Z0JBQzFCeEIsT0FBT3FCLE1BQU0sQ0FBQ0ksSUFBSSxDQUFDRCxNQUFNLEVBQUUsR0FBRztnQkFDOUJ4QixPQUFPcUIsTUFBTSxDQUFDSSxJQUFJLENBQUNELE1BQU0sRUFBRSxHQUFHLE1BQU0sMkJBQTJCO2dCQUUvRHhCLE9BQU9xQixNQUFNLENBQUNJLElBQUksQ0FBQ0QsTUFBTSxFQUFFLEdBQUd4QixPQUFPMEIsV0FBVyxDQUFDQyxRQUFRLENBQUMzQixPQUFPcUIsTUFBTSxDQUFDSSxJQUFJLENBQUNELE1BQU0sRUFBRSxHQUFHZjtnQkFDeEZSLE1BQU1vQixNQUFNLENBQUNJLElBQUksQ0FBQ0QsSUFBSSxHQUFHO2dCQUN6QnZCLE1BQU1vQixNQUFNLENBQUNJLElBQUksQ0FBQ0QsTUFBTSxFQUFFLEdBQUc7Z0JBQzdCdkIsTUFBTW9CLE1BQU0sQ0FBQ0ksSUFBSSxDQUFDRCxNQUFNLEVBQUUsR0FBRztnQkFDN0J2QixNQUFNb0IsTUFBTSxDQUFDSSxJQUFJLENBQUNELE1BQU0sRUFBRSxHQUFHO1lBQy9CLElBQUksdUNBQXVDO1lBRTNDeEIsT0FBTzRCLE1BQU0sQ0FBQzVCLE9BQU9xQixNQUFNLENBQUNDLEtBQUssR0FBR1gsTUFBTVgsT0FBT3FCLE1BQU0sQ0FBQ0UsTUFBTSxHQUFHWixNQUFNTSxJQUFJLENBQUNBLE9BQU8sMkVBQTJFO1lBRTlKLElBQUksQ0FBQ1ksU0FBUyxDQUFDN0IsUUFBUWEsR0FBR0U7WUFDMUIsSUFBSSxDQUFDYyxTQUFTLENBQUNYLE1BQU0sR0FBRztZQUV4QixJQUFJLENBQUMsR0FBR3JCLE9BQU9pQyxhQUFhLEVBQUV4QixLQUFLO2dCQUNqQ0EsR0FBR3lCLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxJQUFJO1lBQzFCO1lBRUEsT0FBTyxJQUFJO1FBQ2I7SUFDRjtBQUNGO0FBRUFwQyxrQkFBa0IsR0FBR0k7QUFDckJpQyxPQUFPckMsT0FBTyxHQUFHQSxRQUFRc0MsT0FBTyxFQUNoQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xci1jb2RlLy4vbm9kZV9tb2R1bGVzL0BqaW1wL3BsdWdpbi1zaGFkb3cvZGlzdC9pbmRleC5qcz8xMWNmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQGppbXAvdXRpbHNcIik7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNpcmNsZSBvdXQgb2YgYW4gaW1hZ2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEVycm9yLCBKaW1wKX0gb3B0aW9ucyAob3B0aW9uYWwpXG4gKiBvcGFjaXR5IC0gb3BhY2l0eSBvZiB0aGUgc2hhZG93IGJldHdlZW4gMCBhbmQgMVxuICogc2l6ZSwtIG9mIHRoZSBzaGFkb3dcbiAqIGJsdXIgLSBob3cgYmx1cnJ5IHRoZSBzaGFkb3cgaXNcbiAqIHgtIHggcG9zaXRpb24gb2Ygc2hhZG93XG4gKiB5IC0geSBwb3NpdGlvbiBvZiBzaGFkb3dcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oRXJyb3IsIEppbXApfSBjYiAob3B0aW9uYWwpIGEgY2FsbGJhY2sgZm9yIHdoZW4gY29tcGxldGVcbiAqIEByZXR1cm5zIHtKaW1wfSB0aGlzIGZvciBjaGFpbmluZyBvZiBtZXRob2RzXG4gKi9cbnZhciBfZGVmYXVsdCA9IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICByZXR1cm4ge1xuICAgIHNoYWRvdzogZnVuY3Rpb24gc2hhZG93KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgdmFyIGNiID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNiID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgfVxuXG4gICAgICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgICAgIF9vcHRpb25zJG9wYWNpdHkgPSBfb3B0aW9ucy5vcGFjaXR5LFxuICAgICAgICAgIG9wYWNpdHkgPSBfb3B0aW9ucyRvcGFjaXR5ID09PSB2b2lkIDAgPyAwLjcgOiBfb3B0aW9ucyRvcGFjaXR5LFxuICAgICAgICAgIF9vcHRpb25zJHNpemUgPSBfb3B0aW9ucy5zaXplLFxuICAgICAgICAgIHNpemUgPSBfb3B0aW9ucyRzaXplID09PSB2b2lkIDAgPyAxLjEgOiBfb3B0aW9ucyRzaXplLFxuICAgICAgICAgIF9vcHRpb25zJHggPSBfb3B0aW9ucy54LFxuICAgICAgICAgIHggPSBfb3B0aW9ucyR4ID09PSB2b2lkIDAgPyAtMjUgOiBfb3B0aW9ucyR4LFxuICAgICAgICAgIF9vcHRpb25zJHkgPSBfb3B0aW9ucy55LFxuICAgICAgICAgIHkgPSBfb3B0aW9ucyR5ID09PSB2b2lkIDAgPyAyNSA6IF9vcHRpb25zJHksXG4gICAgICAgICAgX29wdGlvbnMkYmx1ciA9IF9vcHRpb25zLmJsdXIsXG4gICAgICAgICAgYmx1ciA9IF9vcHRpb25zJGJsdXIgPT09IHZvaWQgMCA/IDUgOiBfb3B0aW9ucyRibHVyOyAvLyBjbG9uZSB0aGUgaW1hZ2VcblxuICAgICAgdmFyIG9yaWcgPSB0aGlzLmNsb25lKCk7XG4gICAgICB2YXIgc2hhZG93ID0gdGhpcy5jbG9uZSgpOyAvLyB0dXJuIGFsbCBpdCdzIHBpeGVscyBibGFja1xuXG4gICAgICBzaGFkb3cuc2NhbigwLCAwLCBzaGFkb3cuYml0bWFwLndpZHRoLCBzaGFkb3cuYml0bWFwLmhlaWdodCwgZnVuY3Rpb24gKHgsIHksIGlkeCkge1xuICAgICAgICBzaGFkb3cuYml0bWFwLmRhdGFbaWR4XSA9IDB4MDA7XG4gICAgICAgIHNoYWRvdy5iaXRtYXAuZGF0YVtpZHggKyAxXSA9IDB4MDA7XG4gICAgICAgIHNoYWRvdy5iaXRtYXAuZGF0YVtpZHggKyAyXSA9IDB4MDA7IC8vIHVwIHRoZSBvcGFjaXR5IGEgbGl0dGxlLFxuXG4gICAgICAgIHNoYWRvdy5iaXRtYXAuZGF0YVtpZHggKyAzXSA9IHNoYWRvdy5jb25zdHJ1Y3Rvci5saW1pdDI1NShzaGFkb3cuYml0bWFwLmRhdGFbaWR4ICsgM10gKiBvcGFjaXR5KTtcbiAgICAgICAgX3RoaXMuYml0bWFwLmRhdGFbaWR4XSA9IDB4MDA7XG4gICAgICAgIF90aGlzLmJpdG1hcC5kYXRhW2lkeCArIDFdID0gMHgwMDtcbiAgICAgICAgX3RoaXMuYml0bWFwLmRhdGFbaWR4ICsgMl0gPSAweDAwO1xuICAgICAgICBfdGhpcy5iaXRtYXAuZGF0YVtpZHggKyAzXSA9IDB4MDA7XG4gICAgICB9KTsgLy8gZW5sYXJnZSBpdC4gVGhpcyBjcmVhdGVzIGEgXCJzaGFkb3dcIi5cblxuICAgICAgc2hhZG93LnJlc2l6ZShzaGFkb3cuYml0bWFwLndpZHRoICogc2l6ZSwgc2hhZG93LmJpdG1hcC5oZWlnaHQgKiBzaXplKS5ibHVyKGJsdXIpOyAvLyBUaGVuIGJsaXQgdGhlIFwic2hhZG93XCIgb250byB0aGUgYmFja2dyb3VuZCBhbmQgdGhlIGltYWdlIG9uIHRvcCBvZiB0aGF0LlxuXG4gICAgICB0aGlzLmNvbXBvc2l0ZShzaGFkb3csIHgsIHkpO1xuICAgICAgdGhpcy5jb21wb3NpdGUob3JpZywgMCwgMCk7XG5cbiAgICAgIGlmICgoMCwgX3V0aWxzLmlzTm9kZVBhdHRlcm4pKGNiKSkge1xuICAgICAgICBjYi5jYWxsKHRoaXMsIG51bGwsIHRoaXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfdXRpbHMiLCJyZXF1aXJlIiwiX2RlZmF1bHQiLCJzaGFkb3ciLCJfdGhpcyIsIm9wdGlvbnMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJjYiIsIl9vcHRpb25zIiwiX29wdGlvbnMkb3BhY2l0eSIsIm9wYWNpdHkiLCJfb3B0aW9ucyRzaXplIiwic2l6ZSIsIl9vcHRpb25zJHgiLCJ4IiwiX29wdGlvbnMkeSIsInkiLCJfb3B0aW9ucyRibHVyIiwiYmx1ciIsIm9yaWciLCJjbG9uZSIsInNjYW4iLCJiaXRtYXAiLCJ3aWR0aCIsImhlaWdodCIsImlkeCIsImRhdGEiLCJjb25zdHJ1Y3RvciIsImxpbWl0MjU1IiwicmVzaXplIiwiY29tcG9zaXRlIiwiaXNOb2RlUGF0dGVybiIsImNhbGwiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-shadow/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugin-threshold/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@jimp/plugin-threshold/dist/index.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\n/**\n * Applies a minimum color threshold to a greyscale image.  Converts image to greyscale by default\n * @param {number} options object\n *  max: A number auto limited between 0 - 255\n *  replace: (optional) A number auto limited between 0 - 255 (default 255)\n *  autoGreyscale: (optional) A boolean whether to apply greyscale beforehand (default true)\n * @param {number} cb (optional) a callback for when complete\n * @return {this} this for chaining of methods\n */ var _default = function _default() {\n    return {\n        threshold: function threshold(_ref, cb) {\n            var _this = this;\n            var max = _ref.max, _ref$replace = _ref.replace, replace = _ref$replace === void 0 ? 255 : _ref$replace, _ref$autoGreyscale = _ref.autoGreyscale, autoGreyscale = _ref$autoGreyscale === void 0 ? true : _ref$autoGreyscale;\n            if (typeof max !== \"number\") {\n                return _utils.throwError.call(this, \"max must be a number\", cb);\n            }\n            if (typeof replace !== \"number\") {\n                return _utils.throwError.call(this, \"replace must be a number\", cb);\n            }\n            if (typeof autoGreyscale !== \"boolean\") {\n                return _utils.throwError.call(this, \"autoGreyscale must be a boolean\", cb);\n            }\n            max = this.constructor.limit255(max);\n            replace = this.constructor.limit255(replace);\n            if (autoGreyscale) {\n                this.greyscale();\n            }\n            this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(x, y, idx) {\n                var grey = _this.bitmap.data[idx] < max ? _this.bitmap.data[idx] : replace;\n                _this.bitmap.data[idx] = grey;\n                _this.bitmap.data[idx + 1] = grey;\n                _this.bitmap.data[idx + 2] = grey;\n            });\n            if ((0, _utils.isNodePattern)(cb)) {\n                cb.call(this, null, this);\n            }\n            return this;\n        }\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLXRocmVzaG9sZC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBa0IsR0FBRyxLQUFLO0FBRTFCLElBQUlFLFNBQVNDLG1CQUFPQSxDQUFDLG1FQUFhO0FBRWxDOzs7Ozs7OztDQVFDLEdBQ0QsSUFBSUMsV0FBVyxTQUFTQTtJQUN0QixPQUFPO1FBQ0xDLFdBQVcsU0FBU0EsVUFBVUMsSUFBSSxFQUFFQyxFQUFFO1lBQ3BDLElBQUlDLFFBQVEsSUFBSTtZQUVoQixJQUFJQyxNQUFNSCxLQUFLRyxHQUFHLEVBQ2RDLGVBQWVKLEtBQUtLLE9BQU8sRUFDM0JBLFVBQVVELGlCQUFpQixLQUFLLElBQUksTUFBTUEsY0FDMUNFLHFCQUFxQk4sS0FBS08sYUFBYSxFQUN2Q0EsZ0JBQWdCRCx1QkFBdUIsS0FBSyxJQUFJLE9BQU9BO1lBRTNELElBQUksT0FBT0gsUUFBUSxVQUFVO2dCQUMzQixPQUFPUCxPQUFPWSxVQUFVLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUUsd0JBQXdCUjtZQUM5RDtZQUVBLElBQUksT0FBT0ksWUFBWSxVQUFVO2dCQUMvQixPQUFPVCxPQUFPWSxVQUFVLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUUsNEJBQTRCUjtZQUNsRTtZQUVBLElBQUksT0FBT00sa0JBQWtCLFdBQVc7Z0JBQ3RDLE9BQU9YLE9BQU9ZLFVBQVUsQ0FBQ0MsSUFBSSxDQUFDLElBQUksRUFBRSxtQ0FBbUNSO1lBQ3pFO1lBRUFFLE1BQU0sSUFBSSxDQUFDTyxXQUFXLENBQUNDLFFBQVEsQ0FBQ1I7WUFDaENFLFVBQVUsSUFBSSxDQUFDSyxXQUFXLENBQUNDLFFBQVEsQ0FBQ047WUFFcEMsSUFBSUUsZUFBZTtnQkFDakIsSUFBSSxDQUFDSyxTQUFTO1lBQ2hCO1lBRUEsSUFBSSxDQUFDQyxTQUFTLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxLQUFLLEVBQUUsSUFBSSxDQUFDRCxNQUFNLENBQUNFLE1BQU0sRUFBRSxTQUFVQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsR0FBRztnQkFDN0UsSUFBSUMsT0FBT2xCLE1BQU1ZLE1BQU0sQ0FBQ08sSUFBSSxDQUFDRixJQUFJLEdBQUdoQixNQUFNRCxNQUFNWSxNQUFNLENBQUNPLElBQUksQ0FBQ0YsSUFBSSxHQUFHZDtnQkFDbkVILE1BQU1ZLE1BQU0sQ0FBQ08sSUFBSSxDQUFDRixJQUFJLEdBQUdDO2dCQUN6QmxCLE1BQU1ZLE1BQU0sQ0FBQ08sSUFBSSxDQUFDRixNQUFNLEVBQUUsR0FBR0M7Z0JBQzdCbEIsTUFBTVksTUFBTSxDQUFDTyxJQUFJLENBQUNGLE1BQU0sRUFBRSxHQUFHQztZQUMvQjtZQUVBLElBQUksQ0FBQyxHQUFHeEIsT0FBTzBCLGFBQWEsRUFBRXJCLEtBQUs7Z0JBQ2pDQSxHQUFHUSxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sSUFBSTtZQUMxQjtZQUVBLE9BQU8sSUFBSTtRQUNiO0lBQ0Y7QUFDRjtBQUVBZixrQkFBa0IsR0FBR0k7QUFDckJ5QixPQUFPN0IsT0FBTyxHQUFHQSxRQUFROEIsT0FBTyxFQUNoQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xci1jb2RlLy4vbm9kZV9tb2R1bGVzL0BqaW1wL3BsdWdpbi10aHJlc2hvbGQvZGlzdC9pbmRleC5qcz9iNTlhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQGppbXAvdXRpbHNcIik7XG5cbi8qKlxuICogQXBwbGllcyBhIG1pbmltdW0gY29sb3IgdGhyZXNob2xkIHRvIGEgZ3JleXNjYWxlIGltYWdlLiAgQ29udmVydHMgaW1hZ2UgdG8gZ3JleXNjYWxlIGJ5IGRlZmF1bHRcbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zIG9iamVjdFxuICogIG1heDogQSBudW1iZXIgYXV0byBsaW1pdGVkIGJldHdlZW4gMCAtIDI1NVxuICogIHJlcGxhY2U6IChvcHRpb25hbCkgQSBudW1iZXIgYXV0byBsaW1pdGVkIGJldHdlZW4gMCAtIDI1NSAoZGVmYXVsdCAyNTUpXG4gKiAgYXV0b0dyZXlzY2FsZTogKG9wdGlvbmFsKSBBIGJvb2xlYW4gd2hldGhlciB0byBhcHBseSBncmV5c2NhbGUgYmVmb3JlaGFuZCAoZGVmYXVsdCB0cnVlKVxuICogQHBhcmFtIHtudW1iZXJ9IGNiIChvcHRpb25hbCkgYSBjYWxsYmFjayBmb3Igd2hlbiBjb21wbGV0ZVxuICogQHJldHVybiB7dGhpc30gdGhpcyBmb3IgY2hhaW5pbmcgb2YgbWV0aG9kc1xuICovXG52YXIgX2RlZmF1bHQgPSBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0aHJlc2hvbGQ6IGZ1bmN0aW9uIHRocmVzaG9sZChfcmVmLCBjYikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIG1heCA9IF9yZWYubWF4LFxuICAgICAgICAgIF9yZWYkcmVwbGFjZSA9IF9yZWYucmVwbGFjZSxcbiAgICAgICAgICByZXBsYWNlID0gX3JlZiRyZXBsYWNlID09PSB2b2lkIDAgPyAyNTUgOiBfcmVmJHJlcGxhY2UsXG4gICAgICAgICAgX3JlZiRhdXRvR3JleXNjYWxlID0gX3JlZi5hdXRvR3JleXNjYWxlLFxuICAgICAgICAgIGF1dG9HcmV5c2NhbGUgPSBfcmVmJGF1dG9HcmV5c2NhbGUgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJGF1dG9HcmV5c2NhbGU7XG5cbiAgICAgIGlmICh0eXBlb2YgbWF4ICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBfdXRpbHMudGhyb3dFcnJvci5jYWxsKHRoaXMsIFwibWF4IG11c3QgYmUgYSBudW1iZXJcIiwgY2IpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHJlcGxhY2UgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIF91dGlscy50aHJvd0Vycm9yLmNhbGwodGhpcywgXCJyZXBsYWNlIG11c3QgYmUgYSBudW1iZXJcIiwgY2IpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGF1dG9HcmV5c2NhbGUgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIHJldHVybiBfdXRpbHMudGhyb3dFcnJvci5jYWxsKHRoaXMsIFwiYXV0b0dyZXlzY2FsZSBtdXN0IGJlIGEgYm9vbGVhblwiLCBjYik7XG4gICAgICB9XG5cbiAgICAgIG1heCA9IHRoaXMuY29uc3RydWN0b3IubGltaXQyNTUobWF4KTtcbiAgICAgIHJlcGxhY2UgPSB0aGlzLmNvbnN0cnVjdG9yLmxpbWl0MjU1KHJlcGxhY2UpO1xuXG4gICAgICBpZiAoYXV0b0dyZXlzY2FsZSkge1xuICAgICAgICB0aGlzLmdyZXlzY2FsZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNjYW5RdWlldCgwLCAwLCB0aGlzLmJpdG1hcC53aWR0aCwgdGhpcy5iaXRtYXAuaGVpZ2h0LCBmdW5jdGlvbiAoeCwgeSwgaWR4KSB7XG4gICAgICAgIHZhciBncmV5ID0gX3RoaXMuYml0bWFwLmRhdGFbaWR4XSA8IG1heCA/IF90aGlzLmJpdG1hcC5kYXRhW2lkeF0gOiByZXBsYWNlO1xuICAgICAgICBfdGhpcy5iaXRtYXAuZGF0YVtpZHhdID0gZ3JleTtcbiAgICAgICAgX3RoaXMuYml0bWFwLmRhdGFbaWR4ICsgMV0gPSBncmV5O1xuICAgICAgICBfdGhpcy5iaXRtYXAuZGF0YVtpZHggKyAyXSA9IGdyZXk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKCgwLCBfdXRpbHMuaXNOb2RlUGF0dGVybikoY2IpKSB7XG4gICAgICAgIGNiLmNhbGwodGhpcywgbnVsbCwgdGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl91dGlscyIsInJlcXVpcmUiLCJfZGVmYXVsdCIsInRocmVzaG9sZCIsIl9yZWYiLCJjYiIsIl90aGlzIiwibWF4IiwiX3JlZiRyZXBsYWNlIiwicmVwbGFjZSIsIl9yZWYkYXV0b0dyZXlzY2FsZSIsImF1dG9HcmV5c2NhbGUiLCJ0aHJvd0Vycm9yIiwiY2FsbCIsImNvbnN0cnVjdG9yIiwibGltaXQyNTUiLCJncmV5c2NhbGUiLCJzY2FuUXVpZXQiLCJiaXRtYXAiLCJ3aWR0aCIsImhlaWdodCIsIngiLCJ5IiwiaWR4IiwiZ3JleSIsImRhdGEiLCJpc05vZGVQYXR0ZXJuIiwibW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugin-threshold/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/plugins/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@jimp/plugins/dist/index.js ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/toConsumableArray.js\"));\nvar _timm = __webpack_require__(/*! timm */ \"(ssr)/./node_modules/timm/lib/timm.js\");\nvar _pluginBlit = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-blit */ \"(ssr)/./node_modules/@jimp/plugin-blit/dist/index.js\"));\nvar _pluginBlur = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-blur */ \"(ssr)/./node_modules/@jimp/plugin-blur/dist/index.js\"));\nvar _pluginCircle = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-circle */ \"(ssr)/./node_modules/@jimp/plugin-circle/dist/index.js\"));\nvar _pluginColor = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-color */ \"(ssr)/./node_modules/@jimp/plugin-color/dist/index.js\"));\nvar _pluginContain = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-contain */ \"(ssr)/./node_modules/@jimp/plugin-contain/dist/index.js\"));\nvar _pluginCover = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-cover */ \"(ssr)/./node_modules/@jimp/plugin-cover/dist/index.js\"));\nvar _pluginCrop = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-crop */ \"(ssr)/./node_modules/@jimp/plugin-crop/dist/index.js\"));\nvar _pluginDisplace = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-displace */ \"(ssr)/./node_modules/@jimp/plugin-displace/dist/index.js\"));\nvar _pluginDither = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-dither */ \"(ssr)/./node_modules/@jimp/plugin-dither/dist/index.js\"));\nvar _pluginFisheye = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-fisheye */ \"(ssr)/./node_modules/@jimp/plugin-fisheye/dist/index.js\"));\nvar _pluginFlip = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-flip */ \"(ssr)/./node_modules/@jimp/plugin-flip/dist/index.js\"));\nvar _pluginGaussian = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-gaussian */ \"(ssr)/./node_modules/@jimp/plugin-gaussian/dist/index.js\"));\nvar _pluginInvert = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-invert */ \"(ssr)/./node_modules/@jimp/plugin-invert/dist/index.js\"));\nvar _pluginMask = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-mask */ \"(ssr)/./node_modules/@jimp/plugin-mask/dist/index.js\"));\nvar _pluginNormalize = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-normalize */ \"(ssr)/./node_modules/@jimp/plugin-normalize/dist/index.js\"));\nvar _pluginPrint = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-print */ \"(ssr)/./node_modules/@jimp/plugin-print/dist/index.js\"));\nvar _pluginResize = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-resize */ \"(ssr)/./node_modules/@jimp/plugin-resize/dist/index.js\"));\nvar _pluginRotate = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-rotate */ \"(ssr)/./node_modules/@jimp/plugin-rotate/dist/index.js\"));\nvar _pluginScale = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-scale */ \"(ssr)/./node_modules/@jimp/plugin-scale/dist/index.js\"));\nvar _pluginShadow = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-shadow */ \"(ssr)/./node_modules/@jimp/plugin-shadow/dist/index.js\"));\nvar _pluginThreshold = _interopRequireDefault(__webpack_require__(/*! @jimp/plugin-threshold */ \"(ssr)/./node_modules/@jimp/plugin-threshold/dist/index.js\"));\nvar plugins = [\n    _pluginBlit[\"default\"],\n    _pluginBlur[\"default\"],\n    _pluginCircle[\"default\"],\n    _pluginColor[\"default\"],\n    _pluginContain[\"default\"],\n    _pluginCover[\"default\"],\n    _pluginCrop[\"default\"],\n    _pluginDisplace[\"default\"],\n    _pluginDither[\"default\"],\n    _pluginFisheye[\"default\"],\n    _pluginFlip[\"default\"],\n    _pluginGaussian[\"default\"],\n    _pluginInvert[\"default\"],\n    _pluginMask[\"default\"],\n    _pluginNormalize[\"default\"],\n    _pluginPrint[\"default\"],\n    _pluginResize[\"default\"],\n    _pluginRotate[\"default\"],\n    _pluginScale[\"default\"],\n    _pluginShadow[\"default\"],\n    _pluginThreshold[\"default\"]\n];\nvar _default = function _default(jimpEvChange) {\n    var initializedPlugins = plugins.map(function(pluginModule) {\n        var plugin = pluginModule(jimpEvChange) || {};\n        if (!plugin[\"class\"] && !plugin.constants) {\n            // Default to class function\n            plugin = {\n                \"class\": plugin\n            };\n        }\n        return plugin;\n    });\n    return _timm.mergeDeep.apply(void 0, (0, _toConsumableArray2[\"default\"])(initializedPlugins));\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/plugins/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/png/dist/index.js":
/*!**********************************************!*\
  !*** ./node_modules/@jimp/png/dist/index.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _pngjs = __webpack_require__(/*! pngjs */ \"(ssr)/./node_modules/pngjs/lib/png.js\");\nvar _utils = __webpack_require__(/*! @jimp/utils */ \"(ssr)/./node_modules/@jimp/utils/dist/index.js\");\nvar MIME_TYPE = \"image/png\"; // PNG filter types\nvar PNG_FILTER_AUTO = -1;\nvar PNG_FILTER_NONE = 0;\nvar PNG_FILTER_SUB = 1;\nvar PNG_FILTER_UP = 2;\nvar PNG_FILTER_AVERAGE = 3;\nvar PNG_FILTER_PATH = 4;\nvar _default = function _default() {\n    return {\n        mime: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, [\n            \"png\"\n        ]),\n        constants: {\n            MIME_PNG: MIME_TYPE,\n            PNG_FILTER_AUTO: PNG_FILTER_AUTO,\n            PNG_FILTER_NONE: PNG_FILTER_NONE,\n            PNG_FILTER_SUB: PNG_FILTER_SUB,\n            PNG_FILTER_UP: PNG_FILTER_UP,\n            PNG_FILTER_AVERAGE: PNG_FILTER_AVERAGE,\n            PNG_FILTER_PATH: PNG_FILTER_PATH\n        },\n        hasAlpha: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, true),\n        decoders: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, _pngjs.PNG.sync.read),\n        encoders: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, function(data) {\n            var png = new _pngjs.PNG({\n                width: data.bitmap.width,\n                height: data.bitmap.height\n            });\n            png.data = data.bitmap.data;\n            return _pngjs.PNG.sync.write(png, {\n                width: data.bitmap.width,\n                height: data.bitmap.height,\n                deflateLevel: data._deflateLevel,\n                deflateStrategy: data._deflateStrategy,\n                filterType: data._filterType,\n                colorType: typeof data._colorType === \"number\" ? data._colorType : data._rgba ? 6 : 2,\n                inputHasAlpha: data._rgba\n            });\n        }),\n        \"class\": {\n            _deflateLevel: 9,\n            _deflateStrategy: 3,\n            _filterType: PNG_FILTER_AUTO,\n            _colorType: null,\n            /**\n       * Sets the deflate level used when saving as PNG format (default is 9)\n       * @param {number} l Deflate level to use 0-9. 0 is no compression. 9 (default) is maximum compression.\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */ deflateLevel: function deflateLevel(l, cb) {\n                if (typeof l !== \"number\") {\n                    return _utils.throwError.call(this, \"l must be a number\", cb);\n                }\n                if (l < 0 || l > 9) {\n                    return _utils.throwError.call(this, \"l must be a number 0 - 9\", cb);\n                }\n                this._deflateLevel = Math.round(l);\n                if ((0, _utils.isNodePattern)(cb)) {\n                    cb.call(this, null, this);\n                }\n                return this;\n            },\n            /**\n       * Sets the deflate strategy used when saving as PNG format (default is 3)\n       * @param {number} s Deflate strategy to use 0-3.\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */ deflateStrategy: function deflateStrategy(s, cb) {\n                if (typeof s !== \"number\") {\n                    return _utils.throwError.call(this, \"s must be a number\", cb);\n                }\n                if (s < 0 || s > 3) {\n                    return _utils.throwError.call(this, \"s must be a number 0 - 3\", cb);\n                }\n                this._deflateStrategy = Math.round(s);\n                if ((0, _utils.isNodePattern)(cb)) {\n                    cb.call(this, null, this);\n                }\n                return this;\n            },\n            /**\n       * Sets the filter type used when saving as PNG format (default is automatic filters)\n       * @param {number} f The quality to use -1-4.\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */ filterType: function filterType(f, cb) {\n                if (typeof f !== \"number\") {\n                    return _utils.throwError.call(this, \"n must be a number\", cb);\n                }\n                if (f < -1 || f > 4) {\n                    return _utils.throwError.call(this, \"n must be -1 (auto) or a number 0 - 4\", cb);\n                }\n                this._filterType = Math.round(f);\n                if ((0, _utils.isNodePattern)(cb)) {\n                    cb.call(this, null, this);\n                }\n                return this;\n            },\n            /**\n       * Sets the color type used when saving as PNG format\n       * @param {number} s color type to use 0, 2, 4, 6.\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */ colorType: function colorType(s, cb) {\n                if (typeof s !== \"number\") {\n                    return _utils.throwError.call(this, \"s must be a number\", cb);\n                }\n                if (s !== 0 && s !== 2 && s !== 4 && s !== 6) {\n                    return _utils.throwError.call(this, \"s must be a number 0, 2, 4, 6.\", cb);\n                }\n                this._colorType = Math.round(s);\n                if ((0, _utils.isNodePattern)(cb)) {\n                    cb.call(this, null, this);\n                }\n                return this;\n            }\n        }\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/png/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/tiff/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/@jimp/tiff/dist/index.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _utif = _interopRequireDefault(__webpack_require__(/*! utif */ \"(ssr)/./node_modules/utif/UTIF.js\"));\nvar MIME_TYPE = \"image/tiff\";\nvar _default = function _default() {\n    return {\n        mime: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, [\n            \"tiff\",\n            \"tif\"\n        ]),\n        constants: {\n            MIME_TIFF: MIME_TYPE\n        },\n        decoders: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, function(data) {\n            var ifds = _utif[\"default\"].decode(data);\n            var page = ifds[0];\n            _utif[\"default\"].decodeImages(data, ifds);\n            var rgba = _utif[\"default\"].toRGBA8(page);\n            return {\n                data: Buffer.from(rgba),\n                width: page.t256[0],\n                height: page.t257[0]\n            };\n        }),\n        encoders: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, function(image) {\n            var tiff = _utif[\"default\"].encodeImage(image.bitmap.data, image.bitmap.width, image.bitmap.height);\n            return Buffer.from(tiff);\n        })\n    };\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvdGlmZi9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsSUFBSUEseUJBQXlCQyxtQkFBT0EsQ0FBQywwSEFBOEM7QUFFbkZDLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBa0IsR0FBRyxLQUFLO0FBRTFCLElBQUlFLG1CQUFtQk4sdUJBQXVCQyxtQkFBT0EsQ0FBQyw0R0FBdUM7QUFFN0YsSUFBSU0sUUFBUVAsdUJBQXVCQyxtQkFBT0EsQ0FBQywrQ0FBTTtBQUVqRCxJQUFJTyxZQUFZO0FBRWhCLElBQUlDLFdBQVcsU0FBU0E7SUFDdEIsT0FBTztRQUNMQyxNQUFNLENBQUMsR0FBR0osZ0JBQWdCLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBR0UsV0FBVztZQUFDO1lBQVE7U0FBTTtRQUNyRUcsV0FBVztZQUNUQyxXQUFXSjtRQUNiO1FBQ0FLLFVBQVUsQ0FBQyxHQUFHUCxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHRSxXQUFXLFNBQVVNLElBQUk7WUFDdEUsSUFBSUMsT0FBT1IsS0FBSyxDQUFDLFVBQVUsQ0FBQ1MsTUFBTSxDQUFDRjtZQUVuQyxJQUFJRyxPQUFPRixJQUFJLENBQUMsRUFBRTtZQUVsQlIsS0FBSyxDQUFDLFVBQVUsQ0FBQ1csWUFBWSxDQUFDSixNQUFNQztZQUVwQyxJQUFJSSxPQUFPWixLQUFLLENBQUMsVUFBVSxDQUFDYSxPQUFPLENBQUNIO1lBRXBDLE9BQU87Z0JBQ0xILE1BQU1PLE9BQU9DLElBQUksQ0FBQ0g7Z0JBQ2xCSSxPQUFPTixLQUFLTyxJQUFJLENBQUMsRUFBRTtnQkFDbkJDLFFBQVFSLEtBQUtTLElBQUksQ0FBQyxFQUFFO1lBQ3RCO1FBQ0Y7UUFDQUMsVUFBVSxDQUFDLEdBQUdyQixnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHRSxXQUFXLFNBQVVvQixLQUFLO1lBQ3ZFLElBQUlDLE9BQU90QixLQUFLLENBQUMsVUFBVSxDQUFDdUIsV0FBVyxDQUFDRixNQUFNRyxNQUFNLENBQUNqQixJQUFJLEVBQUVjLE1BQU1HLE1BQU0sQ0FBQ1IsS0FBSyxFQUFFSyxNQUFNRyxNQUFNLENBQUNOLE1BQU07WUFFbEcsT0FBT0osT0FBT0MsSUFBSSxDQUFDTztRQUNyQjtJQUNGO0FBQ0Y7QUFFQXpCLGtCQUFrQixHQUFHSztBQUNyQnVCLE9BQU81QixPQUFPLEdBQUdBLFFBQVE2QixPQUFPLEVBQ2hDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3FyLWNvZGUvLi9ub2RlX21vZHVsZXMvQGppbXAvdGlmZi9kaXN0L2luZGV4LmpzPzQ2N2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfdXRpZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInV0aWZcIikpO1xuXG52YXIgTUlNRV9UWVBFID0gXCJpbWFnZS90aWZmXCI7XG5cbnZhciBfZGVmYXVsdCA9IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICByZXR1cm4ge1xuICAgIG1pbWU6ICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoe30sIE1JTUVfVFlQRSwgW1widGlmZlwiLCBcInRpZlwiXSksXG4gICAgY29uc3RhbnRzOiB7XG4gICAgICBNSU1FX1RJRkY6IE1JTUVfVFlQRVxuICAgIH0sXG4gICAgZGVjb2RlcnM6ICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoe30sIE1JTUVfVFlQRSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHZhciBpZmRzID0gX3V0aWZbXCJkZWZhdWx0XCJdLmRlY29kZShkYXRhKTtcblxuICAgICAgdmFyIHBhZ2UgPSBpZmRzWzBdO1xuXG4gICAgICBfdXRpZltcImRlZmF1bHRcIl0uZGVjb2RlSW1hZ2VzKGRhdGEsIGlmZHMpO1xuXG4gICAgICB2YXIgcmdiYSA9IF91dGlmW1wiZGVmYXVsdFwiXS50b1JHQkE4KHBhZ2UpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBCdWZmZXIuZnJvbShyZ2JhKSxcbiAgICAgICAgd2lkdGg6IHBhZ2UudDI1NlswXSxcbiAgICAgICAgaGVpZ2h0OiBwYWdlLnQyNTdbMF1cbiAgICAgIH07XG4gICAgfSksXG4gICAgZW5jb2RlcnM6ICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoe30sIE1JTUVfVFlQRSwgZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgICB2YXIgdGlmZiA9IF91dGlmW1wiZGVmYXVsdFwiXS5lbmNvZGVJbWFnZShpbWFnZS5iaXRtYXAuZGF0YSwgaW1hZ2UuYml0bWFwLndpZHRoLCBpbWFnZS5iaXRtYXAuaGVpZ2h0KTtcblxuICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRpZmYpO1xuICAgIH0pXG4gIH07XG59O1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfdXRpZiIsIk1JTUVfVFlQRSIsIl9kZWZhdWx0IiwibWltZSIsImNvbnN0YW50cyIsIk1JTUVfVElGRiIsImRlY29kZXJzIiwiZGF0YSIsImlmZHMiLCJkZWNvZGUiLCJwYWdlIiwiZGVjb2RlSW1hZ2VzIiwicmdiYSIsInRvUkdCQTgiLCJCdWZmZXIiLCJmcm9tIiwid2lkdGgiLCJ0MjU2IiwiaGVpZ2h0IiwidDI1NyIsImVuY29kZXJzIiwiaW1hZ2UiLCJ0aWZmIiwiZW5jb2RlSW1hZ2UiLCJiaXRtYXAiLCJtb2R1bGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/tiff/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/types/dist/index.js":
/*!************************************************!*\
  !*** ./node_modules/@jimp/types/dist/index.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _timm = __webpack_require__(/*! timm */ \"(ssr)/./node_modules/timm/lib/timm.js\");\nvar _jpeg = _interopRequireDefault(__webpack_require__(/*! @jimp/jpeg */ \"(ssr)/./node_modules/@jimp/jpeg/dist/index.js\"));\nvar _png = _interopRequireDefault(__webpack_require__(/*! @jimp/png */ \"(ssr)/./node_modules/@jimp/png/dist/index.js\"));\nvar _bmp = _interopRequireDefault(__webpack_require__(/*! @jimp/bmp */ \"(ssr)/./node_modules/@jimp/bmp/dist/index.js\"));\nvar _tiff = _interopRequireDefault(__webpack_require__(/*! @jimp/tiff */ \"(ssr)/./node_modules/@jimp/tiff/dist/index.js\"));\nvar _gif = _interopRequireDefault(__webpack_require__(/*! @jimp/gif */ \"(ssr)/./node_modules/@jimp/gif/dist/index.js\"));\nvar _default = function _default() {\n    return (0, _timm.mergeDeep)((0, _jpeg[\"default\"])(), (0, _png[\"default\"])(), (0, _bmp[\"default\"])(), (0, _tiff[\"default\"])(), (0, _gif[\"default\"])());\n};\nexports[\"default\"] = _default;\nmodule.exports = exports.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvdHlwZXMvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLHlCQUF5QkMsbUJBQU9BLENBQUMsMEhBQThDO0FBRW5GQyw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUcsS0FBSztBQUUxQixJQUFJRSxRQUFRTCxtQkFBT0EsQ0FBQyxtREFBTTtBQUUxQixJQUFJTSxRQUFRUCx1QkFBdUJDLG1CQUFPQSxDQUFDLGlFQUFZO0FBRXZELElBQUlPLE9BQU9SLHVCQUF1QkMsbUJBQU9BLENBQUMsK0RBQVc7QUFFckQsSUFBSVEsT0FBT1QsdUJBQXVCQyxtQkFBT0EsQ0FBQywrREFBVztBQUVyRCxJQUFJUyxRQUFRVix1QkFBdUJDLG1CQUFPQSxDQUFDLGlFQUFZO0FBRXZELElBQUlVLE9BQU9YLHVCQUF1QkMsbUJBQU9BLENBQUMsK0RBQVc7QUFFckQsSUFBSVcsV0FBVyxTQUFTQTtJQUN0QixPQUFPLENBQUMsR0FBR04sTUFBTU8sU0FBUyxFQUFFLENBQUMsR0FBR04sS0FBSyxDQUFDLFVBQVUsS0FBSyxDQUFDLEdBQUdDLElBQUksQ0FBQyxVQUFVLEtBQUssQ0FBQyxHQUFHQyxJQUFJLENBQUMsVUFBVSxLQUFLLENBQUMsR0FBR0MsS0FBSyxDQUFDLFVBQVUsS0FBSyxDQUFDLEdBQUdDLElBQUksQ0FBQyxVQUFVO0FBQ25KO0FBRUFQLGtCQUFrQixHQUFHUTtBQUNyQkUsT0FBT1YsT0FBTyxHQUFHQSxRQUFRVyxPQUFPLEVBQ2hDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3FyLWNvZGUvLi9ub2RlX21vZHVsZXMvQGppbXAvdHlwZXMvZGlzdC9pbmRleC5qcz9mYjk0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3RpbW0gPSByZXF1aXJlKFwidGltbVwiKTtcblxudmFyIF9qcGVnID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGppbXAvanBlZ1wiKSk7XG5cbnZhciBfcG5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGppbXAvcG5nXCIpKTtcblxudmFyIF9ibXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAamltcC9ibXBcIikpO1xuXG52YXIgX3RpZmYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAamltcC90aWZmXCIpKTtcblxudmFyIF9naWYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAamltcC9naWZcIikpO1xuXG52YXIgX2RlZmF1bHQgPSBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgcmV0dXJuICgwLCBfdGltbS5tZXJnZURlZXApKCgwLCBfanBlZ1tcImRlZmF1bHRcIl0pKCksICgwLCBfcG5nW1wiZGVmYXVsdFwiXSkoKSwgKDAsIF9ibXBbXCJkZWZhdWx0XCJdKSgpLCAoMCwgX3RpZmZbXCJkZWZhdWx0XCJdKSgpLCAoMCwgX2dpZltcImRlZmF1bHRcIl0pKCkpO1xufTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfdGltbSIsIl9qcGVnIiwiX3BuZyIsIl9ibXAiLCJfdGlmZiIsIl9naWYiLCJfZGVmYXVsdCIsIm1lcmdlRGVlcCIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/types/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@jimp/utils/dist/index.js":
/*!************************************************!*\
  !*** ./node_modules/@jimp/utils/dist/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isNodePattern = isNodePattern;\nexports.throwError = throwError;\nexports.scan = scan;\nexports.scanIterator = scanIterator;\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ \"(ssr)/./node_modules/@babel/runtime/regenerator/index.js\"));\nvar _marked = /*#__PURE__*/ _regenerator[\"default\"].mark(scanIterator);\nfunction isNodePattern(cb) {\n    if (typeof cb === \"undefined\") {\n        return false;\n    }\n    if (typeof cb !== \"function\") {\n        throw new TypeError(\"Callback must be a function\");\n    }\n    return true;\n}\nfunction throwError(error, cb) {\n    if (typeof error === \"string\") {\n        error = new Error(error);\n    }\n    if (typeof cb === \"function\") {\n        return cb.call(this, error);\n    }\n    throw error;\n}\nfunction scan(image, x, y, w, h, f) {\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n    w = Math.round(w);\n    h = Math.round(h);\n    for(var _y = y; _y < y + h; _y++){\n        for(var _x = x; _x < x + w; _x++){\n            var idx = image.bitmap.width * _y + _x << 2;\n            f.call(image, _x, _y, idx);\n        }\n    }\n    return image;\n}\nfunction scanIterator(image, x, y, w, h) {\n    var _y, _x, idx;\n    return _regenerator[\"default\"].wrap(function scanIterator$(_context) {\n        while(1){\n            switch(_context.prev = _context.next){\n                case 0:\n                    // round input\n                    x = Math.round(x);\n                    y = Math.round(y);\n                    w = Math.round(w);\n                    h = Math.round(h);\n                    _y = y;\n                case 5:\n                    if (!(_y < y + h)) {\n                        _context.next = 17;\n                        break;\n                    }\n                    _x = x;\n                case 7:\n                    if (!(_x < x + w)) {\n                        _context.next = 14;\n                        break;\n                    }\n                    idx = image.bitmap.width * _y + _x << 2;\n                    _context.next = 11;\n                    return {\n                        x: _x,\n                        y: _y,\n                        idx: idx,\n                        image: image\n                    };\n                case 11:\n                    _x++;\n                    _context.next = 7;\n                    break;\n                case 14:\n                    _y++;\n                    _context.next = 5;\n                    break;\n                case 17:\n                case \"end\":\n                    return _context.stop();\n            }\n        }\n    }, _marked);\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGppbXAvdXRpbHMvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLHlCQUF5QkMsbUJBQU9BLENBQUMsMEhBQThDO0FBRW5GQyw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQscUJBQXFCLEdBQUdFO0FBQ3hCRixrQkFBa0IsR0FBR0c7QUFDckJILFlBQVksR0FBR0k7QUFDZkosb0JBQW9CLEdBQUdLO0FBRXZCLElBQUlDLGVBQWVWLHVCQUF1QkMsbUJBQU9BLENBQUMsNEZBQTRCO0FBRTlFLElBQUlVLFVBQ0osV0FBVyxHQUNYRCxZQUFZLENBQUMsVUFBVSxDQUFDRSxJQUFJLENBQUNIO0FBRTdCLFNBQVNILGNBQWNPLEVBQUU7SUFDdkIsSUFBSSxPQUFPQSxPQUFPLGFBQWE7UUFDN0IsT0FBTztJQUNUO0lBRUEsSUFBSSxPQUFPQSxPQUFPLFlBQVk7UUFDNUIsTUFBTSxJQUFJQyxVQUFVO0lBQ3RCO0lBRUEsT0FBTztBQUNUO0FBRUEsU0FBU1AsV0FBV1EsS0FBSyxFQUFFRixFQUFFO0lBQzNCLElBQUksT0FBT0UsVUFBVSxVQUFVO1FBQzdCQSxRQUFRLElBQUlDLE1BQU1EO0lBQ3BCO0lBRUEsSUFBSSxPQUFPRixPQUFPLFlBQVk7UUFDNUIsT0FBT0EsR0FBR0ksSUFBSSxDQUFDLElBQUksRUFBRUY7SUFDdkI7SUFFQSxNQUFNQTtBQUNSO0FBRUEsU0FBU1AsS0FBS1UsS0FBSyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUM7SUFDaEMsY0FBYztJQUNkSixJQUFJSyxLQUFLQyxLQUFLLENBQUNOO0lBQ2ZDLElBQUlJLEtBQUtDLEtBQUssQ0FBQ0w7SUFDZkMsSUFBSUcsS0FBS0MsS0FBSyxDQUFDSjtJQUNmQyxJQUFJRSxLQUFLQyxLQUFLLENBQUNIO0lBRWYsSUFBSyxJQUFJSSxLQUFLTixHQUFHTSxLQUFLTixJQUFJRSxHQUFHSSxLQUFNO1FBQ2pDLElBQUssSUFBSUMsS0FBS1IsR0FBR1EsS0FBS1IsSUFBSUUsR0FBR00sS0FBTTtZQUNqQyxJQUFJQyxNQUFNVixNQUFNVyxNQUFNLENBQUNDLEtBQUssR0FBR0osS0FBS0MsTUFBTTtZQUMxQ0osRUFBRU4sSUFBSSxDQUFDQyxPQUFPUyxJQUFJRCxJQUFJRTtRQUN4QjtJQUNGO0lBRUEsT0FBT1Y7QUFDVDtBQUVBLFNBQVNULGFBQWFTLEtBQUssRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQztJQUNyQyxJQUFJSSxJQUFJQyxJQUFJQztJQUVaLE9BQU9sQixZQUFZLENBQUMsVUFBVSxDQUFDcUIsSUFBSSxDQUFDLFNBQVNDLGNBQWNDLFFBQVE7UUFDakUsTUFBTyxFQUFHO1lBQ1IsT0FBUUEsU0FBU0MsSUFBSSxHQUFHRCxTQUFTRSxJQUFJO2dCQUNuQyxLQUFLO29CQUNILGNBQWM7b0JBQ2RoQixJQUFJSyxLQUFLQyxLQUFLLENBQUNOO29CQUNmQyxJQUFJSSxLQUFLQyxLQUFLLENBQUNMO29CQUNmQyxJQUFJRyxLQUFLQyxLQUFLLENBQUNKO29CQUNmQyxJQUFJRSxLQUFLQyxLQUFLLENBQUNIO29CQUNmSSxLQUFLTjtnQkFFUCxLQUFLO29CQUNILElBQUksQ0FBRU0sQ0FBQUEsS0FBS04sSUFBSUUsQ0FBQUEsR0FBSTt3QkFDakJXLFNBQVNFLElBQUksR0FBRzt3QkFDaEI7b0JBQ0Y7b0JBRUFSLEtBQUtSO2dCQUVQLEtBQUs7b0JBQ0gsSUFBSSxDQUFFUSxDQUFBQSxLQUFLUixJQUFJRSxDQUFBQSxHQUFJO3dCQUNqQlksU0FBU0UsSUFBSSxHQUFHO3dCQUNoQjtvQkFDRjtvQkFFQVAsTUFBTVYsTUFBTVcsTUFBTSxDQUFDQyxLQUFLLEdBQUdKLEtBQUtDLE1BQU07b0JBQ3RDTSxTQUFTRSxJQUFJLEdBQUc7b0JBQ2hCLE9BQU87d0JBQ0xoQixHQUFHUTt3QkFDSFAsR0FBR007d0JBQ0hFLEtBQUtBO3dCQUNMVixPQUFPQTtvQkFDVDtnQkFFRixLQUFLO29CQUNIUztvQkFDQU0sU0FBU0UsSUFBSSxHQUFHO29CQUNoQjtnQkFFRixLQUFLO29CQUNIVDtvQkFDQU8sU0FBU0UsSUFBSSxHQUFHO29CQUNoQjtnQkFFRixLQUFLO2dCQUNMLEtBQUs7b0JBQ0gsT0FBT0YsU0FBU0csSUFBSTtZQUN4QjtRQUNGO0lBQ0YsR0FBR3pCO0FBQ0wsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xci1jb2RlLy4vbm9kZV9tb2R1bGVzL0BqaW1wL3V0aWxzL2Rpc3QvaW5kZXguanM/MDk4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmlzTm9kZVBhdHRlcm4gPSBpc05vZGVQYXR0ZXJuO1xuZXhwb3J0cy50aHJvd0Vycm9yID0gdGhyb3dFcnJvcjtcbmV4cG9ydHMuc2NhbiA9IHNjYW47XG5leHBvcnRzLnNjYW5JdGVyYXRvciA9IHNjYW5JdGVyYXRvcjtcblxudmFyIF9yZWdlbmVyYXRvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKTtcblxudmFyIF9tYXJrZWQgPVxuLyojX19QVVJFX18qL1xuX3JlZ2VuZXJhdG9yW1wiZGVmYXVsdFwiXS5tYXJrKHNjYW5JdGVyYXRvcik7XG5cbmZ1bmN0aW9uIGlzTm9kZVBhdHRlcm4oY2IpIHtcbiAgaWYgKHR5cGVvZiBjYiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2IgIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gdGhyb3dFcnJvcihlcnJvciwgY2IpIHtcbiAgaWYgKHR5cGVvZiBlcnJvciA9PT0gXCJzdHJpbmdcIikge1xuICAgIGVycm9yID0gbmV3IEVycm9yKGVycm9yKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBjYi5jYWxsKHRoaXMsIGVycm9yKTtcbiAgfVxuXG4gIHRocm93IGVycm9yO1xufVxuXG5mdW5jdGlvbiBzY2FuKGltYWdlLCB4LCB5LCB3LCBoLCBmKSB7XG4gIC8vIHJvdW5kIGlucHV0XG4gIHggPSBNYXRoLnJvdW5kKHgpO1xuICB5ID0gTWF0aC5yb3VuZCh5KTtcbiAgdyA9IE1hdGgucm91bmQodyk7XG4gIGggPSBNYXRoLnJvdW5kKGgpO1xuXG4gIGZvciAodmFyIF95ID0geTsgX3kgPCB5ICsgaDsgX3krKykge1xuICAgIGZvciAodmFyIF94ID0geDsgX3ggPCB4ICsgdzsgX3grKykge1xuICAgICAgdmFyIGlkeCA9IGltYWdlLmJpdG1hcC53aWR0aCAqIF95ICsgX3ggPDwgMjtcbiAgICAgIGYuY2FsbChpbWFnZSwgX3gsIF95LCBpZHgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbWFnZTtcbn1cblxuZnVuY3Rpb24gc2Nhbkl0ZXJhdG9yKGltYWdlLCB4LCB5LCB3LCBoKSB7XG4gIHZhciBfeSwgX3gsIGlkeDtcblxuICByZXR1cm4gX3JlZ2VuZXJhdG9yW1wiZGVmYXVsdFwiXS53cmFwKGZ1bmN0aW9uIHNjYW5JdGVyYXRvciQoX2NvbnRleHQpIHtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgLy8gcm91bmQgaW5wdXRcbiAgICAgICAgICB4ID0gTWF0aC5yb3VuZCh4KTtcbiAgICAgICAgICB5ID0gTWF0aC5yb3VuZCh5KTtcbiAgICAgICAgICB3ID0gTWF0aC5yb3VuZCh3KTtcbiAgICAgICAgICBoID0gTWF0aC5yb3VuZChoKTtcbiAgICAgICAgICBfeSA9IHk7XG5cbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIGlmICghKF95IDwgeSArIGgpKSB7XG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfeCA9IHg7XG5cbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgIGlmICghKF94IDwgeCArIHcpKSB7XG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZHggPSBpbWFnZS5iaXRtYXAud2lkdGggKiBfeSArIF94IDw8IDI7XG4gICAgICAgICAgX2NvbnRleHQubmV4dCA9IDExO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBfeCxcbiAgICAgICAgICAgIHk6IF95LFxuICAgICAgICAgICAgaWR4OiBpZHgsXG4gICAgICAgICAgICBpbWFnZTogaW1hZ2VcbiAgICAgICAgICB9O1xuXG4gICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgX3grKztcbiAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgIF95Kys7XG4gICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBfbWFya2VkKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNOb2RlUGF0dGVybiIsInRocm93RXJyb3IiLCJzY2FuIiwic2Nhbkl0ZXJhdG9yIiwiX3JlZ2VuZXJhdG9yIiwiX21hcmtlZCIsIm1hcmsiLCJjYiIsIlR5cGVFcnJvciIsImVycm9yIiwiRXJyb3IiLCJjYWxsIiwiaW1hZ2UiLCJ4IiwieSIsInciLCJoIiwiZiIsIk1hdGgiLCJyb3VuZCIsIl95IiwiX3giLCJpZHgiLCJiaXRtYXAiLCJ3aWR0aCIsIndyYXAiLCJzY2FuSXRlcmF0b3IkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInN0b3AiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@jimp/utils/dist/index.js\n");

/***/ })

};
;