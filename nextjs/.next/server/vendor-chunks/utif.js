"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/utif";
exports.ids = ["vendor-chunks/utif"];
exports.modules = {

/***/ "(ssr)/./node_modules/utif/UTIF.js":
/*!***********************************!*\
  !*** ./node_modules/utif/UTIF.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n(function() {\n    var UTIF = {};\n    // Make available for import by `require()`\n    if (true) {\n        module.exports = UTIF;\n    } else {}\n    var pako;\n    if (true) {\n        pako = __webpack_require__(/*! pako */ \"(ssr)/./node_modules/pako/index.js\");\n    } else {}\n    function log() {\n        if (typeof process == \"undefined\" || \"development\" == \"development\") console.log.apply(console, arguments);\n    }\n    (function(UTIF, pako) {\n        // Following lines add a JPEG decoder  to UTIF.JpegDecoder\n        (function() {\n            var V = \"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator ? function(g) {\n                return typeof g;\n            } : function(g) {\n                return g && \"function\" === typeof Symbol && g.constructor === Symbol && g !== Symbol.prototype ? \"symbol\" : typeof g;\n            }, D = function() {\n                function g(g) {\n                    this.message = \"JPEG error: \" + g;\n                }\n                g.prototype = Error();\n                g.prototype.name = \"JpegError\";\n                return g.constructor = g;\n            }(), P = function() {\n                function g(g, D) {\n                    this.message = g;\n                    this.g = D;\n                }\n                g.prototype = Error();\n                g.prototype.name = \"DNLMarkerError\";\n                return g.constructor = g;\n            }();\n            (function() {\n                function g() {\n                    this.M = null;\n                    this.B = -1;\n                }\n                function W(a, d) {\n                    for(var f = 0, e = [], b, B, k = 16; 0 < k && !a[k - 1];)k--;\n                    e.push({\n                        children: [],\n                        index: 0\n                    });\n                    var l = e[0], r;\n                    for(b = 0; b < k; b++){\n                        for(B = 0; B < a[b]; B++){\n                            l = e.pop();\n                            for(l.children[l.index] = d[f]; 0 < l.index;)l = e.pop();\n                            l.index++;\n                            for(e.push(l); e.length <= b;)e.push(r = {\n                                children: [],\n                                index: 0\n                            }), l.children[l.index] = r.children, l = r;\n                            f++;\n                        }\n                        b + 1 < k && (e.push(r = {\n                            children: [],\n                            index: 0\n                        }), l.children[l.index] = r.children, l = r);\n                    }\n                    return e[0].children;\n                }\n                function X(a, d, f, e, b, B, k, l, r) {\n                    function n() {\n                        if (0 < x) return x--, z >> x & 1;\n                        z = a[d++];\n                        if (255 === z) {\n                            var c = a[d++];\n                            if (c) {\n                                if (220 === c && g) {\n                                    d += 2;\n                                    var b = a[d++] << 8 | a[d++];\n                                    if (0 < b && b !== f.g) throw new P(\"Found DNL marker (0xFFDC) while parsing scan data\", b);\n                                }\n                                throw new D(\"unexpected marker \" + (z << 8 | c).toString(16));\n                            }\n                        }\n                        x = 7;\n                        return z >>> 7;\n                    }\n                    function q(a) {\n                        for(;;){\n                            a = a[n()];\n                            if (\"number\" === typeof a) return a;\n                            if (\"object\" !== (\"undefined\" === typeof a ? \"undefined\" : V(a))) throw new D(\"invalid huffman sequence\");\n                        }\n                    }\n                    function h(a) {\n                        for(var c = 0; 0 < a;)c = c << 1 | n(), a--;\n                        return c;\n                    }\n                    function c(a) {\n                        if (1 === a) return 1 === n() ? 1 : -1;\n                        var c = h(a);\n                        return c >= 1 << a - 1 ? c : c + (-1 << a) + 1;\n                    }\n                    function C(a, b) {\n                        var d = q(a.D);\n                        d = 0 === d ? 0 : c(d);\n                        a.a[b] = a.m += d;\n                        for(d = 1; 64 > d;){\n                            var h = q(a.o), k = h & 15;\n                            h >>= 4;\n                            if (0 === k) {\n                                if (15 > h) break;\n                                d += 16;\n                            } else d += h, a.a[b + J[d]] = c(k), d++;\n                        }\n                    }\n                    function w(a, d) {\n                        var b = q(a.D);\n                        b = 0 === b ? 0 : c(b) << r;\n                        a.a[d] = a.m += b;\n                    }\n                    function p(a, c) {\n                        a.a[c] |= n() << r;\n                    }\n                    function m(a, b) {\n                        if (0 < A) A--;\n                        else for(var d = B; d <= k;){\n                            var e = q(a.o), f = e & 15;\n                            e >>= 4;\n                            if (0 === f) {\n                                if (15 > e) {\n                                    A = h(e) + (1 << e) - 1;\n                                    break;\n                                }\n                                d += 16;\n                            } else d += e, a.a[b + J[d]] = c(f) * (1 << r), d++;\n                        }\n                    }\n                    function t(a, d) {\n                        for(var b = B, e = 0, f; b <= k;){\n                            f = d + J[b];\n                            var l = 0 > a.a[f] ? -1 : 1;\n                            switch(E){\n                                case 0:\n                                    e = q(a.o);\n                                    f = e & 15;\n                                    e >>= 4;\n                                    if (0 === f) 15 > e ? (A = h(e) + (1 << e), E = 4) : (e = 16, E = 1);\n                                    else {\n                                        if (1 !== f) throw new D(\"invalid ACn encoding\");\n                                        Q = c(f);\n                                        E = e ? 2 : 3;\n                                    }\n                                    continue;\n                                case 1:\n                                case 2:\n                                    a.a[f] ? a.a[f] += l * (n() << r) : (e--, 0 === e && (E = 2 === E ? 3 : 0));\n                                    break;\n                                case 3:\n                                    a.a[f] ? a.a[f] += l * (n() << r) : (a.a[f] = Q << r, E = 0);\n                                    break;\n                                case 4:\n                                    a.a[f] && (a.a[f] += l * (n() << r));\n                            }\n                            b++;\n                        }\n                        4 === E && (A--, 0 === A && (E = 0));\n                    }\n                    var g = 9 < arguments.length && void 0 !== arguments[9] ? arguments[9] : !1, u = f.P, v = d, z = 0, x = 0, A = 0, E = 0, Q, K = e.length, F, L, M, I;\n                    var R = f.S ? 0 === B ? 0 === l ? w : p : 0 === l ? m : t : C;\n                    var G = 0;\n                    var O = 1 === K ? e[0].c * e[0].l : u * f.O;\n                    for(var S, T; G < O;){\n                        var U = b ? Math.min(O - G, b) : O;\n                        for(F = 0; F < K; F++)e[F].m = 0;\n                        A = 0;\n                        if (1 === K) {\n                            var y = e[0];\n                            for(I = 0; I < U; I++)R(y, 64 * ((y.c + 1) * (G / y.c | 0) + G % y.c)), G++;\n                        } else for(I = 0; I < U; I++){\n                            for(F = 0; F < K; F++)for(y = e[F], S = y.h, T = y.j, L = 0; L < T; L++)for(M = 0; M < S; M++)R(y, 64 * ((y.c + 1) * ((G / u | 0) * y.j + L) + (G % u * y.h + M)));\n                            G++;\n                        }\n                        x = 0;\n                        (y = N(a, d)) && y.f && ((0, _util.warn)(\"decodeScan - unexpected MCU data, current marker is: \" + y.f), d = y.offset);\n                        y = y && y.F;\n                        if (!y || 65280 >= y) throw new D(\"marker was not found\");\n                        if (65488 <= y && 65495 >= y) d += 2;\n                        else break;\n                    }\n                    (y = N(a, d)) && y.f && ((0, _util.warn)(\"decodeScan - unexpected Scan data, current marker is: \" + y.f), d = y.offset);\n                    return d - v;\n                }\n                function Y(a, d) {\n                    for(var f = d.c, e = d.l, b = new Int16Array(64), B = 0; B < e; B++)for(var k = 0; k < f; k++){\n                        var l = 64 * ((d.c + 1) * B + k), r = b, n = d.G, q = d.a;\n                        if (!n) throw new D(\"missing required Quantization Table.\");\n                        for(var h = 0; 64 > h; h += 8){\n                            var c = q[l + h];\n                            var C = q[l + h + 1];\n                            var w = q[l + h + 2];\n                            var p = q[l + h + 3];\n                            var m = q[l + h + 4];\n                            var t = q[l + h + 5];\n                            var g = q[l + h + 6];\n                            var u = q[l + h + 7];\n                            c *= n[h];\n                            if (0 === (C | w | p | m | t | g | u)) c = 5793 * c + 512 >> 10, r[h] = c, r[h + 1] = c, r[h + 2] = c, r[h + 3] = c, r[h + 4] = c, r[h + 5] = c, r[h + 6] = c, r[h + 7] = c;\n                            else {\n                                C *= n[h + 1];\n                                w *= n[h + 2];\n                                p *= n[h + 3];\n                                m *= n[h + 4];\n                                t *= n[h + 5];\n                                g *= n[h + 6];\n                                u *= n[h + 7];\n                                var v = 5793 * c + 128 >> 8;\n                                var z = 5793 * m + 128 >> 8;\n                                var x = w;\n                                var A = g;\n                                m = 2896 * (C - u) + 128 >> 8;\n                                u = 2896 * (C + u) + 128 >> 8;\n                                p <<= 4;\n                                t <<= 4;\n                                v = v + z + 1 >> 1;\n                                z = v - z;\n                                c = 3784 * x + 1567 * A + 128 >> 8;\n                                x = 1567 * x - 3784 * A + 128 >> 8;\n                                A = c;\n                                m = m + t + 1 >> 1;\n                                t = m - t;\n                                u = u + p + 1 >> 1;\n                                p = u - p;\n                                v = v + A + 1 >> 1;\n                                A = v - A;\n                                z = z + x + 1 >> 1;\n                                x = z - x;\n                                c = 2276 * m + 3406 * u + 2048 >> 12;\n                                m = 3406 * m - 2276 * u + 2048 >> 12;\n                                u = c;\n                                c = 799 * p + 4017 * t + 2048 >> 12;\n                                p = 4017 * p - 799 * t + 2048 >> 12;\n                                t = c;\n                                r[h] = v + u;\n                                r[h + 7] = v - u;\n                                r[h + 1] = z + t;\n                                r[h + 6] = z - t;\n                                r[h + 2] = x + p;\n                                r[h + 5] = x - p;\n                                r[h + 3] = A + m;\n                                r[h + 4] = A - m;\n                            }\n                        }\n                        for(n = 0; 8 > n; ++n)c = r[n], C = r[n + 8], w = r[n + 16], p = r[n + 24], m = r[n + 32], t = r[n + 40], g = r[n + 48], u = r[n + 56], 0 === (C | w | p | m | t | g | u) ? (c = 5793 * c + 8192 >> 14, c = -2040 > c ? 0 : 2024 <= c ? 255 : c + 2056 >> 4, q[l + n] = c, q[l + n + 8] = c, q[l + n + 16] = c, q[l + n + 24] = c, q[l + n + 32] = c, q[l + n + 40] = c, q[l + n + 48] = c, q[l + n + 56] = c) : (v = 5793 * c + 2048 >> 12, z = 5793 * m + 2048 >> 12, x = w, A = g, m = 2896 * (C - u) + 2048 >> 12, u = 2896 * (C + u) + 2048 >> 12, v = (v + z + 1 >> 1) + 4112, z = v - z, c = 3784 * x + 1567 * A + 2048 >> 12, x = 1567 * x - 3784 * A + 2048 >> 12, A = c, m = m + t + 1 >> 1, t = m - t, u = u + p + 1 >> 1, p = u - p, v = v + A + 1 >> 1, A = v - A, z = z + x + 1 >> 1, x = z - x, c = 2276 * m + 3406 * u + 2048 >> 12, m = 3406 * m - 2276 * u + 2048 >> 12, u = c, c = 799 * p + 4017 * t + 2048 >> 12, p = 4017 * p - 799 * t + 2048 >> 12, t = c, c = v + u, u = v - u, C = z + t, g = z - t, w = x + p, t = x - p, p = A + m, m = A - m, c = 16 > c ? 0 : 4080 <= c ? 255 : c >> 4, C = 16 > C ? 0 : 4080 <= C ? 255 : C >> 4, w = 16 > w ? 0 : 4080 <= w ? 255 : w >> 4, p = 16 > p ? 0 : 4080 <= p ? 255 : p >> 4, m = 16 > m ? 0 : 4080 <= m ? 255 : m >> 4, t = 16 > t ? 0 : 4080 <= t ? 255 : t >> 4, g = 16 > g ? 0 : 4080 <= g ? 255 : g >> 4, u = 16 > u ? 0 : 4080 <= u ? 255 : u >> 4, q[l + n] = c, q[l + n + 8] = C, q[l + n + 16] = w, q[l + n + 24] = p, q[l + n + 32] = m, q[l + n + 40] = t, q[l + n + 48] = g, q[l + n + 56] = u);\n                    }\n                    return d.a;\n                }\n                function N(a, d) {\n                    var f = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : d, e = a.length - 1;\n                    f = f < d ? f : d;\n                    if (d >= e) return null;\n                    var b = a[d] << 8 | a[d + 1];\n                    if (65472 <= b && 65534 >= b) return {\n                        f: null,\n                        F: b,\n                        offset: d\n                    };\n                    for(var B = a[f] << 8 | a[f + 1]; !(65472 <= B && 65534 >= B);){\n                        if (++f >= e) return null;\n                        B = a[f] << 8 | a[f + 1];\n                    }\n                    return {\n                        f: b.toString(16),\n                        F: B,\n                        offset: f\n                    };\n                }\n                var J = new Uint8Array([\n                    0,\n                    1,\n                    8,\n                    16,\n                    9,\n                    2,\n                    3,\n                    10,\n                    17,\n                    24,\n                    32,\n                    25,\n                    18,\n                    11,\n                    4,\n                    5,\n                    12,\n                    19,\n                    26,\n                    33,\n                    40,\n                    48,\n                    41,\n                    34,\n                    27,\n                    20,\n                    13,\n                    6,\n                    7,\n                    14,\n                    21,\n                    28,\n                    35,\n                    42,\n                    49,\n                    56,\n                    57,\n                    50,\n                    43,\n                    36,\n                    29,\n                    22,\n                    15,\n                    23,\n                    30,\n                    37,\n                    44,\n                    51,\n                    58,\n                    59,\n                    52,\n                    45,\n                    38,\n                    31,\n                    39,\n                    46,\n                    53,\n                    60,\n                    61,\n                    54,\n                    47,\n                    55,\n                    62,\n                    63\n                ]);\n                g.prototype = {\n                    parse: function(a) {\n                        function d() {\n                            var d = a[k] << 8 | a[k + 1];\n                            k += 2;\n                            return d;\n                        }\n                        function f() {\n                            var b = d();\n                            b = k + b - 2;\n                            var c = N(a, b, k);\n                            c && c.f && ((0, _util.warn)(\"readDataBlock - incorrect length, current marker is: \" + c.f), b = c.offset);\n                            b = a.subarray(k, b);\n                            k += b.length;\n                            return b;\n                        }\n                        function e(a) {\n                            for(var b = Math.ceil(a.v / 8 / a.s), c = Math.ceil(a.g / 8 / a.u), d = 0; d < a.b.length; d++){\n                                v = a.b[d];\n                                var e = Math.ceil(Math.ceil(a.v / 8) * v.h / a.s), f = Math.ceil(Math.ceil(a.g / 8) * v.j / a.u);\n                                v.a = new Int16Array(64 * c * v.j * (b * v.h + 1));\n                                v.c = e;\n                                v.l = f;\n                            }\n                            a.P = b;\n                            a.O = c;\n                        }\n                        var b = (1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {}).N, B = void 0 === b ? null : b, k = 0, l = null, r = 0;\n                        b = [];\n                        var n = [], q = [], h = d();\n                        if (65496 !== h) throw new D(\"SOI not found\");\n                        for(h = d(); 65497 !== h;){\n                            switch(h){\n                                case 65504:\n                                case 65505:\n                                case 65506:\n                                case 65507:\n                                case 65508:\n                                case 65509:\n                                case 65510:\n                                case 65511:\n                                case 65512:\n                                case 65513:\n                                case 65514:\n                                case 65515:\n                                case 65516:\n                                case 65517:\n                                case 65518:\n                                case 65519:\n                                case 65534:\n                                    var c = f();\n                                    65518 === h && 65 === c[0] && 100 === c[1] && 111 === c[2] && 98 === c[3] && 101 === c[4] && (l = {\n                                        version: c[5] << 8 | c[6],\n                                        Y: c[7] << 8 | c[8],\n                                        Z: c[9] << 8 | c[10],\n                                        W: c[11]\n                                    });\n                                    break;\n                                case 65499:\n                                    h = d() + k - 2;\n                                    for(var g; k < h;){\n                                        var w = a[k++], p = new Uint16Array(64);\n                                        if (0 === w >> 4) for(c = 0; 64 > c; c++)g = J[c], p[g] = a[k++];\n                                        else if (1 === w >> 4) for(c = 0; 64 > c; c++)g = J[c], p[g] = d();\n                                        else throw new D(\"DQT - invalid table spec\");\n                                        b[w & 15] = p;\n                                    }\n                                    break;\n                                case 65472:\n                                case 65473:\n                                case 65474:\n                                    if (m) throw new D(\"Only single frame JPEGs supported\");\n                                    d();\n                                    var m = {};\n                                    m.X = 65473 === h;\n                                    m.S = 65474 === h;\n                                    m.precision = a[k++];\n                                    h = d();\n                                    m.g = B || h;\n                                    m.v = d();\n                                    m.b = [];\n                                    m.C = {};\n                                    c = a[k++];\n                                    for(h = p = w = 0; h < c; h++){\n                                        g = a[k];\n                                        var t = a[k + 1] >> 4;\n                                        var H = a[k + 1] & 15;\n                                        w < t && (w = t);\n                                        p < H && (p = H);\n                                        t = m.b.push({\n                                            h: t,\n                                            j: H,\n                                            T: a[k + 2],\n                                            G: null\n                                        });\n                                        m.C[g] = t - 1;\n                                        k += 3;\n                                    }\n                                    m.s = w;\n                                    m.u = p;\n                                    e(m);\n                                    break;\n                                case 65476:\n                                    g = d();\n                                    for(h = 2; h < g;){\n                                        w = a[k++];\n                                        p = new Uint8Array(16);\n                                        for(c = t = 0; 16 > c; c++, k++)t += p[c] = a[k];\n                                        H = new Uint8Array(t);\n                                        for(c = 0; c < t; c++, k++)H[c] = a[k];\n                                        h += 17 + t;\n                                        (0 === w >> 4 ? q : n)[w & 15] = W(p, H);\n                                    }\n                                    break;\n                                case 65501:\n                                    d();\n                                    var u = d();\n                                    break;\n                                case 65498:\n                                    c = 1 === ++r && !B;\n                                    d();\n                                    w = a[k++];\n                                    g = [];\n                                    for(h = 0; h < w; h++){\n                                        p = m.C[a[k++]];\n                                        var v = m.b[p];\n                                        p = a[k++];\n                                        v.D = q[p >> 4];\n                                        v.o = n[p & 15];\n                                        g.push(v);\n                                    }\n                                    h = a[k++];\n                                    w = a[k++];\n                                    p = a[k++];\n                                    try {\n                                        var z = X(a, k, m, g, u, h, w, p >> 4, p & 15, c);\n                                        k += z;\n                                    } catch (x) {\n                                        if (x instanceof P) return (0, _util.warn)('Attempting to re-parse JPEG image using \"scanLines\" parameter found in DNL marker (0xFFDC) segment.'), this.parse(a, {\n                                            N: x.g\n                                        });\n                                        throw x;\n                                    }\n                                    break;\n                                case 65500:\n                                    k += 4;\n                                    break;\n                                case 65535:\n                                    255 !== a[k] && k--;\n                                    break;\n                                default:\n                                    if (255 === a[k - 3] && 192 <= a[k - 2] && 254 >= a[k - 2]) k -= 3;\n                                    else if ((c = N(a, k - 2)) && c.f) (0, _util.warn)(\"JpegImage.parse - unexpected data, current marker is: \" + c.f), k = c.offset;\n                                    else throw new D(\"unknown marker \" + h.toString(16));\n                            }\n                            h = d();\n                        }\n                        this.width = m.v;\n                        this.height = m.g;\n                        this.A = l;\n                        this.b = [];\n                        for(h = 0; h < m.b.length; h++){\n                            v = m.b[h];\n                            if (u = b[v.T]) v.G = u;\n                            this.b.push({\n                                R: Y(m, v),\n                                U: v.h / m.s,\n                                V: v.j / m.u,\n                                c: v.c,\n                                l: v.l\n                            });\n                        }\n                        this.i = this.b.length;\n                    },\n                    L: function(a, d) {\n                        var f = this.width / a, e = this.height / d, b, g, k = this.b.length, l = a * d * k, r = new Uint8ClampedArray(l), n = new Uint32Array(a);\n                        for(g = 0; g < k; g++){\n                            var q = this.b[g];\n                            var h = q.U * f;\n                            var c = q.V * e;\n                            var C = g;\n                            var w = q.R;\n                            var p = q.c + 1 << 3;\n                            for(b = 0; b < a; b++)q = 0 | b * h, n[b] = (q & 4294967288) << 3 | q & 7;\n                            for(h = 0; h < d; h++)for(q = 0 | h * c, q = p * (q & 4294967288) | (q & 7) << 3, b = 0; b < a; b++)r[C] = w[q + n[b]], C += k;\n                        }\n                        if (e = this.M) for(g = 0; g < l;)for(f = q = 0; q < k; q++, g++, f += 2)r[g] = (r[g] * e[f] >> 8) + e[f + 1];\n                        return r;\n                    },\n                    w: function() {\n                        return this.A ? !!this.A.W : 3 === this.i ? 0 === this.B ? !1 : !0 : 1 === this.B ? !0 : !1;\n                    },\n                    I: function(a) {\n                        for(var d, f, e, b = 0, g = a.length; b < g; b += 3)d = a[b], f = a[b + 1], e = a[b + 2], a[b] = d - 179.456 + 1.402 * e, a[b + 1] = d + 135.459 - .344 * f - .714 * e, a[b + 2] = d - 226.816 + 1.772 * f;\n                        return a;\n                    },\n                    K: function(a) {\n                        for(var d, f, e, b, g = 0, k = 0, l = a.length; k < l; k += 4)d = a[k], f = a[k + 1], e = a[k + 2], b = a[k + 3], a[g++] = -122.67195406894 + f * (-6.60635669420364E-5 * f + 4.37130475926232E-4 * e - 5.4080610064599E-5 * d + 4.8449797120281E-4 * b - .154362151871126) + e * (-9.57964378445773E-4 * e + 8.17076911346625E-4 * d - .00477271405408747 * b + 1.53380253221734) + d * (9.61250184130688E-4 * d - .00266257332283933 * b + .48357088451265) + b * (-3.36197177618394E-4 * b + .484791561490776), a[g++] = 107.268039397724 + f * (2.19927104525741E-5 * f - 6.40992018297945E-4 * e + 6.59397001245577E-4 * d + 4.26105652938837E-4 * b - .176491792462875) + e * (-7.78269941513683E-4 * e + .00130872261408275 * d + 7.70482631801132E-4 * b - .151051492775562) + d * (.00126935368114843 * d - .00265090189010898 * b + .25802910206845) + b * (-3.18913117588328E-4 * b - .213742400323665), a[g++] = -20.810012546947 + f * (-5.70115196973677E-4 * f - 2.63409051004589E-5 * e + .0020741088115012 * d - .00288260236853442 * b + .814272968359295) + e * (-1.53496057440975E-5 * e - 1.32689043961446E-4 * d + 5.60833691242812E-4 * b - .195152027534049) + d * (.00174418132927582 * d - .00255243321439347 * b + .116935020465145) + b * (-3.43531996510555E-4 * b + .24165260232407);\n                        return a.subarray(0, g);\n                    },\n                    J: function(a) {\n                        for(var d, f, e, b = 0, g = a.length; b < g; b += 4)d = a[b], f = a[b + 1], e = a[b + 2], a[b] = 434.456 - d - 1.402 * e, a[b + 1] = 119.541 - d + .344 * f + .714 * e, a[b + 2] = 481.816 - d - 1.772 * f;\n                        return a;\n                    },\n                    H: function(a) {\n                        for(var d, f, e, b, g = 0, k = 1 / 255, l = 0, r = a.length; l < r; l += 4)d = a[l] * k, f = a[l + 1] * k, e = a[l + 2] * k, b = a[l + 3] * k, a[g++] = 255 + d * (-4.387332384609988 * d + 54.48615194189176 * f + 18.82290502165302 * e + 212.25662451639585 * b - 285.2331026137004) + f * (1.7149763477362134 * f - 5.6096736904047315 * e - 17.873870861415444 * b - 5.497006427196366) + e * (-2.5217340131683033 * e - 21.248923337353073 * b + 17.5119270841813) - b * (21.86122147463605 * b + 189.48180835922747), a[g++] = 255 + d * (8.841041422036149 * d + 60.118027045597366 * f + 6.871425592049007 * e + 31.159100130055922 * b - 79.2970844816548) + f * (-15.310361306967817 * f + 17.575251261109482 * e + 131.35250912493976 * b - 190.9453302588951) + e * (4.444339102852739 * e + 9.8632861493405 * b - 24.86741582555878) - b * (20.737325471181034 * b + 187.80453709719578), a[g++] = 255 + d * (.8842522430003296 * d + 8.078677503112928 * f + 30.89978309703729 * e - .23883238689178934 * b - 14.183576799673286) + f * (10.49593273432072 * f + 63.02378494754052 * e + 50.606957656360734 * b - 112.23884253719248) + e * (.03296041114873217 * e + 115.60384449646641 * b - 193.58209356861505) - b * (22.33816807309886 * b + 180.12613974708367);\n                        return a.subarray(0, g);\n                    },\n                    getData: function(a, d, f) {\n                        if (4 < this.i) throw new D(\"Unsupported color mode\");\n                        a = this.L(a, d);\n                        if (1 === this.i && f) {\n                            f = a.length;\n                            d = new Uint8ClampedArray(3 * f);\n                            for(var e = 0, b = 0; b < f; b++){\n                                var g = a[b];\n                                d[e++] = g;\n                                d[e++] = g;\n                                d[e++] = g;\n                            }\n                            return d;\n                        }\n                        if (3 === this.i && this.w()) return this.I(a);\n                        if (4 === this.i) {\n                            if (this.w()) return f ? this.K(a) : this.J(a);\n                            if (f) return this.H(a);\n                        }\n                        return a;\n                    }\n                };\n                UTIF.JpegDecoder = g;\n            })();\n        })();\n        //UTIF.JpegDecoder = window.JpegDecoder;\n        UTIF.encodeImage = function(rgba, w, h, metadata) {\n            var idf = {\n                \"t256\": [\n                    w\n                ],\n                \"t257\": [\n                    h\n                ],\n                \"t258\": [\n                    8,\n                    8,\n                    8,\n                    8\n                ],\n                \"t259\": [\n                    1\n                ],\n                \"t262\": [\n                    2\n                ],\n                \"t273\": [\n                    1000\n                ],\n                \"t277\": [\n                    4\n                ],\n                \"t278\": [\n                    h\n                ],\n                /* rows per strip */ \"t279\": [\n                    w * h * 4\n                ],\n                \"t282\": [\n                    1\n                ],\n                \"t283\": [\n                    1\n                ],\n                \"t284\": [\n                    1\n                ],\n                \"t286\": [\n                    0\n                ],\n                \"t287\": [\n                    0\n                ],\n                \"t296\": [\n                    1\n                ],\n                \"t305\": [\n                    \"Photopea (UTIF.js)\"\n                ],\n                \"t338\": [\n                    1\n                ]\n            };\n            if (metadata) for(var i in metadata)idf[i] = metadata[i];\n            var prfx = new Uint8Array(UTIF.encode([\n                idf\n            ]));\n            var img = new Uint8Array(rgba);\n            var data = new Uint8Array(1000 + w * h * 4);\n            for(var i = 0; i < prfx.length; i++)data[i] = prfx[i];\n            for(var i = 0; i < img.length; i++)data[1000 + i] = img[i];\n            return data.buffer;\n        };\n        UTIF.encode = function(ifds) {\n            var data = new Uint8Array(20000), offset = 4, bin = UTIF._binBE;\n            data[0] = 77;\n            data[1] = 77;\n            data[3] = 42;\n            var ifdo = 8;\n            bin.writeUint(data, offset, ifdo);\n            offset += 4;\n            for(var i = 0; i < ifds.length; i++){\n                var noffs = UTIF._writeIFD(bin, data, ifdo, ifds[i]);\n                ifdo = noffs[1];\n                if (i < ifds.length - 1) bin.writeUint(data, noffs[0], ifdo);\n            }\n            return data.slice(0, ifdo).buffer;\n        };\n        //UTIF.encode._writeIFD\n        UTIF.decode = function(buff) {\n            UTIF.decode._decodeG3.allow2D = null;\n            var data = new Uint8Array(buff), offset = 0;\n            var id = UTIF._binBE.readASCII(data, offset, 2);\n            offset += 2;\n            var bin = id == \"II\" ? UTIF._binLE : UTIF._binBE;\n            var num = bin.readUshort(data, offset);\n            offset += 2;\n            var ifdo = bin.readUint(data, offset);\n            offset += 4;\n            var ifds = [];\n            while(true){\n                var noff = UTIF._readIFD(bin, data, ifdo, ifds);\n                //var ifd = ifds[ifds.length-1];   if(ifd[\"t34665\"]) {  ifd.exifIFD = [];  UTIF._readIFD(bin, data, ifd[\"t34665\"][0], ifd.exifIFD);  }\n                ifdo = bin.readUint(data, noff);\n                if (ifdo == 0) break;\n            }\n            return ifds;\n        };\n        UTIF.decodeImages = function(buff, ifds) {\n            var data = new Uint8Array(buff);\n            var id = UTIF._binBE.readASCII(data, 0, 2);\n            for(var ii = 0; ii < ifds.length; ii++){\n                var img = ifds[ii];\n                if (img[\"t256\"] == null) continue; // EXIF files don't have TIFF tags\n                img.isLE = id == \"II\";\n                img.width = img[\"t256\"][0]; //delete img[\"t256\"];\n                img.height = img[\"t257\"][0]; //delete img[\"t257\"];\n                var cmpr = img[\"t259\"] ? img[\"t259\"][0] : 1; //delete img[\"t259\"];\n                var fo = img[\"t266\"] ? img[\"t266\"][0] : 1; //delete img[\"t266\"];\n                if (img[\"t284\"] && img[\"t284\"][0] == 2) log(\"PlanarConfiguration 2 should not be used!\");\n                var bipp = (img[\"t258\"] ? Math.min(32, img[\"t258\"][0]) : 1) * (img[\"t277\"] ? img[\"t277\"][0] : 1); // bits per pixel\n                var bipl = Math.ceil(img.width * bipp / 8) * 8;\n                var soff = img[\"t273\"];\n                if (soff == null) soff = img[\"t324\"];\n                var bcnt = img[\"t279\"];\n                if (cmpr == 1 && soff.length == 1) bcnt = [\n                    img.height * (bipl >>> 3)\n                ];\n                if (bcnt == null) bcnt = img[\"t325\"];\n                var bytes = new Uint8Array(img.height * (bipl >>> 3)), bilen = 0;\n                if (img[\"t322\"] != null) {\n                    var tw = img[\"t322\"][0], th = img[\"t323\"][0];\n                    var tx = Math.floor((img.width + tw - 1) / tw);\n                    var ty = Math.floor((img.height + th - 1) / th);\n                    var tbuff = new Uint8Array(Math.ceil(tw * th * bipp / 8) | 0);\n                    for(var y = 0; y < ty; y++)for(var x = 0; x < tx; x++){\n                        var i = y * tx + x;\n                        for(var j = 0; j < tbuff.length; j++)tbuff[j] = 0;\n                        UTIF.decode._decompress(img, data, soff[i], bcnt[i], cmpr, tbuff, 0, fo);\n                        // Might be required for 7 too. Need to check\n                        if (cmpr == 6) bytes = tbuff;\n                        else UTIF._copyTile(tbuff, Math.ceil(tw * bipp / 8) | 0, th, bytes, Math.ceil(img.width * bipp / 8) | 0, img.height, Math.ceil(x * tw * bipp / 8) | 0, y * th);\n                    }\n                    bilen = bytes.length * 8;\n                } else {\n                    var rps = img[\"t278\"] ? img[\"t278\"][0] : img.height;\n                    rps = Math.min(rps, img.height);\n                    for(var i = 0; i < soff.length; i++){\n                        UTIF.decode._decompress(img, data, soff[i], bcnt[i], cmpr, bytes, Math.ceil(bilen / 8) | 0, fo);\n                        bilen += bipl * rps;\n                    }\n                    bilen = Math.min(bilen, bytes.length * 8);\n                }\n                img.data = new Uint8Array(bytes.buffer, 0, Math.ceil(bilen / 8) | 0);\n            }\n        };\n        UTIF.decode._decompress = function(img, data, off, len, cmpr, tgt, toff, fo) {\n            //console.log(\"compression\", cmpr);\n            if (false) {} else if (cmpr == 1) for(var j = 0; j < len; j++)tgt[toff + j] = data[off + j];\n            else if (cmpr == 3) UTIF.decode._decodeG3(data, off, len, tgt, toff, img.width, fo);\n            else if (cmpr == 4) UTIF.decode._decodeG4(data, off, len, tgt, toff, img.width, fo);\n            else if (cmpr == 5) UTIF.decode._decodeLZW(data, off, tgt, toff);\n            else if (cmpr == 6) UTIF.decode._decodeOldJPEG(img, data, off, len, tgt, toff);\n            else if (cmpr == 7) UTIF.decode._decodeNewJPEG(img, data, off, len, tgt, toff);\n            else if (cmpr == 8) {\n                var src = new Uint8Array(data.buffer, off, len);\n                var bin = pako[\"inflate\"](src);\n                for(var i = 0; i < bin.length; i++)tgt[toff + i] = bin[i];\n            } else if (cmpr == 32773) UTIF.decode._decodePackBits(data, off, len, tgt, toff);\n            else if (cmpr == 32809) UTIF.decode._decodeThunder(data, off, len, tgt, toff);\n            else log(\"Unknown compression\", cmpr);\n            if (img[\"t317\"] && img[\"t317\"][0] == 2) {\n                var noc = img[\"t277\"] ? img[\"t277\"][0] : 1, h = img[\"t278\"] ? img[\"t278\"][0] : img.height, bpr = img.width * noc;\n                //log(noc);\n                for(var y = 0; y < h; y++){\n                    var ntoff = toff + y * bpr;\n                    if (noc == 3) for(var j = 3; j < bpr; j += 3){\n                        tgt[ntoff + j] = tgt[ntoff + j] + tgt[ntoff + j - 3] & 255;\n                        tgt[ntoff + j + 1] = tgt[ntoff + j + 1] + tgt[ntoff + j - 2] & 255;\n                        tgt[ntoff + j + 2] = tgt[ntoff + j + 2] + tgt[ntoff + j - 1] & 255;\n                    }\n                    else for(var j = noc; j < bpr; j++)tgt[ntoff + j] = tgt[ntoff + j] + tgt[ntoff + j - noc] & 255;\n                }\n            }\n        };\n        UTIF.decode._decodeNikon = function(data, off, len, tgt, toff) {\n            var nikon_tree = [\n                [\n                    0,\n                    1,\n                    5,\n                    1,\n                    1,\n                    1,\n                    1,\n                    1,\n                    1,\n                    2,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    /* 12-bit lossy */ 5,\n                    4,\n                    3,\n                    6,\n                    2,\n                    7,\n                    1,\n                    0,\n                    8,\n                    9,\n                    11,\n                    10,\n                    12\n                ],\n                [\n                    0,\n                    1,\n                    5,\n                    1,\n                    1,\n                    1,\n                    1,\n                    1,\n                    1,\n                    2,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    /* 12-bit lossy after split */ 0x39,\n                    0x5a,\n                    0x38,\n                    0x27,\n                    0x16,\n                    5,\n                    4,\n                    3,\n                    2,\n                    1,\n                    0,\n                    11,\n                    12,\n                    12\n                ],\n                [\n                    0,\n                    1,\n                    4,\n                    2,\n                    3,\n                    1,\n                    2,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    /* 12-bit lossless */ 5,\n                    4,\n                    6,\n                    3,\n                    7,\n                    2,\n                    8,\n                    1,\n                    9,\n                    0,\n                    10,\n                    11,\n                    12\n                ],\n                [\n                    0,\n                    1,\n                    4,\n                    3,\n                    1,\n                    1,\n                    1,\n                    1,\n                    1,\n                    2,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    /* 14-bit lossy */ 5,\n                    6,\n                    4,\n                    7,\n                    8,\n                    3,\n                    9,\n                    2,\n                    1,\n                    0,\n                    10,\n                    11,\n                    12,\n                    13,\n                    14\n                ],\n                [\n                    0,\n                    1,\n                    5,\n                    1,\n                    1,\n                    1,\n                    1,\n                    1,\n                    1,\n                    1,\n                    2,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    /* 14-bit lossy after split */ 8,\n                    0x5c,\n                    0x4b,\n                    0x3a,\n                    0x29,\n                    7,\n                    6,\n                    5,\n                    4,\n                    3,\n                    2,\n                    1,\n                    0,\n                    13,\n                    14\n                ],\n                [\n                    0,\n                    1,\n                    4,\n                    2,\n                    2,\n                    3,\n                    1,\n                    2,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    /* 14-bit lossless */ 7,\n                    6,\n                    8,\n                    5,\n                    9,\n                    4,\n                    10,\n                    3,\n                    11,\n                    12,\n                    2,\n                    0,\n                    1,\n                    13,\n                    14\n                ]\n            ];\n            //struct decode *dindex;\n            var ver0, ver1, vpred, hpred, csize;\n            var i, min, max, step = 0, huff = 0, split = 0, row, col, len, shl, diff;\n            log(data.slice(off, off + 100));\n            ver0 = data[off];\n            off++;\n            ver1 = data[off];\n            off++;\n            log(ver0.toString(16), ver1.toString(16), len);\n        };\n        UTIF.decode._decodeNewJPEG = function(img, data, off, len, tgt, toff) {\n            var tables = img[\"t347\"], tlen = tables ? tables.length : 0, buff = new Uint8Array(tlen + len);\n            if (tables) {\n                var SOI = 216, EOI1 = 217, boff = 0;\n                for(var i = 0; i < tlen - 1; i++){\n                    // Skip EOI marker from JPEGTables\n                    if (tables[i] == 255 && tables[i + 1] == EOI1) break;\n                    buff[boff++] = tables[i];\n                }\n                // Skip SOI marker from data\n                var byte1 = data[off], byte2 = data[off + 1];\n                if (byte1 != 255 || byte2 != SOI) {\n                    buff[boff++] = byte1;\n                    buff[boff++] = byte2;\n                }\n                for(var i = 2; i < len; i++)buff[boff++] = data[off + i];\n            } else for(var i = 0; i < len; i++)buff[i] = data[off + i];\n            if (img[\"t262\"] == 32803) {\n                var bps = img[\"t258\"][0], dcdr = new LosslessJpegDecoder();\n                var out = dcdr.decode(buff), olen = out.length;\n                if (false) {} else if (bps == 16) for(var i = 0; i < olen; i++){\n                    tgt[toff++] = out[i] & 255;\n                    tgt[toff++] = out[i] >>> 8;\n                }\n                else if (bps == 12) for(var i = 0; i < olen; i += 2){\n                    tgt[toff++] = out[i] >>> 4;\n                    tgt[toff++] = (out[i] << 4 | out[i + 1] >>> 8) & 255;\n                    tgt[toff++] = out[i + 1] & 255;\n                }\n                else throw new Error(\"unsupported bit depth \" + bps);\n            } else {\n                var parser = new UTIF.JpegDecoder();\n                parser.parse(buff);\n                var decoded = parser.getData(parser.width, parser.height);\n                for(var i = 0; i < decoded.length; i++)tgt[toff + i] = decoded[i];\n            }\n            // PhotometricInterpretation is 6 (YCbCr) for JPEG, but after decoding we populate data in\n            // RGB format, so updating the tag value\n            if (img[\"t262\"][0] == 6) img[\"t262\"][0] = 2;\n        };\n        UTIF.decode._decodeOldJPEGInit = function(img, data, off, len) {\n            var SOI = 216, EOI1 = 217, DQT = 219, DHT = 196, DRI = 221, SOF0 = 192, SOS1 = 218;\n            var joff = 0, soff = 0, tables, sosMarker1, isTiled = false, i, j, k;\n            var jpgIchgFmt = img[\"t513\"], jifoff = jpgIchgFmt ? jpgIchgFmt[0] : 0;\n            var jpgIchgFmtLen = img[\"t514\"], jiflen = jpgIchgFmtLen ? jpgIchgFmtLen[0] : 0;\n            var soffTag = img[\"t324\"] || img[\"t273\"] || jpgIchgFmt;\n            var ycbcrss = img[\"t530\"], ssx = 0, ssy = 0;\n            var spp = img[\"t277\"] ? img[\"t277\"][0] : 1;\n            var jpgresint = img[\"t515\"];\n            if (soffTag) {\n                soff = soffTag[0];\n                isTiled = soffTag.length > 1;\n            }\n            if (!isTiled) {\n                if (data[off] == 255 && data[off + 1] == SOI) return {\n                    jpegOffset: off\n                };\n                if (jpgIchgFmt != null) {\n                    if (data[off + jifoff] == 255 && data[off + jifoff + 1] == SOI) joff = off + jifoff;\n                    else log(\"JPEGInterchangeFormat does not point to SOI\");\n                    if (jpgIchgFmtLen == null) log(\"JPEGInterchangeFormatLength field is missing\");\n                    else if (jifoff >= soff || jifoff + jiflen <= soff) log(\"JPEGInterchangeFormatLength field value is invalid\");\n                    if (joff != null) return {\n                        jpegOffset: joff\n                    };\n                }\n            }\n            if (ycbcrss != null) {\n                ssx = ycbcrss[0];\n                ssy = ycbcrss[1];\n            }\n            if (jpgIchgFmt != null) {\n                if (jpgIchgFmtLen != null) if (jiflen >= 2 && jifoff + jiflen <= soff) {\n                    if (data[off + jifoff + jiflen - 2] == 255 && data[off + jifoff + jiflen - 1] == SOI) tables = new Uint8Array(jiflen - 2);\n                    else tables = new Uint8Array(jiflen);\n                    for(i = 0; i < tables.length; i++)tables[i] = data[off + jifoff + i];\n                    log(\"Incorrect JPEG interchange format: using JPEGInterchangeFormat offset to derive tables\");\n                } else log(\"JPEGInterchangeFormat+JPEGInterchangeFormatLength > offset to first strip or tile\");\n            }\n            if (tables == null) {\n                var ooff = 0, out = [];\n                out[ooff++] = 255;\n                out[ooff++] = SOI;\n                var qtables = img[\"t519\"];\n                if (qtables == null) throw new Error(\"JPEGQTables tag is missing\");\n                for(i = 0; i < qtables.length; i++){\n                    out[ooff++] = 255;\n                    out[ooff++] = DQT;\n                    out[ooff++] = 0;\n                    out[ooff++] = 67;\n                    out[ooff++] = i;\n                    for(j = 0; j < 64; j++)out[ooff++] = data[off + qtables[i] + j];\n                }\n                for(k = 0; k < 2; k++){\n                    var htables = img[k == 0 ? \"t520\" : \"t521\"];\n                    if (htables == null) throw new Error((k == 0 ? \"JPEGDCTables\" : \"JPEGACTables\") + \" tag is missing\");\n                    for(i = 0; i < htables.length; i++){\n                        out[ooff++] = 255;\n                        out[ooff++] = DHT;\n                        //out[ooff++] = 0; out[ooff++] = 67; out[ooff++] = i;\n                        var nc = 19;\n                        for(j = 0; j < 16; j++)nc += data[off + htables[i] + j];\n                        out[ooff++] = nc >>> 8;\n                        out[ooff++] = nc & 255;\n                        out[ooff++] = i | k << 4;\n                        for(j = 0; j < 16; j++)out[ooff++] = data[off + htables[i] + j];\n                        for(j = 0; j < nc; j++)out[ooff++] = data[off + htables[i] + 16 + j];\n                    }\n                }\n                out[ooff++] = 255;\n                out[ooff++] = SOF0;\n                out[ooff++] = 0;\n                out[ooff++] = 8 + 3 * spp;\n                out[ooff++] = 8;\n                out[ooff++] = img.height >>> 8 & 255;\n                out[ooff++] = img.height & 255;\n                out[ooff++] = img.width >>> 8 & 255;\n                out[ooff++] = img.width & 255;\n                out[ooff++] = spp;\n                if (spp == 1) {\n                    out[ooff++] = 1;\n                    out[ooff++] = 17;\n                    out[ooff++] = 0;\n                } else for(i = 0; i < 3; i++){\n                    out[ooff++] = i + 1;\n                    out[ooff++] = i != 0 ? 17 : (ssx & 15) << 4 | ssy & 15;\n                    out[ooff++] = i;\n                }\n                if (jpgresint != null && jpgresint[0] != 0) {\n                    out[ooff++] = 255;\n                    out[ooff++] = DRI;\n                    out[ooff++] = 0;\n                    out[ooff++] = 4;\n                    out[ooff++] = jpgresint[0] >>> 8 & 255;\n                    out[ooff++] = jpgresint[0] & 255;\n                }\n                tables = new Uint8Array(out);\n            }\n            var sofpos = -1;\n            i = 0;\n            while(i < tables.length - 1){\n                if (tables[i] == 255 && tables[i + 1] == SOF0) {\n                    sofpos = i;\n                    break;\n                }\n                i++;\n            }\n            if (sofpos == -1) {\n                var tmptab = new Uint8Array(tables.length + 10 + 3 * spp);\n                tmptab.set(tables);\n                var tmpoff = tables.length;\n                sofpos = tables.length;\n                tables = tmptab;\n                tables[tmpoff++] = 255;\n                tables[tmpoff++] = SOF0;\n                tables[tmpoff++] = 0;\n                tables[tmpoff++] = 8 + 3 * spp;\n                tables[tmpoff++] = 8;\n                tables[tmpoff++] = img.height >>> 8 & 255;\n                tables[tmpoff++] = img.height & 255;\n                tables[tmpoff++] = img.width >>> 8 & 255;\n                tables[tmpoff++] = img.width & 255;\n                tables[tmpoff++] = spp;\n                if (spp == 1) {\n                    tables[tmpoff++] = 1;\n                    tables[tmpoff++] = 17;\n                    tables[tmpoff++] = 0;\n                } else for(i = 0; i < 3; i++){\n                    tables[tmpoff++] = i + 1;\n                    tables[tmpoff++] = i != 0 ? 17 : (ssx & 15) << 4 | ssy & 15;\n                    tables[tmpoff++] = i;\n                }\n            }\n            if (data[soff] == 255 && data[soff + 1] == SOS1) {\n                var soslen = data[soff + 2] << 8 | data[soff + 3];\n                sosMarker1 = new Uint8Array(soslen + 2);\n                sosMarker1[0] = data[soff];\n                sosMarker1[1] = data[soff + 1];\n                sosMarker1[2] = data[soff + 2];\n                sosMarker1[3] = data[soff + 3];\n                for(i = 0; i < soslen - 2; i++)sosMarker1[i + 4] = data[soff + i + 4];\n            } else {\n                sosMarker1 = new Uint8Array(2 + 6 + 2 * spp);\n                var sosoff = 0;\n                sosMarker1[sosoff++] = 255;\n                sosMarker1[sosoff++] = SOS1;\n                sosMarker1[sosoff++] = 0;\n                sosMarker1[sosoff++] = 6 + 2 * spp;\n                sosMarker1[sosoff++] = spp;\n                if (spp == 1) {\n                    sosMarker1[sosoff++] = 1;\n                    sosMarker1[sosoff++] = 0;\n                } else for(i = 0; i < 3; i++){\n                    sosMarker1[sosoff++] = i + 1;\n                    sosMarker1[sosoff++] = i << 4 | i;\n                }\n                sosMarker1[sosoff++] = 0;\n                sosMarker1[sosoff++] = 63;\n                sosMarker1[sosoff++] = 0;\n            }\n            return {\n                jpegOffset: off,\n                tables: tables,\n                sosMarker: sosMarker1,\n                sofPosition: sofpos\n            };\n        };\n        UTIF.decode._decodeOldJPEG = function(img, data, off, len, tgt, toff) {\n            var i, dlen, tlen, buff, buffoff;\n            var jpegData = UTIF.decode._decodeOldJPEGInit(img, data, off, len);\n            if (jpegData.jpegOffset != null) {\n                dlen = off + len - jpegData.jpegOffset;\n                buff = new Uint8Array(dlen);\n                for(i = 0; i < dlen; i++)buff[i] = data[jpegData.jpegOffset + i];\n            } else {\n                tlen = jpegData.tables.length;\n                buff = new Uint8Array(tlen + jpegData.sosMarker.length + len + 2);\n                buff.set(jpegData.tables);\n                buffoff = tlen;\n                buff[jpegData.sofPosition + 5] = img.height >>> 8 & 255;\n                buff[jpegData.sofPosition + 6] = img.height & 255;\n                buff[jpegData.sofPosition + 7] = img.width >>> 8 & 255;\n                buff[jpegData.sofPosition + 8] = img.width & 255;\n                if (data[off] != 255 || data[off + 1] != SOS) {\n                    buff.set(jpegData.sosMarker, bufoff);\n                    bufoff += sosMarker.length;\n                }\n                for(i = 0; i < len; i++)buff[bufoff++] = data[off + i];\n                buff[bufoff++] = 255;\n                buff[bufoff++] = EOI;\n            }\n            var parser = new UTIF.JpegDecoder();\n            parser.parse(buff);\n            var decoded = parser.getData(parser.width, parser.height);\n            for(var i = 0; i < decoded.length; i++)tgt[toff + i] = decoded[i];\n            // PhotometricInterpretation is 6 (YCbCr) for JPEG, but after decoding we populate data in\n            // RGB format, so updating the tag value\n            if (img[\"t262\"][0] == 6) img[\"t262\"][0] = 2;\n        };\n        UTIF.decode._decodePackBits = function(data, off, len, tgt, toff) {\n            var sa = new Int8Array(data.buffer), ta = new Int8Array(tgt.buffer), lim = off + len;\n            while(off < lim){\n                var n = sa[off];\n                off++;\n                if (n >= 0 && n < 128) for(var i = 0; i < n + 1; i++){\n                    ta[toff] = sa[off];\n                    toff++;\n                    off++;\n                }\n                if (n >= -127 && n < 0) {\n                    for(var i = 0; i < -n + 1; i++){\n                        ta[toff] = sa[off];\n                        toff++;\n                    }\n                    off++;\n                }\n            }\n        };\n        UTIF.decode._decodeThunder = function(data, off, len, tgt, toff) {\n            var d2 = [\n                0,\n                1,\n                0,\n                -1\n            ], d3 = [\n                0,\n                1,\n                2,\n                3,\n                0,\n                -3,\n                -2,\n                -1\n            ];\n            var lim = off + len, qoff = toff * 2, px = 0;\n            while(off < lim){\n                var b = data[off], msk = b >>> 6, n = b & 63;\n                off++;\n                if (msk == 3) {\n                    px = n & 15;\n                    tgt[qoff >>> 1] |= px << 4 * (1 - qoff & 1);\n                    qoff++;\n                }\n                if (msk == 0) for(var i = 0; i < n; i++){\n                    tgt[qoff >>> 1] |= px << 4 * (1 - qoff & 1);\n                    qoff++;\n                }\n                if (msk == 2) for(var i = 0; i < 2; i++){\n                    var d = n >>> 3 * (1 - i) & 7;\n                    if (d != 4) {\n                        px += d3[d];\n                        tgt[qoff >>> 1] |= px << 4 * (1 - qoff & 1);\n                        qoff++;\n                    }\n                }\n                if (msk == 1) for(var i = 0; i < 3; i++){\n                    var d = n >>> 2 * (2 - i) & 3;\n                    if (d != 2) {\n                        px += d2[d];\n                        tgt[qoff >>> 1] |= px << 4 * (1 - qoff & 1);\n                        qoff++;\n                    }\n                }\n            }\n        };\n        UTIF.decode._dmap = {\n            \"1\": 0,\n            \"011\": 1,\n            \"000011\": 2,\n            \"0000011\": 3,\n            \"010\": -1,\n            \"000010\": -2,\n            \"0000010\": -3\n        };\n        UTIF.decode._lens = function() {\n            var addKeys = function(lens, arr, i0, inc) {\n                for(var i = 0; i < arr.length; i++)lens[arr[i]] = i0 + i * inc;\n            };\n            var termW = \"00110101,000111,0111,1000,1011,1100,1110,1111,10011,10100,00111,01000,001000,000011,110100,110101,\" // 15\n             + \"101010,101011,0100111,0001100,0001000,0010111,0000011,0000100,0101000,0101011,0010011,0100100,0011000,00000010,00000011,00011010,\" // 31\n             + \"00011011,00010010,00010011,00010100,00010101,00010110,00010111,00101000,00101001,00101010,00101011,00101100,00101101,00000100,00000101,00001010,\" // 47\n             + \"00001011,01010010,01010011,01010100,01010101,00100100,00100101,01011000,01011001,01011010,01011011,01001010,01001011,00110010,00110011,00110100\";\n            var termB = \"0000110111,010,11,10,011,0011,0010,00011,000101,000100,0000100,0000101,0000111,00000100,00000111,000011000,\" // 15\n             + \"0000010111,0000011000,0000001000,00001100111,00001101000,00001101100,00000110111,00000101000,00000010111,00000011000,000011001010,000011001011,000011001100,000011001101,000001101000,000001101001,\" // 31\n             + \"000001101010,000001101011,000011010010,000011010011,000011010100,000011010101,000011010110,000011010111,000001101100,000001101101,000011011010,000011011011,000001010100,000001010101,000001010110,000001010111,\" // 47\n             + \"000001100100,000001100101,000001010010,000001010011,000000100100,000000110111,000000111000,000000100111,000000101000,000001011000,000001011001,000000101011,000000101100,000001011010,000001100110,000001100111\";\n            var makeW = \"11011,10010,010111,0110111,00110110,00110111,01100100,01100101,01101000,01100111,011001100,011001101,011010010,011010011,011010100,011010101,011010110,\" + \"011010111,011011000,011011001,011011010,011011011,010011000,010011001,010011010,011000,010011011\";\n            var makeB = \"0000001111,000011001000,000011001001,000001011011,000000110011,000000110100,000000110101,0000001101100,0000001101101,0000001001010,0000001001011,0000001001100,\" + \"0000001001101,0000001110010,0000001110011,0000001110100,0000001110101,0000001110110,0000001110111,0000001010010,0000001010011,0000001010100,0000001010101,0000001011010,\" + \"0000001011011,0000001100100,0000001100101\";\n            var makeA = \"00000001000,00000001100,00000001101,000000010010,000000010011,000000010100,000000010101,000000010110,000000010111,000000011100,000000011101,000000011110,000000011111\";\n            termW = termW.split(\",\");\n            termB = termB.split(\",\");\n            makeW = makeW.split(\",\");\n            makeB = makeB.split(\",\");\n            makeA = makeA.split(\",\");\n            var lensW = {}, lensB = {};\n            addKeys(lensW, termW, 0, 1);\n            addKeys(lensW, makeW, 64, 64);\n            addKeys(lensW, makeA, 1792, 64);\n            addKeys(lensB, termB, 0, 1);\n            addKeys(lensB, makeB, 64, 64);\n            addKeys(lensB, makeA, 1792, 64);\n            return [\n                lensW,\n                lensB\n            ];\n        }();\n        UTIF.decode._decodeG4 = function(data, off, slen, tgt, toff, w, fo) {\n            var U = UTIF.decode, boff = off << 3, len = 0, wrd = \"\"; // previous starts with 1\n            var line = [], pline = [];\n            for(var i = 0; i < w; i++)pline.push(0);\n            pline = U._makeDiff(pline);\n            var a0 = 0, a1 = 0, a2 = 0, b1 = 0, b2 = 0, clr = 0;\n            var y = 0, mode = \"\", toRead = 0;\n            var bipl = Math.ceil(w / 8) * 8;\n            while(boff >>> 3 < off + slen){\n                b1 = U._findDiff(pline, a0 + (a0 == 0 ? 0 : 1), 1 - clr), b2 = U._findDiff(pline, b1, clr); // could be precomputed\n                var bit = 0;\n                if (fo == 1) bit = data[boff >>> 3] >>> 7 - (boff & 7) & 1;\n                if (fo == 2) bit = data[boff >>> 3] >>> (boff & 7) & 1;\n                boff++;\n                wrd += bit;\n                if (mode == \"H\") {\n                    if (U._lens[clr][wrd] != null) {\n                        var dl = U._lens[clr][wrd];\n                        wrd = \"\";\n                        len += dl;\n                        if (dl < 64) {\n                            U._addNtimes(line, len, clr);\n                            a0 += len;\n                            clr = 1 - clr;\n                            len = 0;\n                            toRead--;\n                            if (toRead == 0) mode = \"\";\n                        }\n                    }\n                } else {\n                    if (wrd == \"0001\") {\n                        wrd = \"\";\n                        U._addNtimes(line, b2 - a0, clr);\n                        a0 = b2;\n                    }\n                    if (wrd == \"001\") {\n                        wrd = \"\";\n                        mode = \"H\";\n                        toRead = 2;\n                    }\n                    if (U._dmap[wrd] != null) {\n                        a1 = b1 + U._dmap[wrd];\n                        U._addNtimes(line, a1 - a0, clr);\n                        a0 = a1;\n                        wrd = \"\";\n                        clr = 1 - clr;\n                    }\n                }\n                if (line.length == w && mode == \"\") {\n                    U._writeBits(line, tgt, toff * 8 + y * bipl);\n                    clr = 0;\n                    y++;\n                    a0 = 0;\n                    pline = U._makeDiff(line);\n                    line = [];\n                }\n            //if(wrd.length>150) {  log(wrd);  break;  throw \"e\";  }\n            }\n        };\n        UTIF.decode._findDiff = function(line, x, clr) {\n            for(var i = 0; i < line.length; i += 2)if (line[i] >= x && line[i + 1] == clr) return line[i];\n        };\n        UTIF.decode._makeDiff = function(line) {\n            var out = [];\n            if (line[0] == 1) out.push(0, 1);\n            for(var i = 1; i < line.length; i++)if (line[i - 1] != line[i]) out.push(i, line[i]);\n            out.push(line.length, 0, line.length, 1);\n            return out;\n        };\n        UTIF.decode._decodeG3 = function(data, off, slen, tgt, toff, w, fo) {\n            var U = UTIF.decode, boff = off << 3, len = 0, wrd = \"\";\n            var line = [], pline = [];\n            for(var i = 0; i < w; i++)line.push(0);\n            var a0 = 0, a1 = 0, a2 = 0, b1 = 0, b2 = 0, clr = 0;\n            var y = -1, mode = \"\", toRead = 0, is1D = false;\n            var bipl = Math.ceil(w / 8) * 8;\n            while(boff >>> 3 < off + slen){\n                b1 = U._findDiff(pline, a0 + (a0 == 0 ? 0 : 1), 1 - clr), b2 = U._findDiff(pline, b1, clr); // could be precomputed\n                var bit = 0;\n                if (fo == 1) bit = data[boff >>> 3] >>> 7 - (boff & 7) & 1;\n                if (fo == 2) bit = data[boff >>> 3] >>> (boff & 7) & 1;\n                boff++;\n                wrd += bit;\n                if (is1D) {\n                    if (U._lens[clr][wrd] != null) {\n                        var dl = U._lens[clr][wrd];\n                        wrd = \"\";\n                        len += dl;\n                        if (dl < 64) {\n                            U._addNtimes(line, len, clr);\n                            clr = 1 - clr;\n                            len = 0;\n                        }\n                    }\n                } else {\n                    if (mode == \"H\") {\n                        if (U._lens[clr][wrd] != null) {\n                            var dl = U._lens[clr][wrd];\n                            wrd = \"\";\n                            len += dl;\n                            if (dl < 64) {\n                                U._addNtimes(line, len, clr);\n                                a0 += len;\n                                clr = 1 - clr;\n                                len = 0;\n                                toRead--;\n                                if (toRead == 0) mode = \"\";\n                            }\n                        }\n                    } else {\n                        if (wrd == \"0001\") {\n                            wrd = \"\";\n                            U._addNtimes(line, b2 - a0, clr);\n                            a0 = b2;\n                        }\n                        if (wrd == \"001\") {\n                            wrd = \"\";\n                            mode = \"H\";\n                            toRead = 2;\n                        }\n                        if (U._dmap[wrd] != null) {\n                            a1 = b1 + U._dmap[wrd];\n                            U._addNtimes(line, a1 - a0, clr);\n                            a0 = a1;\n                            wrd = \"\";\n                            clr = 1 - clr;\n                        }\n                    }\n                }\n                if (wrd.endsWith(\"000000000001\")) {\n                    if (y >= 0) U._writeBits(line, tgt, toff * 8 + y * bipl);\n                    if (fo == 1) is1D = (data[boff >>> 3] >>> 7 - (boff & 7) & 1) == 1;\n                    if (fo == 2) is1D = (data[boff >>> 3] >>> (boff & 7) & 1) == 1;\n                    boff++;\n                    if (U._decodeG3.allow2D == null) U._decodeG3.allow2D = is1D;\n                    if (!U._decodeG3.allow2D) {\n                        is1D = true;\n                        boff--;\n                    }\n                    //log(\"EOL\",y, \"next 1D:\", is1D);\n                    wrd = \"\";\n                    clr = 0;\n                    y++;\n                    a0 = 0;\n                    pline = U._makeDiff(line);\n                    line = [];\n                }\n            }\n            if (line.length == w) U._writeBits(line, tgt, toff * 8 + y * bipl);\n        };\n        UTIF.decode._addNtimes = function(arr, n, val) {\n            for(var i = 0; i < n; i++)arr.push(val);\n        };\n        UTIF.decode._writeBits = function(bits, tgt, boff) {\n            for(var i = 0; i < bits.length; i++)tgt[boff + i >>> 3] |= bits[i] << 7 - (boff + i & 7);\n        };\n        UTIF.decode._decodeLZW = function(data, off, tgt, toff) {\n            if (UTIF.decode._lzwTab == null) {\n                var tb = new Uint32Array(0xffff), tn = new Uint16Array(0xffff), chr = new Uint8Array(2e6);\n                for(var i = 0; i < 256; i++){\n                    chr[i << 2] = i;\n                    tb[i] = i << 2;\n                    tn[i] = 1;\n                }\n                UTIF.decode._lzwTab = [\n                    tb,\n                    tn,\n                    chr\n                ];\n            }\n            var copy = UTIF.decode._copyData;\n            var tab = UTIF.decode._lzwTab[0], tln = UTIF.decode._lzwTab[1], chr = UTIF.decode._lzwTab[2], totl = 258, chrl = 258 << 2;\n            var bits = 9, boff = off << 3; // offset in bits\n            var ClearCode = 256, EoiCode = 257;\n            var v = 0, Code = 0, OldCode = 0;\n            while(true){\n                v = data[boff >>> 3] << 16 | data[boff + 8 >>> 3] << 8 | data[boff + 16 >>> 3];\n                Code = v >> 24 - (boff & 7) - bits & (1 << bits) - 1;\n                boff += bits;\n                if (Code == EoiCode) break;\n                if (Code == ClearCode) {\n                    bits = 9;\n                    totl = 258;\n                    chrl = 258 << 2;\n                    v = data[boff >>> 3] << 16 | data[boff + 8 >>> 3] << 8 | data[boff + 16 >>> 3];\n                    Code = v >> 24 - (boff & 7) - bits & (1 << bits) - 1;\n                    boff += bits;\n                    if (Code == EoiCode) break;\n                    tgt[toff] = Code;\n                    toff++;\n                } else if (Code < totl) {\n                    var cd = tab[Code], cl = tln[Code];\n                    copy(chr, cd, tgt, toff, cl);\n                    toff += cl;\n                    if (OldCode >= totl) {\n                        tab[totl] = chrl;\n                        chr[tab[totl]] = cd[0];\n                        tln[totl] = 1;\n                        chrl = chrl + 1 + 3 & ~0x03;\n                        totl++;\n                    } else {\n                        tab[totl] = chrl;\n                        var nit = tab[OldCode], nil = tln[OldCode];\n                        copy(chr, nit, chr, chrl, nil);\n                        chr[chrl + nil] = chr[cd];\n                        nil++;\n                        tln[totl] = nil;\n                        totl++;\n                        chrl = chrl + nil + 3 & ~0x03;\n                    }\n                    if (totl + 1 == 1 << bits) bits++;\n                } else {\n                    if (OldCode >= totl) {\n                        tab[totl] = chrl;\n                        tln[totl] = 0;\n                        totl++;\n                    } else {\n                        tab[totl] = chrl;\n                        var nit = tab[OldCode], nil = tln[OldCode];\n                        copy(chr, nit, chr, chrl, nil);\n                        chr[chrl + nil] = chr[chrl];\n                        nil++;\n                        tln[totl] = nil;\n                        totl++;\n                        copy(chr, chrl, tgt, toff, nil);\n                        toff += nil;\n                        chrl = chrl + nil + 3 & ~0x03;\n                    }\n                    if (totl + 1 == 1 << bits) bits++;\n                }\n                OldCode = Code;\n            }\n        };\n        UTIF.decode._copyData = function(s, so, t, to, l) {\n            for(var i = 0; i < l; i += 4){\n                t[to + i] = s[so + i];\n                t[to + i + 1] = s[so + i + 1];\n                t[to + i + 2] = s[so + i + 2];\n                t[to + i + 3] = s[so + i + 3];\n            }\n        };\n        UTIF.tags = {\n            254: \"NewSubfileType\",\n            255: \"SubfileType\",\n            256: \"ImageWidth\",\n            257: \"ImageLength\",\n            258: \"BitsPerSample\",\n            259: \"Compression\",\n            262: \"PhotometricInterpretation\",\n            266: \"FillOrder\",\n            269: \"DocumentName\",\n            270: \"ImageDescription\",\n            271: \"Make\",\n            272: \"Model\",\n            273: \"StripOffset\",\n            274: \"Orientation\",\n            277: \"SamplesPerPixel\",\n            278: \"RowsPerStrip\",\n            279: \"StripByteCounts\",\n            280: \"MinSampleValue\",\n            281: \"MaxSampleValue\",\n            282: \"XResolution\",\n            283: \"YResolution\",\n            284: \"PlanarConfiguration\",\n            285: \"PageName\",\n            286: \"XPosition\",\n            287: \"YPosition\",\n            292: \"T4Options\",\n            296: \"ResolutionUnit\",\n            297: \"PageNumber\",\n            305: \"Software\",\n            306: \"DateTime\",\n            315: \"Artist\",\n            316: \"HostComputer\",\n            317: \"Predictor\",\n            318: \"WhitePoint\",\n            319: \"PrimaryChromaticities\",\n            320: \"ColorMap\",\n            321: \"HalftoneHints\",\n            322: \"TileWidth\",\n            323: \"TileLength\",\n            324: \"TileOffset\",\n            325: \"TileByteCounts\",\n            330: \"SubIFDs\",\n            336: \"DotRange\",\n            338: \"ExtraSample\",\n            339: \"SampleFormat\",\n            347: \"JPEGTables\",\n            512: \"JPEGProc\",\n            513: \"JPEGInterchangeFormat\",\n            514: \"JPEGInterchangeFormatLength\",\n            519: \"JPEGQTables\",\n            520: \"JPEGDCTables\",\n            521: \"JPEGACTables\",\n            529: \"YCbCrCoefficients\",\n            530: \"YCbCrSubSampling\",\n            531: \"YCbCrPositioning\",\n            532: \"ReferenceBlackWhite\",\n            700: \"XMP\",\n            33421: \"CFARepeatPatternDim\",\n            33422: \"CFAPattern\",\n            33432: \"Copyright\",\n            33434: \"ExposureTime\",\n            33437: \"FNumber\",\n            33723: \"IPTC/NAA\",\n            34377: \"Photoshop\",\n            34665: \"ExifIFD\",\n            34675: \"ICC Profile\",\n            34850: \"ExposureProgram\",\n            34853: \"GPSInfo\",\n            34855: \"ISOSpeedRatings\",\n            34858: \"TimeZoneOffset\",\n            34859: \"SelfTimeMode\",\n            36867: \"DateTimeOriginal\",\n            36868: \"DateTimeDigitized\",\n            37377: \"ShutterSpeedValue\",\n            37378: \"ApertureValue\",\n            37380: \"ExposureBiasValue\",\n            37383: \"MeteringMode\",\n            37385: \"Flash\",\n            37386: \"FocalLength\",\n            37390: \"FocalPlaneXResolution\",\n            37391: \"FocalPlaneYResolution\",\n            37392: \"FocalPlaneResolutionUnit\",\n            37393: \"ImageNumber\",\n            37398: \"TIFF/EPStandardID\",\n            37399: \"SensingMethod\",\n            37500: \"MakerNote\",\n            37510: \"UserComment\",\n            37724: \"ImageSourceData\",\n            40092: \"XPComment\",\n            40094: \"XPKeywords\",\n            40961: \"ColorSpace\",\n            40962: \"PixelXDimension\",\n            40963: \"PixelXDimension\",\n            41486: \"FocalPlaneXResolution\",\n            41487: \"FocalPlaneYResolution\",\n            41488: \"FocalPlaneResolutionUnit\",\n            41985: \"CustomRendered\",\n            41986: \"ExposureMode\",\n            41987: \"WhiteBalance\",\n            41990: \"SceneCaptureType\",\n            50706: \"DNGVersion\",\n            50707: \"DNGBackwardVersion\",\n            50708: \"UniqueCameraModel\",\n            50709: \"LocalizedCameraModel\",\n            50710: \"CFAPlaneColor\",\n            50711: \"CFALayout\",\n            50712: \"LinearizationTable\",\n            50713: \"BlackLevelRepeatDim\",\n            50714: \"BlackLevel\",\n            50716: \"BlackLevelDeltaV\",\n            50717: \"WhiteLevel\",\n            50718: \"DefaultScale\",\n            50719: \"DefaultCropOrigin\",\n            50720: \"DefaultCropSize\",\n            50733: \"BayerGreenSplit\",\n            50738: \"AntiAliasStrength\",\n            50721: \"ColorMatrix1\",\n            50722: \"ColorMatrix2\",\n            50723: \"CameraCalibration1\",\n            50724: \"CameraCalibration2\",\n            50727: \"AnalogBalance\",\n            50728: \"AsShotNeutral\",\n            50730: \"BaselineExposure\",\n            50731: \"BaselineNoise\",\n            50732: \"BaselineSharpness\",\n            50734: \"LinearResponseLimit\",\n            50735: \"CameraSerialNumber\",\n            50736: \"LensInfo\",\n            50739: \"ShadowScale\",\n            50740: \"DNGPrivateData\",\n            50741: \"MakerNoteSafety\",\n            50778: \"CalibrationIlluminant1\",\n            50779: \"CalibrationIlluminant2\",\n            50780: \"BestQualityScale\",\n            50781: \"RawDataUniqueID\",\n            50827: \"OriginalRawFileName\",\n            50829: \"ActiveArea\",\n            50830: \"MaskedAreas\",\n            50931: \"CameraCalibrationSignature\",\n            50932: \"ProfileCalibrationSignature\",\n            50935: \"NoiseReductionApplied\",\n            50936: \"ProfileName\",\n            50937: \"ProfileHueSatMapDims\",\n            50938: \"ProfileHueSatMapData1\",\n            50939: \"ProfileHueSatMapData2\",\n            50940: \"ProfileToneCurve\",\n            50941: \"ProfileEmbedPolicy\",\n            50942: \"ProfileCopyright\",\n            50964: \"ForwardMatrix1\",\n            50965: \"ForwardMatrix2\",\n            50966: \"PreviewApplicationName\",\n            50967: \"PreviewApplicationVersion\",\n            50969: \"PreviewSettingsDigest\",\n            50970: \"PreviewColorSpace\",\n            50971: \"PreviewDateTime\",\n            50972: \"RawImageDigest\",\n            51008: \"OpcodeList1\",\n            51009: \"OpcodeList2\",\n            51022: \"OpcodeList3\",\n            51041: \"NoiseProfile\",\n            51089: \"OriginalDefaultFinalSize\",\n            51090: \"OriginalBestQualityFinalSize\",\n            51091: \"OriginalDefaultCropSize\",\n            51125: \"DefaultUserCrop\"\n        };\n        UTIF.ttypes = {\n            256: 3,\n            257: 3,\n            258: 3,\n            259: 3,\n            262: 3,\n            273: 4,\n            274: 3,\n            277: 3,\n            278: 4,\n            279: 4,\n            282: 5,\n            283: 5,\n            284: 3,\n            286: 5,\n            287: 5,\n            296: 3,\n            305: 2,\n            306: 2,\n            338: 3,\n            513: 4,\n            514: 4,\n            34665: 4\n        };\n        UTIF._readIFD = function(bin, data, offset, ifds) {\n            var cnt = bin.readUshort(data, offset);\n            offset += 2;\n            var ifd = {};\n            ifds.push(ifd);\n            //log(\">>>----------------\");\n            for(var i = 0; i < cnt; i++){\n                var tag = bin.readUshort(data, offset);\n                offset += 2;\n                var type = bin.readUshort(data, offset);\n                offset += 2;\n                var num = bin.readUint(data, offset);\n                offset += 4;\n                var voff = bin.readUint(data, offset);\n                offset += 4;\n                var arr = [];\n                ifd[\"t\" + tag] = arr;\n                //ifd[\"t\"+tag+\"-\"+UTIF.tags[tag]] = arr;\n                if (type == 1 || type == 7) {\n                    for(var j = 0; j < num; j++)arr.push(data[(num < 5 ? offset - 4 : voff) + j]);\n                }\n                if (type == 2) {\n                    arr.push(bin.readASCII(data, num < 5 ? offset - 4 : voff, num - 1));\n                }\n                if (type == 3) {\n                    for(var j = 0; j < num; j++)arr.push(bin.readUshort(data, (num < 3 ? offset - 4 : voff) + 2 * j));\n                }\n                if (type == 4) {\n                    for(var j = 0; j < num; j++)arr.push(bin.readUint(data, (num < 2 ? offset - 4 : voff) + 4 * j));\n                }\n                if (type == 5) {\n                    for(var j = 0; j < num; j++)arr.push(bin.readUint(data, voff + j * 8) / bin.readUint(data, voff + j * 8 + 4));\n                }\n                if (type == 8) {\n                    for(var j = 0; j < num; j++)arr.push(bin.readShort(data, (num < 3 ? offset - 4 : voff) + 2 * j));\n                }\n                if (type == 9) {\n                    for(var j = 0; j < num; j++)arr.push(bin.readInt(data, (num < 2 ? offset - 4 : voff) + 4 * j));\n                }\n                if (type == 10) {\n                    for(var j = 0; j < num; j++)arr.push(bin.readInt(data, voff + j * 8) / bin.readInt(data, voff + j * 8 + 4));\n                }\n                if (type == 11) {\n                    for(var j = 0; j < num; j++)arr.push(bin.readFloat(data, voff + j * 4));\n                }\n                if (type == 12) {\n                    for(var j = 0; j < num; j++)arr.push(bin.readDouble(data, voff + j * 8));\n                }\n                if (num != 0 && arr.length == 0) log(\"unknown TIFF tag type: \", type, \"num:\", num);\n                //log(tag, type, UTIF.tags[tag], arr);\n                if (tag == 330) for(var j = 0; j < num; j++)UTIF._readIFD(bin, data, arr[j], ifds);\n            //if(tag==34665) UTIF._readIFD(bin, data, arr[0], ifds);\n            }\n            //log(\"<<<---------------\");\n            return offset;\n        };\n        UTIF._writeIFD = function(bin, data, offset, ifd) {\n            var keys = Object.keys(ifd);\n            bin.writeUshort(data, offset, keys.length);\n            offset += 2;\n            var eoff = offset + keys.length * 12 + 4;\n            for(var ki = 0; ki < keys.length; ki++){\n                var key = keys[ki];\n                var tag = parseInt(key.slice(1)), type = UTIF.ttypes[tag];\n                if (type == null) throw new Error(\"unknown type of tag: \" + tag);\n                var val = ifd[key];\n                if (type == 2) val = val[0] + \"\\x00\";\n                var num = val.length;\n                bin.writeUshort(data, offset, tag);\n                offset += 2;\n                bin.writeUshort(data, offset, type);\n                offset += 2;\n                bin.writeUint(data, offset, num);\n                offset += 4;\n                var dlen = [\n                    -1,\n                    1,\n                    1,\n                    2,\n                    4,\n                    8,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    8\n                ][type] * num;\n                var toff = offset;\n                if (dlen > 4) {\n                    bin.writeUint(data, offset, eoff);\n                    toff = eoff;\n                }\n                if (type == 2) {\n                    bin.writeASCII(data, toff, val);\n                }\n                if (type == 3) {\n                    for(var i = 0; i < num; i++)bin.writeUshort(data, toff + 2 * i, val[i]);\n                }\n                if (type == 4) {\n                    for(var i = 0; i < num; i++)bin.writeUint(data, toff + 4 * i, val[i]);\n                }\n                if (type == 5) {\n                    for(var i = 0; i < num; i++){\n                        bin.writeUint(data, toff + 8 * i, Math.round(val[i] * 10000));\n                        bin.writeUint(data, toff + 8 * i + 4, 10000);\n                    }\n                }\n                if (type == 12) {\n                    for(var i = 0; i < num; i++)bin.writeDouble(data, toff + 8 * i, val[i]);\n                }\n                if (dlen > 4) {\n                    dlen += dlen & 1;\n                    eoff += dlen;\n                }\n                offset += 4;\n            }\n            return [\n                offset,\n                eoff\n            ];\n        };\n        UTIF.toRGBA8 = function(out) {\n            var w = out.width, h = out.height, area = w * h, qarea = area * 4, data = out.data;\n            var img = new Uint8Array(area * 4);\n            // 0: WhiteIsZero, 1: BlackIsZero, 2: RGB, 3: Palette color, 4: Transparency mask, 5: CMYK\n            var intp = out[\"t262\"][0], bps = out[\"t258\"] ? Math.min(32, out[\"t258\"][0]) : 1, isLE = out.isLE ? 1 : 0;\n            //log(\"interpretation: \", intp, \"bps\", bps, out);\n            if (false) {} else if (intp == 0) {\n                var bpl = Math.ceil(bps * w / 8);\n                for(var y = 0; y < h; y++){\n                    var off = y * bpl, io = y * w;\n                    if (bps == 1) for(var i = 0; i < w; i++){\n                        var qi = io + i << 2, px = data[off + (i >> 3)] >> 7 - (i & 7) & 1;\n                        img[qi] = img[qi + 1] = img[qi + 2] = (1 - px) * 255;\n                        img[qi + 3] = 255;\n                    }\n                    if (bps == 4) for(var i = 0; i < w; i++){\n                        var qi = io + i << 2, px = data[off + (i >> 1)] >> 4 - 4 * (i & 1) & 15;\n                        img[qi] = img[qi + 1] = img[qi + 2] = (15 - px) * 17;\n                        img[qi + 3] = 255;\n                    }\n                    if (bps == 8) for(var i = 0; i < w; i++){\n                        var qi = io + i << 2, px = data[off + i];\n                        img[qi] = img[qi + 1] = img[qi + 2] = 255 - px;\n                        img[qi + 3] = 255;\n                    }\n                }\n            } else if (intp == 1) {\n                var bpl = Math.ceil(bps * w / 8);\n                for(var y = 0; y < h; y++){\n                    var off = y * bpl, io = y * w;\n                    if (bps == 1) for(var i = 0; i < w; i++){\n                        var qi = io + i << 2, px = data[off + (i >> 3)] >> 7 - (i & 7) & 1;\n                        img[qi] = img[qi + 1] = img[qi + 2] = px * 255;\n                        img[qi + 3] = 255;\n                    }\n                    if (bps == 2) for(var i = 0; i < w; i++){\n                        var qi = io + i << 2, px = data[off + (i >> 2)] >> 6 - 2 * (i & 3) & 3;\n                        img[qi] = img[qi + 1] = img[qi + 2] = px * 85;\n                        img[qi + 3] = 255;\n                    }\n                    if (bps == 8) for(var i = 0; i < w; i++){\n                        var qi = io + i << 2, px = data[off + i];\n                        img[qi] = img[qi + 1] = img[qi + 2] = px;\n                        img[qi + 3] = 255;\n                    }\n                    if (bps == 16) for(var i = 0; i < w; i++){\n                        var qi = io + i << 2, px = data[off + (2 * i + isLE)];\n                        img[qi] = img[qi + 1] = img[qi + 2] = Math.min(255, px);\n                        img[qi + 3] = 255;\n                    } // ladoga.tif\n                }\n            } else if (intp == 2) {\n                if (bps == 8) {\n                    if (out[\"t338\"]) {\n                        if (out[\"t338\"][0] > 0) for(var i = 0; i < qarea; i++)img[i] = data[i]; // sometimes t338 is 1 or 2 in case of Alpha\n                        else for(var i = 0; i < qarea; i += 4){\n                            img[i] = data[i];\n                            img[i + 1] = data[i + 1];\n                            img[i + 2] = data[i + 2];\n                            img[i + 3] = 255;\n                        }\n                    } else {\n                        var smpls = out[\"t258\"] ? out[\"t258\"].length : 3;\n                        if (smpls == 4) for(var i = 0; i < qarea; i++)img[i] = data[i];\n                        if (smpls == 3) for(var i = 0; i < area; i++){\n                            var qi = i << 2, ti = i * 3;\n                            img[qi] = data[ti];\n                            img[qi + 1] = data[ti + 1];\n                            img[qi + 2] = data[ti + 2];\n                            img[qi + 3] = 255;\n                        }\n                    }\n                } else for(var i = 0; i < area; i++){\n                    var qi = i << 2, ti = i * 6;\n                    img[qi] = data[ti];\n                    img[qi + 1] = data[ti + 2];\n                    img[qi + 2] = data[ti + 4];\n                    img[qi + 3] = 255;\n                }\n            } else if (intp == 3) {\n                var map = out[\"t320\"];\n                for(var i = 0; i < area; i++){\n                    var qi = i << 2, mi = data[i];\n                    img[qi] = map[mi] >> 8;\n                    img[qi + 1] = map[256 + mi] >> 8;\n                    img[qi + 2] = map[512 + mi] >> 8;\n                    img[qi + 3] = 255;\n                }\n            } else if (intp == 5) {\n                var smpls = out[\"t258\"] ? out[\"t258\"].length : 4;\n                var gotAlpha = smpls > 4 ? 1 : 0;\n                for(var i = 0; i < area; i++){\n                    var qi = i << 2, si = i * smpls;\n                    var C = 255 - data[si], M = 255 - data[si + 1], Y = 255 - data[si + 2], K = (255 - data[si + 3]) * (1 / 255);\n                    img[qi] = ~~(C * K + 0.5);\n                    img[qi + 1] = ~~(M * K + 0.5);\n                    img[qi + 2] = ~~(Y * K + 0.5);\n                    img[qi + 3] = 255 * (1 - gotAlpha) + data[si + 4] * gotAlpha;\n                }\n            } else log(\"Unknown Photometric interpretation: \" + intp);\n            return img;\n        };\n        UTIF.replaceIMG = function() {\n            var imgs = document.getElementsByTagName(\"img\");\n            for(var i = 0; i < imgs.length; i++){\n                var img = imgs[i], src = img.getAttribute(\"src\");\n                if (src == null) continue;\n                var suff = src.split(\".\").pop().toLowerCase();\n                if (suff != \"tif\" && suff != \"tiff\") continue;\n                var xhr = new XMLHttpRequest();\n                UTIF._xhrs.push(xhr);\n                UTIF._imgs.push(img);\n                xhr.open(\"GET\", src);\n                xhr.responseType = \"arraybuffer\";\n                xhr.onload = UTIF._imgLoaded;\n                xhr.send();\n            }\n        };\n        UTIF._xhrs = [];\n        UTIF._imgs = [];\n        UTIF._imgLoaded = function(e) {\n            var buff = e.target.response;\n            var ifds = UTIF.decode(buff), page = ifds[0];\n            UTIF.decodeImages(buff, ifds);\n            var rgba = UTIF.toRGBA8(page), w = page.width, h = page.height;\n            var ind = UTIF._xhrs.indexOf(e.target), img = UTIF._imgs[ind];\n            UTIF._xhrs.splice(ind, 1);\n            UTIF._imgs.splice(ind, 1);\n            var cnv = document.createElement(\"canvas\");\n            cnv.width = w;\n            cnv.height = h;\n            var ctx = cnv.getContext(\"2d\"), imgd = ctx.createImageData(w, h);\n            for(var i = 0; i < rgba.length; i++)imgd.data[i] = rgba[i];\n            ctx.putImageData(imgd, 0, 0);\n            var attr = [\n                \"style\",\n                \"class\",\n                \"id\"\n            ];\n            for(var i = 0; i < attr.length; i++)cnv.setAttribute(attr[i], img.getAttribute(attr[i]));\n            img.parentNode.replaceChild(cnv, img);\n        };\n        UTIF._binBE = {\n            nextZero: function(data, o) {\n                while(data[o] != 0)o++;\n                return o;\n            },\n            readUshort: function(buff, p) {\n                return buff[p] << 8 | buff[p + 1];\n            },\n            readShort: function(buff, p) {\n                var a = UTIF._binBE.ui8;\n                a[0] = buff[p + 1];\n                a[1] = buff[p + 0];\n                return UTIF._binBE.i16[0];\n            },\n            readInt: function(buff, p) {\n                var a = UTIF._binBE.ui8;\n                a[0] = buff[p + 3];\n                a[1] = buff[p + 2];\n                a[2] = buff[p + 1];\n                a[3] = buff[p + 0];\n                return UTIF._binBE.i32[0];\n            },\n            readUint: function(buff, p) {\n                var a = UTIF._binBE.ui8;\n                a[0] = buff[p + 3];\n                a[1] = buff[p + 2];\n                a[2] = buff[p + 1];\n                a[3] = buff[p + 0];\n                return UTIF._binBE.ui32[0];\n            },\n            readASCII: function(buff, p, l) {\n                var s = \"\";\n                for(var i = 0; i < l; i++)s += String.fromCharCode(buff[p + i]);\n                return s;\n            },\n            readFloat: function(buff, p) {\n                var a = UTIF._binBE.ui8;\n                for(var i = 0; i < 4; i++)a[i] = buff[p + 3 - i];\n                return UTIF._binBE.fl32[0];\n            },\n            readDouble: function(buff, p) {\n                var a = UTIF._binBE.ui8;\n                for(var i = 0; i < 8; i++)a[i] = buff[p + 7 - i];\n                return UTIF._binBE.fl64[0];\n            },\n            writeUshort: function(buff, p, n) {\n                buff[p] = n >> 8 & 255;\n                buff[p + 1] = n & 255;\n            },\n            writeUint: function(buff, p, n) {\n                buff[p] = n >> 24 & 255;\n                buff[p + 1] = n >> 16 & 255;\n                buff[p + 2] = n >> 8 & 255;\n                buff[p + 3] = n >> 0 & 255;\n            },\n            writeASCII: function(buff, p, s) {\n                for(var i = 0; i < s.length; i++)buff[p + i] = s.charCodeAt(i);\n            },\n            writeDouble: function(buff, p, n) {\n                UTIF._binBE.fl64[0] = n;\n                for(var i = 0; i < 8; i++)buff[p + i] = UTIF._binBE.ui8[7 - i];\n            }\n        };\n        UTIF._binBE.ui8 = new Uint8Array(8);\n        UTIF._binBE.i16 = new Int16Array(UTIF._binBE.ui8.buffer);\n        UTIF._binBE.i32 = new Int32Array(UTIF._binBE.ui8.buffer);\n        UTIF._binBE.ui32 = new Uint32Array(UTIF._binBE.ui8.buffer);\n        UTIF._binBE.fl32 = new Float32Array(UTIF._binBE.ui8.buffer);\n        UTIF._binBE.fl64 = new Float64Array(UTIF._binBE.ui8.buffer);\n        UTIF._binLE = {\n            nextZero: UTIF._binBE.nextZero,\n            readUshort: function(buff, p) {\n                return buff[p + 1] << 8 | buff[p];\n            },\n            readShort: function(buff, p) {\n                var a = UTIF._binBE.ui8;\n                a[0] = buff[p + 0];\n                a[1] = buff[p + 1];\n                return UTIF._binBE.i16[0];\n            },\n            readInt: function(buff, p) {\n                var a = UTIF._binBE.ui8;\n                a[0] = buff[p + 0];\n                a[1] = buff[p + 1];\n                a[2] = buff[p + 2];\n                a[3] = buff[p + 3];\n                return UTIF._binBE.i32[0];\n            },\n            readUint: function(buff, p) {\n                var a = UTIF._binBE.ui8;\n                a[0] = buff[p + 0];\n                a[1] = buff[p + 1];\n                a[2] = buff[p + 2];\n                a[3] = buff[p + 3];\n                return UTIF._binBE.ui32[0];\n            },\n            readASCII: UTIF._binBE.readASCII,\n            readFloat: function(buff, p) {\n                var a = UTIF._binBE.ui8;\n                for(var i = 0; i < 4; i++)a[i] = buff[p + i];\n                return UTIF._binBE.fl32[0];\n            },\n            readDouble: function(buff, p) {\n                var a = UTIF._binBE.ui8;\n                for(var i = 0; i < 8; i++)a[i] = buff[p + i];\n                return UTIF._binBE.fl64[0];\n            }\n        };\n        UTIF._copyTile = function(tb, tw, th, b, w, h, xoff, yoff) {\n            //log(\"copyTile\", tw, th,  w, h, xoff, yoff);\n            var xlim = Math.min(tw, w - xoff);\n            var ylim = Math.min(th, h - yoff);\n            for(var y = 0; y < ylim; y++){\n                var tof = (yoff + y) * w + xoff;\n                var sof = y * tw;\n                for(var x = 0; x < xlim; x++)b[tof + x] = tb[sof + x];\n            }\n        };\n    })(UTIF, pako);\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/utif/UTIF.js\n");

/***/ })

};
;